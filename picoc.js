// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module.exports = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0
}
Module['stringToUTF32'] = stringToUTF32;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i)
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_toFloat32 = Math.toFloat32;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 19168;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,63,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,0,0,0,0,0,0,0,105,110,116,32,100,117,112,50,40,105,110,116,44,32,105,110,116,41,59,0,0,0,0,0,105,110,116,32,105,115,115,112,97,99,101,40,105,110,116,41,59,0,0,0,0,0,0,0,39,37,115,39,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,69,67,65,78,67,69,76,69,68,0,0,0,0,0,0,0,105,110,116,32,115,116,114,102,116,105,109,101,40,99,104,97,114,32,42,44,32,105,110,116,44,32,99,104,97,114,32,42,44,32,115,116,114,117,99,116,32,116,109,32,42,41,59,0,118,111,105,100,32,42,114,101,97,108,108,111,99,40,118,111,105,100,32,42,44,105,110,116,41,59,0,0,0,0,0,0,99,104,97,114,32,42,115,116,114,99,104,114,40,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,102,108,111,97,116,32,102,108,111,111,114,40,102,108,111,97,116,41,59,0,0,0,0,0,41,0,0,0,0,0,0,0,105,110,116,32,103,101,116,99,40,70,73,76,69,32,42,41,59,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,108,111,110,103,0,0,0,0,93,0,0,0,0,0,0,0,99,111,109,109,97,32,101,120,112,101,99,116,101,100,0,0,91,0,0,0,0,0,0,0,99,97,115,116,0,0,0,0,84,111,107,101,110,32,62,61,32,84,111,107,101,110,78,111,110,101,32,38,38,32,84,111,107,101,110,32,60,61,32,84,111,107,101,110,69,110,100,79,102,70,117,110,99,116,105,111,110,0,0,0,0,0,0,0,99,97,110,39,116,32,103,101,116,32,116,104,101,32,97,100,100,114,101,115,115,32,111,102,32,116,104,105,115,0,0,0,115,105,122,101,111,102,0,0,99,97,110,39,116,32,97,115,115,105,103,110,32,116,111,32,116,104,105,115,0,0,0,0,126,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,105,110,116,32,100,117,112,40,105,110,116,41,59,0,0,0,105,110,116,32,105,115,112,117,110,99,116,40,105,110,116,41,59,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,0,45,45,0,0,0,0,0,0,69,66,85,83,89,0,0,0,105,110,116,32,116,105,109,101,40,105,110,116,32,42,41,59,0,0,0,0,0,0,0,0,118,111,105,100,32,42,99,97,108,108,111,99,40,105,110,116,44,105,110,116,41,59,0,0,43,43,0,0,0,0,0,0,99,104,97,114,32,42,115,116,114,110,99,97,116,40,99,104,97,114,32,42,44,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,102,108,111,97,116,32,102,97,98,115,40,102,108,111,97,116,41,59,0,0,0,0,0,0,37,0,0,0,0,0,0,0,105,110,116,32,102,103,101,116,99,40,70,73,76,69,32,42,41,59,0,0,0,0,0,0,117,110,105,115,116,100,46,104,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,99,104,97,114,0,0,0,0,42,0,0,0,0,0,0,0,105,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,0,0,0,0,0,45,0,0,0,0,0,0,0,101,114,114,110,111,0,0,0,43,0,0,0,0,0,0,0,73,110,116,101,114,97,99,116,105,118,101,67,117,114,114,101,110,116,76,105,110,101,32,33,61,32,78,85,76,76,0,0,69,88,68,69,86,0,0,0,69,120,112,114,101,115,115,105,111,110,80,114,101,102,105,120,79,112,101,114,97,116,111,114,40,41,10,0,0,0,0,0,62,62,0,0,0,0,0,0,69,87,79,85,76,68,66,76,79,67,75,0,0,0,0,0,60,60,0,0,0,0,0,0,69,84,88,84,66,83,89,0,62,61,0,0,0,0,0,0,99,104,97,114,32,42,99,116,101,114,109,105,100,40,99,104,97,114,32,42,41,59,0,0,69,84,73,77,69,68,79,85,84,0,0,0,0,0,0,0,105,110,116,32,105,115,112,114,105,110,116,40,105,110,116,41,59,0,0,0,0,0,0,0,98,97,100,32,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,0,60,61,0,0,0,0,0,0,69,84,73,77,69,0,0,0,69,66,65,68,77,83,71,0,105,110,116,32,109,107,116,105,109,101,40,115,116,114,117,99,116,32,116,109,32,42,112,116,109,41,59,0,0,0,0,0,118,111,105,100,32,42,109,97,108,108,111,99,40,105,110,116,41,59,0,0,0,0,0,0,62,0,0,0,0,0,0,0,99,104,97,114,32,42,115,116,114,99,97,116,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,69,83,84,65,76,69,0,0,102,108,111,97,116,32,101,120,112,40,102,108,111,97,116,41,59,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,69,83,82,67,72,0,0,0,105,110,116,32,102,119,114,105,116,101,40,118,111,105,100,32,42,44,32,105,110,116,44,32,105,110,116,44,32,70,73,76,69,32,42,41,59,0,0,0,116,105,109,101,46,104,0,0,33,61,0,0,0,0,0,0,115,104,111,114,116,0,0,0,69,83,80,73,80,69,0,0,115,116,97,99,107,32,105,115,32,101,109,112,116,121,32,45,32,99,97,110,39,116,32,103,111,32,98,97,99,107,0,0,61,61,0,0,0,0,0,0,101,110,117,109,32,100,101,102,105,110,105,116,105,111,110,115,32,99,97,110,32,111,110,108,121,32,98,101,32,103,108,111,98,97,108,115,0,0,0,0,69,82,79,70,83,0,0,0,38,0,0,0,0,0,0,0,111,112,116,111,112,116,0,0,69,82,65,78,71,69,0,0,94,0,0,0,0,0,0,0,73,110,116,101,114,97,99,116,105,118,101,67,117,114,114,101,110,116,76,105,110,101,45,62,78,101,120,116,32,33,61,32,78,85,76,76,0,0,0,0,111,112,116,101,114,114,0,0,69,80,82,79,84,79,84,89,80,69,0,0,0,0,0,0,102,105,114,115,116,32,97,114,103,117,109,101,110,116,32,116,111,32,39,63,39,32,115,104,111,117,108,100,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,111,112,116,105,110,100,0,0,69,80,82,79,84,79,78,79,83,85,80,80,79,82,84,0,37,102,0,0,0,0,0,0,38,38,0,0,0,0,0,0,111,112,116,97,114,103,0,0,69,80,82,79,84,79,0,0,37,108,100,0,0,0,0,0,124,124,0,0,0,0,0,0,78,85,76,76,0,0,0,0,115,105,122,101,95,116,32,99,111,110,102,115,116,114,40,105,110,116,44,32,99,104,97,114,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,0,69,80,73,80,69,0,0,0,105,110,116,32,97,99,99,101,115,115,40,99,104,97,114,32,42,44,32,105,110,116,41,59,0,0,0,0,0,0,0,0,105,110,116,32,105,115,108,111,119,101,114,40,105,110,116,41,59,0,0,0,0,0,0,0,78,85,76,76,0,0,0,0,98,97,100,32,112,97,114,97,109,101,116,101,114,115,32,116,111,32,109,97,105,110,40,41,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,115,115,105,122,101,95,116,32,119,114,105,116,101,40,105,110,116,44,32,118,111,105,100,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,0,0,69,80,69,82,77,0,0,0,69,66,65,68,70,0,0,0,115,116,114,117,99,116,32,116,109,32,42,108,111,99,97,108,116,105,109,101,40,105,110,116,32,42,41,59,0,0,0,0,115,116,100,101,114,114,0,0,105,110,116,32,115,116,114,116,111,117,108,40,99,104,97,114,32,42,44,99,104,97,114,32,42,42,44,105,110,116,41,59,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,118,111,105,100,32,42,109,101,109,115,101,116,40,118,111,105,100,32,42,44,105,110,116,44,105,110,116,41,59,0,0,0,112,105,100,95,116,32,118,102,111,114,107,40,118,111,105,100,41,59,0,0,0,0,0,0,69,79,87,78,69,82,68,69,65,68,0,0,0,0,0,0,102,108,111,97,116,32,99,111,115,104,40,102,108,111,97,116,41,59,0,0,0,0,0,0,115,116,100,111,117,116,0,0,94,61,0,0,0,0,0,0,105,110,116,32,105,115,97,108,110,117,109,40,105,110,116,41,59,0,0,0,0,0,0,0,105,110,116,32,117,115,108,101,101,112,40,117,115,101,99,111,110,100,115,95,116,41,59,0,69,79,86,69,82,70,76,79,87,0,0,0,0,0,0,0,105,110,116,32,102,114,101,97,100,40,118,111,105,100,32,42,44,32,105,110,116,44,32,105,110,116,44,32,70,73,76,69,32,42,41,59,0,0,0,0,115,116,100,105,110,0,0,0,115,116,114,105,110,103,46,104,0,0,0,0,0,0,0,0,124,61,0,0,0,0,0,0,105,110,116,32,117,110,108,105,110,107,40,99,104,97,114,32,42,41,59,0,0,0,0,0,105,110,116,0,0,0,0,0,69,79,80,78,79,84,83,85,80,80,0,0,0,0,0,0,71,69,84,83,95,77,65,88,0,0,0,0,0,0,0,0,115,116,97,99,107,32,117,110,100,101,114,114,117,110,0,0,38,61,0,0,0,0,0,0,101,110,117,109,32,39,37,115,39,32,105,115,110,39,116,32,100,101,102,105,110,101,100,0,117,115,101,99,111,110,100,115,95,116,32,117,97,108,97,114,109,40,117,115,101,99,111,110,100,115,95,116,44,32,117,115,101,99,111,110,100,115,95,116,41,59,0,0,0,0,0,0,69,78,88,73,79,0,0,0,76,95,116,109,112,110,97,109,0,0,0,0,0,0,0,0,32,32,32,32,32,62,32,0,62,62,61,0,0,0,0,0,105,110,116,32,116,116,121,110,97,109,101,95,114,40,105,110,116,44,32,99,104,97,114,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,0,0,69,78,79,84,84,89,0,0,95,73,79,78,66,70,0,0,60,60,61,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,99,104,97,114,32,42,116,116,121,110,97,109,101,40,105,110,116,41,59,0,0,0,0,0,69,78,79,84,83,85,80,0,95,73,79,76,66,70,0,0,37,116,0,0,0,0,0,0,37,61,0,0,0,0,0,0,105,110,116,32,116,114,117,110,99,97,116,101,40,99,104,97,114,32,42,44,32,111,102,102,95,116,41,59,0,0,0,0,69,78,79,84,83,79,67,75,0,0,0,0,0,0,0,0,95,73,79,70,66,70,0,0,47,61,0,0,0,0,0,0,105,110,116,32,116,99,115,101,116,112,103,114,112,40,105,110,116,44,32,112,105,100,95,116,41,59,0,0,0,0,0,0,69,78,79,84,82,69,67,79,86,69,82,65,66,76,69,0,70,73,76,69,78,65,77,69,95,77,65,88,0,0,0,0,42,61,0,0,0,0,0,0,112,105,100,95,116,32,116,99,103,101,116,112,103,114,112,40,105,110,116,41,59,0,0,0,105,110,116,32,99,108,111,115,101,40,105,110,116,41,59,0,69,78,79,84,69,77,80,84,89,0,0,0,0,0,0,0,105,110,116,32,105,115,103,114,97,112,104,40,105,110,116,41,59,0,0,0,0,0,0,0,66,85,70,83,73,90,0,0,109,97,105,110,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,97,110,32,105,110,116,32,111,114,32,118,111,105,100,0,0,0,0,0,45,61,0,0,0,0,0,0,108,111,110,103,32,115,121,115,99,111,110,102,40,105,110,116,41,59,0,0,0,0,0,0,69,78,79,84,68,73,82,0,69,65,76,82,69,65,68,89,0,0,0,0,0,0,0,0,69,65,67,67,69,83,0,0,115,116,114,117,99,116,32,116,109,32,42,103,109,116,105,109,101,95,114,40,105,110,116,32,42,44,32,115,116,114,117,99,116,32,116,109,32,42,41,59,0,0,0,0,0,0,0,0,83,69,69,75,95,69,78,68,0,0,0,0,0,0,0,0,105,110,116,32,115,116,114,116,111,108,40,99,104,97,114,32,42,44,99,104,97,114,32,42,42,44,105,110,116,41,59,0,43,61,0,0,0,0,0,0,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,0,0,0,0,0,105,110,116,32,109,101,109,99,109,112,40,118,111,105,100,32,42,44,118,111,105,100,32,42,44,105,110,116,41,59,0,0,118,111,105,100,32,115,121,110,99,40,118,111,105,100,41,59,0,0,0,0,0,0,0,0,69,78,79,84,67,79,78,78,0,0,0,0,0,0,0,0,102,108,111,97,116,32,99,111,115,40,102,108,111,97,116,41,59,0,0,0,0,0,0,0,83,69,69,75,95,67,85,82,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,119,104,105,108,101,0,0,0,105,110,116,32,115,121,109,108,105,110,107,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,41,59,0,0,0,0,99,104,97,114,32,42,97,115,99,116,105,109,101,40,115,116,114,117,99,116,32,116,109,32,42,41,59,0,0,0,0,0,69,78,79,83,89,83,0,0,105,110,116,32,102,99,108,111,115,101,40,70,73,76,69,32,42,41,59,0,0,0,0,0,65,114,100,117,105,110,111,46,104,0,0,0,0,0,0,0,83,69,69,75,95,83,69,84,0,0,0,0,0,0,0,0,115,116,100,108,105,98,46,104,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,118,111,105,100,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,32,115,108,101,101,112,40,117,110,115,105,103,110,101,100,32,105,110,116,41,59,0,0,0,0,0,0,0,118,111,105,100,0,0,0,0,69,78,79,83,84,82,0,0,69,79,70,0,0,0,0,0,39,37,115,39,32,105,115,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,117,110,115,105,103,110,101,100,0,0,0,0,0,0,0,0,115,101,109,105,99,111,108,111,110,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,105,110,116,32,115,101,116,117,105,100,40,117,105,100,95,116,41,59,0,0,0,0,0,0,69,78,79,83,82,0,0,0,95,95,118,97,95,108,105,115,116,83,116,114,117,99,116,0,105,110,116,101,103,101,114,32,118,97,108,117,101,32,101,120,112,101,99,116,101,100,32,105,110,115,116,101,97,100,32,111,102,32,37,116,0,0,0,0,97,98,111,114,116,0,0,0,117,110,105,111,110,0,0,0,112,105,100,95,116,32,115,101,116,115,105,100,40,118,111,105,100,41,59,0,0,0,0,0,69,78,79,83,80,67,0,0,95,95,70,73,76,69,83,116,114,117,99,116,0,0,0,0,99,111,117,108,100,110,39,116,32,102,105,110,100,32,103,111,116,111,32,108,97,98,101,108,32,39,37,115,39,0,0,0,116,121,112,101,100,101,102,0,112,105,99,111,99,62,32,0,105,110,116,32,115,101,116,114,101,117,105,100,40,117,105,100,95,116,44,32,117,105,100,95,116,41,59,0,0,0,0,0,69,78,79,80,82,79,84,79,79,80,84,0,0,0,0,0,105,110,116,32,118,115,115,99,97,110,102,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,0,102,114,111,109,32,97,110,32,97,114,114,97,121,32,111,102,32,115,105,122,101,32,37,100,32,116,111,32,111,110,101,32,111,102,32,115,105,122,101,32,37,100,0,0,0,0,0,0,110,111,32,118,97,108,117,101,32,114,101,116,117,114,110,101,100,32,102,114,111,109,32,97,32,102,117,110,99,116,105,111,110,32,114,101,116,117,114,110,105,110,103,32,37,116,0,0,115,119,105,116,99,104,0,0,105,110,116,32,115,101,116,114,101,103,105,100,40,103,105,100,95,116,44,32,103,105,100,95,116,41,59,0,0,0,0,0,69,78,79,77,83,71,0,0,105,110,116,32,118,102,115,99,97,110,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,0,102,117,110,99,116,105,111,110,32,98,111,100,121,32,101,120,112,101,99,116,101,100,0,0,115,116,114,117,99,116,0,0,99,104,97,114,32,42,105,110,100,101,120,40,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,0,112,105,100,95,116,32,115,101,116,112,103,114,112,40,118,111,105,100,41,59,0,0,0,0,69,78,79,77,69,77,0,0,105,110,116,32,118,115,99,97,110,102,40,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,0,0,37,116,32,105,115,32,110,111,116,32,97,32,102,117,110,99,116,105,111,110,32,45,32,99,97,110,39,116,32,99,97,108,108,0,0,0,0,0,0,0,115,116,97,116,105,99,0,0,105,110,116,32,115,101,116,112,103,105,100,40,112,105,100,95,116,44,32,112,105,100,95,116,41,59,0,0,0,0,0,0,105,110,116,32,99,104,111,119,110,40,99,104,97,114,32,42,44,32,117,105,100,95,116,44,32,103,105,100,95,116,41,59,0,0,0,0,0,0,0,0,69,78,79,76,73,78,75,0,105,110,116,32,105,115,100,105,103,105,116,40,105,110,116,41,59,0,0,0,0,0,0,0,105,110,116,32,118,115,110,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,105,110,116,44,32,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,0,0,39,37,115,39,32,105,115,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,115,105,122,101,111,102,0,0,109,97,105,110,0,0,0,0,105,110,116,32,115,101,116,103,105,100,40,103,105,100,95,116,41,59,0,0,0,0,0,0,69,78,79,76,67,75,0,0,69,65,71,65,73,78,0,0,115,116,114,117,99,116,32,116,109,32,42,103,109,116,105,109,101,40,105,110,116,32,42,41,59,0,0,0,0,0,0,0,105,110,116,32,118,115,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,105,110,116,32,97,116,111,108,40,99,104,97,114,32,42,41,59,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,115,39,0,0,0,0,115,105,103,110,101,100,0,0,118,111,105,100,32,42,109,101,109,99,104,114,40,99,104,97,114,32,42,44,105,110,116,44,105,110,116,41,59,0,0,0,118,111,105,100,32,42,115,98,114,107,40,105,110,116,112,116,114,95,116,41,59,0,0,0,69,78,79,69,88,69,67,0,102,108,111,97,116,32,99,101,105,108,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,118,102,112,114,105,110,116,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,99,111,109,109,97,32,101,120,112,101,99,116,101,100,0,0,115,104,111,114,116,0,0,0,102,108,111,97,116,32,97,99,111,115,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,114,109,100,105,114,40,99,104,97,114,32,42,41,59,0,0,0,0,0,0,69,78,79,69,78,84,0,0,70,73,76,69,32,42,102,114,101,111,112,101,110,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,70,73,76,69,32,42,41,59,0,0,35,100,101,102,105,110,101,32,79,85,84,80,85,84,32,49,32,10,35,100,101,102,105,110,101,32,73,78,80,85,84,32,48,32,10,35,100,101,102,105,110,101,32,72,73,71,72,32,49,32,10,35,100,101,102,105,110,101,32,76,79,87,32,48,32,10,0,0,0,0,0,0,105,110,116,32,118,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,118,97,95,108,105,115,116,41,59,0,0,0,115,116,100,105,111,46,104,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,37,115,40,41,0,0,0,0,0,0,114,101,116,117,114,110,0,0,105,110,116,32,114,101,97,100,108,105,110,107,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,99,32,108,105,98,114,97,114,121,0,0,0,0,0,0,0,69,78,79,68,69,86,0,0,105,110,116,32,115,115,99,97,110,102,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,46,46,46,41,59,0,0,0,0,0,0,0,0,39,37,115,39,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,0,109,101,109,98,101,114,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,0,115,115,105,122,101,95,116,32,114,101,97,100,40,105,110,116,44,32,118,111,105,100,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,0,0,0,69,78,79,68,65,84,65,0,105,110,116,32,102,115,99,97,110,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,44,32,46,46,46,41,59,0,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,80,97,114,115,101,40,41,32,100,111,110,101,10,10,0,0,0,0,0,0,0,0,108,101,120,46,99,0,0,0,110,101,119,0,0,0,0,0,105,110,116,32,112,97,117,115,101,40,118,111,105,100,41,59,0,0,0,0,0,0,0,0,69,78,79,66,85,70,83,0,105,110,116,32,115,99,97,110,102,40,99,104,97,114,32,42,44,32,46,46,46,41,59,0,116,121,112,101,32,110,111,116,32,101,120,112,101,99,116,101,100,32,104,101,114,101,0,0,108,111,110,103,0,0,0,0,108,111,110,103,32,112,97,116,104,99,111,110,102,40,99,104,97,114,32,42,44,32,105,110,116,41,59,0,0,0,0,0,69,78,70,73,76,69,0,0,105,110,116,32,115,110,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,105,110,116,44,32,99,104,97,114,32,42,44,32,46,46,46,41,59,0,110,111,116,32,97,110,32,108,118,97,108,117,101,0,0,0,105,110,116,0,0,0,0,0,118,97,108,117,101,32,110,111,116,32,101,120,112,101,99,116,101,100,32,104,101,114,101,0,82,101,115,101,114,118,101,83,112,97,99,101,32,62,61,32,77,101,109,85,115,101,100,0,105,110,116,32,110,105,99,101,40,105,110,116,41,59,0,0,69,78,69,84,85,78,82,69,65,67,72,0,0,0,0,0,105,110,116,32,115,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,46,46,46,41,59,0,0,0,0,0,0,0,97,32,118,111,105,100,32,118,97,108,117,101,32,105,115,110,39,116,32,109,117,99,104,32,117,115,101,32,104,101,114,101,0,0,0,0,0,0,0,0,105,102,0,0,0,0,0,0,111,102,102,95,116,32,108,115,101,101,107,40,105,110,116,44,32,111,102,102,95,116,44,32,105,110,116,41,59,0,0,0,69,78,69,84,82,69,83,69,84,0,0,0,0,0,0,0,105,110,116,32,102,112,114,105,110,116,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,44,32,46,46,46,41,59,0,0,0,0,0,0,0,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,0,0,103,111,116,111,0,0,0,0,105,110,116,32,108,111,99,107,102,40,105,110,116,44,32,105,110,116,44,32,111,102,102,95,116,41,59,0,0,0,0,0,105,110,116,32,99,104,114,111,111,116,40,99,104,97,114,32,42,41,59,0,0,0,0,0,69,78,69,84,68,79,87,78,0,0,0,0,0,0,0,0,105,110,116,32,105,115,99,110,116,114,108,40,105,110,116,41,59,0,0,0,0,0,0,0,105,110,116,32,112,114,105,110,116,102,40,99,104,97,114,32,42,44,32,46,46,46,41,59,0,0,0,0,0,0,0,0,109,97,99,114,111,32,97,114,103,117,109,101,110,116,115,32,109,105,115,115,105,110,103,0,102,111,114,0,0,0,0,0,98,97,100,32,112,97,114,97,109,101,116,101,114,0,0,0,105,110,116,32,108,105,110,107,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,41,59,0,0,0,0,0,0,0,69,78,65,77,69,84,79,79,76,79,78,71,0,0,0,0,69,65,70,78,79,83,85,80,80,79,82,84,0,0,0,0,77,95,83,81,82,84,49,95,50,0,0,0,0,0,0,0,100,111,117,98,108,101,32,100,105,102,102,116,105,109,101,40,105,110,116,44,32,105,110,116,41,59,0,0,0,0,0,0,105,110,116,32,103,101,116,99,104,97,114,40,41,59,0,0,88,88,88,0,0,0,0,0,105,110,116,32,97,116,111,105,40,99,104,97,114,32,42,41,59,0,0,0,0,0,0,0,105,100,101,110,116,105,102,105,101,114,32,110,111,116,32,101,120,112,101,99,116,101,100,32,104,101,114,101,0,0,0,0,102,108,111,97,116,0,0,0,118,111,105,100,32,42,109,101,109,109,111,118,101,40,118,111,105,100,32,42,44,118,111,105,100,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,105,110,116,32,108,99,104,111,119,110,40,99,104,97,114,32,42,44,32,117,105,100,95,116,44,32,103,105,100,95,116,41,59,0,0,0,0,0,0,0,69,77,85,76,84,73,72,79,80,0,0,0,0,0,0,0,77,95,83,81,82,84,50,0,102,108,111,97,116,32,97,116,97,110,50,40,102,108,111,97,116,44,32,102,108,111,97,116,41,59,0,0,0,0,0,0,99,104,97,114,32,42,103,101,116,115,40,99,104,97,114,32,42,41,59,0,0,0,0,0,118,111,105,100,32,97,110,97,108,111,103,87,114,105,116,101,40,105,110,116,44,32,105,110,116,41,59,0,0,0,0,0,98,114,97,99,107,101,116,115,32,110,111,116,32,99,108,111,115,101,100,0,0,0,0,0,101,120,116,101,114,110,0,0,105,110,116,32,105,115,97,116,116,121,40,105,110,116,41,59,0,0,0,0,0,0,0,0,69,77,83,71,83,73,90,69,0,0,0,0,0,0,0,0,70,73,76,69,32,42,102,111,112,101,110,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,41,59,0,0,0,0,77,95,50,95,83,81,82,84,80,73,0,0,0,0,0,0,118,111,105,100,32,100,101,108,97,121,40,105,110,116,41,59,0,0,0,0,0,0,0,0,105,110,116,32,112,117,116,115,40,99,104,97,114,32,42,41,59,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,115,116,100,98,111,111,108,46,104,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,32,110,111,116,32,101,120,112,101,99,116,101,100,32,104,101,114,101,0,0,0,0,0,0,101,110,117,109,0,0,0,0,37,115,0,0,0,0,0,0,99,104,97,114,32,42,103,101,116,119,100,40,99,104,97,114,32,42,41,59,0,0,0,0,76,73,84,84,76,69,95,69,78,68,73,65,78,0,0,0,69,77,76,73,78,75,0,0,77,95,50,95,80,73,0,0,105,110,116,32,117,110,103,101,116,99,40,105,110,116,44,32,70,73,76,69,32,42,41,59,0,0,0,0,0,0,0,0,67,111,112,121,83,105,122,101,32,60,61,32,77,65,88,95,84,77,80,95,67,79,80,89,95,66,85,70,0,0,0,0,69,120,112,114,101,115,115,105,111,110,80,97,114,115,101,40,41,58,10,0,0,0,0,0,101,108,115,101,0,0,0,0,105,110,118,97,108,105,100,32,116,121,112,101,32,105,110,32,115,116,114,117,99,116,0,0,117,105,100,95,116,32,103,101,116,117,105,100,40,118,111,105,100,41,59,0,0,0,0,0,69,77,70,73,76,69,0,0,77,95,49,95,80,73,0,0,99,116,121,112,101,46,104,0,118,111,105,100,32,115,101,116,118,98,117,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,44,32,105,110,116,44,32,105,110,116,41,59,0,100,111,101,115,110,39,116,32,104,97,118,101,32,97,32,109,101,109,98,101,114,32,99,97,108,108,101,100,32,39,37,115,39,0,0,0,0,0,0,0,100,111,117,98,108,101,0,0,112,105,100,95,116,32,103,101,116,112,112,105,100,40,118,111,105,100,41,59,0,0,0,0,69,76,79,79,80,0,0,0,77,95,80,73,95,52,0,0,118,111,105,100,32,115,101,116,98,117,102,40,70,73,76,69,32,42,44,32,99,104,97,114,32,42,41,59,0,0,0,0,100,111,0,0,0,0,0,0,60,68,69,70,65,85,76,84,62,0,0,0,0,0,0,0,112,105,100,95,116,32,103,101,116,112,105,100,40,118,111,105,100,41,59,0,0,0,0,0,69,73,83,68,73,82,0,0,77,95,80,73,95,50,0,0,105,110,116,32,102,112,117,116,99,104,97,114,40,105,110,116,41,59,0,0,0,0,0,0,112,111,105,110,116,101,114,0,37,116,32,102,114,111,109,32,37,116,0,0,0,0,0,0,100,101,108,101,116,101,0,0,112,105,100,95,116,32,103,101,116,112,103,114,112,40,118,111,105,100,41,59,0,0,0,0,69,73,83,67,79,78,78,0,77,95,80,73,0,0,0,0,105,110,116,32,112,117,116,99,104,97,114,40,105,110,116,41,59,0,0,0,0,0,0,0,100,101,102,97,117,108,116,0,99,97,110,39,116,32,117,115,101,32,39,37,115,39,32,111,110,32,115,111,109,101,116,104,105,110,103,32,116,104,97,116,39,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,111,114,32,117,110,105,111,110,32,37,115,32,58,32,105,116,39,115,32,97,32,37,116,0,105,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,32,39,37,99,39,0,0,112,97,114,115,101,32,101,114,114,111,114,0,0,0,0,0,99,104,97,114,32,42,103,101,116,112,97,115,115,40,99,104,97,114,32,42,41,59,0,0,69,73,79,0,0,0,0,0,77,95,76,78,49,48,0,0,105,110,116,32,112,117,116,99,40,99,104,97,114,32,42,44,32,70,73,76,69,32,42,41,59,0,0,0,0,0,0,0,45,62,0,0,0,0,0,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,105,110,116,32,103,101,116,112,97,103,101,115,105,122,101,40,118,111,105,100,41,59,0,0,105,110,116,32,99,104,100,105,114,40,99,104,97,114,32,42,41,59,0,0,0,0,0,0,95,95,98,111,111,108,95,116,114,117,101,95,102,97,108,115,101,95,97,114,101,95,100,101,102,105,110,101,100,0,0,0,69,73,78,86,65,76,0,0,78,85,76,76,0,0,0,0,77,95,76,78,50,0,0,0,105,110,116,32,105,115,98,108,97,110,107,40,105,110,116,41,59,0,0,0,0,0,0,0,118,111,105,100,32,112,101,114,114,111,114,40,99,104,97,114,32,42,41,59,0,0,0,0,118,50,46,49,0,0,0,0,46,0,0,0,0,0,0,0,99,104,97,114,0,0,0,0,39,37,115,39,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,99,111,109,109,97,32,101,120,112,101,99,116,101,100,0,0,105,110,116,32,103,101,116,108,111,103,105,110,95,114,40,99,104,97,114,32,42,44,32,115,105,122,101,95,116,41,59,0,69,73,78,84,82,0,0,0,69,65,68,68,82,78,79,84,65,86,65,73,76,0,0,0,99,104,97,114,32,42,115,116,114,116,111,107,95,114,40,99,104,97,114,32,42,44,99,104,97,114,32,42,44,99,104,97,114,32,42,42,41,59,0,0,77,95,76,79,71,49,48,69,0,0,0,0,0,0,0,0,99,104,97,114,32,42,99,116,105,109,101,40,105,110,116,32,42,41,59,0,0,0,0,0,105,110,116,32,102,115,101,101,107,40,70,73,76,69,32,42,44,32,105,110,116,44,32,105,110,116,41,59,0,0,0,0,102,108,111,97,116,32,115,116,114,116,111,100,40,99,104,97,114,32,42,44,99,104,97,114,32,42,42,41,59,0,0,0,110,101,101,100,32,97,110,32,115,116,114,117,99,116,117,114,101,32,111,114,32,117,110,105,111,110,32,109,101,109,98,101,114,32,97,102,116,101,114,32,39,37,115,39,0,0,0,0,99,97,115,101,0,0,0,0,118,111,105,100,32,42,109,101,109,99,112,121,40,118,111,105,100,32,42,44,118,111,105,100,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,0,118,97,108,117,101,32,105,110,32,114,101,116,117,114,110,32,102,114,111,109,32,97,32,118,111,105,100,32,102,117,110,99,116,105,111,110,0,0,0,0,99,104,97,114,32,42,103,101,116,108,111,103,105,110,40,118,111,105,100,41,59,0,0,0,69,73,78,80,82,79,71,82,69,83,83,0,0,0,0,0,99,104,97,114,32,42,115,116,114,100,117,112,40,99,104,97,114,32,42,41,59,0,0,0,77,95,76,79,71,50,69,0,102,108,111,97,116,32,97,116,97,110,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,102,116,101,108,108,40,70,73,76,69,32,42,41,59,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,83,116,97,99,107,80,117,115,104,79,112,101,114,97,116,111,114,40,41,10,0,0,98,114,101,97,107,0,0,0,118,97,108,117,101,32,114,101,113,117,105,114,101,100,32,105,110,32,114,101,116,117,114,110,0,0,0,0,0,0,0,0,108,111,110,103,32,103,101,116,104,111,115,116,105,100,40,118,111,105,100,41,59,0,0,0,69,73,76,83,69,81,0,0,110,111,110,45,112,111,105,110,116,101,114,32,97,114,103,117,109,101,110,116,32,116,111,32,115,99,97,110,102,40,41,32,45,32,97,114,103,117,109,101,110,116,32,37,100,32,97,102,116,101,114,32,102,111,114,109,97,116,0,0,0,0,0,0,105,110,116,32,115,116,114,120,102,114,109,40,99,104,97,114,32,42,44,99,104,97,114,32,42,44,105,110,116,41,59,0,77,95,69,0,0,0,0,0,118,111,105,100,32,112,105,110,77,111,100,101,40,105,110,116,44,32,105,110,116,41,59,0,105,110,116,32,102,115,101,116,112,111,115,40,70,73,76,69,32,42,44,32,105,110,116,32,42,41,59,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,0,109,97,116,104,46,104,0,0,69,120,112,114,101,115,115,105,111,110,83,116,97,99,107,67,111,108,108,97,112,115,101,40,41,32,102,105,110,105,115,104,101,100,10,0,0,0,0,0,97,117,116,111,0,0,0,0,39,58,39,32,101,120,112,101,99,116,101,100,0,0,0,0,103,105,100,95,116,32,103,101,116,103,105,100,40,118,111,105,100,41,59,0,0,0,0,0,66,73,71,95,69,78,68,73,65,78,0,0,0,0,0,0,69,73,68,82,77,0,0,0,99,104,97,114,32,42,115,116,114,116,111,107,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,102,108,111,97,116,32,116,97,110,104,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,102,103,101,116,112,111,115,40,70,73,76,69,32,42,44,32,105,110,116,32,42,41,59,0,0,0,0,0,118,97,114,105,97,98,108,101,46,99,0,0,0,0,0,0,101,120,112,114,101,115,115,105,111,110,46,99,0,0,0,0,35,105,110,99,108,117,100,101,0,0,0,0,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,32,100,101,102,105,110,105,116,105,111,110,115,32,99,97,110,32,111,110,108,121,32,98,101,32,103,108,111,98,97,108,115,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,34,102,105,108,101,110,97,109,101,46,104,34,32,101,120,112,101,99,116,101,100,0,0,0,117,105,100,95,116,32,103,101,116,101,117,105,100,40,118,111,105,100,41,59,0,0,0,0,69,72,79,83,84,85,78,82,69,65,67,72,0,0,0,0,99,104,97,114,32,42,115,116,114,115,116,114,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,102,108,111,97,116,32,116,97,110,40,102,108,111,97,116,41,59,0,0,0,0,0,0,0,105,110,116,32,102,102,108,117,115,104,40,70,73,76,69,32,42,41,59,0,0,0,0,0,84,111,112,79,112,101,114,97,116,111,114,78,111,100,101,45,62,79,114,100,101,114,32,33,61,32,79,114,100,101,114,78,111,110,101,0,0,0,0,0,35,105,102,110,100,101,102,0,39,119,104,105,108,101,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,103,105,100,95,116,32,103,101,116,101,103,105,100,40,118,111,105,100,41,59,0,0,0,0,69,70,66,73,71,0,0,0,99,104,97,114,32,42,115,116,114,112,98,114,107,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,102,108,111,97,116,32,115,113,114,116,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,102,105,108,101,110,111,40,70,73,76,69,32,42,41,59,0,0,0,0,0,116,121,112,101,32,0,0,0,105,110,102,105,120,32,101,118,97,108,117,97,116,105,111,110,10,0,0,0,0,0,0,0,35,105,102,100,101,102,0,0,60,80,82,79,71,82,65,77,62,0,0,0,0,0,0,0,39,123,39,32,101,120,112,101,99,116,101,100,0,0,0,0,105,110,116,32,103,101,116,100,116,97,98,108,101,115,105,122,101,40,118,111,105,100,41,59,0,0,0,0,0,0,0,0,69,70,65,85,76,84,0,0,78,85,76,76,0,0,0,0,105,110,116,32,115,116,114,99,115,112,110,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,0,102,108,111,97,116,32,115,105,110,104,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,102,101,114,114,111,114,40,70,73,76,69,32,42,41,59,0,0,0,0,0,103,111,116,111,32,108,97,98,101,108,32,0,0,0,0,0,112,111,115,116,102,105,120,32,101,118,97,108,117,97,116,105,111,110,10,0,0,0,0,0,78,85,76,76,32,112,111,105,110,116,101,114,32,100,101,114,101,102,101,114,101,110,99,101,0,0,0,0,0,0,0,0,35,105,102,0,0,0,0,0,39,41,39,32,101,120,112,101,99,116,101,100,0,0,0,0,99,104,97,114,32,42,103,101,116,99,119,100,40,99,104,97,114,32,42,44,32,115,105,122,101,95,116,41,59,0,0,0,69,69,88,73,83,84,0,0,105,110,116,32,108,97,98,115,40,105,110,116,41,59,0,0,105,110,116,32,115,116,114,115,112,110,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,0,0,102,108,111,97,116,32,115,105,110,40,102,108,111,97,116,41,59,0,0,0,0,0,0,0,105,110,116,32,102,101,111,102,40,70,73,76,69,32,42,41,59,0,0,0,0,0,0,0,101,110,117,109,32,0,0,0,112,114,101,102,105,120,32,101,118,97,108,117,97,116,105,111,110,10,0,0,0,0,0,0,35,101,110,100,105,102,0,0,39,59,39,32,101,120,112,101,99,116,101,100,0,0,0,0,105,110,116,32,102,116,114,117,110,99,97,116,101,40,105,110,116,44,32,111,102,102,95,116,41,59,0,0,0,0,0,0,69,68,81,85,79,84,0,0,105,110,116,32,97,98,115,40,105,110,116,41,59,0,0,0,105,110,116,32,115,116,114,108,101,110,40,99,104,97,114,32,42,41,59,0,0,0,0,0,102,108,111,97,116,32,114,111,117,110,100,40,102,108,111,97,116,41,59,0,0,0,0,0,118,111,105,100,32,99,108,101,97,114,101,114,114,40,70,73,76,69,32,42,41,59,0,0,117,110,105,111,110,32,0,0,35,101,108,115,101,0,0,0,69,120,112,114,101,115,115,105,111,110,83,116,97,99,107,67,111,108,108,97,112,115,101,40,37,100,41,58,10,0,0,0,101,120,112,101,99,116,101,100,32,34,39,34,0,0,0,0,100,97,116,97,32,116,121,112,101,32,39,37,115,39,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,115,116,97,116,101,109,101,110,116,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,105,110,116,32,102,115,121,110,99,40,105,110,116,41,59,0,117,110,115,105,103,110,101,100,32,105,110,116,32,97,108,97,114,109,40,117,110,115,105,103,110,101,100,32,105,110,116,41,59,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,69,68,79,77,0,0,0,0,105,110,116,32,115,121,115,116,101,109,40,99,104,97,114,32,42,41,59,0,0,0,0,0,99,104,97,114,32,42,115,116,114,101,114,114,111,114,40,105,110,116,41,59,0,0,0,0,102,108,111,97,116,32,112,111,119,40,102,108,111,97,116,44,102,108,111,97,116,41,59,0,105,110,116,32,105,115,97,108,112,104,97,40,105,110,116,41,59,0,0,0,0,0,0,0,70,73,76,69,32,42,116,109,112,102,105,108,101,40,41,59,0,0,0,0,0,0,0,0,32,105,110,32,97,114,103,117,109,101,110,116,32,37,100,32,111,102,32,99,97,108,108,32,116,111,32,37,115,40,41,0,115,116,114,117,99,116,32,0,116,104,105,115,32,37,116,32,105,115,32,110,111,116,32,97,110,32,97,114,114,97,121,0,35,100,101,102,105,110,101,0,39,40,39,32,101,120,112,101,99,116,101,100,0,0,0,0,108,111,110,103,32,102,112,97,116,104,99,111,110,102,40,105,110,116,44,32,105,110,116,41,59,0,0,0,0,0,0,0,105,110,116,32,116,111,97,115,99,105,105,40,105,110,116,41,59,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,69,68,69,83,84,65,68,68,82,82,69,81,0,0,0,0,69,65,68,68,82,73,78,85,83,69,0,0,0,0,0,0,99,104,97,114,32,42,103,101,116,101,110,118,40,99,104,97,114,32,42,41,59,0,0,0,99,104,97,114,32,42,115,116,114,110,99,112,121,40,99,104,97,114,32,42,44,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,102,108,111,97,116,32,109,111,100,102,40,102,108,111,97,116,44,32,102,108,111,97,116,32,42,41,59,0,0,0,0,0,116,105,109,101,95,116,32,99,108,111,99,107,40,41,59,0,118,111,105,100,32,114,101,119,105,110,100,40,70,73,76,69,32,42,41,59,0,0,0,0,115,101,116,0,0,0,0,0,109,97,99,114,111,0,0,0,65,100,100,114,32,61,61,32,78,85,76,76,32,124,124,32,72,101,97,112,83,116,97,99,107,84,111,112,32,61,61,32,65,100,100,114,0,0,0,0,73,76,105,110,101,32,33,61].concat([32,78,85,76,76,0,0,0,102,108,111,97,116,32,97,116,111,102,40,99,104,97,114,32,42,41,59,0,0,0,0,0,97,114,114,97,121,32,105,110,100,101,120,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,99,104,97,114,32,42,114,105,110,100,101,120,40,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,0,99,108,111,115,101,32,98,114,97,99,107,101,116,32,101,120,112,101,99,116,101,100,0,0,112,105,100,95,116,32,102,111,114,107,40,118,111,105,100,41,59,0,0,0,0,0,0,0,105,110,116,32,105,115,97,115,99,105,105,40,105,110,116,41,59,0,0,0,0,0,0,0,69,68,69,65,68,76,75,0,118,111,105,100,32,101,120,105,116,40,105,110,116,41,59,0,99,104,97,114,32,42,115,116,114,99,112,121,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,102,108,111,97,116,32,108,111,103,49,48,40,102,108,111,97,116,41,59,0,0,0,0,0,102,108,111,97,116,32,97,115,105,110,40,102,108,111,97,116,41,59,0,0,0,0,0,0,105,110,116,32,114,101,110,97,109,101,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,41,59,0,0,0,0,0,97,115,115,105,103,110,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,35,101,110,100,105,102,32,119,105,116,104,111,117,116,32,35,105,102,0,0,0,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,97,32,118,111,105,100,32,118,97,114,105,97,98,108,101,0,0,0,0,105,110,116,32,102,100,97,116,97,115,121,110,99,40,105,110,116,41,59,0,0,0,0,0,105,110,116,32,116,111,117,112,112,101,114,40,105,110,116,41,59,0,0,0,0,0,0,0,69,67,79,78,78,82,69,83,69,84,0,0,0,0,0,0,67,76,79,67,75,83,95,80,69,82,95,83,69,67,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,115,99,97,110,102,40,41,32,45,32,37,100,32,109,97,120,0,0,118,111,105,100,32,97,98,111,114,116,40,41,59,0,0,0,105,110,116,32,115,116,114,99,111,108,108,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,0,102,108,111,97,116,32,108,111,103,40,102,108,111,97,116,41,59,0,0,0,0,0,0,0,118,111,105,100,32,100,105,103,105,116,97,108,87,114,105,116,101,40,105,110,116,44,32,105,110,116,41,59,0,0,0,0,105,110,116,32,114,101,109,111,118,101,40,99,104,97,114,32,42,41,59,0,0,0,0,0,99,97,110,39,116,32,114,101,97,100,32,102,105,108,101,32,37,115,10,0,0,0,0,0,99,97,110,39,116,32,37,115,32,0,0,0,0,0,0,0,100,111,117,98,108,101,0,0,101,114,114,110,111,46,104,0,69,120,112,114,101,115,115,105,111,110,73,110,102,105,120,79,112,101,114,97,116,111,114,40,41,10,0,0,0,0,0,0,35,101,108,115,101,32,119,105,116,104,111,117,116,32,35,105,102,0,0,0,0,0,0,0,105,110,116,32,102,99,104,100,105,114,40,105,110,116,41,59,0,0,0,0,0,0,0,0,105,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,0,0,0,0,0,105,110,116,32,116,111,108,111,119,101,114,40,105,110,116,41,59,0,0,0,0,0,0,0,80,73,67,79,67,95,86,69,82,83,73,79,78,0,0,0,69,67,79,78,78,82,69,70,85,83,69,68,0,0,0,0,116,109,0,0,0,0,0,0,118,111,105,100,32,115,114,97,110,100,40,105,110,116,41,59,0,0,0,0,0,0,0,0,105,110,116,32,115,116,114,110,99,109,112,40,99,104,97,114,32,42,44,99,104,97,114,32,42,44,105,110,116,41,59,0,102,108,111,97,116,32,108,100,101,120,112,40,102,108,111,97,116,44,32,105,110,116,41,59,0,0,0,0,0,0,0,0,105,110,116,32,102,112,117,116,115,40,99,104,97,114,32,42,44,32,70,73,76,69,32,42,41,59,0,0,0,0,0,0,10,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,39,41,39,32,101,120,112,101,99,116,101,100,0,0,0,0,83,105,122,101,32,62,32,48,32,124,124,32,84,121,112,32,61,61,32,38,86,111,105,100,84,121,112,101,0,0,0,0,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,115,116,114,117,99,116,117,114,101,32,39,37,115,39,32,105,115,110,39,116,32,100,101,102,105,110,101,100,0,0,0,0,105,110,116,32,102,99,104,111,119,110,40,105,110,116,44,32,117,105,100,95,116,44,32,103,105,100,95,116,41,59,0,0,39,125,39,32,101,120,112,101,99,116,101,100,0,0,0,0,105,110,116,32,105,115,120,100,105,103,105,116,40,105,110,116,41,59,0,0,0,0,0,0,69,67,79,78,78,65,66,79,82,84,69,68,0,0,0,0,105,110,116,32,116,105,109,101,103,109,40,115,116,114,117,99,116,32,116,109,32,42,41,59,0,0,0,0,0,0,0,0,104,101,97,112,46,99,0,0,105,110,116,32,114,97,110,100,40,41,59,0,0,0,0,0,105,110,116,32,115,116,114,99,109,112,40,99,104,97,114,32,42,44,99,104,97,114,32,42,41,59,0,0,0,0,0,0,102,108,111,97,116,32,102,114,101,120,112,40,102,108,111,97,116,44,32,105,110,116,32,42,41,59,0,0,0,0,0,0,105,110,116,32,102,112,117,116,99,40,105,110,116,44,32,70,73,76,69,32,42,41,59,0,94,10,37,115,58,37,100,58,32,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,39,93,39,32,101,120,112,101,99,116,101,100,0,0,0,0,69,120,112,114,101,115,115,105,111,110,80,111,115,116,102,105,120,79,112,101,114,97,116,111,114,40,41,10,0,0,0,0,39,37,115,39,32,105,115,32,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,97,32,78,85,76,76,32,112,111,105,110,116,101,114,0,0,0,118,111,105,100,32,95,101,120,105,116,40,105,110,116,41,59,0,0,0,0,0,0,0,0,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,0,0,105,110,116,32,105,115,117,112,112,101,114,40,105,110,116,41,59,0,0,0,0,0,0,0,69,67,72,73,76,68,0,0,99,104,97,114,32,42,115,116,114,112,116,105,109,101,40,99,104,97,114,32,42,44,32,99,104,97,114,32,42,44,32,115,116,114,117,99,116,32,116,109,32,42,41,59,0,0,0,0,118,111,105,100,32,102,114,101,101,40,118,111,105,100,32,42,41,59,0,0,0,0,0,0,99,104,97,114,32,42,115,116,114,114,99,104,114,40,99,104,97,114,32,42,44,105,110,116,41,59,0,0,0,0,0,0,102,108,111,97,116,32,102,109,111,100,40,102,108,111,97,116,44,32,102,108,111,97,116,41,59,0,0,0,0,0,0,0,99,104,97,114,32,42,102,103,101,116,115,40,99,104,97,114,32,42,44,32,105,110,116,44,32,70,73,76,69,32,42,41,59,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,98,97,100,32,116,121,112,101,32,100,101,99,108,97,114,97,116,105,111,110,0,0,0,0,105,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,0,0,0,0,0,115,101,116,117,112,40,41,59,32,119,104,105,108,101,40,49,41,32,123,32,108,111,111,112,40,41,59,32,125,0,0,0,112,111,116,32,61,32,48,59,32,111,110,109,101,115,115,97,103,101,32,61,32,102,117,110,99,116,105,111,110,40,101,118,101,110,116,41,32,123,32,105,102,32,40,39,99,111,100,101,39,32,105,110,32,101,118,101,110,116,46,100,97,116,97,41,32,123,32,77,111,100,117,108,101,46,99,99,97,108,108,40,39,105,110,105,116,80,105,99,111,99,39,44,32,39,118,39,44,32,91,39,115,116,114,105,110,103,39,93,44,32,91,101,118,101,110,116,46,100,97,116,97,46,99,111,100,101,93,41,59,32,125,32,101,108,115,101,32,105,102,32,40,39,112,111,116,39,32,105,110,32,101,118,101,110,116,46,100,97,116,97,41,32,123,32,112,111,116,32,61,32,101,118,101,110,116,46,100,97,116,97,46,112,111,116,59,32,125,32,125,0,0,0,86,97,114,105,97,98,108,101,65,108,108,111,99,86,97,108,117,101,70,114,111,109,84,121,112,101,0,0,0,0,0,0,86,97,114,105,97,98,108,101,65,108,108,111,99,86,97,108,117,101,65,110,100,67,111,112,121,0,0,0,0,0,0,0,76,101,120,84,111,107,101,110,105,115,101,0,0,0,0,0,76,101,120,71,101,116,82,97,119,84,111,107,101,110,0,0,76,101,120,67,111,112,121,84,111,107,101,110,115,0,0,0,72,101,97,112,80,111,112,83,116,97,99,107,0,0,0,0,69,120,112,114,101,115,115,105,111,110,83,116,97,99,107,67,111,108,108,97,112,115,101,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,200,6,0,0,92,0,0,0,200,37,0,0,248,0,0,0,168,28,0,0,152,1,0,0,104,22,0,0,104,0,0,0,64,16,0,0,214,0,0,0,176,10,0,0,246,0,0,0,152,6,0,0,94,1,0,0,16,4,0,0,6,0,0,0,80,2,0,0,96,0,0,0,144,0,0,0,8,0,0,0,248,45,0,0,0,1,0,0,136,44,0,0,44,1,0,0,24,43,0,0,110,0,0,0,176,41,0,0,230,0,0,0,144,40,0,0,148,1,0,0,208,38,0,0,198,0,0,0,184,37,0,0,208,0,0,0,184,36,0,0,76,1,0,0,248,35,0,0,138,0,0,0,24,35,0,0,46,1,0,0,96,34,0,0,96,1,0,0,160,33,0,0,154,0,0,0,144,32,0,0,112,1,0,0,120,31,0,0,204,0,0,0,184,30,0,0,84,1,0,0,104,29,0,0,106,0,0,0,144,28,0,0,166,1,0,0,32,28,0,0,102,1,0,0,104,27,0,0,66,1,0,0,8,27,0,0,130,0,0,0,168,26,0,0,88,0,0,0,32,26,0,0,14,1,0,0,112,25,0,0,120,1,0,0,160,24,0,0,34,0,0,0,232,23,0,0,202,0,0,0,248,22,0,0,34,1,0,0,72,22,0,0,62,1,0,0,208,21,0,0,90,0,0,0,88,21,0,0,40,1,0,0,192,20,0,0,36,1,0,0,104,20,0,0,86,1,0,0,224,19,0,0,72,0,0,0,32,19,0,0,140,0,0,0,64,18,0,0,2,1,0,0,176,17,0,0,156,1,0,0,224,16,0,0,106,1,0,0,32,16,0,0,54,1,0,0,176,15,0,0,60,1,0,0,32,15,0,0,194,0,0,0,96,14,0,0,158,0,0,0,0,14,0,0,72,1,0,0,152,13,0,0,58,1,0,0,16,13,0,0,98,0,0,0,112,12,0,0,142,0,0,0,16,12,0,0,10,1,0,0,32,11,0,0,130,1,0,0,152,10,0,0,108,0,0,0,80,10,0,0,30,0,0,0,16,10,0,0,206,0,0,0,216,9,0,0,2,0,0,0,136,9,0,0,64,0,0,0,48,9,0,0,244,0,0,0,192,8,0,0,162,1,0,0,80,8,0,0,132,0,0,0,232,7,0,0,110,1,0,0,56,7,0,0,0,0,0,0,0,0,0,0,116,121,112,101,100,101,102,32,105,110,116,32,117,105,100,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,103,105,100,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,112,105,100,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,111,102,102,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,115,105,122,101,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,115,115,105,122,101,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,117,115,101,99,111,110,100,115,95,116,59,116,121,112,101,100,101,102,32,105,110,116,32,105,110,116,112,116,114,95,116,59,0,0,0,0,0,0,0,94,115,48,48,48,48,0,0,94,101,48,48,48,48,0,0,60,0,0,0,144,15,0,0,92,1,0,0,88,40,0,0,100,0,0,0,104,30,0,0,222,0,0,0,192,23,0,0,42,0,0,0,144,17,0,0,164,1,0,0,240,11,0,0,144,1,0,0,200,7,0,0,64,1,0,0,192,4,0,0,30,1,0,0,224,2,0,0,88,1,0,0,56,1,0,0,170,0,0,0,144,46,0,0,68,0,0,0,24,45,0,0,118,0,0,0,160,43,0,0,12,1,0,0,56,42,0,0,80,1,0,0,216,40,0,0,148,0,0,0,88,39,0,0,168,0,0,0,24,38,0,0,124,1,0,0,240,36,0,0,218,0,0,0,48,36,0,0,116,1,0,0,72,35,0,0,16,1,0,0,128,34,0,0,184,1,0,0,200,33,0,0,120,0,0,0,192,32,0,0,80,0,0,0,216,31,0,0,118,1,0,0,224,30,0,0,28,0,0,0,160,29,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,40,0,0,40,0,0,0,16,30,0,0,20,0,0,0,128,23,0,0,10,0,0,0,80,17,0,0,50,0,0,0,152,11,0,0,166,0,0,0,152,7,0,0,58,0,0,0,160,4,0,0,86,0,0,0,192,2,0,0,178,0,0,0,24,1,0,0,78,1,0,0,120,46,0,0,38,1,0,0,8,45,0,0,164,0,0,0,136,43,0,0,100,1,0,0,40,42,0,0,168,1,0,0,200,40,0,0,32,1,0,0,64,39,0,0,186,0,0,0,0,38,0,0,224,0,0,0,224,36,0,0,8,1,0,0,32,36,0,0,0,0,0,0,0,0,0,0,22,1,0,0,200,24,0,0,138,1,0,0,96,18,0,0,240,0,0,0,184,12,0,0,146,0,0,0,120,8,0,0,134,0,0,0,16,5,0,0,200,0,0,0,40,3,0,0,200,0,0,0,120,1,0,0,220,0,0,0,208,46,0,0,178,1,0,0,88,45,0,0,114,1,0,0,224,43,0,0,28,1,0,0,144,42,0,0,226,0,0,0,40,41,0,0,6,1,0,0,176,39,0,0,104,1,0,0,96,38,0,0,160,0,0,0,32,37,0,0,182,0,0,0,104,36,0,0,126,0,0,0,128,35,0,0,68,1,0,0,184,34,0,0,180,0,0,0,0,34,0,0,20,1,0,0,248,32,0,0,24,0,0,0,24,32,0,0,242,0,0,0,24,31,0,0,102,0,0,0,240,29,0,0,90,1,0,0,16,29,0,0,70,1,0,0,72,28,0,0,82,0,0,0,144,27,0,0,82,0,0,0,48,27,0,0,150,1,0,0,208,26,0,0,44,0,0,0,80,26,0,0,62,0,0,0,168,25,0,0,56,1,0,0,16,25,0,0,212,0,0,0,72,24,0,0,52,1,0,0,104,23,0,0,74,0,0,0,168,22,0,0,76,0,0,0,0,22,0,0,190,0,0,0,120,21,0,0,128,0,0,0,232,20,0,0,134,1,0,0,136,20,0,0,162,0,0,0,16,20,0,0,98,1,0,0,96,19,0,0,232,0,0,0,208,18,0,0,94,0,0,0,232,17,0,0,122,1,0,0,40,17,0,0,18,0,0,0,136,16,0,0,48,0,0,0,208,15,0,0,66,0,0,0,72,15,0,0,228,0,0,0,144,14,0,0,0,0,0,0,0,0,0,0,116,121,112,101,100,101,102,32,115,116,114,117,99,116,32,95,95,118,97,95,108,105,115,116,83,116,114,117,99,116,32,118,97,95,108,105,115,116,59,32,116,121,112,101,100,101,102,32,115,116,114,117,99,116,32,95,95,70,73,76,69,83,116,114,117,99,116,32,70,73,76,69,59,0,0,0,0,0,0,0,116,121,112,101,100,101,102,32,105,110,116,32,98,111,111,108,59,0,0,0,0,0,0,0,36,0,0,0,144,12,0,0,142,1,0,0,160,39,0,0,140,1,0,0,216,29,0,0,114,0,0,0,72,23,0,0,236,0,0,0,8,17,0,0,188,0,0,0,88,11,0,0,144,0,0,0,112,7,0,0,132,1,0,0,128,4,0,0,70,0,0,0,168,2,0,0,174,1,0,0,232,0,0,0,196,0,0,0,72,46,0,0,26,1,0,0,224,44,0,0,0,0,0,0,0,0,0,0,116,121,112,101,100,101,102,32,105,110,116,32,116,105,109,101,95,116,59,32,116,121,112,101,100,101,102,32,105,110,116,32,99,108,111,99,107,95,116,59,0,0,0,0,0,0,0,0,172,0,0,0,56,8,0,0,18,1,0,0,72,38,0,0,124,0,0,0,248,28,0,0,152,0,0,0,144,22,0,0,160,1,0,0,112,16,0,0,82,1,0,0,208,10,0,0,50,1,0,0,232,6,0,0,136,0,0,0,56,4,0,0,78,0,0,0,96,2,0,0,174,0,0,0,168,0,0,0,180,1,0,0,40,46,0,0,48,1,0,0,184,44,0,0,12,0,0,0,72,43,0,0,238,0,0,0,200,41,0,0,22,0,0,0,168,40,0,0,250,0,0,0,240,38,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,184,38,0,0,83,0,0,0,0,0,0,0,64,37,0,0,88,0,0,0,0,0,0,0,160,36,0,0,89,0,0,0,0,0,0,0,224,35,0,0,85,0,0,0,0,0,0,0,240,34,0,0,86,0,0,0,0,0,0,0,64,34,0,0,87,0,0,0,0,0,0,0,56,33,0,0,84,0,0,0,0,0,0,0,120,32,0,0,64,0,0,0,0,0,0,0,80,31,0,0,78,0,0,0,0,0,0,0,96,30,0,0,80,0,0,0,0,0,0,0,56,29,0,0,55,0,0,0,0,0,0,0,112,28,0,0,71,0,0,0,0,0,0,0,168,27,0,0,81,0,0,0,0,0,0,0,96,27,0,0,91,0,0,0,0,0,0,0,240,26,0,0,72,0,0,0,0,0,0,0,160,26,0,0,57,0,0,0,0,0,0,0,0,26,0,0,73,0,0,0,0,0,0,0,96,25,0,0,59,0,0,0,0,0,0,0,152,24,0,0,66,0,0,0,0,0,0,0,184,23,0,0,56,0,0,0,0,0,0,0,224,22,0,0,74,0,0,0,0,0,0,0,64,22,0,0,75,0,0,0,0,0,0,0,200,21,0,0,76,0,0,0,0,0,0,0,32,21,0,0,54,0,0,0,0,0,0,0,184,20,0,0,60,0,0,0,0,0,0,0,96,20,0,0,90,0,0,0,0,0,0,0,176,19,0,0,65,0,0,0,0,0,0,0,24,19,0,0,82,0,0,0,0,0,0,0,32,18,0,0,62,0,0,0,0,0,0,0,136,17,0,0,61,0,0,0,0,0,0,0,208,16,0,0,37,0,0,0,0,0,0,0,24,16,0,0,63,0,0,0,0,0,0,0,136,15,0,0,67,0,0,0,0,0,0,0,24,15,0,0,79,0,0,0,0,0,0,0,80,14,0,0,70,0,0,0,0,0,0,0,248,13,0,0,68,0,0,0,0,0,0,0,112,13,0,0,69,0,0,0,0,0,0,0,8,13,0,0,58,0,0,0,0,0,0,0,104,12,0,0,77,0,0,0,0,0,0,0,0,0,0,0,56,47,0,0,0,0,0,0,0,0,0,0,104,13,0,0,0,0,0,0,0,13,0,0,0,2,0,0,96,12,0,0,0,2,0,0,184,11,0,0,0,2,0,0,24,11,0,0,0,2,0,0,144,10,0,0,0,2,0,0,72,10,0,0,0,2,0,0,8,10,0,0,0,2,0,0,192,9,0,0,0,2,0,0,128,9,0,0,0,2,0,0,16,9,0,0,0,2,0,0,184,8,0,0,0,2,0,0,48,8,0,0,0,3,0,0,192,7,0,0,0,3,0,0,40,7,0,0,0,4,0,0,136,6,0,0,0,5,0,0,104,6,0,0,0,6,0,0,64,6,0,0,0,7,0,0,200,5,0,0,14,8,0,0,176,5,0,0,0,9,0,0,120,5,0,0,0,9,0,0,64,5,0,0,0,10,0,0,0,5,0,0,0,10,0,0,184,4,0,0,0,10,0,0,104,4,0,0,0,10,0,0,8,4,0,0,0,11,0,0,248,3,0,0,0,11,0,0,224,3,0,0,14,12,0,0,144,3,0,0,14,12,0,0,128,3,0,0,14,13,0,0,96,3,0,0,0,13,0,0,80,3,0,0,0,13,0,0,32,3,0,0,254,0,0,0,216,2,0,0,254,0,0,0,152,2,0,0,14,0,0,0,72,2,0,0,14,0,0,0,64,2,0,0,14,0,0,0,32,2,0,0,14,0,0,0,192,1,0,0,0,15,0,0,184,1,0,0,240,0,0,0,160,1,0,0,0,15,0,0,48,29,0,0,0,15,0,0,104,28,0,0,15,0,0,0,144,1,0,0,240,0,0,0,112,1,0,0,154,1,0,0,40,18,0,0,46,0,0,0,16,41,0,0,84,0,0,0,0,31,0,0,128,1,0,0,40,24,0,0,74,1,0,0,208,17,0,0,38,0,0,0,56,12,0,0,136,1,0,0,16,8,0,0,170,1,0,0,232,4,0,0,210,0,0,0,8,3,0,0,54,0,0,0,88,1,0,0,252,0,0,0,176,46,0,0,176,0,0,0,56,45,0,0,26,0,0,0,192,43,0,0,176,1,0,0,88,42,0,0,150,0,0,0,248,40,0,0,4,1,0,0,128,39,0,0,24,1,0,0,48,38,0,0,122,0,0,0,8,37,0,0,116,0,0,0,80,36,0,0,4,0,0,0,104,35,0,0,184,0,0,0,160,34,0,0,182,1,0,0,232,33,0,0,234,0,0,0,224,32,0,0,0,0,0,0,0,0,0,0,205,59,127,102,158,160,246,63,205,59,127,102,158,160,230,63,24,45,68,84,251,33,233,63,24,45,68,84,251,33,249,63,24,45,68,84,251,33,9,64,254,130,43,101,71,21,247,63,14,229,38,21,123,203,219,63,239,57,250,254,66,46,230,63,22,85,181,187,177,107,2,64,105,87,20,139,10,191,5,64,109,155,66,80,215,13,242,63,131,200,201,109,48,95,228,63,131,200,201,109,48,95,212,63,0,0,0,0,152,71,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,42,1,0,0,96,24,0,0,14,0,0,0,112,42,0,0,108,1,0,0,0,32,0,0,146,1,0,0,248,24,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,6,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,131,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,107,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,136,18,0,0,0,0,0,0,64,66,15,0,0,0,0,0,0,4,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((112 )>>2)]=(112);
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var _llvm_dbg_declare=undefined;
  function _emscripten_asm_const(code) {
      // code is a constant string on the heap, so we can cache these
      if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
      var func = Runtime.asmConstCache[code];
      if (func) return func();
      func = Runtime.asmConstCache[code] = eval('(function(){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
      return func();
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  var _llvm_pow_f64=Math_pow;
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var VFS=undefined;
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path, ext) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var f = PATH.splitPath(path)[2];
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.filter(function(p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }
          return p;
        }).join('/'));
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek
          };
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap
          };
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          };
          node.stream_ops = {};
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          };
          node.stream_ops = FS.chrdev_stream_ops;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && buffer.buffer === HEAP8.buffer && offset === 0) {
              node.contents = buffer; // this is a subarray of the heap, and we can own it
              node.contentMode = MEMFS.CONTENT_OWNING;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        var done = function(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        var isRealDir = function(p) {
          return p !== '.' && p !== '..';
        };
        var toAbsolute = function(root) {
          return function(p) {
            return PATH.join(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, stream.flags);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode)) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        },handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + new Error().stack;
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            return path ? PATH.join(node.mount.mountpoint, path) : node.mount.mountpoint;
          }
          path = path ? PATH.join(node.name, path) : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        var node = {
          id: FS.nextInode++,
          name: name,
          mode: mode,
          node_ops: {},
          stream_ops: {},
          rdev: rdev,
          parent: null,
          mount: null
        };
        if (!parent) {
          parent = node;  // root node sets parent to itself
        }
        node.parent = parent;
        node.mount = parent.mount;
        // compatibility
        var readMode = 292 | 73;
        var writeMode = 146;
        // NOTE we must use Object.defineProperties instead of individual calls to
        // Object.defineProperty in order to make closure compiler happy
        Object.defineProperties(node, {
          read: {
            get: function() { return (node.mode & readMode) === readMode; },
            set: function(val) { val ? node.mode |= readMode : node.mode &= ~readMode; }
          },
          write: {
            get: function() { return (node.mode & writeMode) === writeMode; },
            set: function(val) { val ? node.mode |= writeMode : node.mode &= ~writeMode; }
          },
          isFolder: {
            get: function() { return FS.isDir(node.mode); },
          },
          isDevice: {
            get: function() { return FS.isChrdev(node.mode); },
          },
        });
        FS.hashAddNode(node);
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        // compatibility
        Object.defineProperties(stream, {
          object: {
            get: function() { return stream.node; },
            set: function(val) { stream.node = val; }
          },
          isRead: {
            get: function() { return (stream.flags & 2097155) !== 1; }
          },
          isWrite: {
            get: function() { return (stream.flags & 2097155) !== 0; }
          },
          isAppend: {
            get: function() { return (stream.flags & 1024); }
          }
        });
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        var done = function(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        path = PATH.normalize(path);
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072)
          });
          node = lookup.node;
        } catch (e) {
          // ignore
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },staticInit:function () {
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(path, mode | 146);
          var stream = FS.open(path, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(path, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {} : ['binary'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          var handleMessage = function(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode
        HEAP32[(((buf)+(16))>>2)]=stat.nlink
        HEAP32[(((buf)+(20))>>2)]=stat.uid
        HEAP32[(((buf)+(24))>>2)]=stat.gid
        HEAP32[(((buf)+(28))>>2)]=stat.rdev
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size
        HEAP32[(((buf)+(40))>>2)]=4096
        HEAP32[(((buf)+(44))>>2)]=stat.blocks
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000)
        HEAP32[(((buf)+(52))>>2)]=0
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000)
        HEAP32[(((buf)+(60))>>2)]=0
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000)
        HEAP32[(((buf)+(68))>>2)]=0
        HEAP32[(((buf)+(72))>>2)]=stat.ino
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function _analogWrite(pin, brightness) {
          postMessage({pin: pin - 2, brightness: brightness});
      }
  function _digitalWrite(pin, enable) {
          postMessage({pin: pin - 2, brightness: enable ? 255 : 0});
      }
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
        var start = window['performance']['now']();
        while (window['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  var _putc=_fputc;
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      var get = function() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      var unget = function() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }
  function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStream(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }
  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      var streamObj = FS.getStream(stream);
      if (streamObj) streamObj.error = false;
    }
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[(((s)+(i))|0)]=result.charCodeAt(i);
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }
  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStream(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStream(stream);
      return Number(stream && stream.error);
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  function _fgetpos(stream, pos) {
      // int fgetpos(FILE *restrict stream, fpos_t *restrict pos);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetpos.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      }
      HEAP32[((pos)>>2)]=stream.position
      var state = (stream.eof ? 1 : 0) + (stream.error ? 2 : 0);
      HEAP32[(((pos)+(4))>>2)]=state
      return 0;
    }
  function _fsetpos(stream, pos) {
      // int fsetpos(FILE *stream, const fpos_t *pos);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsetpos.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.EPIPE);
        return -1;
      }
      stream.position = HEAP32[((pos)>>2)];
      var state = HEAP32[(((pos)+(4))>>2)];
      stream.eof = Boolean(state & 1);
      stream.error = Boolean(state & 2);
      return 0;
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }
  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }function _setbuf(stream, buf) {
      // void setbuf(FILE *restrict stream, char *restrict buf);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setbuf.html
      if (buf) _setvbuf(stream, buf, 0, 8192);  // _IOFBF, BUFSIZ.
      else _setvbuf(stream, buf, 2, 8192);  // _IONBF, BUFSIZ.
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  var _sin=Math_sin;
  var _cos=Math_cos;
  var _tan=Math_tan;
  var _asin=Math_asin;
  var _acos=Math_acos;
  var _atan=Math_atan;
  var _atan2=Math_atan2;
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }
  function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _exp=Math_exp;
  var _fabs=Math_abs;
  function _fmod(x, y) {
      return x % y;
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var sign = 1;
        if (x < 0) {
          x = -x;
          sign = -1;
        }
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = sign*x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  var _log=Math_log;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  function _modf(x, intpart) {
      HEAPF64[((intpart)>>3)]=Math.floor(x)
      return x - HEAPF64[((intpart)>>3)];
    }
  var _sqrt=Math_sqrt;
  var _ceil=Math_ceil;
  var _floor=Math_floor;
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[((pdest+len+i)|0)]=HEAP8[((psrc+i)|0)];
        if (HEAP8[(((pdest)+(len+i))|0)] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[(((pdest)+(len+i))|0)]=0
          break;
        }
      }
      return pdest;
    }
  var _index=_strchr;
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }var _rindex=_strrchr;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  var _strcoll=_strcmp;
  function _strspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (!setcurr) return str - pstr;
        str++;
      }
    }
  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }
  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[((ptr2++)|0)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  var ___strtok_state=0;
  function _strtok_r(s, delim, lasts) {
      var skip_leading_delim = 1;
      var spanp;
      var c, sc;
      var tok;
      if (s == 0 && (s = getValue(lasts, 'i8*')) == 0) {
        return 0;
      }
      cont: while (1) {
        c = getValue(s++, 'i8');
        for (spanp = delim; (sc = getValue(spanp++, 'i8')) != 0;) {
          if (c == sc) {
            if (skip_leading_delim) {
              continue cont;
            } else {
              setValue(lasts, s, 'i8*');
              setValue(s - 1, 0, 'i8');
              return s - 1;
            }
          }
        }
        break;
      }
      if (c == 0) {
        setValue(lasts, 0, 'i8*');
        return 0;
      }
      tok = s - 1;
      for (;;) {
        c = getValue(s++, 'i8');
        spanp = delim;
        do {
          if ((sc = getValue(spanp++, 'i8')) == c) {
            if (c == 0) {
              s = 0;
            } else {
              setValue(s - 1, 0, 'i8');
            }
            setValue(lasts, s, 'i8*');
            return tok;
          }
        } while (sc != 0);
      }
      abort('strtok_r error!');
    }function _strtok(s, delim) {
      return _strtok_r(s, delim, ___strtok_state);
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  var _atol=_atoi;
  function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  function _srand(seed) {}
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }
  var _abs=Math_abs;
  var _labs=Math_abs;
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var year = HEAP32[(((tmPtr)+(20))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(16))>>2)],
                               HEAP32[(((tmPtr)+(12))>>2)],
                               HEAP32[(((tmPtr)+(8))>>2)],
                               HEAP32[(((tmPtr)+(4))>>2)],
                               HEAP32[((tmPtr)>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(24))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      return timestamp;
    }function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[(((buf)+(index))|0)]=chr.charCodeAt(0)
      });
      HEAP8[(((buf)+(25))|0)]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }
  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000000/1000));
    }
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }
  function _difftime(time1, time0) {
      return time1 - time0;
    }
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(36))>>2)]=0
      HEAP32[(((tmPtr)+(32))>>2)]=0
      var start = new Date(date); // define date using UTC, start from Jan 01 00:00:00 UTC
      start.setUTCDate(1);
      start.setUTCMonth(0);
      start.setUTCHours(0);
      start.setUTCMinutes(0);
      start.setUTCSeconds(0);
      start.setUTCMilliseconds(0);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      var leadingSomething = function(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      var leadingNulls = function(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      var compareByDay = function(date1, date2) {
        var sgn = function(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      var getFirstWeekStartDate = function(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      var getWeekBasedYear = function(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _strptime(buf, format, tm) {
      // char *strptime(const char *restrict buf, const char *restrict format, struct tm *restrict tm);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html
      var pattern = Pointer_stringify(format);
      // escape special characters
      // TODO: not sure we really need to escape all of these in JS regexps
      var SPECIAL_CHARS = '\\!@#$^&*()+=-[]/{}|:<>?,.';
      for (var i=0, ii=SPECIAL_CHARS.length; i<ii; ++i) {
        pattern = pattern.replace(new RegExp('\\'+SPECIAL_CHARS[i], 'g'), '\\'+SPECIAL_CHARS[i]);
      }
      // reduce number of matchers
      var EQUIVALENT_MATCHERS = {
        '%A':  '%a',
        '%B':  '%b',
        '%c':  '%x\\s+%X',
        '%D':  '%m\\/%d\\/%y',
        '%e':  '%d',
        '%h':  '%b',
        '%R':  '%H\\:%M',
        '%r':  '%I\\:%M\\:%S\\s%p',
        '%T':  '%H\\:%M\\:%S',
        '%x':  '%m\\/%d\\/(?:%y|%Y)',
        '%X':  '%H\\:%M\\:%S'
      };
      for (var matcher in EQUIVALENT_MATCHERS) {
        pattern = pattern.replace(matcher, EQUIVALENT_MATCHERS[matcher]);
      }
      // TODO: take care of locale
      var DATE_PATTERNS = {
        /* weeday name */     '%a': '(?:Sun(?:day)?)|(?:Mon(?:day)?)|(?:Tue(?:sday)?)|(?:Wed(?:nesday)?)|(?:Thu(?:rsday)?)|(?:Fri(?:day)?)|(?:Sat(?:urday)?)',
        /* month name */      '%b': '(?:Jan(?:uary)?)|(?:Feb(?:ruary)?)|(?:Mar(?:ch)?)|(?:Apr(?:il)?)|May|(?:Jun(?:e)?)|(?:Jul(?:y)?)|(?:Aug(?:ust)?)|(?:Sep(?:tember)?)|(?:Oct(?:ober)?)|(?:Nov(?:ember)?)|(?:Dec(?:ember)?)',
        /* century */         '%C': '\\d\\d',
        /* day of month */    '%d': '0[1-9]|[1-9](?!\\d)|1\\d|2\\d|30|31',
        /* hour (24hr) */     '%H': '\\d(?!\\d)|[0,1]\\d|20|21|22|23',
        /* hour (12hr) */     '%I': '\\d(?!\\d)|0\\d|10|11|12',
        /* day of year */     '%j': '00[1-9]|0?[1-9](?!\\d)|0?[1-9]\\d(?!\\d)|[1,2]\\d\\d|3[0-6]\\d',
        /* month */           '%m': '0[1-9]|[1-9](?!\\d)|10|11|12',
        /* minutes */         '%M': '0\\d|\\d(?!\\d)|[1-5]\\d',
        /* whitespace */      '%n': '\\s',
        /* AM/PM */           '%p': 'AM|am|PM|pm|A\\.M\\.|a\\.m\\.|P\\.M\\.|p\\.m\\.',
        /* seconds */         '%S': '0\\d|\\d(?!\\d)|[1-5]\\d|60',
        /* week number */     '%U': '0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53',
        /* week number */     '%W': '0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53',
        /* weekday number */  '%w': '[0-6]',
        /* 2-digit year */    '%y': '\\d\\d',
        /* 4-digit year */    '%Y': '\\d\\d\\d\\d',
        /* % */               '%%': '%',
        /* whitespace */      '%t': '\\s',
      };
      var MONTH_NUMBERS = {JAN: 0, FEB: 1, MAR: 2, APR: 3, MAY: 4, JUN: 5, JUL: 6, AUG: 7, SEP: 8, OCT: 9, NOV: 10, DEC: 11};
      var DAY_NUMBERS_SUN_FIRST = {SUN: 0, MON: 1, TUE: 2, WED: 3, THU: 4, FRI: 5, SAT: 6};
      var DAY_NUMBERS_MON_FIRST = {MON: 0, TUE: 1, WED: 2, THU: 3, FRI: 4, SAT: 5, SUN: 6};
      for (var datePattern in DATE_PATTERNS) {
        pattern = pattern.replace(datePattern, '('+datePattern+DATE_PATTERNS[datePattern]+')');    
      }
      // take care of capturing groups
      var capture = [];
      for (var i=pattern.indexOf('%'); i>=0; i=pattern.indexOf('%')) {
        capture.push(pattern[i+1]);
        pattern = pattern.replace(new RegExp('\\%'+pattern[i+1], 'g'), '');
      }
      var matches = new RegExp('^'+pattern).exec(Pointer_stringify(buf))
      // Module['print'](Pointer_stringify(buf)+ ' is matched by '+((new RegExp('^'+pattern)).source)+' into: '+JSON.stringify(matches));
      var initDate = function() {
        var fixup = function(value, min, max) {
          return (typeof value !== 'number' || isNaN(value)) ? min : (value>=min ? (value<=max ? value: max): min);
        };
        return {
          year: fixup(HEAP32[(((tm)+(20))>>2)] + 1900 , 1970, 9999),
          month: fixup(HEAP32[(((tm)+(16))>>2)], 0, 11),
          day: fixup(HEAP32[(((tm)+(12))>>2)], 1, 31),
          hour: fixup(HEAP32[(((tm)+(8))>>2)], 0, 23),
          min: fixup(HEAP32[(((tm)+(4))>>2)], 0, 59),
          sec: fixup(HEAP32[((tm)>>2)], 0, 59)
        };
      };
      if (matches) {
        var date = initDate();
        var value;
        var getMatch = function(symbol) {
          var pos = capture.indexOf(symbol);
          // check if symbol appears in regexp
          if (pos >= 0) {
            // return matched value or null (falsy!) for non-matches
            return matches[pos+1];
          }
          return;
        }
        // seconds
        if ((value=getMatch('S'))) {
          date.sec = parseInt(value);
        }
        // minutes
        if ((value=getMatch('M'))) {
          date.min = parseInt(value);
        }
        // hours
        if ((value=getMatch('H'))) {
          // 24h clock
          date.hour = parseInt(value);
        } else if ((value = getMatch('I'))) {
          // AM/PM clock
          var hour = parseInt(value);
          if ((value=getMatch('p'))) {
            hour += value.toUpperCase()[0] === 'P' ? 12 : 0;
          }
          date.hour = hour;
        }
        // year
        if ((value=getMatch('Y'))) {
          // parse from four-digit year
          date.year = parseInt(value);
        } else if ((value=getMatch('y'))) {
          // parse from two-digit year...
          var year = parseInt(value);
          if ((value=getMatch('C'))) {
            // ...and century
            year += parseInt(value)*100;
          } else {
            // ...and rule-of-thumb
            year += year<69 ? 2000 : 1900;
          }
          date.year = year;
        }
        // month
        if ((value=getMatch('m'))) {
          // parse from month number
          date.month = parseInt(value)-1;
        } else if ((value=getMatch('b'))) {
          // parse from month name
          date.month = MONTH_NUMBERS[value.substring(0,3).toUpperCase()] || 0;
          // TODO: derive month from day in year+year, week number+day of week+year 
        }
        // day
        if ((value=getMatch('d'))) {
          // get day of month directly
          date.day = parseInt(value);
        } else if ((value=getMatch('j'))) {
          // get day of month from day of year ...
          var day = parseInt(value);
          var leapYear = __isLeapYear(date.year);
          for (var month=0; month<12; ++month) {
            var daysUntilMonth = __arraySum(leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, month-1);
            if (day<=daysUntilMonth+(leapYear ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[month]) {
              date.day = day-daysUntilMonth;
            }
          }
        } else if ((value=getMatch('a'))) {
          // get day of month from weekday ...
          var weekDay = value.substring(0,3).toUpperCase();
          if ((value=getMatch('U'))) {
            // ... and week number (Sunday being first day of week)
            // Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. 
            // All days in a new year preceding the first Sunday are considered to be in week 0.
            var weekDayNumber = DAY_NUMBERS_SUN_FIRST[weekDay];
            var weekNumber = parseInt(value);
            // January 1st 
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay() === 0) {
              // Jan 1st is a Sunday, and, hence in the 1st CW
              endDate = __addDays(janFirst, weekDayNumber+7*(weekNumber-1));
            } else {
              // Jan 1st is not a Sunday, and, hence still in the 0th CW
              endDate = __addDays(janFirst, 7-janFirst.getDay()+weekDayNumber+7*(weekNumber-1));
            }
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          } else if ((value=getMatch('W'))) {
            // ... and week number (Monday being first day of week)
            // Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. 
            // All days in a new year preceding the first Monday are considered to be in week 0.
            var weekDayNumber = DAY_NUMBERS_MON_FIRST[weekDay];
            var weekNumber = parseInt(value);
            // January 1st 
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay()===1) {
              // Jan 1st is a Monday, and, hence in the 1st CW
               endDate = __addDays(janFirst, weekDayNumber+7*(weekNumber-1));
            } else {
              // Jan 1st is not a Monday, and, hence still in the 0th CW
              endDate = __addDays(janFirst, 7-janFirst.getDay()+1+weekDayNumber+7*(weekNumber-1));
            }
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          }
        }
        /*
        tm_sec  int seconds after the minute  0-61*
        tm_min  int minutes after the hour  0-59
        tm_hour int hours since midnight  0-23
        tm_mday int day of the month  1-31
        tm_mon  int months since January  0-11
        tm_year int years since 1900  
        tm_wday int days since Sunday 0-6
        tm_yday int days since January 1  0-365
        tm_isdst  int Daylight Saving Time flag 
        */
        var fullDate = new Date(date.year, date.month, date.day, date.hour, date.min, date.sec, 0);
        HEAP32[((tm)>>2)]=fullDate.getSeconds()
        HEAP32[(((tm)+(4))>>2)]=fullDate.getMinutes()
        HEAP32[(((tm)+(8))>>2)]=fullDate.getHours()
        HEAP32[(((tm)+(12))>>2)]=fullDate.getDate()
        HEAP32[(((tm)+(16))>>2)]=fullDate.getMonth()
        HEAP32[(((tm)+(20))>>2)]=fullDate.getFullYear()-1900
        HEAP32[(((tm)+(24))>>2)]=fullDate.getDay()
        HEAP32[(((tm)+(28))>>2)]=__arraySum(__isLeapYear(fullDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, fullDate.getMonth()-1)+fullDate.getDate()-1
        HEAP32[(((tm)+(32))>>2)]=0
        // we need to convert the matched sequence into an integer array to take care of UTF-8 characters > 0x7F
        // TODO: not sure that intArrayFromString handles all unicode characters correctly
        return buf+intArrayFromString(matches[0]).length-1;
      } 
      return 0;
    }
  function _timegm(tmPtr) {
      _tzset();
      var offset = HEAP32[((_timezone)>>2)];
      var daylight = HEAP32[((_daylight)>>2)];
      daylight = (daylight == 1) ? 60 * 60 : 0;
      var ret = _mktime(tmPtr) + offset - daylight;
      return ret;
    }
  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }
  function _ispunct(chr) {
      return (chr >= 33 && chr <= 47) ||
             (chr >= 58 && chr <= 64) ||
             (chr >= 91 && chr <= 96) ||
             (chr >= 123 && chr <= 126);
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function _toascii(chr) {
      return chr & 0x7F;
    }
  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      if (amode & ~7) {
        // need a valid mode
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      }
      return 0;
    }
  function _alarm(seconds) {
      // unsigned alarm(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/alarm.html
      // We don't support signals, and there's no way to indicate failure, so just
      // fail silently.
      return 0;
    }
  function _chdir(path) {
      // int chdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chdir.html
      // NOTE: The path argument may be a string, to simplify fchdir().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _chroot(path) {
      // int chroot(const char *path);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chroot.html
      ___setErrNo(ERRNO_CODES.EACCES);
      return -1;
    }
  function _chown(path, owner, group, dontResolveLastLink) {
      // int chown(const char *path, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chown.html
      // We don't support multiple users, so changing ownership makes no sense.
      // NOTE: The path argument may be a string, to simplify fchown().
      // NOTE: dontResolveLastLink is a shortcut for lchown(). It should never be
      //       used in client code.
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chown(path, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _confstr(name, buf, len) {
      // size_t confstr(int name, char *buf, size_t len);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/confstr.html
      var value;
      switch (name) {
        case 0:
          value = ENV['PATH'] || '/';
          break;
        case 1:
          // Mimicking glibc.
          value = 'POSIX_V6_ILP32_OFF32\nPOSIX_V6_ILP32_OFFBIG';
          break;
        case 2:
          // This JS implementation was tested against this glibc version.
          value = 'glibc 2.14';
          break;
        case 3:
          // We don't support pthreads.
          value = '';
          break;
        case 1118:
        case 1122:
        case 1124:
        case 1125:
        case 1126:
        case 1128:
        case 1129:
        case 1130:
          value = '';
          break;
        case 1116:
        case 1117:
        case 1121:
          value = '-m32';
          break;
        case 1120:
          value = '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return 0;
      }
      if (len == 0 || buf == 0) {
        return value.length + 1;
      } else {
        var length = Math.min(len, value.length);
        for (var i = 0; i < length; i++) {
          HEAP8[(((buf)+(i))|0)]=value.charCodeAt(i)
        }
        if (len > length) HEAP8[(((buf)+(i++))|0)]=0
        return i;
      }
    }
  function _ctermid(s) {
      // char *ctermid(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ctermid.html
      if (!_ctermid.ret) {
        var arr = intArrayFromString('/dev/tty');
        _ctermid.ret = allocate(arr, 'i8', ALLOC_NORMAL);
      }
      return s ? _strcpy(s, _ctermid.ret) : _ctermid.ret;
    }
  function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream;
          try {
            newStream = FS.open(stream.path, stream.flags, 0, arg);
          } catch (e) {
            FS.handleFSError(e);
            return -1;
          }
          return newStream.fd;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.flags |= arg;
          return 0;
        case 12:
        case 12:
          var arg = HEAP32[((varargs)>>2)];
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2
          return 0;
        case 13:
        case 14:
        case 13:
        case 14:
          // Pretend that the locking is successful.
          return 0;
        case 8:
        case 9:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }function _dup(fildes) {
      // int dup(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      return _fcntl(fildes, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));  // F_DUPFD.
    }
  function _dup2(fildes, fildes2) {
      // int dup2(int fildes, int fildes2);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      var stream = FS.getStream(fildes);
      if (fildes2 < 0) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (fildes === fildes2 && stream) {
        return fildes;
      } else {
        _close(fildes2);
        try {
          var stream2 = FS.open(stream.path, stream.flags, 0, fildes2, fildes2);
          return stream2.fd;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module.print('exit(' + status + ') called');
      Module['exit'](status);
    }
  function _fchown(fildes, owner, group) {
      // int fchown(int fildes, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fchown.html
      try {
        FS.fchown(fildes, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fchdir(fildes) {
      // int fchdir(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fchdir.html
      var stream = FS.getStream(fildes);
      if (stream) {
        return _chdir(stream.path);
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  var _fdatasync=_fsync;
  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }
  function _fpathconf(fildes, name) {
      // long fpathconf(int fildes, int name);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/encrypt.html
      // NOTE: The first parameter is ignored, so pathconf == fpathconf.
      // The constants here aren't real values. Just mimicking glibc.
      switch (name) {
        case 0:
          return 32000;
        case 1:
        case 2:
        case 3:
          return 255;
        case 4:
        case 5:
        case 16:
        case 17:
        case 18:
          return 4096;
        case 6:
        case 7:
        case 20:
          return 1;
        case 8:
          return 0;
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 19:
          return -1;
        case 13:
          return 64;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _truncate(path, length) {
      // int truncate(const char *path, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
      // NOTE: The path argument may be a string, to simplify ftruncate().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.truncate(path, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _ftruncate(fildes, length) {
      // int ftruncate(int fildes, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
      try {
        FS.ftruncate(fildes, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < cwd.length; i++) {
          HEAP8[(((buf)+(i))|0)]=cwd.charCodeAt(i)
        }
        HEAP8[(((buf)+(i))|0)]=0
        return buf;
      }
    }
;
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }var _getegid=_getgid;
  var _geteuid=_getgid;
  function _gethostid() {
      // long gethostid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/gethostid.html
      return 42;
    }
  function _getlogin_r(name, namesize) {
      // int getlogin_r(char *name, size_t namesize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getlogin.html
      var ret = 'root';
      if (namesize < ret.length + 1) {
        return ___setErrNo(ERRNO_CODES.ERANGE);
      } else {
        for (var i = 0; i < ret.length; i++) {
          HEAP8[(((name)+(i))|0)]=ret.charCodeAt(i)
        }
        HEAP8[(((name)+(i))|0)]=0
        return 0;
      }
    }function _getlogin() {
      // char *getlogin(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getlogin.html
      if (!_getlogin.ret) _getlogin.ret = _malloc(8);
      return _getlogin_r(_getlogin.ret, 8) ? 0 : _getlogin.ret;
    }
  function _getpagesize() {
      // int getpagesize(void);
      return PAGE_SIZE;
    }
;
  var _getpgrp=_getgid;
  var _getpid=_getgid;
  var _getppid=_getgid;
  var _getuid=_getgid;
  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // HACK - implement tcgetattr
      if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0;
      }
      return 1;
    }
  function _lchown(path, owner, group) {
      // int lchown(const char *path, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lchown.html
      return _chown(path, owner, group, true);
    }
  function _link(path1, path2) {
      // int link(const char *path1, const char *path2);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/link.html
      // We don't support hard links.
      ___setErrNo(ERRNO_CODES.EMLINK);
      return -1;
    }
  function _lockf(fildes, func, size) {
      // int lockf(int fildes, int function, off_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lockf.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // Pretend whatever locking or unlocking operation succeeded. Locking does
        // not make much sense, since we have a single process/thread.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _nice(incr) {
      // int nice(int incr);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/nice.html
      // Niceness makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.EPERM);
      return 0;
    }
  var _pathconf=_fpathconf;
  function _pause() {
      // int pause(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pause.html
      // We don't support signals, so we return immediately.
      ___setErrNo(ERRNO_CODES.EINTR);
      return -1;
    }
  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      path = Pointer_stringify(path);
      var str;
      try {
        str = FS.readlink(path);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      str = str.slice(0, Math.max(0, bufsize - 1));
      writeStringToMemory(str, buf, true);
      return str.length;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _setgid(gid) {
      // int setgid(gid_t gid);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setgid.html
      // We have just one process/group/user, so it makes no sense to set IDs.
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  function _setpgid(pid, pgid) {
      // int setpgid(pid_t pid, pid_t pgid);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getpgid.html
      // We have just one process/group/user, so it makes no sense to set IDs.
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  var _setpgrp=_setgid;
  var _setregid=_setpgid;
  var _setreuid=_setpgid;
  var _setsid=_setgid;
  var _setuid=_setgid;
  function _sleep(seconds) {
      // unsigned sleep(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sleep.html
      return _usleep(seconds * 1e6);
    }
  function _symlink(path1, path2) {
      // int symlink(const char *path1, const char *path2);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/symlink.html
      path1 = Pointer_stringify(path1);
      path2 = Pointer_stringify(path2);
      try {
        FS.symlink(path1, path2);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _sync() {
      // void sync(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sync.html
      // All our writing is already synchronized. This is a no-op.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _tcgetpgrp(fildes) {
      // pid_t tcgetpgrp(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tcgetpgrp.html
      // Our only process always runs with group ID 0.
      return 0;
    }
  function _tcsetpgrp(fildes, pgid_id) {
      // int tcsetpgrp(int fildes, pid_t pgid_id);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tcsetpgrp.html
      // We don't support multiple processes or groups with ID other than 0.
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _ttyname_r(fildes, name, namesize) {
      // int ttyname_r(int fildes, char *name, size_t namesize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ttyname.html
      var stream = FS.getStream(fildes);
      var ttyname = '/dev/tty';
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      } else if (!_isatty(fildes)) {
         return ___setErrNo(ERRNO_CODES.ENOTTY);
      } else if (namesize < ttyname.length + 1) {
        return ___setErrNo(ERRNO_CODES.ERANGE);
      }
      writeStringToMemory(ttyname, name);
      return 0;
    }function _ttyname(fildes) {
      // char *ttyname(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ttyname.html
      if (!_ttyname.ret) _ttyname.ret = _malloc(256);
      return _ttyname_r(fildes, _ttyname.ret, 256) ? 0 : _ttyname.ret;
    }
  var _ualarm=_alarm;
  var _vfork=_fork;
  function _abort() {
      Module['abort']();
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___strtok_state = Runtime.staticAlloc(4);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,_UnistdTtyname_r,0,_MathSinh,0,_UnistdDup,0,_Unistd_Exit,0,_StdlibAtol,0,_StdTolower,0,_EmDigitalWrite,0,_StdlibAtof,0,_StdioVsnprintf,0,_StdlibAtoi,0,_StdIsascii,0,_StdioFsetpos,0,_MathLdexp,0,_StringStrtok_r,0,_UnistdTruncate,0,_UnistdAccess,0,_UnistdLchown,0,_StdAsctime,0,_MathCos,0,_StdlibStrtod,0,_StringMemchr,0,_StdioSetvbuf,0,_MathAsin,0,_StdioVscanf,0,_StdlibStrtol,0,_StdboolSetupFunc,0,_MathFloor,0,_MathSetupFunc,0,_StdlibMalloc,0,_StringIndex,0,_StdioUngetc,0,_UnistdUalarm,0,_StdioVfscanf,0,_StringStrcmp,0,_StdTime,0,_UnistdReadlink,0,_StdioPrintf,0,_StdioFprintf,0,_StdIspunct,0,_StringStrxfrm,0,_StdioPutchar,0,_MathAtan,0,_StdlibCalloc,0,_UnistdGetuid,0,_UnistdNice,0,_UnistdAlarm,0,_StdioVfprintf,0,_UnistdDup2,0,_UnistdSymlink,0,_StringMemcpy,0,_StdioFseek,0,_UnistdChown,0,_UnistdGetpagesize,0,_UnistdTcsetpgrp,0,_UnistdFdatasync,0,_initPicoc,0,_StdDifftime,0,_MathSin,0,_StringStrncmp,0,_StringStrtok,0,_MathRound,0,_StdIsblank,0,_StdioFerror,0,_StdioSnprintf,0,_UnistdGetppid,0,_UnistdVfork,0,_StdioFwrite,0,_StdIsprint,0,_UnistdGetdtablesize,0,_UnistdRmdir,0,_UnistdSync,0,_StdLocaltime,0,_StdioFread,0,_StringStrncpy,0,_MathLog10,0,_StdIscntrl,0,_UnistdGetgid,0,_StdErrnoSetupFunc,0,_UnistdSetsid,0,_StdioClearerr,0,_StdioFscanf,0,_StdlibSrand,0,_StdlibStrtoul,0,_StringStrerror,0,_StringStrrchr,0,_StdIsalnum,0,_StdIsspace,0,_MathFrexp,0,_StdlibRealloc,0,_StdioFflush,0,_StdioFeof,0,_MathSqrt,0,_StdlibSystem,0,_StdGmtime_r,0,_StdioSprintf,0,_StdlibSetupFunc,0,_UnistdSetreuid,0,_StdStrptime,0,_UnistdFsync,0,_StdioFgetc,0,_UnistdLink,0,_UnistdGetlogin,0,_UnistdTtyname,0,_UnistdFtruncate,0,_MathFabs,0,_StdioGets,0,_UnistdClose,0,_EmSetupFunc,0,_StringStrspn,0,_StdioFgets,0,_StringMemmove,0,_StdlibAbs,0,_StdioRename,0,_StdioVsscanf,0,_UnistdFork,0,_StdioVprintf,0,_MathTanh,0,_StdGmtime,0,_StdToupper,0,_StdioFclose,0,_StdioFtell,0,_UnistdUnlink,0,_UnistdConfstr,0,_UnistdChdir,0,_StdToascii,0,_MathFmod,0,_StringSetupFunc,0,_UnistdFchown,0,_UnistdSbrk,0,_MathModf,0,_StdioRewind,0,_StdlibLabs,0,_UnistdSysconf,0,_StringStrcoll,0,_UnistdGetwd,0,_StringStrpbrk,0,_StdIsalpha,0,_StdioFgetpos,0,_StdioFopen,0,_MathPow,0,_StdTimegm,0,_StdioRemove,0,_StringStrncat,0,_StdlibGetenv,0,_UnistdLockf,0,_UnistdPause,0,_StdlibRand,0,_UnistdPathconf,0,_EmAnalogWrite,0,_UnistdFchdir,0,_UnistdGetegid,0,_StdIsxdigit,0,_StdIslower,0,_StdioGetchar,0,_UnistdSetpgrp,0,_StdioPuts,0,_UnistdSleep,0,_UnistdSetregid,0,_UnistdLseek,0,_StringStrcat,0,_UnistdGetpid,0,_StdioFileno,0,_StdioPutc,0,_UnistdSetuid,0,_MathCeil,0,_UnistdGetcwd,0,_StdlibFree,0,_StringStrcpy,0,_StdIsgraph,0,_UnistdGetlogin_r,0,_UnistdRead,0,_StringStrchr,0,_StdioPerror,0,_StringRindex,0,_UnistdCtermid,0,_UnistdGeteuid,0,_StdioSscanf,0,_StdlibAbort,0,_UnistdGetpgrp,0,_StdioTmpfile,0,_UnistdSetpgid,0,_EmPinMode,0,_UnistdWrite,0,_UnistdGethostid,0,_StdioFputs,0,_StringStrcspn,0,_StringStrdup,0,_UnistdIsatty,0,_StdioVsprintf,0,_StringStrlen,0,_StdTimeSetupFunc,0,_MathAtan2,0,_UnistdTcgetpgrp,0,_StdMktime,0,_StdioScanf,0,_MathCosh,0,_StdioFreopen,0,_StdCtime,0,_StdClock,0,_StringMemset,0,_EmDelay,0,_UnistdFpathconf,0,_StdioSetbuf,0,_UnistdChroot,0,_MathAcos,0,_UnistdSetgid,0,_StdioSetupFunc,0,_StdIsdigit,0,_UnistdUsleep,0,_StringMemcmp,0,_UnistdGetpass,0,_StdlibExit,0,_MathExp,0,_UnistdSetupFunc,0,_StdStrftime,0,_MathLog,0,_StdioFputc,0,_StdIsupper,0,_MathTan,0,_StringStrstr,0];
// EMSCRIPTEN_START_FUNCS
function _main($argc,$argv){
 var label=0;
 var $retval;
 var $argc_addr;
 var $argv_addr;
 $retval=0;
 $argc_addr=$argc;
 $argv_addr=$argv;
 _emscripten_asm_const(12120); //@line 8 "jsrunner.c"
 return 0; //@line 19 "jsrunner.c"
}
Module["_main"] = _main;
function _initPicoc($src){
 var label=0;
 var $src_addr;
 $src_addr=$src;
 _PicocInitialise(131072); //@line 25 "jsrunner.c"
 var $0=$src_addr; //@line 26 "jsrunner.c"
 var $1=$src_addr; //@line 26 "jsrunner.c"
 var $call=_strlen($1); //@line 26 "jsrunner.c"
 _PicocParse(8952,$0,$call,1,0,1); //@line 26 "jsrunner.c"
 var $2=HEAP32[((14840)>>2)]; //@line 28 "jsrunner.c"
 var $3=HEAP32[((14840)>>2)]; //@line 28 "jsrunner.c"
 var $call1=_strlen($3); //@line 28 "jsrunner.c"
 _PicocParse(6904,$2,$call1,1,0,1); //@line 28 "jsrunner.c"
 return; //@line 29 "jsrunner.c"
}
Module["_initPicoc"] = _initPicoc;
function _TableInit(){
 var label=0;
 _TableInitTable(17168,17576,97,1); //@line 10 "table.c"
 var $call=_TableStrRegister(16320); //@line 11 "table.c"
 HEAP32[((17968)>>2)]=$call; //@line 11 "table.c"
 return; //@line 12 "table.c"
}
function _TableInitTable($Tbl,$HashTable,$Size,$OnHeap){
 var label=0;
 var $Tbl_addr;
 var $HashTable_addr;
 var $Size_addr;
 var $OnHeap_addr;
 $Tbl_addr=$Tbl;
 $HashTable_addr=$HashTable;
 $Size_addr=$Size;
 $OnHeap_addr=$OnHeap;
 var $0=$Size_addr; //@line 35 "table.c"
 var $conv=(($0)&65535); //@line 35 "table.c"
 var $1=$Tbl_addr; //@line 35 "table.c"
 var $Size1=(($1)|0); //@line 35 "table.c"
 HEAP16[(($Size1)>>1)]=$conv; //@line 35 "table.c"
 var $2=$OnHeap_addr; //@line 36 "table.c"
 var $conv2=(($2)&65535); //@line 36 "table.c"
 var $3=$Tbl_addr; //@line 36 "table.c"
 var $OnHeap3=(($3+2)|0); //@line 36 "table.c"
 HEAP16[(($OnHeap3)>>1)]=$conv2; //@line 36 "table.c"
 var $4=$HashTable_addr; //@line 37 "table.c"
 var $5=$Tbl_addr; //@line 37 "table.c"
 var $HashTable4=(($5+4)|0); //@line 37 "table.c"
 HEAP32[(($HashTable4)>>2)]=$4; //@line 37 "table.c"
 var $6=$HashTable_addr; //@line 38 "table.c"
 var $7=$6; //@line 38 "table.c"
 var $8=$Size_addr; //@line 38 "table.c"
 var $mul=($8<<2); //@line 38 "table.c"
 _memset($7, 0, $mul); //@line 38 "table.c"
 return; //@line 39 "table.c"
}
function _TableStrRegister($Str){
 var label=0;
 var $Str_addr;
 $Str_addr=$Str;
 var $0=$Str_addr; //@line 169 "table.c"
 var $1=$Str_addr; //@line 169 "table.c"
 var $call=_strlen($1); //@line 169 "table.c"
 var $call1=_TableStrRegister2($0,$call); //@line 169 "table.c"
 return $call1; //@line 169 "table.c"
}
function _TableSet($Tbl,$Key,$Val,$DeclFileName,$DeclLine,$DeclColumn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Key_addr;
 var $Val_addr;
 var $DeclFileName_addr;
 var $DeclLine_addr;
 var $DeclColumn_addr;
 var $AddAt=sp;
 var $FoundEntry;
 var $NewEntry;
 $Tbl_addr=$Tbl;
 $Key_addr=$Key;
 $Val_addr=$Val;
 $DeclFileName_addr=$DeclFileName;
 $DeclLine_addr=$DeclLine;
 $DeclColumn_addr=$DeclColumn;
 var $0=$Tbl_addr; //@line 62 "table.c"
 var $1=$Key_addr; //@line 62 "table.c"
 var $call=_TableSearch($0,$1,$AddAt); //@line 62 "table.c"
 $FoundEntry=$call; //@line 62 "table.c"
 var $2=$FoundEntry; //@line 64 "table.c"
 var $cmp=($2|0)==0; //@line 64 "table.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 64 "table.c"
 case 2: 
 var $3=$Tbl_addr; //@line 66 "table.c"
 var $OnHeap=(($3+2)|0); //@line 66 "table.c"
 var $4=HEAP16[(($OnHeap)>>1)]; //@line 66 "table.c"
 var $conv=(($4<<16)>>16); //@line 66 "table.c"
 var $call1=_VariableAlloc(0,20,$conv); //@line 66 "table.c"
 var $5=$call1; //@line 66 "table.c"
 $NewEntry=$5; //@line 66 "table.c"
 var $6=$DeclFileName_addr; //@line 67 "table.c"
 var $7=$NewEntry; //@line 67 "table.c"
 var $DeclFileName2=(($7+4)|0); //@line 67 "table.c"
 HEAP32[(($DeclFileName2)>>2)]=$6; //@line 67 "table.c"
 var $8=$DeclLine_addr; //@line 68 "table.c"
 var $conv3=(($8)&65535); //@line 68 "table.c"
 var $9=$NewEntry; //@line 68 "table.c"
 var $DeclLine4=(($9+8)|0); //@line 68 "table.c"
 HEAP16[(($DeclLine4)>>1)]=$conv3; //@line 68 "table.c"
 var $10=$DeclColumn_addr; //@line 69 "table.c"
 var $conv5=(($10)&65535); //@line 69 "table.c"
 var $11=$NewEntry; //@line 69 "table.c"
 var $DeclColumn6=(($11+10)|0); //@line 69 "table.c"
 HEAP16[(($DeclColumn6)>>1)]=$conv5; //@line 69 "table.c"
 var $12=$Key_addr; //@line 70 "table.c"
 var $13=$NewEntry; //@line 70 "table.c"
 var $p=(($13+12)|0); //@line 70 "table.c"
 var $v=$p; //@line 70 "table.c"
 var $Key7=(($v)|0); //@line 70 "table.c"
 HEAP32[(($Key7)>>2)]=$12; //@line 70 "table.c"
 var $14=$Val_addr; //@line 71 "table.c"
 var $15=$NewEntry; //@line 71 "table.c"
 var $p8=(($15+12)|0); //@line 71 "table.c"
 var $v9=$p8; //@line 71 "table.c"
 var $Val10=(($v9+4)|0); //@line 71 "table.c"
 HEAP32[(($Val10)>>2)]=$14; //@line 71 "table.c"
 var $16=HEAP32[(($AddAt)>>2)]; //@line 72 "table.c"
 var $17=$Tbl_addr; //@line 72 "table.c"
 var $HashTable=(($17+4)|0); //@line 72 "table.c"
 var $18=HEAP32[(($HashTable)>>2)]; //@line 72 "table.c"
 var $arrayidx=(($18+($16<<2))|0); //@line 72 "table.c"
 var $19=HEAP32[(($arrayidx)>>2)]; //@line 72 "table.c"
 var $20=$NewEntry; //@line 72 "table.c"
 var $Next=(($20)|0); //@line 72 "table.c"
 HEAP32[(($Next)>>2)]=$19; //@line 72 "table.c"
 var $21=$NewEntry; //@line 73 "table.c"
 var $22=HEAP32[(($AddAt)>>2)]; //@line 73 "table.c"
 var $23=$Tbl_addr; //@line 73 "table.c"
 var $HashTable11=(($23+4)|0); //@line 73 "table.c"
 var $24=HEAP32[(($HashTable11)>>2)]; //@line 73 "table.c"
 var $arrayidx12=(($24+($22<<2))|0); //@line 73 "table.c"
 HEAP32[(($arrayidx12)>>2)]=$21; //@line 73 "table.c"
 $retval=1; //@line 74 "table.c"
 label=4;break; //@line 74 "table.c"
 case 3: 
 $retval=0; //@line 77 "table.c"
 label=4;break; //@line 77 "table.c"
 case 4: 
 var $25=$retval; //@line 78 "table.c"
 STACKTOP=sp;return $25; //@line 78 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableSearch($Tbl,$Key,$AddAt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Key_addr;
 var $AddAt_addr;
 var $Entry;
 var $HashValue;
 $Tbl_addr=$Tbl;
 $Key_addr=$Key;
 $AddAt_addr=$AddAt;
 var $0=$Key_addr; //@line 45 "table.c"
 var $1=$0; //@line 45 "table.c"
 var $2=$Tbl_addr; //@line 45 "table.c"
 var $Size=(($2)|0); //@line 45 "table.c"
 var $3=HEAP16[(($Size)>>1)]; //@line 45 "table.c"
 var $conv=(($3<<16)>>16); //@line 45 "table.c"
 var $rem=(((($1>>>0))%(($conv>>>0)))&-1); //@line 45 "table.c"
 $HashValue=$rem; //@line 45 "table.c"
 var $4=$HashValue; //@line 47 "table.c"
 var $5=$Tbl_addr; //@line 47 "table.c"
 var $HashTable=(($5+4)|0); //@line 47 "table.c"
 var $6=HEAP32[(($HashTable)>>2)]; //@line 47 "table.c"
 var $arrayidx=(($6+($4<<2))|0); //@line 47 "table.c"
 var $7=HEAP32[(($arrayidx)>>2)]; //@line 47 "table.c"
 $Entry=$7; //@line 47 "table.c"
 label=2;break; //@line 47 "table.c"
 case 2: 
 var $8=$Entry; //@line 47 "table.c"
 var $cmp=($8|0)!=0; //@line 47 "table.c"
 if($cmp){label=3;break;}else{label=7;break;} //@line 47 "table.c"
 case 3: 
 var $9=$Entry; //@line 49 "table.c"
 var $p=(($9+12)|0); //@line 49 "table.c"
 var $v=$p; //@line 49 "table.c"
 var $Key2=(($v)|0); //@line 49 "table.c"
 var $10=HEAP32[(($Key2)>>2)]; //@line 49 "table.c"
 var $11=$Key_addr; //@line 49 "table.c"
 var $cmp3=($10|0)==($11|0); //@line 49 "table.c"
 if($cmp3){label=4;break;}else{label=5;break;} //@line 49 "table.c"
 case 4: 
 var $12=$Entry; //@line 50 "table.c"
 $retval=$12; //@line 50 "table.c"
 label=8;break; //@line 50 "table.c"
 case 5: 
 label=6;break; //@line 51 "table.c"
 case 6: 
 var $13=$Entry; //@line 47 "table.c"
 var $Next=(($13)|0); //@line 47 "table.c"
 var $14=HEAP32[(($Next)>>2)]; //@line 47 "table.c"
 $Entry=$14; //@line 47 "table.c"
 label=2;break; //@line 47 "table.c"
 case 7: 
 var $15=$HashValue; //@line 53 "table.c"
 var $16=$AddAt_addr; //@line 53 "table.c"
 HEAP32[(($16)>>2)]=$15; //@line 53 "table.c"
 $retval=0; //@line 54 "table.c"
 label=8;break; //@line 54 "table.c"
 case 8: 
 var $17=$retval; //@line 55 "table.c"
 return $17; //@line 55 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableGet($Tbl,$Key,$Val,$DeclFileName,$DeclLine,$DeclColumn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Key_addr;
 var $Val_addr;
 var $DeclFileName_addr;
 var $DeclLine_addr;
 var $DeclColumn_addr;
 var $AddAt=sp;
 var $FoundEntry;
 $Tbl_addr=$Tbl;
 $Key_addr=$Key;
 $Val_addr=$Val;
 $DeclFileName_addr=$DeclFileName;
 $DeclLine_addr=$DeclLine;
 $DeclColumn_addr=$DeclColumn;
 var $0=$Tbl_addr; //@line 85 "table.c"
 var $1=$Key_addr; //@line 85 "table.c"
 var $call=_TableSearch($0,$1,$AddAt); //@line 85 "table.c"
 $FoundEntry=$call; //@line 85 "table.c"
 var $2=$FoundEntry; //@line 86 "table.c"
 var $cmp=($2|0)==0; //@line 86 "table.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 86 "table.c"
 case 2: 
 $retval=0; //@line 87 "table.c"
 label=6;break; //@line 87 "table.c"
 case 3: 
 var $3=$FoundEntry; //@line 89 "table.c"
 var $p=(($3+12)|0); //@line 89 "table.c"
 var $v=$p; //@line 89 "table.c"
 var $Val1=(($v+4)|0); //@line 89 "table.c"
 var $4=HEAP32[(($Val1)>>2)]; //@line 89 "table.c"
 var $5=$Val_addr; //@line 89 "table.c"
 HEAP32[(($5)>>2)]=$4; //@line 89 "table.c"
 var $6=$DeclFileName_addr; //@line 91 "table.c"
 var $cmp2=($6|0)!=0; //@line 91 "table.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 91 "table.c"
 case 4: 
 var $7=$FoundEntry; //@line 93 "table.c"
 var $DeclFileName4=(($7+4)|0); //@line 93 "table.c"
 var $8=HEAP32[(($DeclFileName4)>>2)]; //@line 93 "table.c"
 var $9=$DeclFileName_addr; //@line 93 "table.c"
 HEAP32[(($9)>>2)]=$8; //@line 93 "table.c"
 var $10=$FoundEntry; //@line 94 "table.c"
 var $DeclLine5=(($10+8)|0); //@line 94 "table.c"
 var $11=HEAP16[(($DeclLine5)>>1)]; //@line 94 "table.c"
 var $conv=($11&65535); //@line 94 "table.c"
 var $12=$DeclLine_addr; //@line 94 "table.c"
 HEAP32[(($12)>>2)]=$conv; //@line 94 "table.c"
 var $13=$FoundEntry; //@line 95 "table.c"
 var $DeclColumn6=(($13+10)|0); //@line 95 "table.c"
 var $14=HEAP16[(($DeclColumn6)>>1)]; //@line 95 "table.c"
 var $conv7=($14&65535); //@line 95 "table.c"
 var $15=$DeclColumn_addr; //@line 95 "table.c"
 HEAP32[(($15)>>2)]=$conv7; //@line 95 "table.c"
 label=5;break; //@line 96 "table.c"
 case 5: 
 $retval=1; //@line 98 "table.c"
 label=6;break; //@line 98 "table.c"
 case 6: 
 var $16=$retval; //@line 99 "table.c"
 STACKTOP=sp;return $16; //@line 99 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableDelete($Tbl,$Key){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Key_addr;
 var $EntryPtr;
 var $HashValue;
 var $DeleteEntry;
 var $Val;
 $Tbl_addr=$Tbl;
 $Key_addr=$Key;
 var $0=$Key_addr; //@line 105 "table.c"
 var $1=$0; //@line 105 "table.c"
 var $2=$Tbl_addr; //@line 105 "table.c"
 var $Size=(($2)|0); //@line 105 "table.c"
 var $3=HEAP16[(($Size)>>1)]; //@line 105 "table.c"
 var $conv=(($3<<16)>>16); //@line 105 "table.c"
 var $rem=(((($1>>>0))%(($conv>>>0)))&-1); //@line 105 "table.c"
 $HashValue=$rem; //@line 105 "table.c"
 var $4=$HashValue; //@line 107 "table.c"
 var $5=$Tbl_addr; //@line 107 "table.c"
 var $HashTable=(($5+4)|0); //@line 107 "table.c"
 var $6=HEAP32[(($HashTable)>>2)]; //@line 107 "table.c"
 var $arrayidx=(($6+($4<<2))|0); //@line 107 "table.c"
 $EntryPtr=$arrayidx; //@line 107 "table.c"
 label=2;break; //@line 107 "table.c"
 case 2: 
 var $7=$EntryPtr; //@line 107 "table.c"
 var $8=HEAP32[(($7)>>2)]; //@line 107 "table.c"
 var $cmp=($8|0)!=0; //@line 107 "table.c"
 if($cmp){label=3;break;}else{label=7;break;} //@line 107 "table.c"
 case 3: 
 var $9=$EntryPtr; //@line 109 "table.c"
 var $10=HEAP32[(($9)>>2)]; //@line 109 "table.c"
 var $p=(($10+12)|0); //@line 109 "table.c"
 var $v=$p; //@line 109 "table.c"
 var $Key2=(($v)|0); //@line 109 "table.c"
 var $11=HEAP32[(($Key2)>>2)]; //@line 109 "table.c"
 var $12=$Key_addr; //@line 109 "table.c"
 var $cmp3=($11|0)==($12|0); //@line 109 "table.c"
 if($cmp3){label=4;break;}else{label=5;break;} //@line 109 "table.c"
 case 4: 
 var $13=$EntryPtr; //@line 111 "table.c"
 var $14=HEAP32[(($13)>>2)]; //@line 111 "table.c"
 $DeleteEntry=$14; //@line 111 "table.c"
 var $15=$DeleteEntry; //@line 112 "table.c"
 var $p5=(($15+12)|0); //@line 112 "table.c"
 var $v6=$p5; //@line 112 "table.c"
 var $Val7=(($v6+4)|0); //@line 112 "table.c"
 var $16=HEAP32[(($Val7)>>2)]; //@line 112 "table.c"
 $Val=$16; //@line 112 "table.c"
 var $17=$DeleteEntry; //@line 113 "table.c"
 var $Next=(($17)|0); //@line 113 "table.c"
 var $18=HEAP32[(($Next)>>2)]; //@line 113 "table.c"
 var $19=$EntryPtr; //@line 113 "table.c"
 HEAP32[(($19)>>2)]=$18; //@line 113 "table.c"
 var $20=$DeleteEntry; //@line 114 "table.c"
 var $21=$20; //@line 114 "table.c"
 _HeapFreeMem($21); //@line 114 "table.c"
 var $22=$Val; //@line 116 "table.c"
 $retval=$22; //@line 116 "table.c"
 label=8;break; //@line 116 "table.c"
 case 5: 
 label=6;break; //@line 118 "table.c"
 case 6: 
 var $23=$EntryPtr; //@line 107 "table.c"
 var $24=HEAP32[(($23)>>2)]; //@line 107 "table.c"
 var $Next8=(($24)|0); //@line 107 "table.c"
 $EntryPtr=$Next8; //@line 107 "table.c"
 label=2;break; //@line 107 "table.c"
 case 7: 
 $retval=0; //@line 120 "table.c"
 label=8;break; //@line 120 "table.c"
 case 8: 
 var $25=$retval; //@line 121 "table.c"
 return $25; //@line 121 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableSetIdentifier($Tbl,$Ident,$IdentLen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Ident_addr;
 var $IdentLen_addr;
 var $AddAt=sp;
 var $FoundEntry;
 var $NewEntry;
 $Tbl_addr=$Tbl;
 $Ident_addr=$Ident;
 $IdentLen_addr=$IdentLen;
 var $0=$Tbl_addr; //@line 143 "table.c"
 var $1=$Ident_addr; //@line 143 "table.c"
 var $2=$IdentLen_addr; //@line 143 "table.c"
 var $call=_TableSearchIdentifier($0,$1,$2,$AddAt); //@line 143 "table.c"
 $FoundEntry=$call; //@line 143 "table.c"
 var $3=$FoundEntry; //@line 145 "table.c"
 var $cmp=($3|0)!=0; //@line 145 "table.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 145 "table.c"
 case 2: 
 var $4=$FoundEntry; //@line 146 "table.c"
 var $p=(($4+12)|0); //@line 146 "table.c"
 var $Key=$p; //@line 146 "table.c"
 var $arrayidx=(($Key)|0); //@line 146 "table.c"
 $retval=$arrayidx; //@line 146 "table.c"
 label=6;break; //@line 146 "table.c"
 case 3: 
 var $5=$IdentLen_addr; //@line 149 "table.c"
 var $add=((($5)+(12))|0); //@line 149 "table.c"
 var $add1=((($add)+(1))|0); //@line 149 "table.c"
 var $call2=_HeapAllocMem($add1); //@line 149 "table.c"
 var $6=$call2; //@line 149 "table.c"
 $NewEntry=$6; //@line 149 "table.c"
 var $7=$NewEntry; //@line 150 "table.c"
 var $cmp3=($7|0)==0; //@line 150 "table.c"
 if($cmp3){label=4;break;}else{label=5;break;} //@line 150 "table.c"
 case 4: 
 _ProgramFail(0,10312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 151 "table.c"
 label=5;break; //@line 151 "table.c"
 case 5: 
 var $8=$NewEntry; //@line 153 "table.c"
 var $p5=(($8+12)|0); //@line 153 "table.c"
 var $Key6=$p5; //@line 153 "table.c"
 var $arrayidx7=(($Key6)|0); //@line 153 "table.c"
 var $9=$Ident_addr; //@line 153 "table.c"
 var $10=$IdentLen_addr; //@line 153 "table.c"
 var $call8=_strncpy($arrayidx7,$9,$10); //@line 153 "table.c"
 var $11=$IdentLen_addr; //@line 154 "table.c"
 var $12=$NewEntry; //@line 154 "table.c"
 var $p9=(($12+12)|0); //@line 154 "table.c"
 var $Key10=$p9; //@line 154 "table.c"
 var $arrayidx11=(($Key10+$11)|0); //@line 154 "table.c"
 HEAP8[($arrayidx11)]=0; //@line 154 "table.c"
 var $13=HEAP32[(($AddAt)>>2)]; //@line 155 "table.c"
 var $14=$Tbl_addr; //@line 155 "table.c"
 var $HashTable=(($14+4)|0); //@line 155 "table.c"
 var $15=HEAP32[(($HashTable)>>2)]; //@line 155 "table.c"
 var $arrayidx12=(($15+($13<<2))|0); //@line 155 "table.c"
 var $16=HEAP32[(($arrayidx12)>>2)]; //@line 155 "table.c"
 var $17=$NewEntry; //@line 155 "table.c"
 var $Next=(($17)|0); //@line 155 "table.c"
 HEAP32[(($Next)>>2)]=$16; //@line 155 "table.c"
 var $18=$NewEntry; //@line 156 "table.c"
 var $19=HEAP32[(($AddAt)>>2)]; //@line 156 "table.c"
 var $20=$Tbl_addr; //@line 156 "table.c"
 var $HashTable13=(($20+4)|0); //@line 156 "table.c"
 var $21=HEAP32[(($HashTable13)>>2)]; //@line 156 "table.c"
 var $arrayidx14=(($21+($19<<2))|0); //@line 156 "table.c"
 HEAP32[(($arrayidx14)>>2)]=$18; //@line 156 "table.c"
 var $22=$NewEntry; //@line 157 "table.c"
 var $p15=(($22+12)|0); //@line 157 "table.c"
 var $Key16=$p15; //@line 157 "table.c"
 var $arrayidx17=(($Key16)|0); //@line 157 "table.c"
 $retval=$arrayidx17; //@line 157 "table.c"
 label=6;break; //@line 157 "table.c"
 case 6: 
 var $23=$retval; //@line 159 "table.c"
 STACKTOP=sp;return $23; //@line 159 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableSearchIdentifier($Tbl,$Key,$Len,$AddAt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Tbl_addr;
 var $Key_addr;
 var $Len_addr;
 var $AddAt_addr;
 var $Entry;
 var $HashValue;
 $Tbl_addr=$Tbl;
 $Key_addr=$Key;
 $Len_addr=$Len;
 $AddAt_addr=$AddAt;
 var $0=$Key_addr; //@line 127 "table.c"
 var $1=$Len_addr; //@line 127 "table.c"
 var $call=_TableHash($0,$1); //@line 127 "table.c"
 var $2=$Tbl_addr; //@line 127 "table.c"
 var $Size=(($2)|0); //@line 127 "table.c"
 var $3=HEAP16[(($Size)>>1)]; //@line 127 "table.c"
 var $conv=(($3<<16)>>16); //@line 127 "table.c"
 var $rem=(((($call>>>0))%(($conv>>>0)))&-1); //@line 127 "table.c"
 $HashValue=$rem; //@line 127 "table.c"
 var $4=$HashValue; //@line 129 "table.c"
 var $5=$Tbl_addr; //@line 129 "table.c"
 var $HashTable=(($5+4)|0); //@line 129 "table.c"
 var $6=HEAP32[(($HashTable)>>2)]; //@line 129 "table.c"
 var $arrayidx=(($6+($4<<2))|0); //@line 129 "table.c"
 var $7=HEAP32[(($arrayidx)>>2)]; //@line 129 "table.c"
 $Entry=$7; //@line 129 "table.c"
 label=2;break; //@line 129 "table.c"
 case 2: 
 var $8=$Entry; //@line 129 "table.c"
 var $cmp=($8|0)!=0; //@line 129 "table.c"
 if($cmp){label=3;break;}else{label=8;break;} //@line 129 "table.c"
 case 3: 
 var $9=$Entry; //@line 131 "table.c"
 var $p=(($9+12)|0); //@line 131 "table.c"
 var $Key2=$p; //@line 131 "table.c"
 var $arrayidx3=(($Key2)|0); //@line 131 "table.c"
 var $10=$Key_addr; //@line 131 "table.c"
 var $11=$Len_addr; //@line 131 "table.c"
 var $call4=_strncmp($arrayidx3,$10,$11); //@line 131 "table.c"
 var $cmp5=($call4|0)==0; //@line 131 "table.c"
 if($cmp5){label=4;break;}else{label=6;break;} //@line 131 "table.c"
 case 4: 
 var $12=$Len_addr; //@line 131 "table.c"
 var $13=$Entry; //@line 131 "table.c"
 var $p7=(($13+12)|0); //@line 131 "table.c"
 var $Key8=$p7; //@line 131 "table.c"
 var $arrayidx9=(($Key8+$12)|0); //@line 131 "table.c"
 var $14=HEAP8[($arrayidx9)]; //@line 131 "table.c"
 var $conv10=(($14<<24)>>24); //@line 131 "table.c"
 var $cmp11=($conv10|0)==0; //@line 131 "table.c"
 if($cmp11){label=5;break;}else{label=6;break;} //@line 131 "table.c"
 case 5: 
 var $15=$Entry; //@line 132 "table.c"
 $retval=$15; //@line 132 "table.c"
 label=9;break; //@line 132 "table.c"
 case 6: 
 label=7;break; //@line 133 "table.c"
 case 7: 
 var $16=$Entry; //@line 129 "table.c"
 var $Next=(($16)|0); //@line 129 "table.c"
 var $17=HEAP32[(($Next)>>2)]; //@line 129 "table.c"
 $Entry=$17; //@line 129 "table.c"
 label=2;break; //@line 129 "table.c"
 case 8: 
 var $18=$HashValue; //@line 135 "table.c"
 var $19=$AddAt_addr; //@line 135 "table.c"
 HEAP32[(($19)>>2)]=$18; //@line 135 "table.c"
 $retval=0; //@line 136 "table.c"
 label=9;break; //@line 136 "table.c"
 case 9: 
 var $20=$retval; //@line 137 "table.c"
 return $20; //@line 137 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TableStrRegister2($Str,$Len){
 var label=0;
 var $Str_addr;
 var $Len_addr;
 $Str_addr=$Str;
 $Len_addr=$Len;
 var $0=$Str_addr; //@line 164 "table.c"
 var $1=$Len_addr; //@line 164 "table.c"
 var $call=_TableSetIdentifier(17168,$0,$1); //@line 164 "table.c"
 return $call; //@line 164 "table.c"
}
function _TableHash($Key,$Len){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Key_addr;
 var $Len_addr;
 var $Hash;
 var $Offset;
 var $Count;
 $Key_addr=$Key;
 $Len_addr=$Len;
 var $0=$Len_addr; //@line 17 "table.c"
 $Hash=$0; //@line 17 "table.c"
 $Count=0; //@line 21 "table.c"
 $Offset=8; //@line 21 "table.c"
 label=2;break; //@line 21 "table.c"
 case 2: 
 var $1=$Count; //@line 21 "table.c"
 var $2=$Len_addr; //@line 21 "table.c"
 var $cmp=($1|0)<($2|0); //@line 21 "table.c"
 if($cmp){label=3;break;}else{label=7;break;} //@line 21 "table.c"
 case 3: 
 var $3=$Offset; //@line 23 "table.c"
 var $cmp1=($3>>>0)>25; //@line 23 "table.c"
 if($cmp1){label=4;break;}else{label=5;break;} //@line 23 "table.c"
 case 4: 
 var $4=$Offset; //@line 24 "table.c"
 var $sub=((($4)-(26))|0); //@line 24 "table.c"
 $Offset=$sub; //@line 24 "table.c"
 label=5;break; //@line 24 "table.c"
 case 5: 
 var $5=$Key_addr; //@line 26 "table.c"
 var $incdec_ptr=(($5+1)|0); //@line 26 "table.c"
 $Key_addr=$incdec_ptr; //@line 26 "table.c"
 var $6=HEAP8[($5)]; //@line 26 "table.c"
 var $conv=(($6<<24)>>24); //@line 26 "table.c"
 var $7=$Offset; //@line 26 "table.c"
 var $shl=$conv<<$7; //@line 26 "table.c"
 var $8=$Hash; //@line 26 "table.c"
 var $xor=$8^$shl; //@line 26 "table.c"
 $Hash=$xor; //@line 26 "table.c"
 label=6;break; //@line 27 "table.c"
 case 6: 
 var $9=$Count; //@line 21 "table.c"
 var $inc=((($9)+(1))|0); //@line 21 "table.c"
 $Count=$inc; //@line 21 "table.c"
 var $10=$Offset; //@line 21 "table.c"
 var $add=((($10)+(7))|0); //@line 21 "table.c"
 $Offset=$add; //@line 21 "table.c"
 label=2;break; //@line 21 "table.c"
 case 7: 
 var $11=$Hash; //@line 29 "table.c"
 return $11; //@line 29 "table.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexInit(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Count;
 $Count=0; //@line 104 "lex.c"
 label=2;break; //@line 104 "lex.c"
 case 2: 
 var $0=$Count; //@line 104 "lex.c"
 var $cmp=($0>>>0)<39; //@line 104 "lex.c"
 if($cmp){label=3;break;}else{label=5;break;} //@line 104 "lex.c"
 case 3: 
 var $1=$Count; //@line 105 "lex.c"
 var $arrayidx=((14368+((($1)*(12))&-1))|0); //@line 105 "lex.c"
 var $Word=(($arrayidx)|0); //@line 105 "lex.c"
 var $2=HEAP32[(($Word)>>2)]; //@line 105 "lex.c"
 var $call=_TableStrRegister($2); //@line 105 "lex.c"
 var $3=$Count; //@line 105 "lex.c"
 var $arrayidx1=((14368+((($3)*(12))&-1))|0); //@line 105 "lex.c"
 var $SharedWord=(($arrayidx1+8)|0); //@line 105 "lex.c"
 HEAP32[(($SharedWord)>>2)]=$call; //@line 105 "lex.c"
 label=4;break; //@line 105 "lex.c"
 case 4: 
 var $4=$Count; //@line 104 "lex.c"
 var $inc=((($4)+(1))|0); //@line 104 "lex.c"
 $Count=$inc; //@line 104 "lex.c"
 label=2;break; //@line 104 "lex.c"
 case 5: 
 return; //@line 106 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexCheckReservedWord($Word){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Word_addr;
 var $Count;
 $Word_addr=$Word;
 $Count=0; //@line 119 "lex.c"
 label=2;break; //@line 119 "lex.c"
 case 2: 
 var $0=$Count; //@line 119 "lex.c"
 var $cmp=($0>>>0)<39; //@line 119 "lex.c"
 if($cmp){label=3;break;}else{label=7;break;} //@line 119 "lex.c"
 case 3: 
 var $1=$Word_addr; //@line 121 "lex.c"
 var $2=$Count; //@line 121 "lex.c"
 var $arrayidx=((14368+((($2)*(12))&-1))|0); //@line 121 "lex.c"
 var $SharedWord=(($arrayidx+8)|0); //@line 121 "lex.c"
 var $3=HEAP32[(($SharedWord)>>2)]; //@line 121 "lex.c"
 var $cmp1=($1|0)==($3|0); //@line 121 "lex.c"
 if($cmp1){label=4;break;}else{label=5;break;} //@line 121 "lex.c"
 case 4: 
 var $4=$Count; //@line 122 "lex.c"
 var $arrayidx2=((14368+((($4)*(12))&-1))|0); //@line 122 "lex.c"
 var $Token=(($arrayidx2+4)|0); //@line 122 "lex.c"
 var $5=HEAP32[(($Token)>>2)]; //@line 122 "lex.c"
 $retval=$5; //@line 122 "lex.c"
 label=8;break; //@line 122 "lex.c"
 case 5: 
 label=6;break; //@line 123 "lex.c"
 case 6: 
 var $6=$Count; //@line 119 "lex.c"
 var $inc=((($6)+(1))|0); //@line 119 "lex.c"
 $Count=$inc; //@line 119 "lex.c"
 label=2;break; //@line 119 "lex.c"
 case 7: 
 $retval=0; //@line 125 "lex.c"
 label=8;break; //@line 125 "lex.c"
 case 8: 
 var $7=$retval; //@line 126 "lex.c"
 return $7; //@line 126 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexGetNumber($Lexer,$Value){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Lexer_addr;
 var $Value_addr;
 var $Result;
 var $Base;
 var $ResultToken;
 var $FPResult;
 var $FPDiv;
 var $ExponentMultiplier;
 $Lexer_addr=$Lexer;
 $Value_addr=$Value;
 $Result=0; //@line 131 "lex.c"
 $Base=10; //@line 132 "lex.c"
 var $0=$Lexer_addr; //@line 139 "lex.c"
 var $Pos=(($0)|0); //@line 139 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 139 "lex.c"
 var $2=HEAP8[($1)]; //@line 139 "lex.c"
 var $conv=(($2<<24)>>24); //@line 139 "lex.c"
 var $cmp=($conv|0)==48; //@line 139 "lex.c"
 if($cmp){label=2;break;}else{label=15;break;} //@line 139 "lex.c"
 case 2: 
 var $3=$Lexer_addr; //@line 142 "lex.c"
 var $Pos2=(($3)|0); //@line 142 "lex.c"
 var $4=HEAP32[(($Pos2)>>2)]; //@line 142 "lex.c"
 var $incdec_ptr=(($4+1)|0); //@line 142 "lex.c"
 HEAP32[(($Pos2)>>2)]=$incdec_ptr; //@line 142 "lex.c"
 var $5=$Lexer_addr; //@line 142 "lex.c"
 var $CharacterPos=(($5+16)|0); //@line 142 "lex.c"
 var $6=HEAP32[(($CharacterPos)>>2)]; //@line 142 "lex.c"
 var $inc=((($6)+(1))|0); //@line 142 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=$inc; //@line 142 "lex.c"
 var $7=$Lexer_addr; //@line 143 "lex.c"
 var $Pos3=(($7)|0); //@line 143 "lex.c"
 var $8=HEAP32[(($Pos3)>>2)]; //@line 143 "lex.c"
 var $9=$Lexer_addr; //@line 143 "lex.c"
 var $End=(($9+4)|0); //@line 143 "lex.c"
 var $10=HEAP32[(($End)>>2)]; //@line 143 "lex.c"
 var $cmp4=($8|0)!=($10|0); //@line 143 "lex.c"
 if($cmp4){label=3;break;}else{label=14;break;} //@line 143 "lex.c"
 case 3: 
 var $11=$Lexer_addr; //@line 145 "lex.c"
 var $Pos7=(($11)|0); //@line 145 "lex.c"
 var $12=HEAP32[(($Pos7)>>2)]; //@line 145 "lex.c"
 var $13=HEAP8[($12)]; //@line 145 "lex.c"
 var $conv8=(($13<<24)>>24); //@line 145 "lex.c"
 var $cmp9=($conv8|0)==120; //@line 145 "lex.c"
 if($cmp9){label=5;break;}else{label=4;break;} //@line 145 "lex.c"
 case 4: 
 var $14=$Lexer_addr; //@line 145 "lex.c"
 var $Pos11=(($14)|0); //@line 145 "lex.c"
 var $15=HEAP32[(($Pos11)>>2)]; //@line 145 "lex.c"
 var $16=HEAP8[($15)]; //@line 145 "lex.c"
 var $conv12=(($16<<24)>>24); //@line 145 "lex.c"
 var $cmp13=($conv12|0)==88; //@line 145 "lex.c"
 if($cmp13){label=5;break;}else{label=6;break;} //@line 145 "lex.c"
 case 5: 
 $Base=16; //@line 146 "lex.c"
 var $17=$Lexer_addr; //@line 146 "lex.c"
 var $Pos16=(($17)|0); //@line 146 "lex.c"
 var $18=HEAP32[(($Pos16)>>2)]; //@line 146 "lex.c"
 var $incdec_ptr17=(($18+1)|0); //@line 146 "lex.c"
 HEAP32[(($Pos16)>>2)]=$incdec_ptr17; //@line 146 "lex.c"
 var $19=$Lexer_addr; //@line 146 "lex.c"
 var $CharacterPos18=(($19+16)|0); //@line 146 "lex.c"
 var $20=HEAP32[(($CharacterPos18)>>2)]; //@line 146 "lex.c"
 var $inc19=((($20)+(1))|0); //@line 146 "lex.c"
 HEAP32[(($CharacterPos18)>>2)]=$inc19; //@line 146 "lex.c"
 label=13;break; //@line 146 "lex.c"
 case 6: 
 var $21=$Lexer_addr; //@line 147 "lex.c"
 var $Pos20=(($21)|0); //@line 147 "lex.c"
 var $22=HEAP32[(($Pos20)>>2)]; //@line 147 "lex.c"
 var $23=HEAP8[($22)]; //@line 147 "lex.c"
 var $conv21=(($23<<24)>>24); //@line 147 "lex.c"
 var $cmp22=($conv21|0)==98; //@line 147 "lex.c"
 if($cmp22){label=8;break;}else{label=7;break;} //@line 147 "lex.c"
 case 7: 
 var $24=$Lexer_addr; //@line 147 "lex.c"
 var $Pos25=(($24)|0); //@line 147 "lex.c"
 var $25=HEAP32[(($Pos25)>>2)]; //@line 147 "lex.c"
 var $26=HEAP8[($25)]; //@line 147 "lex.c"
 var $conv26=(($26<<24)>>24); //@line 147 "lex.c"
 var $cmp27=($conv26|0)==66; //@line 147 "lex.c"
 if($cmp27){label=8;break;}else{label=9;break;} //@line 147 "lex.c"
 case 8: 
 $Base=2; //@line 148 "lex.c"
 var $27=$Lexer_addr; //@line 148 "lex.c"
 var $Pos30=(($27)|0); //@line 148 "lex.c"
 var $28=HEAP32[(($Pos30)>>2)]; //@line 148 "lex.c"
 var $incdec_ptr31=(($28+1)|0); //@line 148 "lex.c"
 HEAP32[(($Pos30)>>2)]=$incdec_ptr31; //@line 148 "lex.c"
 var $29=$Lexer_addr; //@line 148 "lex.c"
 var $CharacterPos32=(($29+16)|0); //@line 148 "lex.c"
 var $30=HEAP32[(($CharacterPos32)>>2)]; //@line 148 "lex.c"
 var $inc33=((($30)+(1))|0); //@line 148 "lex.c"
 HEAP32[(($CharacterPos32)>>2)]=$inc33; //@line 148 "lex.c"
 label=12;break; //@line 148 "lex.c"
 case 9: 
 var $31=$Lexer_addr; //@line 149 "lex.c"
 var $Pos35=(($31)|0); //@line 149 "lex.c"
 var $32=HEAP32[(($Pos35)>>2)]; //@line 149 "lex.c"
 var $33=HEAP8[($32)]; //@line 149 "lex.c"
 var $conv36=(($33<<24)>>24); //@line 149 "lex.c"
 var $cmp37=($conv36|0)!=46; //@line 149 "lex.c"
 if($cmp37){label=10;break;}else{label=11;break;} //@line 149 "lex.c"
 case 10: 
 $Base=8; //@line 150 "lex.c"
 label=11;break; //@line 150 "lex.c"
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break; //@line 151 "lex.c"
 case 14: 
 label=15;break; //@line 152 "lex.c"
 case 15: 
 label=16;break; //@line 155 "lex.c"
 case 16: 
 var $34=$Lexer_addr; //@line 155 "lex.c"
 var $Pos44=(($34)|0); //@line 155 "lex.c"
 var $35=HEAP32[(($Pos44)>>2)]; //@line 155 "lex.c"
 var $36=$Lexer_addr; //@line 155 "lex.c"
 var $End45=(($36+4)|0); //@line 155 "lex.c"
 var $37=HEAP32[(($End45)>>2)]; //@line 155 "lex.c"
 var $cmp46=($35|0)!=($37|0); //@line 155 "lex.c"
 if($cmp46){label=17;break;}else{var $62=0;label=32;break;} //@line 155 "lex.c"
 case 17: 
 var $38=$Lexer_addr; //@line 155 "lex.c"
 var $Pos48=(($38)|0); //@line 155 "lex.c"
 var $39=HEAP32[(($Pos48)>>2)]; //@line 155 "lex.c"
 var $40=HEAP8[($39)]; //@line 155 "lex.c"
 var $conv49=(($40<<24)>>24); //@line 155 "lex.c"
 var $cmp50=($conv49|0)>=48; //@line 155 "lex.c"
 if($cmp50){label=18;break;}else{label=22;break;} //@line 155 "lex.c"
 case 18: 
 var $41=$Lexer_addr; //@line 155 "lex.c"
 var $Pos52=(($41)|0); //@line 155 "lex.c"
 var $42=HEAP32[(($Pos52)>>2)]; //@line 155 "lex.c"
 var $43=HEAP8[($42)]; //@line 155 "lex.c"
 var $conv53=(($43<<24)>>24); //@line 155 "lex.c"
 var $44=$Base; //@line 155 "lex.c"
 var $cmp54=($44|0)<10; //@line 155 "lex.c"
 if($cmp54){label=19;break;}else{label=20;break;} //@line 155 "lex.c"
 case 19: 
 var $45=$Base; //@line 155 "lex.c"
 var $cond=$45;label=21;break; //@line 155 "lex.c"
 case 20: 
 var $cond=10;label=21;break; //@line 155 "lex.c"
 case 21: 
 var $cond; //@line 155 "lex.c"
 var $add=((($cond)+(48))|0); //@line 155 "lex.c"
 var $cmp56=($conv53|0)<($add|0); //@line 155 "lex.c"
 if($cmp56){var $61=1;label=31;break;}else{label=22;break;} //@line 155 "lex.c"
 case 22: 
 var $46=$Base; //@line 155 "lex.c"
 var $cmp58=($46|0)>10; //@line 155 "lex.c"
 if($cmp58){label=23;break;}else{label=29;break;} //@line 155 "lex.c"
 case 23: 
 var $47=$Lexer_addr; //@line 155 "lex.c"
 var $Pos61=(($47)|0); //@line 155 "lex.c"
 var $48=HEAP32[(($Pos61)>>2)]; //@line 155 "lex.c"
 var $49=HEAP8[($48)]; //@line 155 "lex.c"
 var $conv62=(($49<<24)>>24); //@line 155 "lex.c"
 var $cmp63=($conv62|0)>=97; //@line 155 "lex.c"
 if($cmp63){label=24;break;}else{label=25;break;} //@line 155 "lex.c"
 case 24: 
 var $50=$Lexer_addr; //@line 155 "lex.c"
 var $Pos66=(($50)|0); //@line 155 "lex.c"
 var $51=HEAP32[(($Pos66)>>2)]; //@line 155 "lex.c"
 var $52=HEAP8[($51)]; //@line 155 "lex.c"
 var $conv67=(($52<<24)>>24); //@line 155 "lex.c"
 var $cmp68=($conv67|0)<=102; //@line 155 "lex.c"
 if($cmp68){var $60=1;label=28;break;}else{label=25;break;} //@line 155 "lex.c"
 case 25: 
 var $53=$Lexer_addr; //@line 155 "lex.c"
 var $Pos71=(($53)|0); //@line 155 "lex.c"
 var $54=HEAP32[(($Pos71)>>2)]; //@line 155 "lex.c"
 var $55=HEAP8[($54)]; //@line 155 "lex.c"
 var $conv72=(($55<<24)>>24); //@line 155 "lex.c"
 var $cmp73=($conv72|0)>=65; //@line 155 "lex.c"
 if($cmp73){label=26;break;}else{var $59=0;label=27;break;} //@line 155 "lex.c"
 case 26: 
 var $56=$Lexer_addr; //@line 155 "lex.c"
 var $Pos76=(($56)|0); //@line 155 "lex.c"
 var $57=HEAP32[(($Pos76)>>2)]; //@line 155 "lex.c"
 var $58=HEAP8[($57)]; //@line 155 "lex.c"
 var $conv77=(($58<<24)>>24); //@line 155 "lex.c"
 var $cmp78=($conv77|0)<=70; //@line 155 "lex.c"
 var $59=$cmp78;label=27;break;
 case 27: 
 var $59;
 var $60=$59;label=28;break;
 case 28: 
 var $60;
 var $lor_ext=($60&1);
 var $cond82=$lor_ext;label=30;break;
 case 29: 
 var $cond82=0;label=30;break;
 case 30: 
 var $cond82;
 var $tobool=($cond82|0)!=0;
 var $61=$tobool;label=31;break;
 case 31: 
 var $61;
 var $62=$61;label=32;break;
 case 32: 
 var $62;
 if($62){label=33;break;}else{label=41;break;}
 case 33: 
 var $63=$Result; //@line 156 "lex.c"
 var $64=$Base; //@line 156 "lex.c"
 var $mul=(Math_imul($63,$64)|0); //@line 156 "lex.c"
 var $65=$Lexer_addr; //@line 156 "lex.c"
 var $Pos86=(($65)|0); //@line 156 "lex.c"
 var $66=HEAP32[(($Pos86)>>2)]; //@line 156 "lex.c"
 var $67=HEAP8[($66)]; //@line 156 "lex.c"
 var $conv87=(($67<<24)>>24); //@line 156 "lex.c"
 var $cmp88=($conv87|0)<=57; //@line 156 "lex.c"
 if($cmp88){label=34;break;}else{label=35;break;} //@line 156 "lex.c"
 case 34: 
 var $68=$Lexer_addr; //@line 156 "lex.c"
 var $Pos91=(($68)|0); //@line 156 "lex.c"
 var $69=HEAP32[(($Pos91)>>2)]; //@line 156 "lex.c"
 var $70=HEAP8[($69)]; //@line 156 "lex.c"
 var $conv92=(($70<<24)>>24); //@line 156 "lex.c"
 var $sub=((($conv92)-(48))|0); //@line 156 "lex.c"
 var $cond111=$sub;label=39;break; //@line 156 "lex.c"
 case 35: 
 var $71=$Lexer_addr; //@line 156 "lex.c"
 var $Pos94=(($71)|0); //@line 156 "lex.c"
 var $72=HEAP32[(($Pos94)>>2)]; //@line 156 "lex.c"
 var $73=HEAP8[($72)]; //@line 156 "lex.c"
 var $conv95=(($73<<24)>>24); //@line 156 "lex.c"
 var $cmp96=($conv95|0)<=70; //@line 156 "lex.c"
 if($cmp96){label=36;break;}else{label=37;break;} //@line 156 "lex.c"
 case 36: 
 var $74=$Lexer_addr; //@line 156 "lex.c"
 var $Pos99=(($74)|0); //@line 156 "lex.c"
 var $75=HEAP32[(($Pos99)>>2)]; //@line 156 "lex.c"
 var $76=HEAP8[($75)]; //@line 156 "lex.c"
 var $conv100=(($76<<24)>>24); //@line 156 "lex.c"
 var $sub101=((($conv100)-(65))|0); //@line 156 "lex.c"
 var $add102=((($sub101)+(10))|0); //@line 156 "lex.c"
 var $cond109=$add102;label=38;break; //@line 156 "lex.c"
 case 37: 
 var $77=$Lexer_addr; //@line 156 "lex.c"
 var $Pos104=(($77)|0); //@line 156 "lex.c"
 var $78=HEAP32[(($Pos104)>>2)]; //@line 156 "lex.c"
 var $79=HEAP8[($78)]; //@line 156 "lex.c"
 var $conv105=(($79<<24)>>24); //@line 156 "lex.c"
 var $sub106=((($conv105)-(97))|0); //@line 156 "lex.c"
 var $add107=((($sub106)+(10))|0); //@line 156 "lex.c"
 var $cond109=$add107;label=38;break; //@line 156 "lex.c"
 case 38: 
 var $cond109; //@line 156 "lex.c"
 var $cond111=$cond109;label=39;break; //@line 156 "lex.c"
 case 39: 
 var $cond111; //@line 156 "lex.c"
 var $add112=((($mul)+($cond111))|0); //@line 156 "lex.c"
 $Result=$add112; //@line 156 "lex.c"
 label=40;break; //@line 156 "lex.c"
 case 40: 
 var $80=$Lexer_addr; //@line 155 "lex.c"
 var $Pos113=(($80)|0); //@line 155 "lex.c"
 var $81=HEAP32[(($Pos113)>>2)]; //@line 155 "lex.c"
 var $incdec_ptr114=(($81+1)|0); //@line 155 "lex.c"
 HEAP32[(($Pos113)>>2)]=$incdec_ptr114; //@line 155 "lex.c"
 var $82=$Lexer_addr; //@line 155 "lex.c"
 var $CharacterPos115=(($82+16)|0); //@line 155 "lex.c"
 var $83=HEAP32[(($CharacterPos115)>>2)]; //@line 155 "lex.c"
 var $inc116=((($83)+(1))|0); //@line 155 "lex.c"
 HEAP32[(($CharacterPos115)>>2)]=$inc116; //@line 155 "lex.c"
 label=16;break; //@line 155 "lex.c"
 case 41: 
 var $84=$Result; //@line 158 "lex.c"
 var $cmp117=($84|0)>=0; //@line 158 "lex.c"
 if($cmp117){label=42;break;}else{label=44;break;} //@line 158 "lex.c"
 case 42: 
 var $85=$Result; //@line 158 "lex.c"
 var $cmp120=($85|0)<=255; //@line 158 "lex.c"
 if($cmp120){label=43;break;}else{label=44;break;} //@line 158 "lex.c"
 case 43: 
 var $86=$Value_addr; //@line 160 "lex.c"
 var $Typ=(($86)|0); //@line 160 "lex.c"
 HEAP32[(($Typ)>>2)]=19088; //@line 160 "lex.c"
 var $87=$Result; //@line 161 "lex.c"
 var $conv123=(($87)&255); //@line 161 "lex.c"
 var $88=$Value_addr; //@line 161 "lex.c"
 var $Val=(($88+4)|0); //@line 161 "lex.c"
 var $89=HEAP32[(($Val)>>2)]; //@line 161 "lex.c"
 var $Character=$89; //@line 161 "lex.c"
 HEAP8[($Character)]=$conv123; //@line 161 "lex.c"
 $ResultToken=49; //@line 162 "lex.c"
 label=45;break; //@line 163 "lex.c"
 case 44: 
 var $90=$Value_addr; //@line 166 "lex.c"
 var $Typ125=(($90)|0); //@line 166 "lex.c"
 HEAP32[(($Typ125)>>2)]=18408; //@line 166 "lex.c"
 var $91=$Result; //@line 167 "lex.c"
 var $92=$Value_addr; //@line 167 "lex.c"
 var $Val126=(($92+4)|0); //@line 167 "lex.c"
 var $93=HEAP32[(($Val126)>>2)]; //@line 167 "lex.c"
 var $Integer=$93; //@line 167 "lex.c"
 HEAP32[(($Integer)>>2)]=$91; //@line 167 "lex.c"
 $ResultToken=46; //@line 168 "lex.c"
 label=45;break;
 case 45: 
 var $94=$Lexer_addr; //@line 171 "lex.c"
 var $Pos128=(($94)|0); //@line 171 "lex.c"
 var $95=HEAP32[(($Pos128)>>2)]; //@line 171 "lex.c"
 var $96=$Lexer_addr; //@line 171 "lex.c"
 var $End129=(($96+4)|0); //@line 171 "lex.c"
 var $97=HEAP32[(($End129)>>2)]; //@line 171 "lex.c"
 var $cmp130=($95|0)==($97|0); //@line 171 "lex.c"
 if($cmp130){label=46;break;}else{label=47;break;} //@line 171 "lex.c"
 case 46: 
 var $98=$ResultToken; //@line 172 "lex.c"
 $retval=$98; //@line 172 "lex.c"
 label=113;break; //@line 172 "lex.c"
 case 47: 
 var $99=$Lexer_addr; //@line 174 "lex.c"
 var $Pos134=(($99)|0); //@line 174 "lex.c"
 var $100=HEAP32[(($Pos134)>>2)]; //@line 174 "lex.c"
 var $101=HEAP8[($100)]; //@line 174 "lex.c"
 var $conv135=(($101<<24)>>24); //@line 174 "lex.c"
 var $cmp136=($conv135|0)==108; //@line 174 "lex.c"
 if($cmp136){label=49;break;}else{label=48;break;} //@line 174 "lex.c"
 case 48: 
 var $102=$Lexer_addr; //@line 174 "lex.c"
 var $Pos139=(($102)|0); //@line 174 "lex.c"
 var $103=HEAP32[(($Pos139)>>2)]; //@line 174 "lex.c"
 var $104=HEAP8[($103)]; //@line 174 "lex.c"
 var $conv140=(($104<<24)>>24); //@line 174 "lex.c"
 var $cmp141=($conv140|0)==76; //@line 174 "lex.c"
 if($cmp141){label=49;break;}else{label=50;break;} //@line 174 "lex.c"
 case 49: 
 var $105=$Lexer_addr; //@line 176 "lex.c"
 var $Pos144=(($105)|0); //@line 176 "lex.c"
 var $106=HEAP32[(($Pos144)>>2)]; //@line 176 "lex.c"
 var $incdec_ptr145=(($106+1)|0); //@line 176 "lex.c"
 HEAP32[(($Pos144)>>2)]=$incdec_ptr145; //@line 176 "lex.c"
 var $107=$Lexer_addr; //@line 176 "lex.c"
 var $CharacterPos146=(($107+16)|0); //@line 176 "lex.c"
 var $108=HEAP32[(($CharacterPos146)>>2)]; //@line 176 "lex.c"
 var $inc147=((($108)+(1))|0); //@line 176 "lex.c"
 HEAP32[(($CharacterPos146)>>2)]=$inc147; //@line 176 "lex.c"
 var $109=$ResultToken; //@line 177 "lex.c"
 $retval=$109; //@line 177 "lex.c"
 label=113;break; //@line 177 "lex.c"
 case 50: 
 var $110=$Lexer_addr; //@line 181 "lex.c"
 var $Pos149=(($110)|0); //@line 181 "lex.c"
 var $111=HEAP32[(($Pos149)>>2)]; //@line 181 "lex.c"
 var $112=$Lexer_addr; //@line 181 "lex.c"
 var $End150=(($112+4)|0); //@line 181 "lex.c"
 var $113=HEAP32[(($End150)>>2)]; //@line 181 "lex.c"
 var $cmp151=($111|0)==($113|0); //@line 181 "lex.c"
 if($cmp151){label=52;break;}else{label=51;break;} //@line 181 "lex.c"
 case 51: 
 var $114=$Lexer_addr; //@line 181 "lex.c"
 var $Pos154=(($114)|0); //@line 181 "lex.c"
 var $115=HEAP32[(($Pos154)>>2)]; //@line 181 "lex.c"
 var $116=HEAP8[($115)]; //@line 181 "lex.c"
 var $conv155=(($116<<24)>>24); //@line 181 "lex.c"
 var $cmp156=($conv155|0)!=46; //@line 181 "lex.c"
 if($cmp156){label=52;break;}else{label=53;break;} //@line 181 "lex.c"
 case 52: 
 var $117=$ResultToken; //@line 182 "lex.c"
 $retval=$117; //@line 182 "lex.c"
 label=113;break; //@line 182 "lex.c"
 case 53: 
 var $118=$Value_addr; //@line 184 "lex.c"
 var $Typ160=(($118)|0); //@line 184 "lex.c"
 HEAP32[(($Typ160)>>2)]=19032; //@line 184 "lex.c"
 var $119=$Lexer_addr; //@line 185 "lex.c"
 var $Pos161=(($119)|0); //@line 185 "lex.c"
 var $120=HEAP32[(($Pos161)>>2)]; //@line 185 "lex.c"
 var $incdec_ptr162=(($120+1)|0); //@line 185 "lex.c"
 HEAP32[(($Pos161)>>2)]=$incdec_ptr162; //@line 185 "lex.c"
 var $121=$Lexer_addr; //@line 185 "lex.c"
 var $CharacterPos163=(($121+16)|0); //@line 185 "lex.c"
 var $122=HEAP32[(($CharacterPos163)>>2)]; //@line 185 "lex.c"
 var $inc164=((($122)+(1))|0); //@line 185 "lex.c"
 HEAP32[(($CharacterPos163)>>2)]=$inc164; //@line 185 "lex.c"
 var $123=$Base; //@line 186 "lex.c"
 var $conv165=($123|0); //@line 186 "lex.c"
 var $div=(1)/($conv165); //@line 186 "lex.c"
 $FPDiv=$div; //@line 186 "lex.c"
 var $124=$Result; //@line 186 "lex.c"
 var $conv166=($124|0); //@line 186 "lex.c"
 $FPResult=$conv166; //@line 186 "lex.c"
 label=54;break; //@line 186 "lex.c"
 case 54: 
 var $125=$Lexer_addr; //@line 186 "lex.c"
 var $Pos168=(($125)|0); //@line 186 "lex.c"
 var $126=HEAP32[(($Pos168)>>2)]; //@line 186 "lex.c"
 var $127=$Lexer_addr; //@line 186 "lex.c"
 var $End169=(($127+4)|0); //@line 186 "lex.c"
 var $128=HEAP32[(($End169)>>2)]; //@line 186 "lex.c"
 var $cmp170=($126|0)!=($128|0); //@line 186 "lex.c"
 if($cmp170){label=55;break;}else{var $153=0;label=70;break;} //@line 186 "lex.c"
 case 55: 
 var $129=$Lexer_addr; //@line 186 "lex.c"
 var $Pos173=(($129)|0); //@line 186 "lex.c"
 var $130=HEAP32[(($Pos173)>>2)]; //@line 186 "lex.c"
 var $131=HEAP8[($130)]; //@line 186 "lex.c"
 var $conv174=(($131<<24)>>24); //@line 186 "lex.c"
 var $cmp175=($conv174|0)>=48; //@line 186 "lex.c"
 if($cmp175){label=56;break;}else{label=60;break;} //@line 186 "lex.c"
 case 56: 
 var $132=$Lexer_addr; //@line 186 "lex.c"
 var $Pos178=(($132)|0); //@line 186 "lex.c"
 var $133=HEAP32[(($Pos178)>>2)]; //@line 186 "lex.c"
 var $134=HEAP8[($133)]; //@line 186 "lex.c"
 var $conv179=(($134<<24)>>24); //@line 186 "lex.c"
 var $135=$Base; //@line 186 "lex.c"
 var $cmp180=($135|0)<10; //@line 186 "lex.c"
 if($cmp180){label=57;break;}else{label=58;break;} //@line 186 "lex.c"
 case 57: 
 var $136=$Base; //@line 186 "lex.c"
 var $cond185=$136;label=59;break; //@line 186 "lex.c"
 case 58: 
 var $cond185=10;label=59;break; //@line 186 "lex.c"
 case 59: 
 var $cond185; //@line 186 "lex.c"
 var $add186=((($cond185)+(48))|0); //@line 186 "lex.c"
 var $cmp187=($conv179|0)<($add186|0); //@line 186 "lex.c"
 if($cmp187){var $152=1;label=69;break;}else{label=60;break;} //@line 186 "lex.c"
 case 60: 
 var $137=$Base; //@line 186 "lex.c"
 var $cmp190=($137|0)>10; //@line 186 "lex.c"
 if($cmp190){label=61;break;}else{label=67;break;} //@line 186 "lex.c"
 case 61: 
 var $138=$Lexer_addr; //@line 186 "lex.c"
 var $Pos193=(($138)|0); //@line 186 "lex.c"
 var $139=HEAP32[(($Pos193)>>2)]; //@line 186 "lex.c"
 var $140=HEAP8[($139)]; //@line 186 "lex.c"
 var $conv194=(($140<<24)>>24); //@line 186 "lex.c"
 var $cmp195=($conv194|0)>=97; //@line 186 "lex.c"
 if($cmp195){label=62;break;}else{label=63;break;} //@line 186 "lex.c"
 case 62: 
 var $141=$Lexer_addr; //@line 186 "lex.c"
 var $Pos198=(($141)|0); //@line 186 "lex.c"
 var $142=HEAP32[(($Pos198)>>2)]; //@line 186 "lex.c"
 var $143=HEAP8[($142)]; //@line 186 "lex.c"
 var $conv199=(($143<<24)>>24); //@line 186 "lex.c"
 var $cmp200=($conv199|0)<=102; //@line 186 "lex.c"
 if($cmp200){var $151=1;label=66;break;}else{label=63;break;} //@line 186 "lex.c"
 case 63: 
 var $144=$Lexer_addr; //@line 186 "lex.c"
 var $Pos203=(($144)|0); //@line 186 "lex.c"
 var $145=HEAP32[(($Pos203)>>2)]; //@line 186 "lex.c"
 var $146=HEAP8[($145)]; //@line 186 "lex.c"
 var $conv204=(($146<<24)>>24); //@line 186 "lex.c"
 var $cmp205=($conv204|0)>=65; //@line 186 "lex.c"
 if($cmp205){label=64;break;}else{var $150=0;label=65;break;} //@line 186 "lex.c"
 case 64: 
 var $147=$Lexer_addr; //@line 186 "lex.c"
 var $Pos208=(($147)|0); //@line 186 "lex.c"
 var $148=HEAP32[(($Pos208)>>2)]; //@line 186 "lex.c"
 var $149=HEAP8[($148)]; //@line 186 "lex.c"
 var $conv209=(($149<<24)>>24); //@line 186 "lex.c"
 var $cmp210=($conv209|0)<=70; //@line 186 "lex.c"
 var $150=$cmp210;label=65;break;
 case 65: 
 var $150;
 var $151=$150;label=66;break;
 case 66: 
 var $151;
 var $lor_ext214=($151&1);
 var $cond217=$lor_ext214;label=68;break;
 case 67: 
 var $cond217=0;label=68;break;
 case 68: 
 var $cond217;
 var $tobool218=($cond217|0)!=0;
 var $152=$tobool218;label=69;break;
 case 69: 
 var $152;
 var $153=$152;label=70;break;
 case 70: 
 var $153;
 if($153){label=71;break;}else{label=79;break;}
 case 71: 
 var $154=$Lexer_addr; //@line 187 "lex.c"
 var $Pos223=(($154)|0); //@line 187 "lex.c"
 var $155=HEAP32[(($Pos223)>>2)]; //@line 187 "lex.c"
 var $156=HEAP8[($155)]; //@line 187 "lex.c"
 var $conv224=(($156<<24)>>24); //@line 187 "lex.c"
 var $cmp225=($conv224|0)<=57; //@line 187 "lex.c"
 if($cmp225){label=72;break;}else{label=73;break;} //@line 187 "lex.c"
 case 72: 
 var $157=$Lexer_addr; //@line 187 "lex.c"
 var $Pos228=(($157)|0); //@line 187 "lex.c"
 var $158=HEAP32[(($Pos228)>>2)]; //@line 187 "lex.c"
 var $159=HEAP8[($158)]; //@line 187 "lex.c"
 var $conv229=(($159<<24)>>24); //@line 187 "lex.c"
 var $sub230=((($conv229)-(48))|0); //@line 187 "lex.c"
 var $cond249=$sub230;label=77;break; //@line 187 "lex.c"
 case 73: 
 var $160=$Lexer_addr; //@line 187 "lex.c"
 var $Pos232=(($160)|0); //@line 187 "lex.c"
 var $161=HEAP32[(($Pos232)>>2)]; //@line 187 "lex.c"
 var $162=HEAP8[($161)]; //@line 187 "lex.c"
 var $conv233=(($162<<24)>>24); //@line 187 "lex.c"
 var $cmp234=($conv233|0)<=70; //@line 187 "lex.c"
 if($cmp234){label=74;break;}else{label=75;break;} //@line 187 "lex.c"
 case 74: 
 var $163=$Lexer_addr; //@line 187 "lex.c"
 var $Pos237=(($163)|0); //@line 187 "lex.c"
 var $164=HEAP32[(($Pos237)>>2)]; //@line 187 "lex.c"
 var $165=HEAP8[($164)]; //@line 187 "lex.c"
 var $conv238=(($165<<24)>>24); //@line 187 "lex.c"
 var $sub239=((($conv238)-(65))|0); //@line 187 "lex.c"
 var $add240=((($sub239)+(10))|0); //@line 187 "lex.c"
 var $cond247=$add240;label=76;break; //@line 187 "lex.c"
 case 75: 
 var $166=$Lexer_addr; //@line 187 "lex.c"
 var $Pos242=(($166)|0); //@line 187 "lex.c"
 var $167=HEAP32[(($Pos242)>>2)]; //@line 187 "lex.c"
 var $168=HEAP8[($167)]; //@line 187 "lex.c"
 var $conv243=(($168<<24)>>24); //@line 187 "lex.c"
 var $sub244=((($conv243)-(97))|0); //@line 187 "lex.c"
 var $add245=((($sub244)+(10))|0); //@line 187 "lex.c"
 var $cond247=$add245;label=76;break; //@line 187 "lex.c"
 case 76: 
 var $cond247; //@line 187 "lex.c"
 var $cond249=$cond247;label=77;break; //@line 187 "lex.c"
 case 77: 
 var $cond249; //@line 187 "lex.c"
 var $conv250=($cond249|0); //@line 187 "lex.c"
 var $169=$FPDiv; //@line 187 "lex.c"
 var $mul251=($conv250)*($169); //@line 187 "lex.c"
 var $170=$FPResult; //@line 187 "lex.c"
 var $add252=($170)+($mul251); //@line 187 "lex.c"
 $FPResult=$add252; //@line 187 "lex.c"
 label=78;break; //@line 187 "lex.c"
 case 78: 
 var $171=$Lexer_addr; //@line 186 "lex.c"
 var $Pos254=(($171)|0); //@line 186 "lex.c"
 var $172=HEAP32[(($Pos254)>>2)]; //@line 186 "lex.c"
 var $incdec_ptr255=(($172+1)|0); //@line 186 "lex.c"
 HEAP32[(($Pos254)>>2)]=$incdec_ptr255; //@line 186 "lex.c"
 var $173=$Lexer_addr; //@line 186 "lex.c"
 var $CharacterPos256=(($173+16)|0); //@line 186 "lex.c"
 var $174=HEAP32[(($CharacterPos256)>>2)]; //@line 186 "lex.c"
 var $inc257=((($174)+(1))|0); //@line 186 "lex.c"
 HEAP32[(($CharacterPos256)>>2)]=$inc257; //@line 186 "lex.c"
 var $175=$Base; //@line 186 "lex.c"
 var $conv258=($175|0); //@line 186 "lex.c"
 var $176=$FPDiv; //@line 186 "lex.c"
 var $div259=($176)/($conv258); //@line 186 "lex.c"
 $FPDiv=$div259; //@line 186 "lex.c"
 label=54;break; //@line 186 "lex.c"
 case 79: 
 var $177=$Lexer_addr; //@line 189 "lex.c"
 var $Pos261=(($177)|0); //@line 189 "lex.c"
 var $178=HEAP32[(($Pos261)>>2)]; //@line 189 "lex.c"
 var $179=$Lexer_addr; //@line 189 "lex.c"
 var $End262=(($179+4)|0); //@line 189 "lex.c"
 var $180=HEAP32[(($End262)>>2)]; //@line 189 "lex.c"
 var $cmp263=($178|0)!=($180|0); //@line 189 "lex.c"
 if($cmp263){label=80;break;}else{label=112;break;} //@line 189 "lex.c"
 case 80: 
 var $181=$Lexer_addr; //@line 189 "lex.c"
 var $Pos266=(($181)|0); //@line 189 "lex.c"
 var $182=HEAP32[(($Pos266)>>2)]; //@line 189 "lex.c"
 var $183=HEAP8[($182)]; //@line 189 "lex.c"
 var $conv267=(($183<<24)>>24); //@line 189 "lex.c"
 var $cmp268=($conv267|0)==101; //@line 189 "lex.c"
 if($cmp268){label=82;break;}else{label=81;break;} //@line 189 "lex.c"
 case 81: 
 var $184=$Lexer_addr; //@line 189 "lex.c"
 var $Pos271=(($184)|0); //@line 189 "lex.c"
 var $185=HEAP32[(($Pos271)>>2)]; //@line 189 "lex.c"
 var $186=HEAP8[($185)]; //@line 189 "lex.c"
 var $conv272=(($186<<24)>>24); //@line 189 "lex.c"
 var $cmp273=($conv272|0)==69; //@line 189 "lex.c"
 if($cmp273){label=82;break;}else{label=112;break;} //@line 189 "lex.c"
 case 82: 
 $ExponentMultiplier=1; //@line 191 "lex.c"
 var $187=$Lexer_addr; //@line 193 "lex.c"
 var $Pos276=(($187)|0); //@line 193 "lex.c"
 var $188=HEAP32[(($Pos276)>>2)]; //@line 193 "lex.c"
 var $incdec_ptr277=(($188+1)|0); //@line 193 "lex.c"
 HEAP32[(($Pos276)>>2)]=$incdec_ptr277; //@line 193 "lex.c"
 var $189=$Lexer_addr; //@line 193 "lex.c"
 var $CharacterPos278=(($189+16)|0); //@line 193 "lex.c"
 var $190=HEAP32[(($CharacterPos278)>>2)]; //@line 193 "lex.c"
 var $inc279=((($190)+(1))|0); //@line 193 "lex.c"
 HEAP32[(($CharacterPos278)>>2)]=$inc279; //@line 193 "lex.c"
 var $191=$Lexer_addr; //@line 194 "lex.c"
 var $Pos280=(($191)|0); //@line 194 "lex.c"
 var $192=HEAP32[(($Pos280)>>2)]; //@line 194 "lex.c"
 var $193=$Lexer_addr; //@line 194 "lex.c"
 var $End281=(($193+4)|0); //@line 194 "lex.c"
 var $194=HEAP32[(($End281)>>2)]; //@line 194 "lex.c"
 var $cmp282=($192|0)!=($194|0); //@line 194 "lex.c"
 if($cmp282){label=83;break;}else{label=85;break;} //@line 194 "lex.c"
 case 83: 
 var $195=$Lexer_addr; //@line 194 "lex.c"
 var $Pos285=(($195)|0); //@line 194 "lex.c"
 var $196=HEAP32[(($Pos285)>>2)]; //@line 194 "lex.c"
 var $197=HEAP8[($196)]; //@line 194 "lex.c"
 var $conv286=(($197<<24)>>24); //@line 194 "lex.c"
 var $cmp287=($conv286|0)==45; //@line 194 "lex.c"
 if($cmp287){label=84;break;}else{label=85;break;} //@line 194 "lex.c"
 case 84: 
 $ExponentMultiplier=-1; //@line 196 "lex.c"
 var $198=$Lexer_addr; //@line 197 "lex.c"
 var $Pos290=(($198)|0); //@line 197 "lex.c"
 var $199=HEAP32[(($Pos290)>>2)]; //@line 197 "lex.c"
 var $incdec_ptr291=(($199+1)|0); //@line 197 "lex.c"
 HEAP32[(($Pos290)>>2)]=$incdec_ptr291; //@line 197 "lex.c"
 var $200=$Lexer_addr; //@line 197 "lex.c"
 var $CharacterPos292=(($200+16)|0); //@line 197 "lex.c"
 var $201=HEAP32[(($CharacterPos292)>>2)]; //@line 197 "lex.c"
 var $inc293=((($201)+(1))|0); //@line 197 "lex.c"
 HEAP32[(($CharacterPos292)>>2)]=$inc293; //@line 197 "lex.c"
 label=85;break; //@line 198 "lex.c"
 case 85: 
 $Result=0; //@line 200 "lex.c"
 label=86;break; //@line 200 "lex.c"
 case 86: 
 var $202=$Lexer_addr; //@line 200 "lex.c"
 var $Pos296=(($202)|0); //@line 200 "lex.c"
 var $203=HEAP32[(($Pos296)>>2)]; //@line 200 "lex.c"
 var $204=$Lexer_addr; //@line 200 "lex.c"
 var $End297=(($204+4)|0); //@line 200 "lex.c"
 var $205=HEAP32[(($End297)>>2)]; //@line 200 "lex.c"
 var $cmp298=($203|0)!=($205|0); //@line 200 "lex.c"
 if($cmp298){label=87;break;}else{var $230=0;label=102;break;} //@line 200 "lex.c"
 case 87: 
 var $206=$Lexer_addr; //@line 200 "lex.c"
 var $Pos301=(($206)|0); //@line 200 "lex.c"
 var $207=HEAP32[(($Pos301)>>2)]; //@line 200 "lex.c"
 var $208=HEAP8[($207)]; //@line 200 "lex.c"
 var $conv302=(($208<<24)>>24); //@line 200 "lex.c"
 var $cmp303=($conv302|0)>=48; //@line 200 "lex.c"
 if($cmp303){label=88;break;}else{label=92;break;} //@line 200 "lex.c"
 case 88: 
 var $209=$Lexer_addr; //@line 200 "lex.c"
 var $Pos306=(($209)|0); //@line 200 "lex.c"
 var $210=HEAP32[(($Pos306)>>2)]; //@line 200 "lex.c"
 var $211=HEAP8[($210)]; //@line 200 "lex.c"
 var $conv307=(($211<<24)>>24); //@line 200 "lex.c"
 var $212=$Base; //@line 200 "lex.c"
 var $cmp308=($212|0)<10; //@line 200 "lex.c"
 if($cmp308){label=89;break;}else{label=90;break;} //@line 200 "lex.c"
 case 89: 
 var $213=$Base; //@line 200 "lex.c"
 var $cond313=$213;label=91;break; //@line 200 "lex.c"
 case 90: 
 var $cond313=10;label=91;break; //@line 200 "lex.c"
 case 91: 
 var $cond313; //@line 200 "lex.c"
 var $add314=((($cond313)+(48))|0); //@line 200 "lex.c"
 var $cmp315=($conv307|0)<($add314|0); //@line 200 "lex.c"
 if($cmp315){var $229=1;label=101;break;}else{label=92;break;} //@line 200 "lex.c"
 case 92: 
 var $214=$Base; //@line 200 "lex.c"
 var $cmp318=($214|0)>10; //@line 200 "lex.c"
 if($cmp318){label=93;break;}else{label=99;break;} //@line 200 "lex.c"
 case 93: 
 var $215=$Lexer_addr; //@line 200 "lex.c"
 var $Pos321=(($215)|0); //@line 200 "lex.c"
 var $216=HEAP32[(($Pos321)>>2)]; //@line 200 "lex.c"
 var $217=HEAP8[($216)]; //@line 200 "lex.c"
 var $conv322=(($217<<24)>>24); //@line 200 "lex.c"
 var $cmp323=($conv322|0)>=97; //@line 200 "lex.c"
 if($cmp323){label=94;break;}else{label=95;break;} //@line 200 "lex.c"
 case 94: 
 var $218=$Lexer_addr; //@line 200 "lex.c"
 var $Pos326=(($218)|0); //@line 200 "lex.c"
 var $219=HEAP32[(($Pos326)>>2)]; //@line 200 "lex.c"
 var $220=HEAP8[($219)]; //@line 200 "lex.c"
 var $conv327=(($220<<24)>>24); //@line 200 "lex.c"
 var $cmp328=($conv327|0)<=102; //@line 200 "lex.c"
 if($cmp328){var $228=1;label=98;break;}else{label=95;break;} //@line 200 "lex.c"
 case 95: 
 var $221=$Lexer_addr; //@line 200 "lex.c"
 var $Pos331=(($221)|0); //@line 200 "lex.c"
 var $222=HEAP32[(($Pos331)>>2)]; //@line 200 "lex.c"
 var $223=HEAP8[($222)]; //@line 200 "lex.c"
 var $conv332=(($223<<24)>>24); //@line 200 "lex.c"
 var $cmp333=($conv332|0)>=65; //@line 200 "lex.c"
 if($cmp333){label=96;break;}else{var $227=0;label=97;break;} //@line 200 "lex.c"
 case 96: 
 var $224=$Lexer_addr; //@line 200 "lex.c"
 var $Pos336=(($224)|0); //@line 200 "lex.c"
 var $225=HEAP32[(($Pos336)>>2)]; //@line 200 "lex.c"
 var $226=HEAP8[($225)]; //@line 200 "lex.c"
 var $conv337=(($226<<24)>>24); //@line 200 "lex.c"
 var $cmp338=($conv337|0)<=70; //@line 200 "lex.c"
 var $227=$cmp338;label=97;break;
 case 97: 
 var $227;
 var $228=$227;label=98;break;
 case 98: 
 var $228;
 var $lor_ext342=($228&1);
 var $cond345=$lor_ext342;label=100;break;
 case 99: 
 var $cond345=0;label=100;break;
 case 100: 
 var $cond345;
 var $tobool346=($cond345|0)!=0;
 var $229=$tobool346;label=101;break;
 case 101: 
 var $229;
 var $230=$229;label=102;break;
 case 102: 
 var $230;
 if($230){label=103;break;}else{label=111;break;}
 case 103: 
 var $231=$Result; //@line 201 "lex.c"
 var $conv351=($231|0); //@line 201 "lex.c"
 var $232=$Base; //@line 201 "lex.c"
 var $conv352=($232|0); //@line 201 "lex.c"
 var $mul353=($conv351)*($conv352); //@line 201 "lex.c"
 var $233=$Lexer_addr; //@line 201 "lex.c"
 var $Pos354=(($233)|0); //@line 201 "lex.c"
 var $234=HEAP32[(($Pos354)>>2)]; //@line 201 "lex.c"
 var $235=HEAP8[($234)]; //@line 201 "lex.c"
 var $conv355=(($235<<24)>>24); //@line 201 "lex.c"
 var $cmp356=($conv355|0)<=57; //@line 201 "lex.c"
 if($cmp356){label=104;break;}else{label=105;break;} //@line 201 "lex.c"
 case 104: 
 var $236=$Lexer_addr; //@line 201 "lex.c"
 var $Pos359=(($236)|0); //@line 201 "lex.c"
 var $237=HEAP32[(($Pos359)>>2)]; //@line 201 "lex.c"
 var $238=HEAP8[($237)]; //@line 201 "lex.c"
 var $conv360=(($238<<24)>>24); //@line 201 "lex.c"
 var $sub361=((($conv360)-(48))|0); //@line 201 "lex.c"
 var $cond380=$sub361;label=109;break; //@line 201 "lex.c"
 case 105: 
 var $239=$Lexer_addr; //@line 201 "lex.c"
 var $Pos363=(($239)|0); //@line 201 "lex.c"
 var $240=HEAP32[(($Pos363)>>2)]; //@line 201 "lex.c"
 var $241=HEAP8[($240)]; //@line 201 "lex.c"
 var $conv364=(($241<<24)>>24); //@line 201 "lex.c"
 var $cmp365=($conv364|0)<=70; //@line 201 "lex.c"
 if($cmp365){label=106;break;}else{label=107;break;} //@line 201 "lex.c"
 case 106: 
 var $242=$Lexer_addr; //@line 201 "lex.c"
 var $Pos368=(($242)|0); //@line 201 "lex.c"
 var $243=HEAP32[(($Pos368)>>2)]; //@line 201 "lex.c"
 var $244=HEAP8[($243)]; //@line 201 "lex.c"
 var $conv369=(($244<<24)>>24); //@line 201 "lex.c"
 var $sub370=((($conv369)-(65))|0); //@line 201 "lex.c"
 var $add371=((($sub370)+(10))|0); //@line 201 "lex.c"
 var $cond378=$add371;label=108;break; //@line 201 "lex.c"
 case 107: 
 var $245=$Lexer_addr; //@line 201 "lex.c"
 var $Pos373=(($245)|0); //@line 201 "lex.c"
 var $246=HEAP32[(($Pos373)>>2)]; //@line 201 "lex.c"
 var $247=HEAP8[($246)]; //@line 201 "lex.c"
 var $conv374=(($247<<24)>>24); //@line 201 "lex.c"
 var $sub375=((($conv374)-(97))|0); //@line 201 "lex.c"
 var $add376=((($sub375)+(10))|0); //@line 201 "lex.c"
 var $cond378=$add376;label=108;break; //@line 201 "lex.c"
 case 108: 
 var $cond378; //@line 201 "lex.c"
 var $cond380=$cond378;label=109;break; //@line 201 "lex.c"
 case 109: 
 var $cond380; //@line 201 "lex.c"
 var $conv381=($cond380|0); //@line 201 "lex.c"
 var $add382=($mul353)+($conv381); //@line 201 "lex.c"
 var $conv383=(($add382)&-1); //@line 201 "lex.c"
 $Result=$conv383; //@line 201 "lex.c"
 label=110;break; //@line 201 "lex.c"
 case 110: 
 var $248=$Lexer_addr; //@line 200 "lex.c"
 var $Pos385=(($248)|0); //@line 200 "lex.c"
 var $249=HEAP32[(($Pos385)>>2)]; //@line 200 "lex.c"
 var $incdec_ptr386=(($249+1)|0); //@line 200 "lex.c"
 HEAP32[(($Pos385)>>2)]=$incdec_ptr386; //@line 200 "lex.c"
 var $250=$Lexer_addr; //@line 200 "lex.c"
 var $CharacterPos387=(($250+16)|0); //@line 200 "lex.c"
 var $251=HEAP32[(($CharacterPos387)>>2)]; //@line 200 "lex.c"
 var $inc388=((($251)+(1))|0); //@line 200 "lex.c"
 HEAP32[(($CharacterPos387)>>2)]=$inc388; //@line 200 "lex.c"
 label=86;break; //@line 200 "lex.c"
 case 111: 
 var $252=$Base; //@line 203 "lex.c"
 var $conv390=($252|0); //@line 203 "lex.c"
 var $253=$Result; //@line 203 "lex.c"
 var $conv391=($253|0); //@line 203 "lex.c"
 var $254=$ExponentMultiplier; //@line 203 "lex.c"
 var $mul392=($conv391)*($254); //@line 203 "lex.c"
 var $255=Math_pow($conv390,$mul392); //@line 203 "lex.c"
 var $256=$FPResult; //@line 203 "lex.c"
 var $mul393=($256)*($255); //@line 203 "lex.c"
 $FPResult=$mul393; //@line 203 "lex.c"
 label=112;break; //@line 204 "lex.c"
 case 112: 
 var $257=$FPResult; //@line 206 "lex.c"
 var $258=$Value_addr; //@line 206 "lex.c"
 var $Val395=(($258+4)|0); //@line 206 "lex.c"
 var $259=HEAP32[(($Val395)>>2)]; //@line 206 "lex.c"
 var $FP=$259; //@line 206 "lex.c"
 HEAPF64[(($FP)>>3)]=$257; //@line 206 "lex.c"
 $retval=47; //@line 208 "lex.c"
 label=113;break; //@line 208 "lex.c"
 case 113: 
 var $260=$retval; //@line 212 "lex.c"
 return $260; //@line 212 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexGetWord($Lexer,$Value){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Lexer_addr;
 var $Value_addr;
 var $StartPos;
 var $Token;
 $Lexer_addr=$Lexer;
 $Value_addr=$Value;
 var $0=$Lexer_addr; //@line 217 "lex.c"
 var $Pos=(($0)|0); //@line 217 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 217 "lex.c"
 $StartPos=$1; //@line 217 "lex.c"
 label=2;break; //@line 220 "lex.c"
 case 2: 
 var $2=$Lexer_addr; //@line 221 "lex.c"
 var $Pos1=(($2)|0); //@line 221 "lex.c"
 var $3=HEAP32[(($Pos1)>>2)]; //@line 221 "lex.c"
 var $incdec_ptr=(($3+1)|0); //@line 221 "lex.c"
 HEAP32[(($Pos1)>>2)]=$incdec_ptr; //@line 221 "lex.c"
 var $4=$Lexer_addr; //@line 221 "lex.c"
 var $CharacterPos=(($4+16)|0); //@line 221 "lex.c"
 var $5=HEAP32[(($CharacterPos)>>2)]; //@line 221 "lex.c"
 var $inc=((($5)+(1))|0); //@line 221 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=$inc; //@line 221 "lex.c"
 label=3;break; //@line 222 "lex.c"
 case 3: 
 var $6=$Lexer_addr; //@line 222 "lex.c"
 var $Pos2=(($6)|0); //@line 222 "lex.c"
 var $7=HEAP32[(($Pos2)>>2)]; //@line 222 "lex.c"
 var $8=$Lexer_addr; //@line 222 "lex.c"
 var $End=(($8+4)|0); //@line 222 "lex.c"
 var $9=HEAP32[(($End)>>2)]; //@line 222 "lex.c"
 var $cmp=($7|0)!=($9|0); //@line 222 "lex.c"
 if($cmp){label=4;break;}else{var $17=0;label=7;break;} //@line 222 "lex.c"
 case 4: 
 var $10=$Lexer_addr; //@line 222 "lex.c"
 var $Pos3=(($10)|0); //@line 222 "lex.c"
 var $11=HEAP32[(($Pos3)>>2)]; //@line 222 "lex.c"
 var $12=HEAP8[($11)]; //@line 222 "lex.c"
 var $conv=(($12<<24)>>24); //@line 222 "lex.c"
 var $call=_isalnum($conv); //@line 222 "lex.c"
 var $tobool=($call|0)!=0; //@line 222 "lex.c"
 if($tobool){var $16=1;label=6;break;}else{label=5;break;} //@line 222 "lex.c"
 case 5: 
 var $13=$Lexer_addr; //@line 222 "lex.c"
 var $Pos4=(($13)|0); //@line 222 "lex.c"
 var $14=HEAP32[(($Pos4)>>2)]; //@line 222 "lex.c"
 var $15=HEAP8[($14)]; //@line 222 "lex.c"
 var $conv5=(($15<<24)>>24); //@line 222 "lex.c"
 var $cmp6=($conv5|0)==95; //@line 222 "lex.c"
 var $16=$cmp6;label=6;break; //@line 222 "lex.c"
 case 6: 
 var $16;
 var $17=$16;label=7;break;
 case 7: 
 var $17;
 if($17){label=2;break;}else{label=8;break;}
 case 8: 
 var $18=$Value_addr; //@line 224 "lex.c"
 var $Typ=(($18)|0); //@line 224 "lex.c"
 HEAP32[(($Typ)>>2)]=0; //@line 224 "lex.c"
 var $19=$StartPos; //@line 225 "lex.c"
 var $20=$Lexer_addr; //@line 225 "lex.c"
 var $Pos8=(($20)|0); //@line 225 "lex.c"
 var $21=HEAP32[(($Pos8)>>2)]; //@line 225 "lex.c"
 var $22=$StartPos; //@line 225 "lex.c"
 var $sub_ptr_lhs_cast=$21; //@line 225 "lex.c"
 var $sub_ptr_rhs_cast=$22; //@line 225 "lex.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 225 "lex.c"
 var $call9=_TableStrRegister2($19,$sub_ptr_sub); //@line 225 "lex.c"
 var $23=$Value_addr; //@line 225 "lex.c"
 var $Val=(($23+4)|0); //@line 225 "lex.c"
 var $24=HEAP32[(($Val)>>2)]; //@line 225 "lex.c"
 var $Identifier=$24; //@line 225 "lex.c"
 HEAP32[(($Identifier)>>2)]=$call9; //@line 225 "lex.c"
 var $25=$Value_addr; //@line 227 "lex.c"
 var $Val10=(($25+4)|0); //@line 227 "lex.c"
 var $26=HEAP32[(($Val10)>>2)]; //@line 227 "lex.c"
 var $Identifier11=$26; //@line 227 "lex.c"
 var $27=HEAP32[(($Identifier11)>>2)]; //@line 227 "lex.c"
 var $call12=_LexCheckReservedWord($27); //@line 227 "lex.c"
 $Token=$call12; //@line 227 "lex.c"
 var $28=$Token; //@line 228 "lex.c"
 if(($28|0)==83){ label=10;break;}else if(($28|0)==84){ label=9;break;}else{label=11;break;}
 case 9: 
 var $29=$Lexer_addr; //@line 230 "lex.c"
 var $Mode=(($29+24)|0); //@line 230 "lex.c"
 HEAP32[(($Mode)>>2)]=1; //@line 230 "lex.c"
 label=12;break; //@line 230 "lex.c"
 case 10: 
 var $30=$Lexer_addr; //@line 231 "lex.c"
 var $Mode14=(($30+24)|0); //@line 231 "lex.c"
 HEAP32[(($Mode14)>>2)]=2; //@line 231 "lex.c"
 label=12;break; //@line 231 "lex.c"
 case 11: 
 label=12;break; //@line 232 "lex.c"
 case 12: 
 var $31=$Token; //@line 235 "lex.c"
 var $cmp15=($31|0)!=0; //@line 235 "lex.c"
 if($cmp15){label=13;break;}else{label=14;break;} //@line 235 "lex.c"
 case 13: 
 var $32=$Token; //@line 236 "lex.c"
 $retval=$32; //@line 236 "lex.c"
 label=17;break; //@line 236 "lex.c"
 case 14: 
 var $33=$Lexer_addr; //@line 238 "lex.c"
 var $Mode17=(($33+24)|0); //@line 238 "lex.c"
 var $34=HEAP32[(($Mode17)>>2)]; //@line 238 "lex.c"
 var $cmp18=($34|0)==3; //@line 238 "lex.c"
 if($cmp18){label=15;break;}else{label=16;break;} //@line 238 "lex.c"
 case 15: 
 var $35=$Lexer_addr; //@line 239 "lex.c"
 var $Mode21=(($35+24)|0); //@line 239 "lex.c"
 HEAP32[(($Mode21)>>2)]=4; //@line 239 "lex.c"
 label=16;break; //@line 239 "lex.c"
 case 16: 
 $retval=45; //@line 241 "lex.c"
 label=17;break; //@line 241 "lex.c"
 case 17: 
 var $36=$retval; //@line 242 "lex.c"
 return $36; //@line 242 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexUnEscapeCharacterConstant($From,$End,$FirstChar,$Base){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $From_addr;
 var $End_addr;
 var $FirstChar_addr;
 var $Base_addr;
 var $Total;
 var $CCount;
 $From_addr=$From;
 $End_addr=$End;
 $FirstChar_addr=$FirstChar;
 $Base_addr=$Base;
 var $0=$FirstChar_addr; //@line 247 "lex.c"
 var $conv=($0&255); //@line 247 "lex.c"
 var $cmp=($conv|0)<=57; //@line 247 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 247 "lex.c"
 case 2: 
 var $1=$FirstChar_addr; //@line 247 "lex.c"
 var $conv2=($1&255); //@line 247 "lex.c"
 var $sub=((($conv2)-(48))|0); //@line 247 "lex.c"
 var $cond14=$sub;label=7;break; //@line 247 "lex.c"
 case 3: 
 var $2=$FirstChar_addr; //@line 247 "lex.c"
 var $conv3=($2&255); //@line 247 "lex.c"
 var $cmp4=($conv3|0)<=70; //@line 247 "lex.c"
 if($cmp4){label=4;break;}else{label=5;break;} //@line 247 "lex.c"
 case 4: 
 var $3=$FirstChar_addr; //@line 247 "lex.c"
 var $conv7=($3&255); //@line 247 "lex.c"
 var $sub8=((($conv7)-(65))|0); //@line 247 "lex.c"
 var $add=((($sub8)+(10))|0); //@line 247 "lex.c"
 var $cond=$add;label=6;break; //@line 247 "lex.c"
 case 5: 
 var $4=$FirstChar_addr; //@line 247 "lex.c"
 var $conv10=($4&255); //@line 247 "lex.c"
 var $sub11=((($conv10)-(97))|0); //@line 247 "lex.c"
 var $add12=((($sub11)+(10))|0); //@line 247 "lex.c"
 var $cond=$add12;label=6;break; //@line 247 "lex.c"
 case 6: 
 var $cond; //@line 247 "lex.c"
 var $cond14=$cond;label=7;break; //@line 247 "lex.c"
 case 7: 
 var $cond14; //@line 247 "lex.c"
 var $conv15=(($cond14)&255); //@line 247 "lex.c"
 $Total=$conv15; //@line 247 "lex.c"
 $CCount=0; //@line 249 "lex.c"
 label=8;break; //@line 249 "lex.c"
 case 8: 
 var $5=$From_addr; //@line 249 "lex.c"
 var $6=HEAP32[(($5)>>2)]; //@line 249 "lex.c"
 var $7=HEAP8[($6)]; //@line 249 "lex.c"
 var $conv16=(($7<<24)>>24); //@line 249 "lex.c"
 var $cmp17=($conv16|0)>=48; //@line 249 "lex.c"
 if($cmp17){label=9;break;}else{label=13;break;} //@line 249 "lex.c"
 case 9: 
 var $8=$From_addr; //@line 249 "lex.c"
 var $9=HEAP32[(($8)>>2)]; //@line 249 "lex.c"
 var $10=HEAP8[($9)]; //@line 249 "lex.c"
 var $conv19=(($10<<24)>>24); //@line 249 "lex.c"
 var $11=$Base_addr; //@line 249 "lex.c"
 var $cmp20=($11|0)<10; //@line 249 "lex.c"
 if($cmp20){label=10;break;}else{label=11;break;} //@line 249 "lex.c"
 case 10: 
 var $12=$Base_addr; //@line 249 "lex.c"
 var $cond25=$12;label=12;break; //@line 249 "lex.c"
 case 11: 
 var $cond25=10;label=12;break; //@line 249 "lex.c"
 case 12: 
 var $cond25; //@line 249 "lex.c"
 var $add26=((($cond25)+(48))|0); //@line 249 "lex.c"
 var $cmp27=($conv19|0)<($add26|0); //@line 249 "lex.c"
 if($cmp27){label=19;break;}else{label=13;break;} //@line 249 "lex.c"
 case 13: 
 var $13=$Base_addr; //@line 249 "lex.c"
 var $cmp29=($13|0)>10; //@line 249 "lex.c"
 if($cmp29){label=14;break;}else{label=18;break;} //@line 249 "lex.c"
 case 14: 
 var $14=$From_addr; //@line 249 "lex.c"
 var $15=HEAP32[(($14)>>2)]; //@line 249 "lex.c"
 var $16=HEAP8[($15)]; //@line 249 "lex.c"
 var $conv32=(($16<<24)>>24); //@line 249 "lex.c"
 var $cmp33=($conv32|0)>=97; //@line 249 "lex.c"
 if($cmp33){label=15;break;}else{label=16;break;} //@line 249 "lex.c"
 case 15: 
 var $17=$From_addr; //@line 249 "lex.c"
 var $18=HEAP32[(($17)>>2)]; //@line 249 "lex.c"
 var $19=HEAP8[($18)]; //@line 249 "lex.c"
 var $conv36=(($19<<24)>>24); //@line 249 "lex.c"
 var $cmp37=($conv36|0)<=102; //@line 249 "lex.c"
 if($cmp37){label=19;break;}else{label=16;break;} //@line 249 "lex.c"
 case 16: 
 var $20=$From_addr; //@line 249 "lex.c"
 var $21=HEAP32[(($20)>>2)]; //@line 249 "lex.c"
 var $22=HEAP8[($21)]; //@line 249 "lex.c"
 var $conv40=(($22<<24)>>24); //@line 249 "lex.c"
 var $cmp41=($conv40|0)>=65; //@line 249 "lex.c"
 if($cmp41){label=17;break;}else{var $27=0;label=20;break;} //@line 249 "lex.c"
 case 17: 
 var $23=$From_addr; //@line 249 "lex.c"
 var $24=HEAP32[(($23)>>2)]; //@line 249 "lex.c"
 var $25=HEAP8[($24)]; //@line 249 "lex.c"
 var $conv44=(($25<<24)>>24); //@line 249 "lex.c"
 var $cmp45=($conv44|0)<=70; //@line 249 "lex.c"
 if($cmp45){label=19;break;}else{var $27=0;label=20;break;} //@line 249 "lex.c"
 case 18: 
 if(0){label=19;break;}else{var $27=0;label=20;break;} //@line 249 "lex.c"
 case 19: 
 var $26=$CCount; //@line 249 "lex.c"
 var $cmp48=($26|0)<2; //@line 249 "lex.c"
 var $27=$cmp48;label=20;break;
 case 20: 
 var $27;
 if($27){label=21;break;}else{label=29;break;}
 case 21: 
 var $28=$Total; //@line 250 "lex.c"
 var $conv50=($28&255); //@line 250 "lex.c"
 var $29=$Base_addr; //@line 250 "lex.c"
 var $mul=(Math_imul($conv50,$29)|0); //@line 250 "lex.c"
 var $30=$From_addr; //@line 250 "lex.c"
 var $31=HEAP32[(($30)>>2)]; //@line 250 "lex.c"
 var $32=HEAP8[($31)]; //@line 250 "lex.c"
 var $conv51=(($32<<24)>>24); //@line 250 "lex.c"
 var $cmp52=($conv51|0)<=57; //@line 250 "lex.c"
 if($cmp52){label=22;break;}else{label=23;break;} //@line 250 "lex.c"
 case 22: 
 var $33=$From_addr; //@line 250 "lex.c"
 var $34=HEAP32[(($33)>>2)]; //@line 250 "lex.c"
 var $35=HEAP8[($34)]; //@line 250 "lex.c"
 var $conv55=(($35<<24)>>24); //@line 250 "lex.c"
 var $sub56=((($conv55)-(48))|0); //@line 250 "lex.c"
 var $cond72=$sub56;label=27;break; //@line 250 "lex.c"
 case 23: 
 var $36=$From_addr; //@line 250 "lex.c"
 var $37=HEAP32[(($36)>>2)]; //@line 250 "lex.c"
 var $38=HEAP8[($37)]; //@line 250 "lex.c"
 var $conv58=(($38<<24)>>24); //@line 250 "lex.c"
 var $cmp59=($conv58|0)<=70; //@line 250 "lex.c"
 if($cmp59){label=24;break;}else{label=25;break;} //@line 250 "lex.c"
 case 24: 
 var $39=$From_addr; //@line 250 "lex.c"
 var $40=HEAP32[(($39)>>2)]; //@line 250 "lex.c"
 var $41=HEAP8[($40)]; //@line 250 "lex.c"
 var $conv62=(($41<<24)>>24); //@line 250 "lex.c"
 var $sub63=((($conv62)-(65))|0); //@line 250 "lex.c"
 var $add64=((($sub63)+(10))|0); //@line 250 "lex.c"
 var $cond70=$add64;label=26;break; //@line 250 "lex.c"
 case 25: 
 var $42=$From_addr; //@line 250 "lex.c"
 var $43=HEAP32[(($42)>>2)]; //@line 250 "lex.c"
 var $44=HEAP8[($43)]; //@line 250 "lex.c"
 var $conv66=(($44<<24)>>24); //@line 250 "lex.c"
 var $sub67=((($conv66)-(97))|0); //@line 250 "lex.c"
 var $add68=((($sub67)+(10))|0); //@line 250 "lex.c"
 var $cond70=$add68;label=26;break; //@line 250 "lex.c"
 case 26: 
 var $cond70; //@line 250 "lex.c"
 var $cond72=$cond70;label=27;break; //@line 250 "lex.c"
 case 27: 
 var $cond72; //@line 250 "lex.c"
 var $add73=((($mul)+($cond72))|0); //@line 250 "lex.c"
 var $conv74=(($add73)&255); //@line 250 "lex.c"
 $Total=$conv74; //@line 250 "lex.c"
 label=28;break; //@line 250 "lex.c"
 case 28: 
 var $45=$CCount; //@line 249 "lex.c"
 var $inc=((($45)+(1))|0); //@line 249 "lex.c"
 $CCount=$inc; //@line 249 "lex.c"
 var $46=$From_addr; //@line 249 "lex.c"
 var $47=HEAP32[(($46)>>2)]; //@line 249 "lex.c"
 var $incdec_ptr=(($47+1)|0); //@line 249 "lex.c"
 HEAP32[(($46)>>2)]=$incdec_ptr; //@line 249 "lex.c"
 label=8;break; //@line 249 "lex.c"
 case 29: 
 var $48=$Total; //@line 252 "lex.c"
 return $48; //@line 252 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexUnEscapeCharacter($From,$End){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $From_addr;
 var $End_addr;
 var $ThisChar;
 $From_addr=$From;
 $End_addr=$End;
 label=2;break; //@line 260 "lex.c"
 case 2: 
 var $0=$From_addr; //@line 260 "lex.c"
 var $1=HEAP32[(($0)>>2)]; //@line 260 "lex.c"
 var $2=$End_addr; //@line 260 "lex.c"
 var $cmp=($1|0)!=($2|0); //@line 260 "lex.c"
 if($cmp){label=3;break;}else{var $12=0;label=6;break;} //@line 260 "lex.c"
 case 3: 
 var $3=$From_addr; //@line 260 "lex.c"
 var $4=HEAP32[(($3)>>2)]; //@line 260 "lex.c"
 var $5=HEAP8[($4)]; //@line 260 "lex.c"
 var $conv=(($5<<24)>>24); //@line 260 "lex.c"
 var $cmp1=($conv|0)==92; //@line 260 "lex.c"
 if($cmp1){label=4;break;}else{var $12=0;label=6;break;} //@line 260 "lex.c"
 case 4: 
 var $6=$From_addr; //@line 260 "lex.c"
 var $7=HEAP32[(($6)>>2)]; //@line 260 "lex.c"
 var $arrayidx=(($7+1)|0); //@line 260 "lex.c"
 var $8=$End_addr; //@line 260 "lex.c"
 var $cmp4=($arrayidx|0)!=($8|0); //@line 260 "lex.c"
 if($cmp4){label=5;break;}else{var $12=0;label=6;break;} //@line 260 "lex.c"
 case 5: 
 var $9=$From_addr; //@line 260 "lex.c"
 var $10=HEAP32[(($9)>>2)]; //@line 260 "lex.c"
 var $arrayidx6=(($10+1)|0); //@line 260 "lex.c"
 var $11=HEAP8[($arrayidx6)]; //@line 260 "lex.c"
 var $conv7=(($11<<24)>>24); //@line 260 "lex.c"
 var $cmp8=($conv7|0)==10; //@line 260 "lex.c"
 var $12=$cmp8;label=6;break;
 case 6: 
 var $12;
 if($12){label=7;break;}else{label=8;break;}
 case 7: 
 var $13=$From_addr; //@line 262 "lex.c"
 var $14=HEAP32[(($13)>>2)]; //@line 262 "lex.c"
 var $add_ptr=(($14+2)|0); //@line 262 "lex.c"
 HEAP32[(($13)>>2)]=$add_ptr; //@line 262 "lex.c"
 label=2;break; //@line 262 "lex.c"
 case 8: 
 label=9;break; //@line 264 "lex.c"
 case 9: 
 var $15=$From_addr; //@line 264 "lex.c"
 var $16=HEAP32[(($15)>>2)]; //@line 264 "lex.c"
 var $17=$End_addr; //@line 264 "lex.c"
 var $cmp11=($16|0)!=($17|0); //@line 264 "lex.c"
 if($cmp11){label=10;break;}else{var $33=0;label=15;break;} //@line 264 "lex.c"
 case 10: 
 var $18=$From_addr; //@line 264 "lex.c"
 var $19=HEAP32[(($18)>>2)]; //@line 264 "lex.c"
 var $20=HEAP8[($19)]; //@line 264 "lex.c"
 var $conv14=(($20<<24)>>24); //@line 264 "lex.c"
 var $cmp15=($conv14|0)==92; //@line 264 "lex.c"
 if($cmp15){label=11;break;}else{var $33=0;label=15;break;} //@line 264 "lex.c"
 case 11: 
 var $21=$From_addr; //@line 264 "lex.c"
 var $22=HEAP32[(($21)>>2)]; //@line 264 "lex.c"
 var $arrayidx18=(($22+1)|0); //@line 264 "lex.c"
 var $23=$End_addr; //@line 264 "lex.c"
 var $cmp19=($arrayidx18|0)!=($23|0); //@line 264 "lex.c"
 if($cmp19){label=12;break;}else{var $33=0;label=15;break;} //@line 264 "lex.c"
 case 12: 
 var $24=$From_addr; //@line 264 "lex.c"
 var $25=HEAP32[(($24)>>2)]; //@line 264 "lex.c"
 var $arrayidx22=(($25+2)|0); //@line 264 "lex.c"
 var $26=$End_addr; //@line 264 "lex.c"
 var $cmp23=($arrayidx22|0)!=($26|0); //@line 264 "lex.c"
 if($cmp23){label=13;break;}else{var $33=0;label=15;break;} //@line 264 "lex.c"
 case 13: 
 var $27=$From_addr; //@line 264 "lex.c"
 var $28=HEAP32[(($27)>>2)]; //@line 264 "lex.c"
 var $arrayidx26=(($28+1)|0); //@line 264 "lex.c"
 var $29=HEAP8[($arrayidx26)]; //@line 264 "lex.c"
 var $conv27=(($29<<24)>>24); //@line 264 "lex.c"
 var $cmp28=($conv27|0)==13; //@line 264 "lex.c"
 if($cmp28){label=14;break;}else{var $33=0;label=15;break;} //@line 264 "lex.c"
 case 14: 
 var $30=$From_addr; //@line 264 "lex.c"
 var $31=HEAP32[(($30)>>2)]; //@line 264 "lex.c"
 var $arrayidx31=(($31+2)|0); //@line 264 "lex.c"
 var $32=HEAP8[($arrayidx31)]; //@line 264 "lex.c"
 var $conv32=(($32<<24)>>24); //@line 264 "lex.c"
 var $cmp33=($conv32|0)==10; //@line 264 "lex.c"
 var $33=$cmp33;label=15;break;
 case 15: 
 var $33;
 if($33){label=16;break;}else{label=17;break;}
 case 16: 
 var $34=$From_addr; //@line 266 "lex.c"
 var $35=HEAP32[(($34)>>2)]; //@line 266 "lex.c"
 var $add_ptr37=(($35+3)|0); //@line 266 "lex.c"
 HEAP32[(($34)>>2)]=$add_ptr37; //@line 266 "lex.c"
 label=9;break; //@line 266 "lex.c"
 case 17: 
 var $36=$From_addr; //@line 268 "lex.c"
 var $37=HEAP32[(($36)>>2)]; //@line 268 "lex.c"
 var $38=$End_addr; //@line 268 "lex.c"
 var $cmp39=($37|0)==($38|0); //@line 268 "lex.c"
 if($cmp39){label=18;break;}else{label=19;break;} //@line 268 "lex.c"
 case 18: 
 $retval=92; //@line 269 "lex.c"
 label=37;break; //@line 269 "lex.c"
 case 19: 
 var $39=$From_addr; //@line 271 "lex.c"
 var $40=HEAP32[(($39)>>2)]; //@line 271 "lex.c"
 var $41=HEAP8[($40)]; //@line 271 "lex.c"
 var $conv41=(($41<<24)>>24); //@line 271 "lex.c"
 var $cmp42=($conv41|0)==92; //@line 271 "lex.c"
 if($cmp42){label=20;break;}else{label=36;break;} //@line 271 "lex.c"
 case 20: 
 var $42=$From_addr; //@line 274 "lex.c"
 var $43=HEAP32[(($42)>>2)]; //@line 274 "lex.c"
 var $incdec_ptr=(($43+1)|0); //@line 274 "lex.c"
 HEAP32[(($42)>>2)]=$incdec_ptr; //@line 274 "lex.c"
 var $44=$From_addr; //@line 275 "lex.c"
 var $45=HEAP32[(($44)>>2)]; //@line 275 "lex.c"
 var $46=$End_addr; //@line 275 "lex.c"
 var $cmp45=($45|0)==($46|0); //@line 275 "lex.c"
 if($cmp45){label=21;break;}else{label=22;break;} //@line 275 "lex.c"
 case 21: 
 $retval=92; //@line 276 "lex.c"
 label=37;break; //@line 276 "lex.c"
 case 22: 
 var $47=$From_addr; //@line 278 "lex.c"
 var $48=HEAP32[(($47)>>2)]; //@line 278 "lex.c"
 var $incdec_ptr49=(($48+1)|0); //@line 278 "lex.c"
 HEAP32[(($47)>>2)]=$incdec_ptr49; //@line 278 "lex.c"
 var $49=HEAP8[($48)]; //@line 278 "lex.c"
 $ThisChar=$49; //@line 278 "lex.c"
 var $50=$ThisChar; //@line 279 "lex.c"
 var $conv50=($50&255); //@line 279 "lex.c"
 switch(($conv50|0)){case 92:{ label=23;break;}case 39:{ label=24;break;}case 34:{ label=25;break;}case 97:{ label=26;break;}case 98:{ label=27;break;}case 102:{ label=28;break;}case 110:{ label=29;break;}case 114:{ label=30;break;}case 116:{ label=31;break;}case 118:{ label=32;break;}case 48:case 49:case 50:case 51:{ label=33;break;}case 120:{ label=34;break;}default:{label=35;break;}}break;
 case 23: 
 $retval=92; //@line 281 "lex.c"
 label=37;break; //@line 281 "lex.c"
 case 24: 
 $retval=39; //@line 282 "lex.c"
 label=37;break; //@line 282 "lex.c"
 case 25: 
 $retval=34; //@line 283 "lex.c"
 label=37;break; //@line 283 "lex.c"
 case 26: 
 $retval=7; //@line 284 "lex.c"
 label=37;break; //@line 284 "lex.c"
 case 27: 
 $retval=8; //@line 285 "lex.c"
 label=37;break; //@line 285 "lex.c"
 case 28: 
 $retval=12; //@line 286 "lex.c"
 label=37;break; //@line 286 "lex.c"
 case 29: 
 $retval=10; //@line 287 "lex.c"
 label=37;break; //@line 287 "lex.c"
 case 30: 
 $retval=13; //@line 288 "lex.c"
 label=37;break; //@line 288 "lex.c"
 case 31: 
 $retval=9; //@line 289 "lex.c"
 label=37;break; //@line 289 "lex.c"
 case 32: 
 $retval=11; //@line 290 "lex.c"
 label=37;break; //@line 290 "lex.c"
 case 33: 
 var $51=$From_addr; //@line 291 "lex.c"
 var $52=$End_addr; //@line 291 "lex.c"
 var $53=$ThisChar; //@line 291 "lex.c"
 var $call=_LexUnEscapeCharacterConstant($51,$52,$53,8); //@line 291 "lex.c"
 $retval=$call; //@line 291 "lex.c"
 label=37;break; //@line 291 "lex.c"
 case 34: 
 var $54=$From_addr; //@line 292 "lex.c"
 var $55=$End_addr; //@line 292 "lex.c"
 var $call62=_LexUnEscapeCharacterConstant($54,$55,48,16); //@line 292 "lex.c"
 $retval=$call62; //@line 292 "lex.c"
 label=37;break; //@line 292 "lex.c"
 case 35: 
 var $56=$ThisChar; //@line 293 "lex.c"
 $retval=$56; //@line 293 "lex.c"
 label=37;break; //@line 293 "lex.c"
 case 36: 
 var $57=$From_addr; //@line 297 "lex.c"
 var $58=HEAP32[(($57)>>2)]; //@line 297 "lex.c"
 var $incdec_ptr63=(($58+1)|0); //@line 297 "lex.c"
 HEAP32[(($57)>>2)]=$incdec_ptr63; //@line 297 "lex.c"
 var $59=HEAP8[($58)]; //@line 297 "lex.c"
 $retval=$59; //@line 297 "lex.c"
 label=37;break; //@line 297 "lex.c"
 case 37: 
 var $60=$retval; //@line 298 "lex.c"
 return $60; //@line 298 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexGetStringConstant($Lexer,$Value,$EndChar){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Lexer_addr;
 var $Value_addr;
 var $EndChar_addr;
 var $Escape;
 var $StartPos;
 var $EndPos;
 var $EscBuf;
 var $EscBufPos;
 var $RegString;
 var $ArrayValue;
 $Lexer_addr=$Lexer;
 $Value_addr=$Value;
 $EndChar_addr=$EndChar;
 $Escape=0; //@line 303 "lex.c"
 var $0=$Lexer_addr; //@line 304 "lex.c"
 var $Pos=(($0)|0); //@line 304 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 304 "lex.c"
 $StartPos=$1; //@line 304 "lex.c"
 label=2;break; //@line 311 "lex.c"
 case 2: 
 var $2=$Lexer_addr; //@line 311 "lex.c"
 var $Pos1=(($2)|0); //@line 311 "lex.c"
 var $3=HEAP32[(($Pos1)>>2)]; //@line 311 "lex.c"
 var $4=$Lexer_addr; //@line 311 "lex.c"
 var $End=(($4+4)|0); //@line 311 "lex.c"
 var $5=HEAP32[(($End)>>2)]; //@line 311 "lex.c"
 var $cmp=($3|0)!=($5|0); //@line 311 "lex.c"
 if($cmp){label=3;break;}else{var $12=0;label=6;break;} //@line 311 "lex.c"
 case 3: 
 var $6=$Lexer_addr; //@line 311 "lex.c"
 var $Pos2=(($6)|0); //@line 311 "lex.c"
 var $7=HEAP32[(($Pos2)>>2)]; //@line 311 "lex.c"
 var $8=HEAP8[($7)]; //@line 311 "lex.c"
 var $conv=(($8<<24)>>24); //@line 311 "lex.c"
 var $9=$EndChar_addr; //@line 311 "lex.c"
 var $conv3=(($9<<24)>>24); //@line 311 "lex.c"
 var $cmp4=($conv|0)!=($conv3|0); //@line 311 "lex.c"
 if($cmp4){var $11=1;label=5;break;}else{label=4;break;} //@line 311 "lex.c"
 case 4: 
 var $10=$Escape; //@line 311 "lex.c"
 var $tobool=($10|0)!=0; //@line 311 "lex.c"
 var $11=$tobool;label=5;break; //@line 311 "lex.c"
 case 5: 
 var $11;
 var $12=$11;label=6;break;
 case 6: 
 var $12;
 if($12){label=7;break;}else{label=19;break;}
 case 7: 
 var $13=$Escape; //@line 314 "lex.c"
 var $tobool6=($13|0)!=0; //@line 314 "lex.c"
 if($tobool6){label=8;break;}else{label=15;break;} //@line 314 "lex.c"
 case 8: 
 var $14=$Lexer_addr; //@line 316 "lex.c"
 var $Pos7=(($14)|0); //@line 316 "lex.c"
 var $15=HEAP32[(($Pos7)>>2)]; //@line 316 "lex.c"
 var $16=HEAP8[($15)]; //@line 316 "lex.c"
 var $conv8=(($16<<24)>>24); //@line 316 "lex.c"
 var $cmp9=($conv8|0)==13; //@line 316 "lex.c"
 if($cmp9){label=9;break;}else{label=11;break;} //@line 316 "lex.c"
 case 9: 
 var $17=$Lexer_addr; //@line 316 "lex.c"
 var $Pos11=(($17)|0); //@line 316 "lex.c"
 var $18=HEAP32[(($Pos11)>>2)]; //@line 316 "lex.c"
 var $add_ptr=(($18+1)|0); //@line 316 "lex.c"
 var $19=$Lexer_addr; //@line 316 "lex.c"
 var $End12=(($19+4)|0); //@line 316 "lex.c"
 var $20=HEAP32[(($End12)>>2)]; //@line 316 "lex.c"
 var $cmp13=($add_ptr|0)!=($20|0); //@line 316 "lex.c"
 if($cmp13){label=10;break;}else{label=11;break;} //@line 316 "lex.c"
 case 10: 
 var $21=$Lexer_addr; //@line 317 "lex.c"
 var $Pos16=(($21)|0); //@line 317 "lex.c"
 var $22=HEAP32[(($Pos16)>>2)]; //@line 317 "lex.c"
 var $incdec_ptr=(($22+1)|0); //@line 317 "lex.c"
 HEAP32[(($Pos16)>>2)]=$incdec_ptr; //@line 317 "lex.c"
 label=11;break; //@line 317 "lex.c"
 case 11: 
 var $23=$Lexer_addr; //@line 319 "lex.c"
 var $Pos17=(($23)|0); //@line 319 "lex.c"
 var $24=HEAP32[(($Pos17)>>2)]; //@line 319 "lex.c"
 var $25=HEAP8[($24)]; //@line 319 "lex.c"
 var $conv18=(($25<<24)>>24); //@line 319 "lex.c"
 var $cmp19=($conv18|0)==10; //@line 319 "lex.c"
 if($cmp19){label=12;break;}else{label=14;break;} //@line 319 "lex.c"
 case 12: 
 var $26=$Lexer_addr; //@line 319 "lex.c"
 var $Pos22=(($26)|0); //@line 319 "lex.c"
 var $27=HEAP32[(($Pos22)>>2)]; //@line 319 "lex.c"
 var $add_ptr23=(($27+1)|0); //@line 319 "lex.c"
 var $28=$Lexer_addr; //@line 319 "lex.c"
 var $End24=(($28+4)|0); //@line 319 "lex.c"
 var $29=HEAP32[(($End24)>>2)]; //@line 319 "lex.c"
 var $cmp25=($add_ptr23|0)!=($29|0); //@line 319 "lex.c"
 if($cmp25){label=13;break;}else{label=14;break;} //@line 319 "lex.c"
 case 13: 
 var $30=$Lexer_addr; //@line 321 "lex.c"
 var $Line=(($30+12)|0); //@line 321 "lex.c"
 var $31=HEAP32[(($Line)>>2)]; //@line 321 "lex.c"
 var $inc=((($31)+(1))|0); //@line 321 "lex.c"
 HEAP32[(($Line)>>2)]=$inc; //@line 321 "lex.c"
 var $32=$Lexer_addr; //@line 322 "lex.c"
 var $Pos28=(($32)|0); //@line 322 "lex.c"
 var $33=HEAP32[(($Pos28)>>2)]; //@line 322 "lex.c"
 var $incdec_ptr29=(($33+1)|0); //@line 322 "lex.c"
 HEAP32[(($Pos28)>>2)]=$incdec_ptr29; //@line 322 "lex.c"
 var $34=$Lexer_addr; //@line 323 "lex.c"
 var $CharacterPos=(($34+16)|0); //@line 323 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=0; //@line 323 "lex.c"
 var $35=$Lexer_addr; //@line 324 "lex.c"
 var $EmitExtraNewlines=(($35+28)|0); //@line 324 "lex.c"
 var $36=HEAP32[(($EmitExtraNewlines)>>2)]; //@line 324 "lex.c"
 var $inc30=((($36)+(1))|0); //@line 324 "lex.c"
 HEAP32[(($EmitExtraNewlines)>>2)]=$inc30; //@line 324 "lex.c"
 label=14;break; //@line 325 "lex.c"
 case 14: 
 $Escape=0; //@line 327 "lex.c"
 label=18;break; //@line 328 "lex.c"
 case 15: 
 var $37=$Lexer_addr; //@line 329 "lex.c"
 var $Pos32=(($37)|0); //@line 329 "lex.c"
 var $38=HEAP32[(($Pos32)>>2)]; //@line 329 "lex.c"
 var $39=HEAP8[($38)]; //@line 329 "lex.c"
 var $conv33=(($39<<24)>>24); //@line 329 "lex.c"
 var $cmp34=($conv33|0)==92; //@line 329 "lex.c"
 if($cmp34){label=16;break;}else{label=17;break;} //@line 329 "lex.c"
 case 16: 
 $Escape=1; //@line 330 "lex.c"
 label=17;break; //@line 330 "lex.c"
 case 17: 
 label=18;break;
 case 18: 
 var $40=$Lexer_addr; //@line 332 "lex.c"
 var $Pos39=(($40)|0); //@line 332 "lex.c"
 var $41=HEAP32[(($Pos39)>>2)]; //@line 332 "lex.c"
 var $incdec_ptr40=(($41+1)|0); //@line 332 "lex.c"
 HEAP32[(($Pos39)>>2)]=$incdec_ptr40; //@line 332 "lex.c"
 var $42=$Lexer_addr; //@line 332 "lex.c"
 var $CharacterPos41=(($42+16)|0); //@line 332 "lex.c"
 var $43=HEAP32[(($CharacterPos41)>>2)]; //@line 332 "lex.c"
 var $inc42=((($43)+(1))|0); //@line 332 "lex.c"
 HEAP32[(($CharacterPos41)>>2)]=$inc42; //@line 332 "lex.c"
 label=2;break; //@line 333 "lex.c"
 case 19: 
 var $44=$Lexer_addr; //@line 334 "lex.c"
 var $Pos43=(($44)|0); //@line 334 "lex.c"
 var $45=HEAP32[(($Pos43)>>2)]; //@line 334 "lex.c"
 $EndPos=$45; //@line 334 "lex.c"
 var $46=$EndPos; //@line 336 "lex.c"
 var $47=$StartPos; //@line 336 "lex.c"
 var $sub_ptr_lhs_cast=$46; //@line 336 "lex.c"
 var $sub_ptr_rhs_cast=$47; //@line 336 "lex.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 336 "lex.c"
 var $call=_HeapAllocStack($sub_ptr_sub); //@line 336 "lex.c"
 $EscBuf=$call; //@line 336 "lex.c"
 var $48=$EscBuf; //@line 337 "lex.c"
 var $cmp44=($48|0)==0; //@line 337 "lex.c"
 if($cmp44){label=20;break;}else{label=21;break;} //@line 337 "lex.c"
 case 20: 
 var $49=$Lexer_addr; //@line 338 "lex.c"
 _LexFail($49,2504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 338 "lex.c"
 label=21;break; //@line 338 "lex.c"
 case 21: 
 var $50=$EscBuf; //@line 340 "lex.c"
 $EscBufPos=$50; //@line 340 "lex.c"
 var $51=$StartPos; //@line 340 "lex.c"
 var $52=$Lexer_addr; //@line 340 "lex.c"
 var $Pos48=(($52)|0); //@line 340 "lex.c"
 HEAP32[(($Pos48)>>2)]=$51; //@line 340 "lex.c"
 label=22;break; //@line 340 "lex.c"
 case 22: 
 var $53=$Lexer_addr; //@line 340 "lex.c"
 var $Pos49=(($53)|0); //@line 340 "lex.c"
 var $54=HEAP32[(($Pos49)>>2)]; //@line 340 "lex.c"
 var $55=$EndPos; //@line 340 "lex.c"
 var $cmp50=($54|0)!=($55|0); //@line 340 "lex.c"
 if($cmp50){label=23;break;}else{label=24;break;} //@line 340 "lex.c"
 case 23: 
 var $56=$Lexer_addr; //@line 341 "lex.c"
 var $Pos52=(($56)|0); //@line 341 "lex.c"
 var $57=$EndPos; //@line 341 "lex.c"
 var $call53=_LexUnEscapeCharacter($Pos52,$57); //@line 341 "lex.c"
 var $58=$EscBufPos; //@line 341 "lex.c"
 var $incdec_ptr54=(($58+1)|0); //@line 341 "lex.c"
 $EscBufPos=$incdec_ptr54; //@line 341 "lex.c"
 HEAP8[($58)]=$call53; //@line 341 "lex.c"
 label=22;break; //@line 341 "lex.c"
 case 24: 
 var $59=$EscBuf; //@line 344 "lex.c"
 var $60=$EscBufPos; //@line 344 "lex.c"
 var $61=$EscBuf; //@line 344 "lex.c"
 var $sub_ptr_lhs_cast55=$60; //@line 344 "lex.c"
 var $sub_ptr_rhs_cast56=$61; //@line 344 "lex.c"
 var $sub_ptr_sub57=((($sub_ptr_lhs_cast55)-($sub_ptr_rhs_cast56))|0); //@line 344 "lex.c"
 var $call58=_TableStrRegister2($59,$sub_ptr_sub57); //@line 344 "lex.c"
 $RegString=$call58; //@line 344 "lex.c"
 var $62=$EscBuf; //@line 345 "lex.c"
 var $63=$EndPos; //@line 345 "lex.c"
 var $64=$StartPos; //@line 345 "lex.c"
 var $sub_ptr_lhs_cast59=$63; //@line 345 "lex.c"
 var $sub_ptr_rhs_cast60=$64; //@line 345 "lex.c"
 var $sub_ptr_sub61=((($sub_ptr_lhs_cast59)-($sub_ptr_rhs_cast60))|0); //@line 345 "lex.c"
 var $call62=_HeapPopStack($62,$sub_ptr_sub61); //@line 345 "lex.c"
 var $65=$RegString; //@line 346 "lex.c"
 var $call63=_VariableStringLiteralGet($65); //@line 346 "lex.c"
 $ArrayValue=$call63; //@line 346 "lex.c"
 var $66=$ArrayValue; //@line 347 "lex.c"
 var $cmp64=($66|0)==0; //@line 347 "lex.c"
 if($cmp64){label=25;break;}else{label=26;break;} //@line 347 "lex.c"
 case 25: 
 var $call67=_VariableAllocValueAndData(0,0,0,0,1); //@line 350 "lex.c"
 $ArrayValue=$call67; //@line 350 "lex.c"
 var $67=HEAP32[((19152)>>2)]; //@line 351 "lex.c"
 var $68=$ArrayValue; //@line 351 "lex.c"
 var $Typ=(($68)|0); //@line 351 "lex.c"
 HEAP32[(($Typ)>>2)]=$67; //@line 351 "lex.c"
 var $69=$RegString; //@line 352 "lex.c"
 var $70=$69; //@line 352 "lex.c"
 var $71=$ArrayValue; //@line 352 "lex.c"
 var $Val=(($71+4)|0); //@line 352 "lex.c"
 HEAP32[(($Val)>>2)]=$70; //@line 352 "lex.c"
 var $72=$RegString; //@line 353 "lex.c"
 var $73=$ArrayValue; //@line 353 "lex.c"
 _VariableStringLiteralDefine($72,$73); //@line 353 "lex.c"
 label=26;break; //@line 354 "lex.c"
 case 26: 
 var $74=HEAP32[((19136)>>2)]; //@line 357 "lex.c"
 var $75=$Value_addr; //@line 357 "lex.c"
 var $Typ69=(($75)|0); //@line 357 "lex.c"
 HEAP32[(($Typ69)>>2)]=$74; //@line 357 "lex.c"
 var $76=$RegString; //@line 358 "lex.c"
 var $77=$Value_addr; //@line 358 "lex.c"
 var $Val70=(($77+4)|0); //@line 358 "lex.c"
 var $78=HEAP32[(($Val70)>>2)]; //@line 358 "lex.c"
 var $Pointer=$78; //@line 358 "lex.c"
 HEAP32[(($Pointer)>>2)]=$76; //@line 358 "lex.c"
 var $79=$Lexer_addr; //@line 359 "lex.c"
 var $Pos71=(($79)|0); //@line 359 "lex.c"
 var $80=HEAP32[(($Pos71)>>2)]; //@line 359 "lex.c"
 var $81=HEAP8[($80)]; //@line 359 "lex.c"
 var $conv72=(($81<<24)>>24); //@line 359 "lex.c"
 var $82=$EndChar_addr; //@line 359 "lex.c"
 var $conv73=(($82<<24)>>24); //@line 359 "lex.c"
 var $cmp74=($conv72|0)==($conv73|0); //@line 359 "lex.c"
 if($cmp74){label=27;break;}else{label=28;break;} //@line 359 "lex.c"
 case 27: 
 var $83=$Lexer_addr; //@line 360 "lex.c"
 var $Pos77=(($83)|0); //@line 360 "lex.c"
 var $84=HEAP32[(($Pos77)>>2)]; //@line 360 "lex.c"
 var $incdec_ptr78=(($84+1)|0); //@line 360 "lex.c"
 HEAP32[(($Pos77)>>2)]=$incdec_ptr78; //@line 360 "lex.c"
 var $85=$Lexer_addr; //@line 360 "lex.c"
 var $CharacterPos79=(($85+16)|0); //@line 360 "lex.c"
 var $86=HEAP32[(($CharacterPos79)>>2)]; //@line 360 "lex.c"
 var $inc80=((($86)+(1))|0); //@line 360 "lex.c"
 HEAP32[(($CharacterPos79)>>2)]=$inc80; //@line 360 "lex.c"
 label=28;break; //@line 360 "lex.c"
 case 28: 
 STACKTOP=sp;return 48; //@line 362 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexGetCharacterConstant($Lexer,$Value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Lexer_addr;
 var $Value_addr;
 $Lexer_addr=$Lexer;
 $Value_addr=$Value;
 var $0=$Value_addr; //@line 368 "lex.c"
 var $Typ=(($0)|0); //@line 368 "lex.c"
 HEAP32[(($Typ)>>2)]=19088; //@line 368 "lex.c"
 var $1=$Lexer_addr; //@line 369 "lex.c"
 var $Pos=(($1)|0); //@line 369 "lex.c"
 var $2=$Lexer_addr; //@line 369 "lex.c"
 var $End=(($2+4)|0); //@line 369 "lex.c"
 var $3=HEAP32[(($End)>>2)]; //@line 369 "lex.c"
 var $call=_LexUnEscapeCharacter($Pos,$3); //@line 369 "lex.c"
 var $4=$Value_addr; //@line 369 "lex.c"
 var $Val=(($4+4)|0); //@line 369 "lex.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 369 "lex.c"
 var $Character=$5; //@line 369 "lex.c"
 HEAP8[($Character)]=$call; //@line 369 "lex.c"
 var $6=$Lexer_addr; //@line 370 "lex.c"
 var $Pos1=(($6)|0); //@line 370 "lex.c"
 var $7=HEAP32[(($Pos1)>>2)]; //@line 370 "lex.c"
 var $8=$Lexer_addr; //@line 370 "lex.c"
 var $End2=(($8+4)|0); //@line 370 "lex.c"
 var $9=HEAP32[(($End2)>>2)]; //@line 370 "lex.c"
 var $cmp=($7|0)!=($9|0); //@line 370 "lex.c"
 if($cmp){label=2;break;}else{label=4;break;} //@line 370 "lex.c"
 case 2: 
 var $10=$Lexer_addr; //@line 370 "lex.c"
 var $Pos3=(($10)|0); //@line 370 "lex.c"
 var $11=HEAP32[(($Pos3)>>2)]; //@line 370 "lex.c"
 var $12=HEAP8[($11)]; //@line 370 "lex.c"
 var $conv=(($12<<24)>>24); //@line 370 "lex.c"
 var $cmp4=($conv|0)!=39; //@line 370 "lex.c"
 if($cmp4){label=3;break;}else{label=4;break;} //@line 370 "lex.c"
 case 3: 
 var $13=$Lexer_addr; //@line 371 "lex.c"
 _LexFail($13,9576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 371 "lex.c"
 label=4;break; //@line 371 "lex.c"
 case 4: 
 var $14=$Lexer_addr; //@line 373 "lex.c"
 var $Pos6=(($14)|0); //@line 373 "lex.c"
 var $15=HEAP32[(($Pos6)>>2)]; //@line 373 "lex.c"
 var $incdec_ptr=(($15+1)|0); //@line 373 "lex.c"
 HEAP32[(($Pos6)>>2)]=$incdec_ptr; //@line 373 "lex.c"
 var $16=$Lexer_addr; //@line 373 "lex.c"
 var $CharacterPos=(($16+16)|0); //@line 373 "lex.c"
 var $17=HEAP32[(($CharacterPos)>>2)]; //@line 373 "lex.c"
 var $inc=((($17)+(1))|0); //@line 373 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=$inc; //@line 373 "lex.c"
 STACKTOP=sp;return 49; //@line 374 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexSkipComment($Lexer,$NextChar,$ReturnToken){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Lexer_addr;
 var $NextChar_addr;
 var $ReturnToken_addr;
 $Lexer_addr=$Lexer;
 $NextChar_addr=$NextChar;
 $ReturnToken_addr=$ReturnToken;
 var $0=$NextChar_addr; //@line 380 "lex.c"
 var $conv=(($0<<24)>>24); //@line 380 "lex.c"
 var $cmp=($conv|0)==42; //@line 380 "lex.c"
 if($cmp){label=2;break;}else{label=14;break;} //@line 380 "lex.c"
 case 2: 
 label=3;break; //@line 383 "lex.c"
 case 3: 
 var $1=$Lexer_addr; //@line 383 "lex.c"
 var $Pos=(($1)|0); //@line 383 "lex.c"
 var $2=HEAP32[(($Pos)>>2)]; //@line 383 "lex.c"
 var $3=$Lexer_addr; //@line 383 "lex.c"
 var $End=(($3+4)|0); //@line 383 "lex.c"
 var $4=HEAP32[(($End)>>2)]; //@line 383 "lex.c"
 var $cmp2=($2|0)!=($4|0); //@line 383 "lex.c"
 if($cmp2){label=4;break;}else{var $12=0;label=7;break;} //@line 383 "lex.c"
 case 4: 
 var $5=$Lexer_addr; //@line 383 "lex.c"
 var $Pos4=(($5)|0); //@line 383 "lex.c"
 var $6=HEAP32[(($Pos4)>>2)]; //@line 383 "lex.c"
 var $add_ptr=((($6)-(1))|0); //@line 383 "lex.c"
 var $7=HEAP8[($add_ptr)]; //@line 383 "lex.c"
 var $conv5=(($7<<24)>>24); //@line 383 "lex.c"
 var $cmp6=($conv5|0)!=42; //@line 383 "lex.c"
 if($cmp6){var $11=1;label=6;break;}else{label=5;break;} //@line 383 "lex.c"
 case 5: 
 var $8=$Lexer_addr; //@line 383 "lex.c"
 var $Pos8=(($8)|0); //@line 383 "lex.c"
 var $9=HEAP32[(($Pos8)>>2)]; //@line 383 "lex.c"
 var $10=HEAP8[($9)]; //@line 383 "lex.c"
 var $conv9=(($10<<24)>>24); //@line 383 "lex.c"
 var $cmp10=($conv9|0)!=47; //@line 383 "lex.c"
 var $11=$cmp10;label=6;break; //@line 383 "lex.c"
 case 6: 
 var $11;
 var $12=$11;label=7;break;
 case 7: 
 var $12;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $13=$Lexer_addr; //@line 385 "lex.c"
 var $Pos12=(($13)|0); //@line 385 "lex.c"
 var $14=HEAP32[(($Pos12)>>2)]; //@line 385 "lex.c"
 var $15=HEAP8[($14)]; //@line 385 "lex.c"
 var $conv13=(($15<<24)>>24); //@line 385 "lex.c"
 var $cmp14=($conv13|0)==10; //@line 385 "lex.c"
 if($cmp14){label=9;break;}else{label=10;break;} //@line 385 "lex.c"
 case 9: 
 var $16=$Lexer_addr; //@line 386 "lex.c"
 var $EmitExtraNewlines=(($16+28)|0); //@line 386 "lex.c"
 var $17=HEAP32[(($EmitExtraNewlines)>>2)]; //@line 386 "lex.c"
 var $inc=((($17)+(1))|0); //@line 386 "lex.c"
 HEAP32[(($EmitExtraNewlines)>>2)]=$inc; //@line 386 "lex.c"
 label=10;break; //@line 386 "lex.c"
 case 10: 
 var $18=$Lexer_addr; //@line 388 "lex.c"
 var $Pos17=(($18)|0); //@line 388 "lex.c"
 var $19=HEAP32[(($Pos17)>>2)]; //@line 388 "lex.c"
 var $incdec_ptr=(($19+1)|0); //@line 388 "lex.c"
 HEAP32[(($Pos17)>>2)]=$incdec_ptr; //@line 388 "lex.c"
 var $20=$Lexer_addr; //@line 388 "lex.c"
 var $CharacterPos=(($20+16)|0); //@line 388 "lex.c"
 var $21=HEAP32[(($CharacterPos)>>2)]; //@line 388 "lex.c"
 var $inc18=((($21)+(1))|0); //@line 388 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=$inc18; //@line 388 "lex.c"
 label=3;break; //@line 389 "lex.c"
 case 11: 
 var $22=$Lexer_addr; //@line 391 "lex.c"
 var $Pos19=(($22)|0); //@line 391 "lex.c"
 var $23=HEAP32[(($Pos19)>>2)]; //@line 391 "lex.c"
 var $24=$Lexer_addr; //@line 391 "lex.c"
 var $End20=(($24+4)|0); //@line 391 "lex.c"
 var $25=HEAP32[(($End20)>>2)]; //@line 391 "lex.c"
 var $cmp21=($23|0)!=($25|0); //@line 391 "lex.c"
 if($cmp21){label=12;break;}else{label=13;break;} //@line 391 "lex.c"
 case 12: 
 var $26=$Lexer_addr; //@line 392 "lex.c"
 var $Pos24=(($26)|0); //@line 392 "lex.c"
 var $27=HEAP32[(($Pos24)>>2)]; //@line 392 "lex.c"
 var $incdec_ptr25=(($27+1)|0); //@line 392 "lex.c"
 HEAP32[(($Pos24)>>2)]=$incdec_ptr25; //@line 392 "lex.c"
 var $28=$Lexer_addr; //@line 392 "lex.c"
 var $CharacterPos26=(($28+16)|0); //@line 392 "lex.c"
 var $29=HEAP32[(($CharacterPos26)>>2)]; //@line 392 "lex.c"
 var $inc27=((($29)+(1))|0); //@line 392 "lex.c"
 HEAP32[(($CharacterPos26)>>2)]=$inc27; //@line 392 "lex.c"
 label=13;break; //@line 392 "lex.c"
 case 13: 
 var $30=$Lexer_addr; //@line 394 "lex.c"
 var $Mode=(($30+24)|0); //@line 394 "lex.c"
 HEAP32[(($Mode)>>2)]=0; //@line 394 "lex.c"
 label=20;break; //@line 395 "lex.c"
 case 14: 
 label=15;break; //@line 399 "lex.c"
 case 15: 
 var $31=$Lexer_addr; //@line 399 "lex.c"
 var $Pos30=(($31)|0); //@line 399 "lex.c"
 var $32=HEAP32[(($Pos30)>>2)]; //@line 399 "lex.c"
 var $33=$Lexer_addr; //@line 399 "lex.c"
 var $End31=(($33+4)|0); //@line 399 "lex.c"
 var $34=HEAP32[(($End31)>>2)]; //@line 399 "lex.c"
 var $cmp32=($32|0)!=($34|0); //@line 399 "lex.c"
 if($cmp32){label=16;break;}else{var $38=0;label=17;break;} //@line 399 "lex.c"
 case 16: 
 var $35=$Lexer_addr; //@line 399 "lex.c"
 var $Pos35=(($35)|0); //@line 399 "lex.c"
 var $36=HEAP32[(($Pos35)>>2)]; //@line 399 "lex.c"
 var $37=HEAP8[($36)]; //@line 399 "lex.c"
 var $conv36=(($37<<24)>>24); //@line 399 "lex.c"
 var $cmp37=($conv36|0)!=10; //@line 399 "lex.c"
 var $38=$cmp37;label=17;break;
 case 17: 
 var $38;
 if($38){label=18;break;}else{label=19;break;}
 case 18: 
 var $39=$Lexer_addr; //@line 400 "lex.c"
 var $Pos41=(($39)|0); //@line 400 "lex.c"
 var $40=HEAP32[(($Pos41)>>2)]; //@line 400 "lex.c"
 var $incdec_ptr42=(($40+1)|0); //@line 400 "lex.c"
 HEAP32[(($Pos41)>>2)]=$incdec_ptr42; //@line 400 "lex.c"
 var $41=$Lexer_addr; //@line 400 "lex.c"
 var $CharacterPos43=(($41+16)|0); //@line 400 "lex.c"
 var $42=HEAP32[(($CharacterPos43)>>2)]; //@line 400 "lex.c"
 var $inc44=((($42)+(1))|0); //@line 400 "lex.c"
 HEAP32[(($CharacterPos43)>>2)]=$inc44; //@line 400 "lex.c"
 label=15;break; //@line 400 "lex.c"
 case 19: 
 label=20;break;
 case 20: 
 return; //@line 402 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexScanGetToken($Lexer,$Value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Lexer_addr;
 var $Value_addr;
 var $ThisChar;
 var $NextChar;
 var $GotToken=sp;
 $Lexer_addr=$Lexer;
 $Value_addr=$Value;
 HEAP32[(($GotToken)>>2)]=0; //@line 409 "lex.c"
 var $0=$Lexer_addr; //@line 412 "lex.c"
 var $EmitExtraNewlines=(($0+28)|0); //@line 412 "lex.c"
 var $1=HEAP32[(($EmitExtraNewlines)>>2)]; //@line 412 "lex.c"
 var $cmp=($1|0)>0; //@line 412 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 412 "lex.c"
 case 2: 
 var $2=$Lexer_addr; //@line 414 "lex.c"
 var $EmitExtraNewlines1=(($2+28)|0); //@line 414 "lex.c"
 var $3=HEAP32[(($EmitExtraNewlines1)>>2)]; //@line 414 "lex.c"
 var $dec=((($3)-(1))|0); //@line 414 "lex.c"
 HEAP32[(($EmitExtraNewlines1)>>2)]=$dec; //@line 414 "lex.c"
 $retval=94; //@line 415 "lex.c"
 label=138;break; //@line 415 "lex.c"
 case 3: 
 label=4;break; //@line 419 "lex.c"
 case 4: 
 var $4=$Value_addr; //@line 421 "lex.c"
 HEAP32[(($4)>>2)]=15504; //@line 421 "lex.c"
 label=5;break; //@line 422 "lex.c"
 case 5: 
 var $5=$Lexer_addr; //@line 422 "lex.c"
 var $Pos=(($5)|0); //@line 422 "lex.c"
 var $6=HEAP32[(($Pos)>>2)]; //@line 422 "lex.c"
 var $7=$Lexer_addr; //@line 422 "lex.c"
 var $End=(($7+4)|0); //@line 422 "lex.c"
 var $8=HEAP32[(($End)>>2)]; //@line 422 "lex.c"
 var $cmp2=($6|0)!=($8|0); //@line 422 "lex.c"
 if($cmp2){label=6;break;}else{var $12=0;label=7;break;} //@line 422 "lex.c"
 case 6: 
 var $9=$Lexer_addr; //@line 422 "lex.c"
 var $Pos3=(($9)|0); //@line 422 "lex.c"
 var $10=HEAP32[(($Pos3)>>2)]; //@line 422 "lex.c"
 var $11=HEAP8[($10)]; //@line 422 "lex.c"
 var $conv=(($11<<24)>>24); //@line 422 "lex.c"
 var $call=_isspace($conv); //@line 422 "lex.c"
 var $tobool=($call|0)!=0; //@line 422 "lex.c"
 var $12=$tobool;label=7;break;
 case 7: 
 var $12;
 if($12){label=8;break;}else{label=18;break;}
 case 8: 
 var $13=$Lexer_addr; //@line 424 "lex.c"
 var $Pos4=(($13)|0); //@line 424 "lex.c"
 var $14=HEAP32[(($Pos4)>>2)]; //@line 424 "lex.c"
 var $15=HEAP8[($14)]; //@line 424 "lex.c"
 var $conv5=(($15<<24)>>24); //@line 424 "lex.c"
 var $cmp6=($conv5|0)==10; //@line 424 "lex.c"
 if($cmp6){label=9;break;}else{label=10;break;} //@line 424 "lex.c"
 case 9: 
 var $16=$Lexer_addr; //@line 426 "lex.c"
 var $Line=(($16+12)|0); //@line 426 "lex.c"
 var $17=HEAP32[(($Line)>>2)]; //@line 426 "lex.c"
 var $inc=((($17)+(1))|0); //@line 426 "lex.c"
 HEAP32[(($Line)>>2)]=$inc; //@line 426 "lex.c"
 var $18=$Lexer_addr; //@line 427 "lex.c"
 var $Pos9=(($18)|0); //@line 427 "lex.c"
 var $19=HEAP32[(($Pos9)>>2)]; //@line 427 "lex.c"
 var $incdec_ptr=(($19+1)|0); //@line 427 "lex.c"
 HEAP32[(($Pos9)>>2)]=$incdec_ptr; //@line 427 "lex.c"
 var $20=$Lexer_addr; //@line 428 "lex.c"
 var $Mode=(($20+24)|0); //@line 428 "lex.c"
 HEAP32[(($Mode)>>2)]=0; //@line 428 "lex.c"
 var $21=$Lexer_addr; //@line 429 "lex.c"
 var $CharacterPos=(($21+16)|0); //@line 429 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=0; //@line 429 "lex.c"
 $retval=94; //@line 430 "lex.c"
 label=138;break; //@line 430 "lex.c"
 case 10: 
 var $22=$Lexer_addr; //@line 432 "lex.c"
 var $Mode10=(($22+24)|0); //@line 432 "lex.c"
 var $23=HEAP32[(($Mode10)>>2)]; //@line 432 "lex.c"
 var $cmp11=($23|0)==2; //@line 432 "lex.c"
 if($cmp11){label=12;break;}else{label=11;break;} //@line 432 "lex.c"
 case 11: 
 var $24=$Lexer_addr; //@line 432 "lex.c"
 var $Mode13=(($24+24)|0); //@line 432 "lex.c"
 var $25=HEAP32[(($Mode13)>>2)]; //@line 432 "lex.c"
 var $cmp14=($25|0)==3; //@line 432 "lex.c"
 if($cmp14){label=12;break;}else{label=13;break;} //@line 432 "lex.c"
 case 12: 
 var $26=$Lexer_addr; //@line 433 "lex.c"
 var $Mode17=(($26+24)|0); //@line 433 "lex.c"
 HEAP32[(($Mode17)>>2)]=3; //@line 433 "lex.c"
 label=16;break; //@line 433 "lex.c"
 case 13: 
 var $27=$Lexer_addr; //@line 435 "lex.c"
 var $Mode19=(($27+24)|0); //@line 435 "lex.c"
 var $28=HEAP32[(($Mode19)>>2)]; //@line 435 "lex.c"
 var $cmp20=($28|0)==4; //@line 435 "lex.c"
 if($cmp20){label=14;break;}else{label=15;break;} //@line 435 "lex.c"
 case 14: 
 var $29=$Lexer_addr; //@line 436 "lex.c"
 var $Mode23=(($29+24)|0); //@line 436 "lex.c"
 HEAP32[(($Mode23)>>2)]=0; //@line 436 "lex.c"
 label=15;break; //@line 436 "lex.c"
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $30=$Lexer_addr; //@line 438 "lex.c"
 var $Pos27=(($30)|0); //@line 438 "lex.c"
 var $31=HEAP32[(($Pos27)>>2)]; //@line 438 "lex.c"
 var $incdec_ptr28=(($31+1)|0); //@line 438 "lex.c"
 HEAP32[(($Pos27)>>2)]=$incdec_ptr28; //@line 438 "lex.c"
 var $32=$Lexer_addr; //@line 438 "lex.c"
 var $CharacterPos29=(($32+16)|0); //@line 438 "lex.c"
 var $33=HEAP32[(($CharacterPos29)>>2)]; //@line 438 "lex.c"
 var $inc30=((($33)+(1))|0); //@line 438 "lex.c"
 HEAP32[(($CharacterPos29)>>2)]=$inc30; //@line 438 "lex.c"
 label=5;break; //@line 439 "lex.c"
 case 18: 
 var $34=$Lexer_addr; //@line 441 "lex.c"
 var $Pos31=(($34)|0); //@line 441 "lex.c"
 var $35=HEAP32[(($Pos31)>>2)]; //@line 441 "lex.c"
 var $36=$Lexer_addr; //@line 441 "lex.c"
 var $End32=(($36+4)|0); //@line 441 "lex.c"
 var $37=HEAP32[(($End32)>>2)]; //@line 441 "lex.c"
 var $cmp33=($35|0)==($37|0); //@line 441 "lex.c"
 if($cmp33){label=20;break;}else{label=19;break;} //@line 441 "lex.c"
 case 19: 
 var $38=$Lexer_addr; //@line 441 "lex.c"
 var $Pos36=(($38)|0); //@line 441 "lex.c"
 var $39=HEAP32[(($Pos36)>>2)]; //@line 441 "lex.c"
 var $40=HEAP8[($39)]; //@line 441 "lex.c"
 var $conv37=(($40<<24)>>24); //@line 441 "lex.c"
 var $cmp38=($conv37|0)==0; //@line 441 "lex.c"
 if($cmp38){label=20;break;}else{label=21;break;} //@line 441 "lex.c"
 case 20: 
 $retval=93; //@line 442 "lex.c"
 label=138;break; //@line 442 "lex.c"
 case 21: 
 var $41=$Lexer_addr; //@line 444 "lex.c"
 var $Pos42=(($41)|0); //@line 444 "lex.c"
 var $42=HEAP32[(($Pos42)>>2)]; //@line 444 "lex.c"
 var $43=HEAP8[($42)]; //@line 444 "lex.c"
 $ThisChar=$43; //@line 444 "lex.c"
 var $44=$ThisChar; //@line 445 "lex.c"
 var $conv43=(($44<<24)>>24); //@line 445 "lex.c"
 var $or=$conv43|32; //@line 445 "lex.c"
 var $sub=((($or)-(97))|0); //@line 445 "lex.c"
 var $cmp44=($sub>>>0)<26; //@line 445 "lex.c"
 if($cmp44){label=24;break;}else{label=22;break;} //@line 445 "lex.c"
 case 22: 
 var $45=$ThisChar; //@line 445 "lex.c"
 var $conv47=(($45<<24)>>24); //@line 445 "lex.c"
 var $cmp48=($conv47|0)==95; //@line 445 "lex.c"
 if($cmp48){label=24;break;}else{label=23;break;} //@line 445 "lex.c"
 case 23: 
 var $46=$ThisChar; //@line 445 "lex.c"
 var $conv51=(($46<<24)>>24); //@line 445 "lex.c"
 var $cmp52=($conv51|0)==35; //@line 445 "lex.c"
 if($cmp52){label=24;break;}else{label=25;break;} //@line 445 "lex.c"
 case 24: 
 var $47=$Lexer_addr; //@line 446 "lex.c"
 var $48=$Value_addr; //@line 446 "lex.c"
 var $49=HEAP32[(($48)>>2)]; //@line 446 "lex.c"
 var $call55=_LexGetWord($47,$49); //@line 446 "lex.c"
 $retval=$call55; //@line 446 "lex.c"
 label=138;break; //@line 446 "lex.c"
 case 25: 
 var $50=$ThisChar; //@line 448 "lex.c"
 var $conv57=(($50<<24)>>24); //@line 448 "lex.c"
 var $sub58=((($conv57)-(48))|0); //@line 448 "lex.c"
 var $cmp59=($sub58>>>0)<10; //@line 448 "lex.c"
 if($cmp59){label=26;break;}else{label=27;break;} //@line 448 "lex.c"
 case 26: 
 var $51=$Lexer_addr; //@line 449 "lex.c"
 var $52=$Value_addr; //@line 449 "lex.c"
 var $53=HEAP32[(($52)>>2)]; //@line 449 "lex.c"
 var $call62=_LexGetNumber($51,$53); //@line 449 "lex.c"
 $retval=$call62; //@line 449 "lex.c"
 label=138;break; //@line 449 "lex.c"
 case 27: 
 var $54=$Lexer_addr; //@line 451 "lex.c"
 var $Pos64=(($54)|0); //@line 451 "lex.c"
 var $55=HEAP32[(($Pos64)>>2)]; //@line 451 "lex.c"
 var $add_ptr=(($55+1)|0); //@line 451 "lex.c"
 var $56=$Lexer_addr; //@line 451 "lex.c"
 var $End65=(($56+4)|0); //@line 451 "lex.c"
 var $57=HEAP32[(($End65)>>2)]; //@line 451 "lex.c"
 var $cmp66=($add_ptr|0)!=($57|0); //@line 451 "lex.c"
 if($cmp66){label=28;break;}else{label=29;break;} //@line 451 "lex.c"
 case 28: 
 var $58=$Lexer_addr; //@line 451 "lex.c"
 var $Pos68=(($58)|0); //@line 451 "lex.c"
 var $59=HEAP32[(($Pos68)>>2)]; //@line 451 "lex.c"
 var $add_ptr69=(($59+1)|0); //@line 451 "lex.c"
 var $60=HEAP8[($add_ptr69)]; //@line 451 "lex.c"
 var $conv70=(($60<<24)>>24); //@line 451 "lex.c"
 var $cond=$conv70;label=30;break; //@line 451 "lex.c"
 case 29: 
 var $cond=0;label=30;break; //@line 451 "lex.c"
 case 30: 
 var $cond; //@line 451 "lex.c"
 var $conv71=(($cond)&255); //@line 451 "lex.c"
 $NextChar=$conv71; //@line 451 "lex.c"
 var $61=$Lexer_addr; //@line 452 "lex.c"
 var $Pos72=(($61)|0); //@line 452 "lex.c"
 var $62=HEAP32[(($Pos72)>>2)]; //@line 452 "lex.c"
 var $incdec_ptr73=(($62+1)|0); //@line 452 "lex.c"
 HEAP32[(($Pos72)>>2)]=$incdec_ptr73; //@line 452 "lex.c"
 var $63=$Lexer_addr; //@line 452 "lex.c"
 var $CharacterPos74=(($63+16)|0); //@line 452 "lex.c"
 var $64=HEAP32[(($CharacterPos74)>>2)]; //@line 452 "lex.c"
 var $inc75=((($64)+(1))|0); //@line 452 "lex.c"
 HEAP32[(($CharacterPos74)>>2)]=$inc75; //@line 452 "lex.c"
 var $65=$ThisChar; //@line 453 "lex.c"
 var $conv76=(($65<<24)>>24); //@line 453 "lex.c"
 switch(($conv76|0)){case 124:{ label=106;break;}case 123:{ label=113;break;}case 125:{ label=114;break;}case 91:{ label=115;break;}case 93:{ label=116;break;}case 33:{ label=117;break;}case 94:{ label=121;break;}case 126:{ label=125;break;}case 44:{ label=126;break;}case 46:{ label=127;break;}case 63:{ label=132;break;}case 58:{ label=133;break;}case 34:{ label=31;break;}case 39:{ label=32;break;}case 40:{ label=33;break;}case 41:{ label=37;break;}case 61:{ label=38;break;}case 43:{ label=42;break;}case 45:{ label=49;break;}case 42:{ label=59;break;}case 47:{ label=63;break;}case 37:{ label=71;break;}case 60:{ label=75;break;}case 62:{ label=88;break;}case 59:{ label=98;break;}case 38:{ label=99;break;}default:{label=134;break;}}break;
 case 31: 
 var $66=$Lexer_addr; //@line 455 "lex.c"
 var $67=$Value_addr; //@line 455 "lex.c"
 var $68=HEAP32[(($67)>>2)]; //@line 455 "lex.c"
 var $call77=_LexGetStringConstant($66,$68,34); //@line 455 "lex.c"
 HEAP32[(($GotToken)>>2)]=$call77; //@line 455 "lex.c"
 label=135;break; //@line 455 "lex.c"
 case 32: 
 var $69=$Lexer_addr; //@line 456 "lex.c"
 var $70=$Value_addr; //@line 456 "lex.c"
 var $71=HEAP32[(($70)>>2)]; //@line 456 "lex.c"
 var $call79=_LexGetCharacterConstant($69,$71); //@line 456 "lex.c"
 HEAP32[(($GotToken)>>2)]=$call79; //@line 456 "lex.c"
 label=135;break; //@line 456 "lex.c"
 case 33: 
 var $72=$Lexer_addr; //@line 457 "lex.c"
 var $Mode81=(($72+24)|0); //@line 457 "lex.c"
 var $73=HEAP32[(($Mode81)>>2)]; //@line 457 "lex.c"
 var $cmp82=($73|0)==4; //@line 457 "lex.c"
 if($cmp82){label=34;break;}else{label=35;break;} //@line 457 "lex.c"
 case 34: 
 HEAP32[(($GotToken)>>2)]=92; //@line 457 "lex.c"
 label=36;break; //@line 457 "lex.c"
 case 35: 
 HEAP32[(($GotToken)>>2)]=43; //@line 457 "lex.c"
 label=36;break;
 case 36: 
 var $74=$Lexer_addr; //@line 457 "lex.c"
 var $Mode87=(($74+24)|0); //@line 457 "lex.c"
 HEAP32[(($Mode87)>>2)]=0; //@line 457 "lex.c"
 label=135;break; //@line 457 "lex.c"
 case 37: 
 HEAP32[(($GotToken)>>2)]=44; //@line 458 "lex.c"
 label=135;break; //@line 458 "lex.c"
 case 38: 
 var $75=$NextChar; //@line 459 "lex.c"
 var $conv90=(($75<<24)>>24); //@line 459 "lex.c"
 var $cmp91=($conv90|0)==61; //@line 459 "lex.c"
 if($cmp91){label=39;break;}else{label=40;break;} //@line 459 "lex.c"
 case 39: 
 var $76=$Lexer_addr; //@line 459 "lex.c"
 var $Pos94=(($76)|0); //@line 459 "lex.c"
 var $77=HEAP32[(($Pos94)>>2)]; //@line 459 "lex.c"
 var $incdec_ptr95=(($77+1)|0); //@line 459 "lex.c"
 HEAP32[(($Pos94)>>2)]=$incdec_ptr95; //@line 459 "lex.c"
 var $78=$Lexer_addr; //@line 459 "lex.c"
 var $CharacterPos96=(($78+16)|0); //@line 459 "lex.c"
 var $79=HEAP32[(($CharacterPos96)>>2)]; //@line 459 "lex.c"
 var $inc97=((($79)+(1))|0); //@line 459 "lex.c"
 HEAP32[(($CharacterPos96)>>2)]=$inc97; //@line 459 "lex.c"
 HEAP32[(($GotToken)>>2)]=20; //@line 459 "lex.c"
 label=41;break; //@line 459 "lex.c"
 case 40: 
 HEAP32[(($GotToken)>>2)]=2; //@line 459 "lex.c"
 label=41;break;
 case 41: 
 label=135;break; //@line 459 "lex.c"
 case 42: 
 var $80=$NextChar; //@line 460 "lex.c"
 var $conv101=(($80<<24)>>24); //@line 460 "lex.c"
 var $cmp102=($conv101|0)==61; //@line 460 "lex.c"
 if($cmp102){label=43;break;}else{label=44;break;} //@line 460 "lex.c"
 case 43: 
 var $81=$Lexer_addr; //@line 460 "lex.c"
 var $Pos105=(($81)|0); //@line 460 "lex.c"
 var $82=HEAP32[(($Pos105)>>2)]; //@line 460 "lex.c"
 var $incdec_ptr106=(($82+1)|0); //@line 460 "lex.c"
 HEAP32[(($Pos105)>>2)]=$incdec_ptr106; //@line 460 "lex.c"
 var $83=$Lexer_addr; //@line 460 "lex.c"
 var $CharacterPos107=(($83+16)|0); //@line 460 "lex.c"
 var $84=HEAP32[(($CharacterPos107)>>2)]; //@line 460 "lex.c"
 var $inc108=((($84)+(1))|0); //@line 460 "lex.c"
 HEAP32[(($CharacterPos107)>>2)]=$inc108; //@line 460 "lex.c"
 HEAP32[(($GotToken)>>2)]=3; //@line 460 "lex.c"
 label=48;break; //@line 460 "lex.c"
 case 44: 
 var $85=$NextChar; //@line 460 "lex.c"
 var $conv110=(($85<<24)>>24); //@line 460 "lex.c"
 var $cmp111=($conv110|0)==43; //@line 460 "lex.c"
 if($cmp111){label=45;break;}else{label=46;break;} //@line 460 "lex.c"
 case 45: 
 var $86=$Lexer_addr; //@line 460 "lex.c"
 var $Pos114=(($86)|0); //@line 460 "lex.c"
 var $87=HEAP32[(($Pos114)>>2)]; //@line 460 "lex.c"
 var $incdec_ptr115=(($87+1)|0); //@line 460 "lex.c"
 HEAP32[(($Pos114)>>2)]=$incdec_ptr115; //@line 460 "lex.c"
 var $88=$Lexer_addr; //@line 460 "lex.c"
 var $CharacterPos116=(($88+16)|0); //@line 460 "lex.c"
 var $89=HEAP32[(($CharacterPos116)>>2)]; //@line 460 "lex.c"
 var $inc117=((($89)+(1))|0); //@line 460 "lex.c"
 HEAP32[(($CharacterPos116)>>2)]=$inc117; //@line 460 "lex.c"
 HEAP32[(($GotToken)>>2)]=33; //@line 460 "lex.c"
 label=47;break; //@line 460 "lex.c"
 case 46: 
 HEAP32[(($GotToken)>>2)]=28; //@line 460 "lex.c"
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=135;break; //@line 460 "lex.c"
 case 49: 
 var $90=$NextChar; //@line 461 "lex.c"
 var $conv122=(($90<<24)>>24); //@line 461 "lex.c"
 var $cmp123=($conv122|0)==61; //@line 461 "lex.c"
 if($cmp123){label=50;break;}else{label=51;break;} //@line 461 "lex.c"
 case 50: 
 var $91=$Lexer_addr; //@line 461 "lex.c"
 var $Pos126=(($91)|0); //@line 461 "lex.c"
 var $92=HEAP32[(($Pos126)>>2)]; //@line 461 "lex.c"
 var $incdec_ptr127=(($92+1)|0); //@line 461 "lex.c"
 HEAP32[(($Pos126)>>2)]=$incdec_ptr127; //@line 461 "lex.c"
 var $93=$Lexer_addr; //@line 461 "lex.c"
 var $CharacterPos128=(($93+16)|0); //@line 461 "lex.c"
 var $94=HEAP32[(($CharacterPos128)>>2)]; //@line 461 "lex.c"
 var $inc129=((($94)+(1))|0); //@line 461 "lex.c"
 HEAP32[(($CharacterPos128)>>2)]=$inc129; //@line 461 "lex.c"
 HEAP32[(($GotToken)>>2)]=4; //@line 461 "lex.c"
 label=58;break; //@line 461 "lex.c"
 case 51: 
 var $95=$NextChar; //@line 461 "lex.c"
 var $conv131=(($95<<24)>>24); //@line 461 "lex.c"
 var $cmp132=($conv131|0)==62; //@line 461 "lex.c"
 if($cmp132){label=52;break;}else{label=53;break;} //@line 461 "lex.c"
 case 52: 
 var $96=$Lexer_addr; //@line 461 "lex.c"
 var $Pos135=(($96)|0); //@line 461 "lex.c"
 var $97=HEAP32[(($Pos135)>>2)]; //@line 461 "lex.c"
 var $incdec_ptr136=(($97+1)|0); //@line 461 "lex.c"
 HEAP32[(($Pos135)>>2)]=$incdec_ptr136; //@line 461 "lex.c"
 var $98=$Lexer_addr; //@line 461 "lex.c"
 var $CharacterPos137=(($98+16)|0); //@line 461 "lex.c"
 var $99=HEAP32[(($CharacterPos137)>>2)]; //@line 461 "lex.c"
 var $inc138=((($99)+(1))|0); //@line 461 "lex.c"
 HEAP32[(($CharacterPos137)>>2)]=$inc138; //@line 461 "lex.c"
 HEAP32[(($GotToken)>>2)]=42; //@line 461 "lex.c"
 label=57;break; //@line 461 "lex.c"
 case 53: 
 var $100=$NextChar; //@line 461 "lex.c"
 var $conv140=(($100<<24)>>24); //@line 461 "lex.c"
 var $cmp141=($conv140|0)==45; //@line 461 "lex.c"
 if($cmp141){label=54;break;}else{label=55;break;} //@line 461 "lex.c"
 case 54: 
 var $101=$Lexer_addr; //@line 461 "lex.c"
 var $Pos144=(($101)|0); //@line 461 "lex.c"
 var $102=HEAP32[(($Pos144)>>2)]; //@line 461 "lex.c"
 var $incdec_ptr145=(($102+1)|0); //@line 461 "lex.c"
 HEAP32[(($Pos144)>>2)]=$incdec_ptr145; //@line 461 "lex.c"
 var $103=$Lexer_addr; //@line 461 "lex.c"
 var $CharacterPos146=(($103+16)|0); //@line 461 "lex.c"
 var $104=HEAP32[(($CharacterPos146)>>2)]; //@line 461 "lex.c"
 var $inc147=((($104)+(1))|0); //@line 461 "lex.c"
 HEAP32[(($CharacterPos146)>>2)]=$inc147; //@line 461 "lex.c"
 HEAP32[(($GotToken)>>2)]=34; //@line 461 "lex.c"
 label=56;break; //@line 461 "lex.c"
 case 55: 
 HEAP32[(($GotToken)>>2)]=29; //@line 461 "lex.c"
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=135;break; //@line 461 "lex.c"
 case 59: 
 var $105=$NextChar; //@line 462 "lex.c"
 var $conv153=(($105<<24)>>24); //@line 462 "lex.c"
 var $cmp154=($conv153|0)==61; //@line 462 "lex.c"
 if($cmp154){label=60;break;}else{label=61;break;} //@line 462 "lex.c"
 case 60: 
 var $106=$Lexer_addr; //@line 462 "lex.c"
 var $Pos157=(($106)|0); //@line 462 "lex.c"
 var $107=HEAP32[(($Pos157)>>2)]; //@line 462 "lex.c"
 var $incdec_ptr158=(($107+1)|0); //@line 462 "lex.c"
 HEAP32[(($Pos157)>>2)]=$incdec_ptr158; //@line 462 "lex.c"
 var $108=$Lexer_addr; //@line 462 "lex.c"
 var $CharacterPos159=(($108+16)|0); //@line 462 "lex.c"
 var $109=HEAP32[(($CharacterPos159)>>2)]; //@line 462 "lex.c"
 var $inc160=((($109)+(1))|0); //@line 462 "lex.c"
 HEAP32[(($CharacterPos159)>>2)]=$inc160; //@line 462 "lex.c"
 HEAP32[(($GotToken)>>2)]=5; //@line 462 "lex.c"
 label=62;break; //@line 462 "lex.c"
 case 61: 
 HEAP32[(($GotToken)>>2)]=30; //@line 462 "lex.c"
 label=62;break;
 case 62: 
 label=135;break; //@line 462 "lex.c"
 case 63: 
 var $110=$NextChar; //@line 463 "lex.c"
 var $conv164=(($110<<24)>>24); //@line 463 "lex.c"
 var $cmp165=($conv164|0)==47; //@line 463 "lex.c"
 if($cmp165){label=65;break;}else{label=64;break;} //@line 463 "lex.c"
 case 64: 
 var $111=$NextChar; //@line 463 "lex.c"
 var $conv168=(($111<<24)>>24); //@line 463 "lex.c"
 var $cmp169=($conv168|0)==42; //@line 463 "lex.c"
 if($cmp169){label=65;break;}else{label=66;break;} //@line 463 "lex.c"
 case 65: 
 var $112=$Lexer_addr; //@line 463 "lex.c"
 var $Pos172=(($112)|0); //@line 463 "lex.c"
 var $113=HEAP32[(($Pos172)>>2)]; //@line 463 "lex.c"
 var $incdec_ptr173=(($113+1)|0); //@line 463 "lex.c"
 HEAP32[(($Pos172)>>2)]=$incdec_ptr173; //@line 463 "lex.c"
 var $114=$Lexer_addr; //@line 463 "lex.c"
 var $CharacterPos174=(($114+16)|0); //@line 463 "lex.c"
 var $115=HEAP32[(($CharacterPos174)>>2)]; //@line 463 "lex.c"
 var $inc175=((($115)+(1))|0); //@line 463 "lex.c"
 HEAP32[(($CharacterPos174)>>2)]=$inc175; //@line 463 "lex.c"
 var $116=$Lexer_addr; //@line 463 "lex.c"
 var $117=$NextChar; //@line 463 "lex.c"
 _LexSkipComment($116,$117,$GotToken); //@line 463 "lex.c"
 label=70;break; //@line 463 "lex.c"
 case 66: 
 var $118=$NextChar; //@line 463 "lex.c"
 var $conv177=(($118<<24)>>24); //@line 463 "lex.c"
 var $cmp178=($conv177|0)==61; //@line 463 "lex.c"
 if($cmp178){label=67;break;}else{label=68;break;} //@line 463 "lex.c"
 case 67: 
 var $119=$Lexer_addr; //@line 463 "lex.c"
 var $Pos181=(($119)|0); //@line 463 "lex.c"
 var $120=HEAP32[(($Pos181)>>2)]; //@line 463 "lex.c"
 var $incdec_ptr182=(($120+1)|0); //@line 463 "lex.c"
 HEAP32[(($Pos181)>>2)]=$incdec_ptr182; //@line 463 "lex.c"
 var $121=$Lexer_addr; //@line 463 "lex.c"
 var $CharacterPos183=(($121+16)|0); //@line 463 "lex.c"
 var $122=HEAP32[(($CharacterPos183)>>2)]; //@line 463 "lex.c"
 var $inc184=((($122)+(1))|0); //@line 463 "lex.c"
 HEAP32[(($CharacterPos183)>>2)]=$inc184; //@line 463 "lex.c"
 HEAP32[(($GotToken)>>2)]=6; //@line 463 "lex.c"
 label=69;break; //@line 463 "lex.c"
 case 68: 
 HEAP32[(($GotToken)>>2)]=31; //@line 463 "lex.c"
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 label=135;break; //@line 463 "lex.c"
 case 71: 
 var $123=$NextChar; //@line 464 "lex.c"
 var $conv189=(($123<<24)>>24); //@line 464 "lex.c"
 var $cmp190=($conv189|0)==61; //@line 464 "lex.c"
 if($cmp190){label=72;break;}else{label=73;break;} //@line 464 "lex.c"
 case 72: 
 var $124=$Lexer_addr; //@line 464 "lex.c"
 var $Pos193=(($124)|0); //@line 464 "lex.c"
 var $125=HEAP32[(($Pos193)>>2)]; //@line 464 "lex.c"
 var $incdec_ptr194=(($125+1)|0); //@line 464 "lex.c"
 HEAP32[(($Pos193)>>2)]=$incdec_ptr194; //@line 464 "lex.c"
 var $126=$Lexer_addr; //@line 464 "lex.c"
 var $CharacterPos195=(($126+16)|0); //@line 464 "lex.c"
 var $127=HEAP32[(($CharacterPos195)>>2)]; //@line 464 "lex.c"
 var $inc196=((($127)+(1))|0); //@line 464 "lex.c"
 HEAP32[(($CharacterPos195)>>2)]=$inc196; //@line 464 "lex.c"
 HEAP32[(($GotToken)>>2)]=7; //@line 464 "lex.c"
 label=74;break; //@line 464 "lex.c"
 case 73: 
 HEAP32[(($GotToken)>>2)]=32; //@line 464 "lex.c"
 label=74;break;
 case 74: 
 label=135;break; //@line 464 "lex.c"
 case 75: 
 var $128=$Lexer_addr; //@line 465 "lex.c"
 var $Mode200=(($128+24)|0); //@line 465 "lex.c"
 var $129=HEAP32[(($Mode200)>>2)]; //@line 465 "lex.c"
 var $cmp201=($129|0)==1; //@line 465 "lex.c"
 if($cmp201){label=76;break;}else{label=77;break;} //@line 465 "lex.c"
 case 76: 
 var $130=$Lexer_addr; //@line 465 "lex.c"
 var $131=$Value_addr; //@line 465 "lex.c"
 var $132=HEAP32[(($131)>>2)]; //@line 465 "lex.c"
 var $call204=_LexGetStringConstant($130,$132,62); //@line 465 "lex.c"
 HEAP32[(($GotToken)>>2)]=$call204; //@line 465 "lex.c"
 label=87;break; //@line 465 "lex.c"
 case 77: 
 var $133=$NextChar; //@line 465 "lex.c"
 var $conv206=(($133<<24)>>24); //@line 465 "lex.c"
 var $cmp207=($conv206|0)==61; //@line 465 "lex.c"
 if($cmp207){label=78;break;}else{label=79;break;} //@line 465 "lex.c"
 case 78: 
 var $134=$Lexer_addr; //@line 465 "lex.c"
 var $Pos210=(($134)|0); //@line 465 "lex.c"
 var $135=HEAP32[(($Pos210)>>2)]; //@line 465 "lex.c"
 var $incdec_ptr211=(($135+1)|0); //@line 465 "lex.c"
 HEAP32[(($Pos210)>>2)]=$incdec_ptr211; //@line 465 "lex.c"
 var $136=$Lexer_addr; //@line 465 "lex.c"
 var $CharacterPos212=(($136+16)|0); //@line 465 "lex.c"
 var $137=HEAP32[(($CharacterPos212)>>2)]; //@line 465 "lex.c"
 var $inc213=((($137)+(1))|0); //@line 465 "lex.c"
 HEAP32[(($CharacterPos212)>>2)]=$inc213; //@line 465 "lex.c"
 HEAP32[(($GotToken)>>2)]=24; //@line 465 "lex.c"
 label=86;break; //@line 465 "lex.c"
 case 79: 
 var $138=$NextChar; //@line 465 "lex.c"
 var $conv215=(($138<<24)>>24); //@line 465 "lex.c"
 var $cmp216=($conv215|0)==60; //@line 465 "lex.c"
 if($cmp216){label=80;break;}else{label=84;break;} //@line 465 "lex.c"
 case 80: 
 var $139=$Lexer_addr; //@line 465 "lex.c"
 var $Pos219=(($139)|0); //@line 465 "lex.c"
 var $140=HEAP32[(($Pos219)>>2)]; //@line 465 "lex.c"
 var $arrayidx=(($140+1)|0); //@line 465 "lex.c"
 var $141=HEAP8[($arrayidx)]; //@line 465 "lex.c"
 var $conv220=(($141<<24)>>24); //@line 465 "lex.c"
 var $cmp221=($conv220|0)==61; //@line 465 "lex.c"
 if($cmp221){label=81;break;}else{label=82;break;} //@line 465 "lex.c"
 case 81: 
 var $142=$Lexer_addr; //@line 465 "lex.c"
 var $Pos224=(($142)|0); //@line 465 "lex.c"
 var $143=HEAP32[(($Pos224)>>2)]; //@line 465 "lex.c"
 var $add_ptr225=(($143+2)|0); //@line 465 "lex.c"
 HEAP32[(($Pos224)>>2)]=$add_ptr225; //@line 465 "lex.c"
 var $144=$Lexer_addr; //@line 465 "lex.c"
 var $CharacterPos226=(($144+16)|0); //@line 465 "lex.c"
 var $145=HEAP32[(($CharacterPos226)>>2)]; //@line 465 "lex.c"
 var $add=((($145)+(2))|0); //@line 465 "lex.c"
 HEAP32[(($CharacterPos226)>>2)]=$add; //@line 465 "lex.c"
 HEAP32[(($GotToken)>>2)]=8; //@line 465 "lex.c"
 label=83;break; //@line 465 "lex.c"
 case 82: 
 var $146=$Lexer_addr; //@line 465 "lex.c"
 var $Pos228=(($146)|0); //@line 465 "lex.c"
 var $147=HEAP32[(($Pos228)>>2)]; //@line 465 "lex.c"
 var $incdec_ptr229=(($147+1)|0); //@line 465 "lex.c"
 HEAP32[(($Pos228)>>2)]=$incdec_ptr229; //@line 465 "lex.c"
 var $148=$Lexer_addr; //@line 465 "lex.c"
 var $CharacterPos230=(($148+16)|0); //@line 465 "lex.c"
 var $149=HEAP32[(($CharacterPos230)>>2)]; //@line 465 "lex.c"
 var $inc231=((($149)+(1))|0); //@line 465 "lex.c"
 HEAP32[(($CharacterPos230)>>2)]=$inc231; //@line 465 "lex.c"
 HEAP32[(($GotToken)>>2)]=26; //@line 465 "lex.c"
 label=83;break;
 case 83: 
 label=85;break; //@line 465 "lex.c"
 case 84: 
 HEAP32[(($GotToken)>>2)]=22; //@line 465 "lex.c"
 label=85;break;
 case 85: 
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 label=135;break; //@line 465 "lex.c"
 case 88: 
 var $150=$NextChar; //@line 466 "lex.c"
 var $conv238=(($150<<24)>>24); //@line 466 "lex.c"
 var $cmp239=($conv238|0)==61; //@line 466 "lex.c"
 if($cmp239){label=89;break;}else{label=90;break;} //@line 466 "lex.c"
 case 89: 
 var $151=$Lexer_addr; //@line 466 "lex.c"
 var $Pos242=(($151)|0); //@line 466 "lex.c"
 var $152=HEAP32[(($Pos242)>>2)]; //@line 466 "lex.c"
 var $incdec_ptr243=(($152+1)|0); //@line 466 "lex.c"
 HEAP32[(($Pos242)>>2)]=$incdec_ptr243; //@line 466 "lex.c"
 var $153=$Lexer_addr; //@line 466 "lex.c"
 var $CharacterPos244=(($153+16)|0); //@line 466 "lex.c"
 var $154=HEAP32[(($CharacterPos244)>>2)]; //@line 466 "lex.c"
 var $inc245=((($154)+(1))|0); //@line 466 "lex.c"
 HEAP32[(($CharacterPos244)>>2)]=$inc245; //@line 466 "lex.c"
 HEAP32[(($GotToken)>>2)]=25; //@line 466 "lex.c"
 label=97;break; //@line 466 "lex.c"
 case 90: 
 var $155=$NextChar; //@line 466 "lex.c"
 var $conv247=(($155<<24)>>24); //@line 466 "lex.c"
 var $cmp248=($conv247|0)==62; //@line 466 "lex.c"
 if($cmp248){label=91;break;}else{label=95;break;} //@line 466 "lex.c"
 case 91: 
 var $156=$Lexer_addr; //@line 466 "lex.c"
 var $Pos251=(($156)|0); //@line 466 "lex.c"
 var $157=HEAP32[(($Pos251)>>2)]; //@line 466 "lex.c"
 var $arrayidx252=(($157+1)|0); //@line 466 "lex.c"
 var $158=HEAP8[($arrayidx252)]; //@line 466 "lex.c"
 var $conv253=(($158<<24)>>24); //@line 466 "lex.c"
 var $cmp254=($conv253|0)==61; //@line 466 "lex.c"
 if($cmp254){label=92;break;}else{label=93;break;} //@line 466 "lex.c"
 case 92: 
 var $159=$Lexer_addr; //@line 466 "lex.c"
 var $Pos257=(($159)|0); //@line 466 "lex.c"
 var $160=HEAP32[(($Pos257)>>2)]; //@line 466 "lex.c"
 var $add_ptr258=(($160+2)|0); //@line 466 "lex.c"
 HEAP32[(($Pos257)>>2)]=$add_ptr258; //@line 466 "lex.c"
 var $161=$Lexer_addr; //@line 466 "lex.c"
 var $CharacterPos259=(($161+16)|0); //@line 466 "lex.c"
 var $162=HEAP32[(($CharacterPos259)>>2)]; //@line 466 "lex.c"
 var $add260=((($162)+(2))|0); //@line 466 "lex.c"
 HEAP32[(($CharacterPos259)>>2)]=$add260; //@line 466 "lex.c"
 HEAP32[(($GotToken)>>2)]=9; //@line 466 "lex.c"
 label=94;break; //@line 466 "lex.c"
 case 93: 
 var $163=$Lexer_addr; //@line 466 "lex.c"
 var $Pos262=(($163)|0); //@line 466 "lex.c"
 var $164=HEAP32[(($Pos262)>>2)]; //@line 466 "lex.c"
 var $incdec_ptr263=(($164+1)|0); //@line 466 "lex.c"
 HEAP32[(($Pos262)>>2)]=$incdec_ptr263; //@line 466 "lex.c"
 var $165=$Lexer_addr; //@line 466 "lex.c"
 var $CharacterPos264=(($165+16)|0); //@line 466 "lex.c"
 var $166=HEAP32[(($CharacterPos264)>>2)]; //@line 466 "lex.c"
 var $inc265=((($166)+(1))|0); //@line 466 "lex.c"
 HEAP32[(($CharacterPos264)>>2)]=$inc265; //@line 466 "lex.c"
 HEAP32[(($GotToken)>>2)]=27; //@line 466 "lex.c"
 label=94;break;
 case 94: 
 label=96;break; //@line 466 "lex.c"
 case 95: 
 HEAP32[(($GotToken)>>2)]=23; //@line 466 "lex.c"
 label=96;break;
 case 96: 
 label=97;break;
 case 97: 
 label=135;break; //@line 466 "lex.c"
 case 98: 
 HEAP32[(($GotToken)>>2)]=50; //@line 467 "lex.c"
 label=135;break; //@line 467 "lex.c"
 case 99: 
 var $167=$NextChar; //@line 468 "lex.c"
 var $conv272=(($167<<24)>>24); //@line 468 "lex.c"
 var $cmp273=($conv272|0)==61; //@line 468 "lex.c"
 if($cmp273){label=100;break;}else{label=101;break;} //@line 468 "lex.c"
 case 100: 
 var $168=$Lexer_addr; //@line 468 "lex.c"
 var $Pos276=(($168)|0); //@line 468 "lex.c"
 var $169=HEAP32[(($Pos276)>>2)]; //@line 468 "lex.c"
 var $incdec_ptr277=(($169+1)|0); //@line 468 "lex.c"
 HEAP32[(($Pos276)>>2)]=$incdec_ptr277; //@line 468 "lex.c"
 var $170=$Lexer_addr; //@line 468 "lex.c"
 var $CharacterPos278=(($170+16)|0); //@line 468 "lex.c"
 var $171=HEAP32[(($CharacterPos278)>>2)]; //@line 468 "lex.c"
 var $inc279=((($171)+(1))|0); //@line 468 "lex.c"
 HEAP32[(($CharacterPos278)>>2)]=$inc279; //@line 468 "lex.c"
 HEAP32[(($GotToken)>>2)]=10; //@line 468 "lex.c"
 label=105;break; //@line 468 "lex.c"
 case 101: 
 var $172=$NextChar; //@line 468 "lex.c"
 var $conv281=(($172<<24)>>24); //@line 468 "lex.c"
 var $cmp282=($conv281|0)==38; //@line 468 "lex.c"
 if($cmp282){label=102;break;}else{label=103;break;} //@line 468 "lex.c"
 case 102: 
 var $173=$Lexer_addr; //@line 468 "lex.c"
 var $Pos285=(($173)|0); //@line 468 "lex.c"
 var $174=HEAP32[(($Pos285)>>2)]; //@line 468 "lex.c"
 var $incdec_ptr286=(($174+1)|0); //@line 468 "lex.c"
 HEAP32[(($Pos285)>>2)]=$incdec_ptr286; //@line 468 "lex.c"
 var $175=$Lexer_addr; //@line 468 "lex.c"
 var $CharacterPos287=(($175+16)|0); //@line 468 "lex.c"
 var $176=HEAP32[(($CharacterPos287)>>2)]; //@line 468 "lex.c"
 var $inc288=((($176)+(1))|0); //@line 468 "lex.c"
 HEAP32[(($CharacterPos287)>>2)]=$inc288; //@line 468 "lex.c"
 HEAP32[(($GotToken)>>2)]=16; //@line 468 "lex.c"
 label=104;break; //@line 468 "lex.c"
 case 103: 
 HEAP32[(($GotToken)>>2)]=19; //@line 468 "lex.c"
 label=104;break;
 case 104: 
 label=105;break;
 case 105: 
 label=135;break; //@line 468 "lex.c"
 case 106: 
 var $177=$NextChar; //@line 469 "lex.c"
 var $conv293=(($177<<24)>>24); //@line 469 "lex.c"
 var $cmp294=($conv293|0)==61; //@line 469 "lex.c"
 if($cmp294){label=107;break;}else{label=108;break;} //@line 469 "lex.c"
 case 107: 
 var $178=$Lexer_addr; //@line 469 "lex.c"
 var $Pos297=(($178)|0); //@line 469 "lex.c"
 var $179=HEAP32[(($Pos297)>>2)]; //@line 469 "lex.c"
 var $incdec_ptr298=(($179+1)|0); //@line 469 "lex.c"
 HEAP32[(($Pos297)>>2)]=$incdec_ptr298; //@line 469 "lex.c"
 var $180=$Lexer_addr; //@line 469 "lex.c"
 var $CharacterPos299=(($180+16)|0); //@line 469 "lex.c"
 var $181=HEAP32[(($CharacterPos299)>>2)]; //@line 469 "lex.c"
 var $inc300=((($181)+(1))|0); //@line 469 "lex.c"
 HEAP32[(($CharacterPos299)>>2)]=$inc300; //@line 469 "lex.c"
 HEAP32[(($GotToken)>>2)]=11; //@line 469 "lex.c"
 label=112;break; //@line 469 "lex.c"
 case 108: 
 var $182=$NextChar; //@line 469 "lex.c"
 var $conv302=(($182<<24)>>24); //@line 469 "lex.c"
 var $cmp303=($conv302|0)==124; //@line 469 "lex.c"
 if($cmp303){label=109;break;}else{label=110;break;} //@line 469 "lex.c"
 case 109: 
 var $183=$Lexer_addr; //@line 469 "lex.c"
 var $Pos306=(($183)|0); //@line 469 "lex.c"
 var $184=HEAP32[(($Pos306)>>2)]; //@line 469 "lex.c"
 var $incdec_ptr307=(($184+1)|0); //@line 469 "lex.c"
 HEAP32[(($Pos306)>>2)]=$incdec_ptr307; //@line 469 "lex.c"
 var $185=$Lexer_addr; //@line 469 "lex.c"
 var $CharacterPos308=(($185+16)|0); //@line 469 "lex.c"
 var $186=HEAP32[(($CharacterPos308)>>2)]; //@line 469 "lex.c"
 var $inc309=((($186)+(1))|0); //@line 469 "lex.c"
 HEAP32[(($CharacterPos308)>>2)]=$inc309; //@line 469 "lex.c"
 HEAP32[(($GotToken)>>2)]=15; //@line 469 "lex.c"
 label=111;break; //@line 469 "lex.c"
 case 110: 
 HEAP32[(($GotToken)>>2)]=17; //@line 469 "lex.c"
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 label=135;break; //@line 469 "lex.c"
 case 113: 
 HEAP32[(($GotToken)>>2)]=52; //@line 470 "lex.c"
 label=135;break; //@line 470 "lex.c"
 case 114: 
 HEAP32[(($GotToken)>>2)]=53; //@line 471 "lex.c"
 label=135;break; //@line 471 "lex.c"
 case 115: 
 HEAP32[(($GotToken)>>2)]=39; //@line 472 "lex.c"
 label=135;break; //@line 472 "lex.c"
 case 116: 
 HEAP32[(($GotToken)>>2)]=40; //@line 473 "lex.c"
 label=135;break; //@line 473 "lex.c"
 case 117: 
 var $187=$NextChar; //@line 474 "lex.c"
 var $conv318=(($187<<24)>>24); //@line 474 "lex.c"
 var $cmp319=($conv318|0)==61; //@line 474 "lex.c"
 if($cmp319){label=118;break;}else{label=119;break;} //@line 474 "lex.c"
 case 118: 
 var $188=$Lexer_addr; //@line 474 "lex.c"
 var $Pos322=(($188)|0); //@line 474 "lex.c"
 var $189=HEAP32[(($Pos322)>>2)]; //@line 474 "lex.c"
 var $incdec_ptr323=(($189+1)|0); //@line 474 "lex.c"
 HEAP32[(($Pos322)>>2)]=$incdec_ptr323; //@line 474 "lex.c"
 var $190=$Lexer_addr; //@line 474 "lex.c"
 var $CharacterPos324=(($190+16)|0); //@line 474 "lex.c"
 var $191=HEAP32[(($CharacterPos324)>>2)]; //@line 474 "lex.c"
 var $inc325=((($191)+(1))|0); //@line 474 "lex.c"
 HEAP32[(($CharacterPos324)>>2)]=$inc325; //@line 474 "lex.c"
 HEAP32[(($GotToken)>>2)]=21; //@line 474 "lex.c"
 label=120;break; //@line 474 "lex.c"
 case 119: 
 HEAP32[(($GotToken)>>2)]=35; //@line 474 "lex.c"
 label=120;break;
 case 120: 
 label=135;break; //@line 474 "lex.c"
 case 121: 
 var $192=$NextChar; //@line 475 "lex.c"
 var $conv329=(($192<<24)>>24); //@line 475 "lex.c"
 var $cmp330=($conv329|0)==61; //@line 475 "lex.c"
 if($cmp330){label=122;break;}else{label=123;break;} //@line 475 "lex.c"
 case 122: 
 var $193=$Lexer_addr; //@line 475 "lex.c"
 var $Pos333=(($193)|0); //@line 475 "lex.c"
 var $194=HEAP32[(($Pos333)>>2)]; //@line 475 "lex.c"
 var $incdec_ptr334=(($194+1)|0); //@line 475 "lex.c"
 HEAP32[(($Pos333)>>2)]=$incdec_ptr334; //@line 475 "lex.c"
 var $195=$Lexer_addr; //@line 475 "lex.c"
 var $CharacterPos335=(($195+16)|0); //@line 475 "lex.c"
 var $196=HEAP32[(($CharacterPos335)>>2)]; //@line 475 "lex.c"
 var $inc336=((($196)+(1))|0); //@line 475 "lex.c"
 HEAP32[(($CharacterPos335)>>2)]=$inc336; //@line 475 "lex.c"
 HEAP32[(($GotToken)>>2)]=12; //@line 475 "lex.c"
 label=124;break; //@line 475 "lex.c"
 case 123: 
 HEAP32[(($GotToken)>>2)]=18; //@line 475 "lex.c"
 label=124;break;
 case 124: 
 label=135;break; //@line 475 "lex.c"
 case 125: 
 HEAP32[(($GotToken)>>2)]=36; //@line 476 "lex.c"
 label=135;break; //@line 476 "lex.c"
 case 126: 
 HEAP32[(($GotToken)>>2)]=1; //@line 477 "lex.c"
 label=135;break; //@line 477 "lex.c"
 case 127: 
 var $197=$NextChar; //@line 478 "lex.c"
 var $conv342=(($197<<24)>>24); //@line 478 "lex.c"
 var $cmp343=($conv342|0)==46; //@line 478 "lex.c"
 if($cmp343){label=128;break;}else{label=130;break;} //@line 478 "lex.c"
 case 128: 
 var $198=$Lexer_addr; //@line 478 "lex.c"
 var $Pos345=(($198)|0); //@line 478 "lex.c"
 var $199=HEAP32[(($Pos345)>>2)]; //@line 478 "lex.c"
 var $arrayidx346=(($199+1)|0); //@line 478 "lex.c"
 var $200=HEAP8[($arrayidx346)]; //@line 478 "lex.c"
 var $conv347=(($200<<24)>>24); //@line 478 "lex.c"
 var $cmp348=($conv347|0)==46; //@line 478 "lex.c"
 if($cmp348){label=129;break;}else{label=130;break;} //@line 478 "lex.c"
 case 129: 
 var $201=$Lexer_addr; //@line 478 "lex.c"
 var $Pos351=(($201)|0); //@line 478 "lex.c"
 var $202=HEAP32[(($Pos351)>>2)]; //@line 478 "lex.c"
 var $add_ptr352=(($202+2)|0); //@line 478 "lex.c"
 HEAP32[(($Pos351)>>2)]=$add_ptr352; //@line 478 "lex.c"
 var $203=$Lexer_addr; //@line 478 "lex.c"
 var $CharacterPos353=(($203+16)|0); //@line 478 "lex.c"
 var $204=HEAP32[(($CharacterPos353)>>2)]; //@line 478 "lex.c"
 var $add354=((($204)+(2))|0); //@line 478 "lex.c"
 HEAP32[(($CharacterPos353)>>2)]=$add354; //@line 478 "lex.c"
 HEAP32[(($GotToken)>>2)]=51; //@line 478 "lex.c"
 label=131;break; //@line 478 "lex.c"
 case 130: 
 HEAP32[(($GotToken)>>2)]=41; //@line 478 "lex.c"
 label=131;break;
 case 131: 
 label=135;break; //@line 478 "lex.c"
 case 132: 
 HEAP32[(($GotToken)>>2)]=13; //@line 479 "lex.c"
 label=135;break; //@line 479 "lex.c"
 case 133: 
 HEAP32[(($GotToken)>>2)]=14; //@line 480 "lex.c"
 label=135;break; //@line 480 "lex.c"
 case 134: 
 var $205=$Lexer_addr; //@line 481 "lex.c"
 var $206=$ThisChar; //@line 481 "lex.c"
 var $conv359=(($206<<24)>>24); //@line 481 "lex.c"
 _LexFail($205,7160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$conv359,tempVarArgs)); STACKTOP=tempVarArgs; //@line 481 "lex.c"
 label=135;break; //@line 481 "lex.c"
 case 135: 
 label=136;break; //@line 483 "lex.c"
 case 136: 
 var $207=HEAP32[(($GotToken)>>2)]; //@line 483 "lex.c"
 var $cmp360=($207|0)==0; //@line 483 "lex.c"
 if($cmp360){label=4;break;}else{label=137;break;} //@line 483 "lex.c"
 case 137: 
 var $208=HEAP32[(($GotToken)>>2)]; //@line 485 "lex.c"
 $retval=$208; //@line 485 "lex.c"
 label=138;break; //@line 485 "lex.c"
 case 138: 
 var $209=$retval; //@line 486 "lex.c"
 STACKTOP=sp;return $209; //@line 486 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexTokenSize($Token){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Token_addr;
 $Token_addr=$Token;
 var $0=$Token_addr; //@line 491 "lex.c"
 switch(($0|0)){case 45:case 48:{ label=2;break;}case 46:{ label=3;break;}case 49:{ label=4;break;}case 47:{ label=5;break;}default:{label=6;break;}}break;
 case 2: 
 $retval=4; //@line 493 "lex.c"
 label=7;break; //@line 493 "lex.c"
 case 3: 
 $retval=4; //@line 494 "lex.c"
 label=7;break; //@line 494 "lex.c"
 case 4: 
 $retval=1; //@line 495 "lex.c"
 label=7;break; //@line 495 "lex.c"
 case 5: 
 $retval=8; //@line 496 "lex.c"
 label=7;break; //@line 496 "lex.c"
 case 6: 
 $retval=0; //@line 497 "lex.c"
 label=7;break; //@line 497 "lex.c"
 case 7: 
 var $1=$retval; //@line 499 "lex.c"
 return $1; //@line 499 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexTokenise($Lexer,$TokenLen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Lexer_addr;
 var $TokenLen_addr;
 var $Token;
 var $HeapMem;
 var $GotValue=sp;
 var $MemUsed;
 var $ValueSize;
 var $ReserveSpace;
 var $TokenSpace;
 var $TokenPos;
 var $LastCharacterPos;
 $Lexer_addr=$Lexer;
 $TokenLen_addr=$TokenLen;
 $MemUsed=0; //@line 507 "lex.c"
 var $0=$Lexer_addr; //@line 509 "lex.c"
 var $End=(($0+4)|0); //@line 509 "lex.c"
 var $1=HEAP32[(($End)>>2)]; //@line 509 "lex.c"
 var $2=$Lexer_addr; //@line 509 "lex.c"
 var $Pos=(($2)|0); //@line 509 "lex.c"
 var $3=HEAP32[(($Pos)>>2)]; //@line 509 "lex.c"
 var $sub_ptr_lhs_cast=$1; //@line 509 "lex.c"
 var $sub_ptr_rhs_cast=$3; //@line 509 "lex.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 509 "lex.c"
 var $mul=($sub_ptr_sub<<2); //@line 509 "lex.c"
 var $add=((($mul)+(16))|0); //@line 509 "lex.c"
 $ReserveSpace=$add; //@line 509 "lex.c"
 var $4=$ReserveSpace; //@line 510 "lex.c"
 var $call=_HeapAllocStack($4); //@line 510 "lex.c"
 $TokenSpace=$call; //@line 510 "lex.c"
 var $5=$TokenSpace; //@line 511 "lex.c"
 $TokenPos=$5; //@line 511 "lex.c"
 $LastCharacterPos=0; //@line 512 "lex.c"
 var $6=$TokenSpace; //@line 514 "lex.c"
 var $cmp=($6|0)==0; //@line 514 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 514 "lex.c"
 case 2: 
 var $7=$Lexer_addr; //@line 515 "lex.c"
 _LexFail($7,2504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 515 "lex.c"
 label=3;break; //@line 515 "lex.c"
 case 3: 
 label=4;break; //@line 517 "lex.c"
 case 4: 
 var $8=$Lexer_addr; //@line 520 "lex.c"
 var $call1=_LexScanGetToken($8,$GotValue); //@line 520 "lex.c"
 $Token=$call1; //@line 520 "lex.c"
 var $9=$Token; //@line 525 "lex.c"
 var $conv=(($9)&255); //@line 525 "lex.c"
 var $10=$TokenPos; //@line 525 "lex.c"
 HEAP8[($10)]=$conv; //@line 525 "lex.c"
 var $11=$TokenPos; //@line 526 "lex.c"
 var $incdec_ptr=(($11+1)|0); //@line 526 "lex.c"
 $TokenPos=$incdec_ptr; //@line 526 "lex.c"
 var $12=$MemUsed; //@line 527 "lex.c"
 var $inc=((($12)+(1))|0); //@line 527 "lex.c"
 $MemUsed=$inc; //@line 527 "lex.c"
 var $13=$LastCharacterPos; //@line 529 "lex.c"
 var $conv2=(($13)&255); //@line 529 "lex.c"
 var $14=$TokenPos; //@line 529 "lex.c"
 HEAP8[($14)]=$conv2; //@line 529 "lex.c"
 var $15=$TokenPos; //@line 530 "lex.c"
 var $incdec_ptr3=(($15+1)|0); //@line 530 "lex.c"
 $TokenPos=$incdec_ptr3; //@line 530 "lex.c"
 var $16=$MemUsed; //@line 531 "lex.c"
 var $inc4=((($16)+(1))|0); //@line 531 "lex.c"
 $MemUsed=$inc4; //@line 531 "lex.c"
 var $17=$Token; //@line 533 "lex.c"
 var $call5=_LexTokenSize($17); //@line 533 "lex.c"
 $ValueSize=$call5; //@line 533 "lex.c"
 var $18=$ValueSize; //@line 534 "lex.c"
 var $cmp6=($18|0)>0; //@line 534 "lex.c"
 if($cmp6){label=5;break;}else{label=6;break;} //@line 534 "lex.c"
 case 5: 
 var $19=$TokenPos; //@line 537 "lex.c"
 var $20=HEAP32[(($GotValue)>>2)]; //@line 537 "lex.c"
 var $Val=(($20+4)|0); //@line 537 "lex.c"
 var $21=HEAP32[(($Val)>>2)]; //@line 537 "lex.c"
 var $22=$21; //@line 537 "lex.c"
 var $23=$ValueSize; //@line 537 "lex.c"
 assert($23 % 1 === 0);(_memcpy($19, $22, $23)|0); //@line 537 "lex.c"
 var $24=$ValueSize; //@line 538 "lex.c"
 var $25=$TokenPos; //@line 538 "lex.c"
 var $add_ptr=(($25+$24)|0); //@line 538 "lex.c"
 $TokenPos=$add_ptr; //@line 538 "lex.c"
 var $26=$ValueSize; //@line 539 "lex.c"
 var $27=$MemUsed; //@line 539 "lex.c"
 var $add9=((($27)+($26))|0); //@line 539 "lex.c"
 $MemUsed=$add9; //@line 539 "lex.c"
 label=6;break; //@line 540 "lex.c"
 case 6: 
 var $28=$Lexer_addr; //@line 542 "lex.c"
 var $CharacterPos=(($28+16)|0); //@line 542 "lex.c"
 var $29=HEAP32[(($CharacterPos)>>2)]; //@line 542 "lex.c"
 $LastCharacterPos=$29; //@line 542 "lex.c"
 label=7;break; //@line 544 "lex.c"
 case 7: 
 var $30=$Token; //@line 544 "lex.c"
 var $cmp11=($30|0)!=93; //@line 544 "lex.c"
 if($cmp11){label=4;break;}else{label=8;break;} //@line 544 "lex.c"
 case 8: 
 var $31=$MemUsed; //@line 546 "lex.c"
 var $call13=_HeapAllocMem($31); //@line 546 "lex.c"
 $HeapMem=$call13; //@line 546 "lex.c"
 var $32=$HeapMem; //@line 547 "lex.c"
 var $cmp14=($32|0)==0; //@line 547 "lex.c"
 if($cmp14){label=9;break;}else{label=10;break;} //@line 547 "lex.c"
 case 9: 
 var $33=$Lexer_addr; //@line 548 "lex.c"
 _LexFail($33,2504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 548 "lex.c"
 label=10;break; //@line 548 "lex.c"
 case 10: 
 var $34=$ReserveSpace; //@line 550 "lex.c"
 var $35=$MemUsed; //@line 550 "lex.c"
 var $cmp18=($34|0)>=($35|0); //@line 550 "lex.c"
 if($cmp18){var $37=1;label=12;break;}else{label=11;break;} //@line 550 "lex.c"
 case 11: 
 ___assert_fail(5440,5208,550,12376); //@line 550 "lex.c"
 throw "Reached an unreachable!"; //@line 550 "lex.c"
 label=12;break; //@line 550 "lex.c"
 case 12: 
 var $37;
 var $lor_ext=($37&1); //@line 550 "lex.c"
 var $38=$HeapMem; //@line 551 "lex.c"
 var $39=$TokenSpace; //@line 551 "lex.c"
 var $40=$MemUsed; //@line 551 "lex.c"
 assert($40 % 1 === 0);(_memcpy($38, $39, $40)|0); //@line 551 "lex.c"
 var $41=$TokenSpace; //@line 552 "lex.c"
 var $42=$ReserveSpace; //@line 552 "lex.c"
 var $call20=_HeapPopStack($41,$42); //@line 552 "lex.c"
 var $43=$TokenLen_addr; //@line 562 "lex.c"
 var $tobool=($43|0)!=0; //@line 562 "lex.c"
 if($tobool){label=13;break;}else{label=14;break;} //@line 562 "lex.c"
 case 13: 
 var $44=$MemUsed; //@line 563 "lex.c"
 var $45=$TokenLen_addr; //@line 563 "lex.c"
 HEAP32[(($45)>>2)]=$44; //@line 563 "lex.c"
 label=14;break; //@line 563 "lex.c"
 case 14: 
 var $46=$HeapMem; //@line 565 "lex.c"
 STACKTOP=sp;return $46; //@line 565 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexAnalyse($FileName,$Source,$SourceLen,$TokenLen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $FileName_addr;
 var $Source_addr;
 var $SourceLen_addr;
 var $TokenLen_addr;
 var $Lexer=sp;
 $FileName_addr=$FileName;
 $Source_addr=$Source;
 $SourceLen_addr=$SourceLen;
 $TokenLen_addr=$TokenLen;
 var $0=$Source_addr; //@line 573 "lex.c"
 var $Pos=(($Lexer)|0); //@line 573 "lex.c"
 HEAP32[(($Pos)>>2)]=$0; //@line 573 "lex.c"
 var $1=$Source_addr; //@line 574 "lex.c"
 var $2=$SourceLen_addr; //@line 574 "lex.c"
 var $add_ptr=(($1+$2)|0); //@line 574 "lex.c"
 var $End=(($Lexer+4)|0); //@line 574 "lex.c"
 HEAP32[(($End)>>2)]=$add_ptr; //@line 574 "lex.c"
 var $Line=(($Lexer+12)|0); //@line 575 "lex.c"
 HEAP32[(($Line)>>2)]=1; //@line 575 "lex.c"
 var $3=$FileName_addr; //@line 576 "lex.c"
 var $FileName1=(($Lexer+8)|0); //@line 576 "lex.c"
 HEAP32[(($FileName1)>>2)]=$3; //@line 576 "lex.c"
 var $Mode=(($Lexer+24)|0); //@line 577 "lex.c"
 HEAP32[(($Mode)>>2)]=0; //@line 577 "lex.c"
 var $EmitExtraNewlines=(($Lexer+28)|0); //@line 578 "lex.c"
 HEAP32[(($EmitExtraNewlines)>>2)]=0; //@line 578 "lex.c"
 var $CharacterPos=(($Lexer+16)|0); //@line 579 "lex.c"
 HEAP32[(($CharacterPos)>>2)]=1; //@line 579 "lex.c"
 var $4=$Source_addr; //@line 580 "lex.c"
 var $SourceText=(($Lexer+20)|0); //@line 580 "lex.c"
 HEAP32[(($SourceText)>>2)]=$4; //@line 580 "lex.c"
 var $5=$TokenLen_addr; //@line 582 "lex.c"
 var $call=_LexTokenise($Lexer,$5); //@line 582 "lex.c"
 STACKTOP=sp;return $call; //@line 582 "lex.c"
}
function _LexInitParser($Parser,$SourceText,$TokenSource,$FileName,$RunIt){
 var label=0;
 var $Parser_addr;
 var $SourceText_addr;
 var $TokenSource_addr;
 var $FileName_addr;
 var $RunIt_addr;
 $Parser_addr=$Parser;
 $SourceText_addr=$SourceText;
 $TokenSource_addr=$TokenSource;
 $FileName_addr=$FileName;
 $RunIt_addr=$RunIt;
 var $0=$TokenSource_addr; //@line 588 "lex.c"
 var $1=$Parser_addr; //@line 588 "lex.c"
 var $Pos=(($1)|0); //@line 588 "lex.c"
 HEAP32[(($Pos)>>2)]=$0; //@line 588 "lex.c"
 var $2=$Parser_addr; //@line 589 "lex.c"
 var $Line=(($2+8)|0); //@line 589 "lex.c"
 HEAP16[(($Line)>>1)]=1; //@line 589 "lex.c"
 var $3=$FileName_addr; //@line 590 "lex.c"
 var $4=$Parser_addr; //@line 590 "lex.c"
 var $FileName1=(($4+4)|0); //@line 590 "lex.c"
 HEAP32[(($FileName1)>>2)]=$3; //@line 590 "lex.c"
 var $5=$RunIt_addr; //@line 591 "lex.c"
 var $tobool=($5|0)!=0; //@line 591 "lex.c"
 var $cond=$tobool?0:1; //@line 591 "lex.c"
 var $6=$Parser_addr; //@line 591 "lex.c"
 var $Mode=(($6+12)|0); //@line 591 "lex.c"
 HEAP32[(($Mode)>>2)]=$cond; //@line 591 "lex.c"
 var $7=$Parser_addr; //@line 592 "lex.c"
 var $SearchLabel=(($7+16)|0); //@line 592 "lex.c"
 HEAP32[(($SearchLabel)>>2)]=0; //@line 592 "lex.c"
 var $8=$Parser_addr; //@line 593 "lex.c"
 var $HashIfLevel=(($8+24)|0); //@line 593 "lex.c"
 HEAP16[(($HashIfLevel)>>1)]=0; //@line 593 "lex.c"
 var $9=$Parser_addr; //@line 594 "lex.c"
 var $HashIfEvaluateToLevel=(($9+26)|0); //@line 594 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel)>>1)]=0; //@line 594 "lex.c"
 var $10=$Parser_addr; //@line 595 "lex.c"
 var $CharacterPos=(($10+10)|0); //@line 595 "lex.c"
 HEAP16[(($CharacterPos)>>1)]=0; //@line 595 "lex.c"
 var $11=$SourceText_addr; //@line 596 "lex.c"
 var $12=$Parser_addr; //@line 596 "lex.c"
 var $SourceText2=(($12+28)|0); //@line 596 "lex.c"
 HEAP32[(($SourceText2)>>2)]=$11; //@line 596 "lex.c"
 return; //@line 597 "lex.c"
}
function _LexGetRawToken($Parser,$Value,$IncPos){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Value_addr;
 var $IncPos_addr;
 var $Token;
 var $ValueSize;
 var $Prompt;
 var $LineBuffer=sp;
 var $LineTokens;
 var $LineBytes=(sp)+(256);
 var $LineNode;
 $Parser_addr=$Parser;
 $Value_addr=$Value;
 $IncPos_addr=$IncPos;
 $Token=0; //@line 602 "lex.c"
 $Prompt=0; //@line 604 "lex.c"
 label=2;break; //@line 606 "lex.c"
 case 2: 
 var $0=$Parser_addr; //@line 609 "lex.c"
 var $Pos=(($0)|0); //@line 609 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 609 "lex.c"
 var $cmp=($1|0)==0; //@line 609 "lex.c"
 if($cmp){label=3;break;}else{label=5;break;} //@line 609 "lex.c"
 case 3: 
 var $2=HEAP32[((18392)>>2)]; //@line 609 "lex.c"
 var $cmp1=($2|0)!=0; //@line 609 "lex.c"
 if($cmp1){label=4;break;}else{label=5;break;} //@line 609 "lex.c"
 case 4: 
 var $3=HEAP32[((18392)>>2)]; //@line 610 "lex.c"
 var $Tokens=(($3+4)|0); //@line 610 "lex.c"
 var $4=HEAP32[(($Tokens)>>2)]; //@line 610 "lex.c"
 var $5=$Parser_addr; //@line 610 "lex.c"
 var $Pos2=(($5)|0); //@line 610 "lex.c"
 HEAP32[(($Pos2)>>2)]=$4; //@line 610 "lex.c"
 label=5;break; //@line 610 "lex.c"
 case 5: 
 var $6=$Parser_addr; //@line 612 "lex.c"
 var $FileName=(($6+4)|0); //@line 612 "lex.c"
 var $7=HEAP32[(($FileName)>>2)]; //@line 612 "lex.c"
 var $8=HEAP32[((17968)>>2)]; //@line 612 "lex.c"
 var $cmp3=($7|0)!=($8|0); //@line 612 "lex.c"
 if($cmp3){label=7;break;}else{label=6;break;} //@line 612 "lex.c"
 case 6: 
 var $9=HEAP32[((18392)>>2)]; //@line 612 "lex.c"
 var $cmp4=($9|0)!=0; //@line 612 "lex.c"
 if($cmp4){label=7;break;}else{label=11;break;} //@line 612 "lex.c"
 case 7: 
 label=8;break; //@line 615 "lex.c"
 case 8: 
 var $10=$Parser_addr; //@line 615 "lex.c"
 var $Pos6=(($10)|0); //@line 615 "lex.c"
 var $11=HEAP32[(($Pos6)>>2)]; //@line 615 "lex.c"
 var $12=HEAP8[($11)]; //@line 615 "lex.c"
 var $conv=($12&255); //@line 615 "lex.c"
 $Token=$conv; //@line 615 "lex.c"
 var $cmp7=($conv|0)==94; //@line 615 "lex.c"
 if($cmp7){label=9;break;}else{label=10;break;} //@line 615 "lex.c"
 case 9: 
 var $13=$Parser_addr; //@line 617 "lex.c"
 var $Line=(($13+8)|0); //@line 617 "lex.c"
 var $14=HEAP16[(($Line)>>1)]; //@line 617 "lex.c"
 var $inc=((($14)+(1))&65535); //@line 617 "lex.c"
 HEAP16[(($Line)>>1)]=$inc; //@line 617 "lex.c"
 var $15=$Parser_addr; //@line 618 "lex.c"
 var $Pos9=(($15)|0); //@line 618 "lex.c"
 var $16=HEAP32[(($Pos9)>>2)]; //@line 618 "lex.c"
 var $add_ptr=(($16+2)|0); //@line 618 "lex.c"
 HEAP32[(($Pos9)>>2)]=$add_ptr; //@line 618 "lex.c"
 label=8;break; //@line 619 "lex.c"
 case 10: 
 label=11;break; //@line 620 "lex.c"
 case 11: 
 var $17=$Parser_addr; //@line 622 "lex.c"
 var $FileName11=(($17+4)|0); //@line 622 "lex.c"
 var $18=HEAP32[(($FileName11)>>2)]; //@line 622 "lex.c"
 var $19=HEAP32[((17968)>>2)]; //@line 622 "lex.c"
 var $cmp12=($18|0)==($19|0); //@line 622 "lex.c"
 if($cmp12){label=12;break;}else{label=39;break;} //@line 622 "lex.c"
 case 12: 
 var $20=HEAP32[((18392)>>2)]; //@line 622 "lex.c"
 var $cmp15=($20|0)==0; //@line 622 "lex.c"
 if($cmp15){label=14;break;}else{label=13;break;} //@line 622 "lex.c"
 case 13: 
 var $21=$Token; //@line 622 "lex.c"
 var $cmp18=($21|0)==93; //@line 622 "lex.c"
 if($cmp18){label=14;break;}else{label=39;break;} //@line 622 "lex.c"
 case 14: 
 var $22=HEAP32[((18392)>>2)]; //@line 630 "lex.c"
 var $cmp21=($22|0)==0; //@line 630 "lex.c"
 if($cmp21){label=16;break;}else{label=15;break;} //@line 630 "lex.c"
 case 15: 
 var $23=$Parser_addr; //@line 630 "lex.c"
 var $Pos24=(($23)|0); //@line 630 "lex.c"
 var $24=HEAP32[(($Pos24)>>2)]; //@line 630 "lex.c"
 var $25=HEAP32[((18384)>>2)]; //@line 630 "lex.c"
 var $NumBytes=(($25+8)|0); //@line 630 "lex.c"
 var $26=HEAP32[(($NumBytes)>>2)]; //@line 630 "lex.c"
 var $sub=((($26)-(2))|0); //@line 630 "lex.c"
 var $27=HEAP32[((18384)>>2)]; //@line 630 "lex.c"
 var $Tokens25=(($27+4)|0); //@line 630 "lex.c"
 var $28=HEAP32[(($Tokens25)>>2)]; //@line 630 "lex.c"
 var $arrayidx=(($28+$sub)|0); //@line 630 "lex.c"
 var $cmp26=($24|0)==($arrayidx|0); //@line 630 "lex.c"
 if($cmp26){label=16;break;}else{label=25;break;} //@line 630 "lex.c"
 case 16: 
 var $29=HEAP32[((18320)>>2)]; //@line 633 "lex.c"
 var $tobool=($29|0)!=0; //@line 633 "lex.c"
 if($tobool){label=17;break;}else{label=18;break;} //@line 633 "lex.c"
 case 17: 
 $Prompt=3672; //@line 635 "lex.c"
 HEAP32[((18320)>>2)]=0; //@line 636 "lex.c"
 label=19;break; //@line 637 "lex.c"
 case 18: 
 $Prompt=2424; //@line 639 "lex.c"
 label=19;break;
 case 19: 
 var $arrayidx31=(($LineBuffer)|0); //@line 641 "lex.c"
 var $30=$Prompt; //@line 641 "lex.c"
 var $call=_PlatformGetLine($arrayidx31,256,$30); //@line 641 "lex.c"
 var $cmp32=($call|0)==0; //@line 641 "lex.c"
 if($cmp32){label=20;break;}else{label=21;break;} //@line 641 "lex.c"
 case 20: 
 $retval=93; //@line 642 "lex.c"
 label=65;break; //@line 642 "lex.c"
 case 21: 
 var $31=HEAP32[((17968)>>2)]; //@line 645 "lex.c"
 var $arrayidx36=(($LineBuffer)|0); //@line 645 "lex.c"
 var $arraydecay=(($LineBuffer)|0); //@line 645 "lex.c"
 var $call37=_strlen($arraydecay); //@line 645 "lex.c"
 var $call38=_LexAnalyse($31,$arrayidx36,$call37,$LineBytes); //@line 645 "lex.c"
 $LineTokens=$call38; //@line 645 "lex.c"
 var $32=$Parser_addr; //@line 646 "lex.c"
 var $call39=_VariableAlloc($32,12,1); //@line 646 "lex.c"
 var $33=$call39; //@line 646 "lex.c"
 $LineNode=$33; //@line 646 "lex.c"
 var $34=$LineTokens; //@line 647 "lex.c"
 var $35=$LineNode; //@line 647 "lex.c"
 var $Tokens40=(($35+4)|0); //@line 647 "lex.c"
 HEAP32[(($Tokens40)>>2)]=$34; //@line 647 "lex.c"
 var $36=HEAP32[(($LineBytes)>>2)]; //@line 648 "lex.c"
 var $37=$LineNode; //@line 648 "lex.c"
 var $NumBytes41=(($37+8)|0); //@line 648 "lex.c"
 HEAP32[(($NumBytes41)>>2)]=$36; //@line 648 "lex.c"
 var $38=HEAP32[((18392)>>2)]; //@line 649 "lex.c"
 var $cmp42=($38|0)==0; //@line 649 "lex.c"
 if($cmp42){label=22;break;}else{label=23;break;} //@line 649 "lex.c"
 case 22: 
 var $39=$LineNode; //@line 652 "lex.c"
 HEAP32[((18392)>>2)]=$39; //@line 652 "lex.c"
 var $40=$Parser_addr; //@line 653 "lex.c"
 var $Line45=(($40+8)|0); //@line 653 "lex.c"
 HEAP16[(($Line45)>>1)]=1; //@line 653 "lex.c"
 var $41=$Parser_addr; //@line 654 "lex.c"
 var $CharacterPos=(($41+10)|0); //@line 654 "lex.c"
 HEAP16[(($CharacterPos)>>1)]=0; //@line 654 "lex.c"
 label=24;break; //@line 655 "lex.c"
 case 23: 
 var $42=$LineNode; //@line 657 "lex.c"
 var $43=HEAP32[((18384)>>2)]; //@line 657 "lex.c"
 var $Next=(($43)|0); //@line 657 "lex.c"
 HEAP32[(($Next)>>2)]=$42; //@line 657 "lex.c"
 label=24;break;
 case 24: 
 var $44=$LineNode; //@line 659 "lex.c"
 HEAP32[((18384)>>2)]=$44; //@line 659 "lex.c"
 var $45=$LineNode; //@line 660 "lex.c"
 HEAP32[((18400)>>2)]=$45; //@line 660 "lex.c"
 var $46=$LineTokens; //@line 661 "lex.c"
 var $47=$Parser_addr; //@line 661 "lex.c"
 var $Pos48=(($47)|0); //@line 661 "lex.c"
 HEAP32[(($Pos48)>>2)]=$46; //@line 661 "lex.c"
 label=38;break; //@line 662 "lex.c"
 case 25: 
 var $48=$Parser_addr; //@line 666 "lex.c"
 var $Pos50=(($48)|0); //@line 666 "lex.c"
 var $49=HEAP32[(($Pos50)>>2)]; //@line 666 "lex.c"
 var $50=HEAP32[((18400)>>2)]; //@line 666 "lex.c"
 var $NumBytes51=(($50+8)|0); //@line 666 "lex.c"
 var $51=HEAP32[(($NumBytes51)>>2)]; //@line 666 "lex.c"
 var $sub52=((($51)-(2))|0); //@line 666 "lex.c"
 var $52=HEAP32[((18400)>>2)]; //@line 666 "lex.c"
 var $Tokens53=(($52+4)|0); //@line 666 "lex.c"
 var $53=HEAP32[(($Tokens53)>>2)]; //@line 666 "lex.c"
 var $arrayidx54=(($53+$sub52)|0); //@line 666 "lex.c"
 var $cmp55=($49|0)!=($arrayidx54|0); //@line 666 "lex.c"
 if($cmp55){label=26;break;}else{label=33;break;} //@line 666 "lex.c"
 case 26: 
 var $54=HEAP32[((18392)>>2)]; //@line 669 "lex.c"
 HEAP32[((18400)>>2)]=$54; //@line 669 "lex.c"
 label=27;break; //@line 669 "lex.c"
 case 27: 
 var $55=$Parser_addr; //@line 669 "lex.c"
 var $Pos58=(($55)|0); //@line 669 "lex.c"
 var $56=HEAP32[(($Pos58)>>2)]; //@line 669 "lex.c"
 var $57=HEAP32[((18400)>>2)]; //@line 669 "lex.c"
 var $NumBytes59=(($57+8)|0); //@line 669 "lex.c"
 var $58=HEAP32[(($NumBytes59)>>2)]; //@line 669 "lex.c"
 var $sub60=((($58)-(2))|0); //@line 669 "lex.c"
 var $59=HEAP32[((18400)>>2)]; //@line 669 "lex.c"
 var $Tokens61=(($59+4)|0); //@line 669 "lex.c"
 var $60=HEAP32[(($Tokens61)>>2)]; //@line 669 "lex.c"
 var $arrayidx62=(($60+$sub60)|0); //@line 669 "lex.c"
 var $cmp63=($56|0)!=($arrayidx62|0); //@line 669 "lex.c"
 if($cmp63){label=28;break;}else{label=32;break;} //@line 669 "lex.c"
 case 28: 
 var $61=HEAP32[((18400)>>2)]; //@line 670 "lex.c"
 var $Next65=(($61)|0); //@line 670 "lex.c"
 var $62=HEAP32[(($Next65)>>2)]; //@line 670 "lex.c"
 var $cmp66=($62|0)!=0; //@line 670 "lex.c"
 if($cmp66){var $64=1;label=30;break;}else{label=29;break;} //@line 670 "lex.c"
 case 29: 
 ___assert_fail(1488,5208,670,12392); //@line 670 "lex.c"
 throw "Reached an unreachable!"; //@line 670 "lex.c"
 label=30;break; //@line 670 "lex.c"
 case 30: 
 var $64;
 var $lor_ext=($64&1); //@line 670 "lex.c"
 label=31;break; //@line 670 "lex.c"
 case 31: 
 var $65=HEAP32[((18400)>>2)]; //@line 669 "lex.c"
 var $Next68=(($65)|0); //@line 669 "lex.c"
 var $66=HEAP32[(($Next68)>>2)]; //@line 669 "lex.c"
 HEAP32[((18400)>>2)]=$66; //@line 669 "lex.c"
 label=27;break; //@line 669 "lex.c"
 case 32: 
 label=33;break; //@line 671 "lex.c"
 case 33: 
 var $67=HEAP32[((18400)>>2)]; //@line 673 "lex.c"
 var $cmp70=($67|0)!=0; //@line 673 "lex.c"
 if($cmp70){var $69=1;label=35;break;}else{label=34;break;} //@line 673 "lex.c"
 case 34: 
 ___assert_fail(920,5208,673,12392); //@line 673 "lex.c"
 throw "Reached an unreachable!"; //@line 673 "lex.c"
 label=35;break; //@line 673 "lex.c"
 case 35: 
 var $69;
 var $lor_ext74=($69&1); //@line 673 "lex.c"
 var $70=HEAP32[((18400)>>2)]; //@line 674 "lex.c"
 var $Next75=(($70)|0); //@line 674 "lex.c"
 var $71=HEAP32[(($Next75)>>2)]; //@line 674 "lex.c"
 HEAP32[((18400)>>2)]=$71; //@line 674 "lex.c"
 var $72=HEAP32[((18400)>>2)]; //@line 675 "lex.c"
 var $cmp76=($72|0)!=0; //@line 675 "lex.c"
 if($cmp76){var $74=1;label=37;break;}else{label=36;break;} //@line 675 "lex.c"
 case 36: 
 ___assert_fail(920,5208,675,12392); //@line 675 "lex.c"
 throw "Reached an unreachable!"; //@line 675 "lex.c"
 label=37;break; //@line 675 "lex.c"
 case 37: 
 var $74;
 var $lor_ext80=($74&1); //@line 675 "lex.c"
 var $75=HEAP32[((18400)>>2)]; //@line 676 "lex.c"
 var $Tokens81=(($75+4)|0); //@line 676 "lex.c"
 var $76=HEAP32[(($Tokens81)>>2)]; //@line 676 "lex.c"
 var $77=$Parser_addr; //@line 676 "lex.c"
 var $Pos82=(($77)|0); //@line 676 "lex.c"
 HEAP32[(($Pos82)>>2)]=$76; //@line 676 "lex.c"
 label=38;break;
 case 38: 
 var $78=$Parser_addr; //@line 679 "lex.c"
 var $Pos84=(($78)|0); //@line 679 "lex.c"
 var $79=HEAP32[(($Pos84)>>2)]; //@line 679 "lex.c"
 var $80=HEAP8[($79)]; //@line 679 "lex.c"
 var $conv85=($80&255); //@line 679 "lex.c"
 $Token=$conv85; //@line 679 "lex.c"
 label=39;break; //@line 680 "lex.c"
 case 39: 
 label=40;break; //@line 681 "lex.c"
 case 40: 
 var $81=$Parser_addr; //@line 681 "lex.c"
 var $FileName87=(($81+4)|0); //@line 681 "lex.c"
 var $82=HEAP32[(($FileName87)>>2)]; //@line 681 "lex.c"
 var $83=HEAP32[((17968)>>2)]; //@line 681 "lex.c"
 var $cmp88=($82|0)==($83|0); //@line 681 "lex.c"
 if($cmp88){label=41;break;}else{label=42;break;} //@line 681 "lex.c"
 case 41: 
 var $84=$Token; //@line 681 "lex.c"
 var $cmp91=($84|0)==93; //@line 681 "lex.c"
 if($cmp91){var $86=1;label=43;break;}else{label=42;break;} //@line 681 "lex.c"
 case 42: 
 var $85=$Token; //@line 681 "lex.c"
 var $cmp94=($85|0)==94; //@line 681 "lex.c"
 var $86=$cmp94;label=43;break; //@line 681 "lex.c"
 case 43: 
 var $86;
 if($86){label=2;break;}else{label=44;break;} //@line 681 "lex.c"
 case 44: 
 var $87=$Parser_addr; //@line 683 "lex.c"
 var $Pos98=(($87)|0); //@line 683 "lex.c"
 var $88=HEAP32[(($Pos98)>>2)]; //@line 683 "lex.c"
 var $add_ptr99=(($88+1)|0); //@line 683 "lex.c"
 var $89=HEAP8[($add_ptr99)]; //@line 683 "lex.c"
 var $conv100=($89&255); //@line 683 "lex.c"
 var $90=$Parser_addr; //@line 683 "lex.c"
 var $CharacterPos101=(($90+10)|0); //@line 683 "lex.c"
 HEAP16[(($CharacterPos101)>>1)]=$conv100; //@line 683 "lex.c"
 var $91=$Token; //@line 684 "lex.c"
 var $call102=_LexTokenSize($91); //@line 684 "lex.c"
 $ValueSize=$call102; //@line 684 "lex.c"
 var $92=$ValueSize; //@line 685 "lex.c"
 var $cmp103=($92|0)>0; //@line 685 "lex.c"
 if($cmp103){label=45;break;}else{label=57;break;} //@line 685 "lex.c"
 case 45: 
 var $93=$Value_addr; //@line 688 "lex.c"
 var $cmp106=($93|0)!=0; //@line 688 "lex.c"
 if($cmp106){label=46;break;}else{label=54;break;} //@line 688 "lex.c"
 case 46: 
 var $94=$Token; //@line 690 "lex.c"
 switch(($94|0)){case 48:{ label=47;break;}case 45:{ label=48;break;}case 46:{ label=49;break;}case 49:{ label=50;break;}case 47:{ label=51;break;}default:{label=52;break;}}break;
 case 47: 
 var $95=HEAP32[((19136)>>2)]; //@line 692 "lex.c"
 HEAP32[((15504)>>2)]=$95; //@line 692 "lex.c"
 label=53;break; //@line 692 "lex.c"
 case 48: 
 HEAP32[((15504)>>2)]=0; //@line 693 "lex.c"
 label=53;break; //@line 693 "lex.c"
 case 49: 
 HEAP32[((15504)>>2)]=18408; //@line 694 "lex.c"
 label=53;break; //@line 694 "lex.c"
 case 50: 
 HEAP32[((15504)>>2)]=19088; //@line 695 "lex.c"
 label=53;break; //@line 695 "lex.c"
 case 51: 
 HEAP32[((15504)>>2)]=19032; //@line 697 "lex.c"
 label=53;break; //@line 697 "lex.c"
 case 52: 
 label=53;break; //@line 699 "lex.c"
 case 53: 
 var $96=HEAP32[((15508)>>2)]; //@line 702 "lex.c"
 var $97=$96; //@line 702 "lex.c"
 var $98=$Parser_addr; //@line 702 "lex.c"
 var $Pos113=(($98)|0); //@line 702 "lex.c"
 var $99=HEAP32[(($Pos113)>>2)]; //@line 702 "lex.c"
 var $add_ptr114=(($99+2)|0); //@line 702 "lex.c"
 var $100=$ValueSize; //@line 702 "lex.c"
 assert($100 % 1 === 0);(_memcpy($97, $add_ptr114, $100)|0); //@line 702 "lex.c"
 HEAP8[(15516)]=0; //@line 703 "lex.c"
 HEAP8[(15517)]=0; //@line 704 "lex.c"
 HEAP8[(15518)]=0; //@line 705 "lex.c"
 HEAP32[((15512)>>2)]=0; //@line 706 "lex.c"
 var $101=$Value_addr; //@line 707 "lex.c"
 HEAP32[(($101)>>2)]=15504; //@line 707 "lex.c"
 label=54;break; //@line 708 "lex.c"
 case 54: 
 var $102=$IncPos_addr; //@line 710 "lex.c"
 var $tobool116=($102|0)!=0; //@line 710 "lex.c"
 if($tobool116){label=55;break;}else{label=56;break;} //@line 710 "lex.c"
 case 55: 
 var $103=$ValueSize; //@line 711 "lex.c"
 var $add=((($103)+(2))|0); //@line 711 "lex.c"
 var $104=$Parser_addr; //@line 711 "lex.c"
 var $Pos118=(($104)|0); //@line 711 "lex.c"
 var $105=HEAP32[(($Pos118)>>2)]; //@line 711 "lex.c"
 var $add_ptr119=(($105+$add)|0); //@line 711 "lex.c"
 HEAP32[(($Pos118)>>2)]=$add_ptr119; //@line 711 "lex.c"
 label=56;break; //@line 711 "lex.c"
 case 56: 
 label=61;break; //@line 712 "lex.c"
 case 57: 
 var $106=$IncPos_addr; //@line 715 "lex.c"
 var $tobool122=($106|0)!=0; //@line 715 "lex.c"
 if($tobool122){label=58;break;}else{label=60;break;} //@line 715 "lex.c"
 case 58: 
 var $107=$Token; //@line 715 "lex.c"
 var $cmp124=($107|0)!=93; //@line 715 "lex.c"
 if($cmp124){label=59;break;}else{label=60;break;} //@line 715 "lex.c"
 case 59: 
 var $108=$Parser_addr; //@line 716 "lex.c"
 var $Pos127=(($108)|0); //@line 716 "lex.c"
 var $109=HEAP32[(($Pos127)>>2)]; //@line 716 "lex.c"
 var $add_ptr128=(($109+2)|0); //@line 716 "lex.c"
 HEAP32[(($Pos127)>>2)]=$add_ptr128; //@line 716 "lex.c"
 label=60;break; //@line 716 "lex.c"
 case 60: 
 label=61;break;
 case 61: 
 var $110=$Token; //@line 722 "lex.c"
 var $cmp131=($110>>>0)>=0; //@line 722 "lex.c"
 if($cmp131){label=62;break;}else{label=63;break;} //@line 722 "lex.c"
 case 62: 
 var $111=$Token; //@line 722 "lex.c"
 var $cmp134=($111>>>0)<=95; //@line 722 "lex.c"
 if($cmp134){var $113=1;label=64;break;}else{label=63;break;} //@line 722 "lex.c"
 case 63: 
 ___assert_fail(456,5208,722,12392); //@line 722 "lex.c"
 throw "Reached an unreachable!"; //@line 722 "lex.c"
 label=64;break; //@line 722 "lex.c"
 case 64: 
 var $113;
 var $lor_ext138=($113&1); //@line 722 "lex.c"
 var $114=$Token; //@line 723 "lex.c"
 $retval=$114; //@line 723 "lex.c"
 label=65;break; //@line 723 "lex.c"
 case 65: 
 var $115=$retval; //@line 724 "lex.c"
 STACKTOP=sp;return $115; //@line 724 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexHashIncPos($Parser,$IncPos){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $IncPos_addr;
 $Parser_addr=$Parser;
 $IncPos_addr=$IncPos;
 var $0=$IncPos_addr; //@line 729 "lex.c"
 var $tobool=($0|0)!=0; //@line 729 "lex.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 729 "lex.c"
 case 2: 
 var $1=$Parser_addr; //@line 730 "lex.c"
 var $call=_LexGetRawToken($1,0,1); //@line 730 "lex.c"
 label=3;break; //@line 730 "lex.c"
 case 3: 
 return; //@line 731 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexHashIfdef($Parser,$IfNot){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $IfNot_addr;
 var $IdentValue=sp;
 var $SavedValue=(sp)+(8);
 var $IsDefined;
 var $Token;
 $Parser_addr=$Parser;
 $IfNot_addr=$IfNot;
 var $0=$Parser_addr; //@line 740 "lex.c"
 var $call=_LexGetRawToken($0,$IdentValue,1); //@line 740 "lex.c"
 $Token=$call; //@line 740 "lex.c"
 var $1=$Token; //@line 742 "lex.c"
 var $cmp=($1|0)!=45; //@line 742 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 742 "lex.c"
 case 2: 
 var $2=$Parser_addr; //@line 743 "lex.c"
 _ProgramFail($2,12064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 743 "lex.c"
 label=3;break; //@line 743 "lex.c"
 case 3: 
 var $3=HEAP32[(($IdentValue)>>2)]; //@line 746 "lex.c"
 var $Val=(($3+4)|0); //@line 746 "lex.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 746 "lex.c"
 var $Identifier=$4; //@line 746 "lex.c"
 var $5=HEAP32[(($Identifier)>>2)]; //@line 746 "lex.c"
 var $call1=_TableGet(18544,$5,$SavedValue,0,0,0); //@line 746 "lex.c"
 $IsDefined=$call1; //@line 746 "lex.c"
 var $6=$Parser_addr; //@line 747 "lex.c"
 var $HashIfEvaluateToLevel=(($6+26)|0); //@line 747 "lex.c"
 var $7=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 747 "lex.c"
 var $conv=(($7<<16)>>16); //@line 747 "lex.c"
 var $8=$Parser_addr; //@line 747 "lex.c"
 var $HashIfLevel=(($8+24)|0); //@line 747 "lex.c"
 var $9=HEAP16[(($HashIfLevel)>>1)]; //@line 747 "lex.c"
 var $conv2=(($9<<16)>>16); //@line 747 "lex.c"
 var $cmp3=($conv|0)==($conv2|0); //@line 747 "lex.c"
 if($cmp3){label=4;break;}else{label=9;break;} //@line 747 "lex.c"
 case 4: 
 var $10=$IsDefined; //@line 747 "lex.c"
 var $tobool=($10|0)!=0; //@line 747 "lex.c"
 if($tobool){label=5;break;}else{label=6;break;} //@line 747 "lex.c"
 case 5: 
 var $11=$IfNot_addr; //@line 747 "lex.c"
 var $tobool6=($11|0)!=0; //@line 747 "lex.c"
 if($tobool6){label=6;break;}else{label=8;break;} //@line 747 "lex.c"
 case 6: 
 var $12=$IsDefined; //@line 747 "lex.c"
 var $tobool7=($12|0)!=0; //@line 747 "lex.c"
 if($tobool7){label=9;break;}else{label=7;break;} //@line 747 "lex.c"
 case 7: 
 var $13=$IfNot_addr; //@line 747 "lex.c"
 var $tobool9=($13|0)!=0; //@line 747 "lex.c"
 if($tobool9){label=8;break;}else{label=9;break;} //@line 747 "lex.c"
 case 8: 
 var $14=$Parser_addr; //@line 750 "lex.c"
 var $HashIfEvaluateToLevel11=(($14+26)|0); //@line 750 "lex.c"
 var $15=HEAP16[(($HashIfEvaluateToLevel11)>>1)]; //@line 750 "lex.c"
 var $inc=((($15)+(1))&65535); //@line 750 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel11)>>1)]=$inc; //@line 750 "lex.c"
 label=9;break; //@line 751 "lex.c"
 case 9: 
 var $16=$Parser_addr; //@line 753 "lex.c"
 var $HashIfLevel13=(($16+24)|0); //@line 753 "lex.c"
 var $17=HEAP16[(($HashIfLevel13)>>1)]; //@line 753 "lex.c"
 var $inc14=((($17)+(1))&65535); //@line 753 "lex.c"
 HEAP16[(($HashIfLevel13)>>1)]=$inc14; //@line 753 "lex.c"
 STACKTOP=sp;return; //@line 754 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexHashIf($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $IdentValue=sp;
 var $SavedValue=(sp)+(8);
 var $MacroParser=(sp)+(16);
 var $Token;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 763 "lex.c"
 var $call=_LexGetRawToken($0,$IdentValue,1); //@line 763 "lex.c"
 $Token=$call; //@line 763 "lex.c"
 var $1=$Token; //@line 765 "lex.c"
 var $cmp=($1|0)==45; //@line 765 "lex.c"
 if($cmp){label=2;break;}else{label=7;break;} //@line 765 "lex.c"
 case 2: 
 var $2=HEAP32[(($IdentValue)>>2)]; //@line 768 "lex.c"
 var $Val=(($2+4)|0); //@line 768 "lex.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 768 "lex.c"
 var $Identifier=$3; //@line 768 "lex.c"
 var $4=HEAP32[(($Identifier)>>2)]; //@line 768 "lex.c"
 var $call1=_TableGet(18544,$4,$SavedValue,0,0,0); //@line 768 "lex.c"
 var $tobool=($call1|0)!=0; //@line 768 "lex.c"
 if($tobool){label=4;break;}else{label=3;break;} //@line 768 "lex.c"
 case 3: 
 var $5=$Parser_addr; //@line 769 "lex.c"
 var $6=HEAP32[(($IdentValue)>>2)]; //@line 769 "lex.c"
 var $Val3=(($6+4)|0); //@line 769 "lex.c"
 var $7=HEAP32[(($Val3)>>2)]; //@line 769 "lex.c"
 var $Identifier4=$7; //@line 769 "lex.c"
 var $8=HEAP32[(($Identifier4)>>2)]; //@line 769 "lex.c"
 _ProgramFail($5,11712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs; //@line 769 "lex.c"
 label=4;break; //@line 769 "lex.c"
 case 4: 
 var $9=HEAP32[(($SavedValue)>>2)]; //@line 771 "lex.c"
 var $Typ=(($9)|0); //@line 771 "lex.c"
 var $10=HEAP32[(($Typ)>>2)]; //@line 771 "lex.c"
 var $Base=(($10)|0); //@line 771 "lex.c"
 var $11=HEAP32[(($Base)>>2)]; //@line 771 "lex.c"
 var $cmp5=($11|0)!=10; //@line 771 "lex.c"
 if($cmp5){label=5;break;}else{label=6;break;} //@line 771 "lex.c"
 case 5: 
 var $12=$Parser_addr; //@line 772 "lex.c"
 _ProgramFail($12,11352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 772 "lex.c"
 label=6;break; //@line 772 "lex.c"
 case 6: 
 var $13=HEAP32[(($SavedValue)>>2)]; //@line 774 "lex.c"
 var $Val8=(($13+4)|0); //@line 774 "lex.c"
 var $14=HEAP32[(($Val8)>>2)]; //@line 774 "lex.c"
 var $MacroDef=$14; //@line 774 "lex.c"
 var $Body=(($MacroDef+8)|0); //@line 774 "lex.c"
 _ParserCopy($MacroParser,$Body); //@line 774 "lex.c"
 var $call9=_LexGetRawToken($MacroParser,$IdentValue,1); //@line 775 "lex.c"
 $Token=$call9; //@line 775 "lex.c"
 label=7;break; //@line 776 "lex.c"
 case 7: 
 var $15=$Token; //@line 778 "lex.c"
 var $cmp11=($15|0)!=49; //@line 778 "lex.c"
 if($cmp11){label=8;break;}else{label=9;break;} //@line 778 "lex.c"
 case 8: 
 var $16=$Parser_addr; //@line 779 "lex.c"
 _ProgramFail($16,11352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 779 "lex.c"
 label=9;break; //@line 779 "lex.c"
 case 9: 
 var $17=$Parser_addr; //@line 782 "lex.c"
 var $HashIfEvaluateToLevel=(($17+26)|0); //@line 782 "lex.c"
 var $18=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 782 "lex.c"
 var $conv=(($18<<16)>>16); //@line 782 "lex.c"
 var $19=$Parser_addr; //@line 782 "lex.c"
 var $HashIfLevel=(($19+24)|0); //@line 782 "lex.c"
 var $20=HEAP16[(($HashIfLevel)>>1)]; //@line 782 "lex.c"
 var $conv14=(($20<<16)>>16); //@line 782 "lex.c"
 var $cmp15=($conv|0)==($conv14|0); //@line 782 "lex.c"
 if($cmp15){label=10;break;}else{label=12;break;} //@line 782 "lex.c"
 case 10: 
 var $21=HEAP32[(($IdentValue)>>2)]; //@line 782 "lex.c"
 var $Val17=(($21+4)|0); //@line 782 "lex.c"
 var $22=HEAP32[(($Val17)>>2)]; //@line 782 "lex.c"
 var $Character=$22; //@line 782 "lex.c"
 var $23=HEAP8[($Character)]; //@line 782 "lex.c"
 var $conv18=($23&255); //@line 782 "lex.c"
 var $tobool19=($conv18|0)!=0; //@line 782 "lex.c"
 if($tobool19){label=11;break;}else{label=12;break;} //@line 782 "lex.c"
 case 11: 
 var $24=$Parser_addr; //@line 785 "lex.c"
 var $HashIfEvaluateToLevel21=(($24+26)|0); //@line 785 "lex.c"
 var $25=HEAP16[(($HashIfEvaluateToLevel21)>>1)]; //@line 785 "lex.c"
 var $inc=((($25)+(1))&65535); //@line 785 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel21)>>1)]=$inc; //@line 785 "lex.c"
 label=12;break; //@line 786 "lex.c"
 case 12: 
 var $26=$Parser_addr; //@line 788 "lex.c"
 var $HashIfLevel23=(($26+24)|0); //@line 788 "lex.c"
 var $27=HEAP16[(($HashIfLevel23)>>1)]; //@line 788 "lex.c"
 var $inc24=((($27)+(1))&65535); //@line 788 "lex.c"
 HEAP16[(($HashIfLevel23)>>1)]=$inc24; //@line 788 "lex.c"
 STACKTOP=sp;return; //@line 789 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexHashElse($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 794 "lex.c"
 var $HashIfEvaluateToLevel=(($0+26)|0); //@line 794 "lex.c"
 var $1=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 794 "lex.c"
 var $conv=(($1<<16)>>16); //@line 794 "lex.c"
 var $2=$Parser_addr; //@line 794 "lex.c"
 var $HashIfLevel=(($2+24)|0); //@line 794 "lex.c"
 var $3=HEAP16[(($HashIfLevel)>>1)]; //@line 794 "lex.c"
 var $conv1=(($3<<16)>>16); //@line 794 "lex.c"
 var $sub=((($conv1)-(1))|0); //@line 794 "lex.c"
 var $cmp=($conv|0)==($sub|0); //@line 794 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 794 "lex.c"
 case 2: 
 var $4=$Parser_addr; //@line 795 "lex.c"
 var $HashIfEvaluateToLevel3=(($4+26)|0); //@line 795 "lex.c"
 var $5=HEAP16[(($HashIfEvaluateToLevel3)>>1)]; //@line 795 "lex.c"
 var $inc=((($5)+(1))&65535); //@line 795 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel3)>>1)]=$inc; //@line 795 "lex.c"
 label=8;break; //@line 795 "lex.c"
 case 3: 
 var $6=$Parser_addr; //@line 797 "lex.c"
 var $HashIfEvaluateToLevel4=(($6+26)|0); //@line 797 "lex.c"
 var $7=HEAP16[(($HashIfEvaluateToLevel4)>>1)]; //@line 797 "lex.c"
 var $conv5=(($7<<16)>>16); //@line 797 "lex.c"
 var $8=$Parser_addr; //@line 797 "lex.c"
 var $HashIfLevel6=(($8+24)|0); //@line 797 "lex.c"
 var $9=HEAP16[(($HashIfLevel6)>>1)]; //@line 797 "lex.c"
 var $conv7=(($9<<16)>>16); //@line 797 "lex.c"
 var $cmp8=($conv5|0)==($conv7|0); //@line 797 "lex.c"
 if($cmp8){label=4;break;}else{label=7;break;} //@line 797 "lex.c"
 case 4: 
 var $10=$Parser_addr; //@line 800 "lex.c"
 var $HashIfLevel11=(($10+24)|0); //@line 800 "lex.c"
 var $11=HEAP16[(($HashIfLevel11)>>1)]; //@line 800 "lex.c"
 var $conv12=(($11<<16)>>16); //@line 800 "lex.c"
 var $cmp13=($conv12|0)==0; //@line 800 "lex.c"
 if($cmp13){label=5;break;}else{label=6;break;} //@line 800 "lex.c"
 case 5: 
 var $12=$Parser_addr; //@line 801 "lex.c"
 _ProgramFail($12,11008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 801 "lex.c"
 label=6;break; //@line 801 "lex.c"
 case 6: 
 var $13=$Parser_addr; //@line 803 "lex.c"
 var $HashIfEvaluateToLevel16=(($13+26)|0); //@line 803 "lex.c"
 var $14=HEAP16[(($HashIfEvaluateToLevel16)>>1)]; //@line 803 "lex.c"
 var $dec=((($14)-(1))&65535); //@line 803 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel16)>>1)]=$dec; //@line 803 "lex.c"
 label=7;break; //@line 804 "lex.c"
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return; //@line 805 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexHashEndif($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 810 "lex.c"
 var $HashIfLevel=(($0+24)|0); //@line 810 "lex.c"
 var $1=HEAP16[(($HashIfLevel)>>1)]; //@line 810 "lex.c"
 var $conv=(($1<<16)>>16); //@line 810 "lex.c"
 var $cmp=($conv|0)==0; //@line 810 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 810 "lex.c"
 case 2: 
 var $2=$Parser_addr; //@line 811 "lex.c"
 _ProgramFail($2,10616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 811 "lex.c"
 label=3;break; //@line 811 "lex.c"
 case 3: 
 var $3=$Parser_addr; //@line 813 "lex.c"
 var $HashIfLevel2=(($3+24)|0); //@line 813 "lex.c"
 var $4=HEAP16[(($HashIfLevel2)>>1)]; //@line 813 "lex.c"
 var $dec=((($4)-(1))&65535); //@line 813 "lex.c"
 HEAP16[(($HashIfLevel2)>>1)]=$dec; //@line 813 "lex.c"
 var $5=$Parser_addr; //@line 814 "lex.c"
 var $HashIfEvaluateToLevel=(($5+26)|0); //@line 814 "lex.c"
 var $6=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 814 "lex.c"
 var $conv3=(($6<<16)>>16); //@line 814 "lex.c"
 var $7=$Parser_addr; //@line 814 "lex.c"
 var $HashIfLevel4=(($7+24)|0); //@line 814 "lex.c"
 var $8=HEAP16[(($HashIfLevel4)>>1)]; //@line 814 "lex.c"
 var $conv5=(($8<<16)>>16); //@line 814 "lex.c"
 var $cmp6=($conv3|0)>($conv5|0); //@line 814 "lex.c"
 if($cmp6){label=4;break;}else{label=5;break;} //@line 814 "lex.c"
 case 4: 
 var $9=$Parser_addr; //@line 815 "lex.c"
 var $HashIfLevel9=(($9+24)|0); //@line 815 "lex.c"
 var $10=HEAP16[(($HashIfLevel9)>>1)]; //@line 815 "lex.c"
 var $11=$Parser_addr; //@line 815 "lex.c"
 var $HashIfEvaluateToLevel10=(($11+26)|0); //@line 815 "lex.c"
 HEAP16[(($HashIfEvaluateToLevel10)>>1)]=$10; //@line 815 "lex.c"
 label=5;break; //@line 815 "lex.c"
 case 5: 
 STACKTOP=sp;return; //@line 816 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexGetToken($Parser,$Value,$IncPos){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Value_addr;
 var $IncPos_addr;
 var $Token;
 var $TryNextToken;
 var $WasPreProcToken;
 $Parser_addr=$Parser;
 $Value_addr=$Value;
 $IncPos_addr=$IncPos;
 label=2;break; //@line 825 "lex.c"
 case 2: 
 $WasPreProcToken=1; //@line 827 "lex.c"
 var $0=$Parser_addr; //@line 829 "lex.c"
 var $1=$Value_addr; //@line 829 "lex.c"
 var $2=$IncPos_addr; //@line 829 "lex.c"
 var $call=_LexGetRawToken($0,$1,$2); //@line 829 "lex.c"
 $Token=$call; //@line 829 "lex.c"
 var $3=$Token; //@line 830 "lex.c"
 switch(($3|0)){case 86:{ label=3;break;}case 87:{ label=4;break;}case 85:{ label=5;break;}case 88:{ label=6;break;}case 89:{ label=7;break;}default:{label=8;break;}}break;
 case 3: 
 var $4=$Parser_addr; //@line 832 "lex.c"
 var $5=$IncPos_addr; //@line 832 "lex.c"
 _LexHashIncPos($4,$5); //@line 832 "lex.c"
 var $6=$Parser_addr; //@line 832 "lex.c"
 _LexHashIfdef($6,0); //@line 832 "lex.c"
 label=9;break; //@line 832 "lex.c"
 case 4: 
 var $7=$Parser_addr; //@line 833 "lex.c"
 var $8=$IncPos_addr; //@line 833 "lex.c"
 _LexHashIncPos($7,$8); //@line 833 "lex.c"
 var $9=$Parser_addr; //@line 833 "lex.c"
 _LexHashIfdef($9,1); //@line 833 "lex.c"
 label=9;break; //@line 833 "lex.c"
 case 5: 
 var $10=$Parser_addr; //@line 834 "lex.c"
 var $11=$IncPos_addr; //@line 834 "lex.c"
 _LexHashIncPos($10,$11); //@line 834 "lex.c"
 var $12=$Parser_addr; //@line 834 "lex.c"
 _LexHashIf($12); //@line 834 "lex.c"
 label=9;break; //@line 834 "lex.c"
 case 6: 
 var $13=$Parser_addr; //@line 835 "lex.c"
 var $14=$IncPos_addr; //@line 835 "lex.c"
 _LexHashIncPos($13,$14); //@line 835 "lex.c"
 var $15=$Parser_addr; //@line 835 "lex.c"
 _LexHashElse($15); //@line 835 "lex.c"
 label=9;break; //@line 835 "lex.c"
 case 7: 
 var $16=$Parser_addr; //@line 836 "lex.c"
 var $17=$IncPos_addr; //@line 836 "lex.c"
 _LexHashIncPos($16,$17); //@line 836 "lex.c"
 var $18=$Parser_addr; //@line 836 "lex.c"
 _LexHashEndif($18); //@line 836 "lex.c"
 label=9;break; //@line 836 "lex.c"
 case 8: 
 $WasPreProcToken=0; //@line 837 "lex.c"
 label=9;break; //@line 837 "lex.c"
 case 9: 
 var $19=$Parser_addr; //@line 841 "lex.c"
 var $HashIfEvaluateToLevel=(($19+26)|0); //@line 841 "lex.c"
 var $20=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 841 "lex.c"
 var $conv=(($20<<16)>>16); //@line 841 "lex.c"
 var $21=$Parser_addr; //@line 841 "lex.c"
 var $HashIfLevel=(($21+24)|0); //@line 841 "lex.c"
 var $22=HEAP16[(($HashIfLevel)>>1)]; //@line 841 "lex.c"
 var $conv5=(($22<<16)>>16); //@line 841 "lex.c"
 var $cmp=($conv|0)<($conv5|0); //@line 841 "lex.c"
 if($cmp){label=10;break;}else{label=11;break;} //@line 841 "lex.c"
 case 10: 
 var $23=$Token; //@line 841 "lex.c"
 var $cmp7=($23|0)!=93; //@line 841 "lex.c"
 if($cmp7){var $25=1;label=12;break;}else{label=11;break;} //@line 841 "lex.c"
 case 11: 
 var $24=$WasPreProcToken; //@line 841 "lex.c"
 var $tobool=($24|0)!=0; //@line 841 "lex.c"
 var $25=$tobool;label=12;break; //@line 841 "lex.c"
 case 12: 
 var $25;
 var $lor_ext=($25&1); //@line 841 "lex.c"
 $TryNextToken=$lor_ext; //@line 841 "lex.c"
 var $26=$IncPos_addr; //@line 842 "lex.c"
 var $tobool9=($26|0)!=0; //@line 842 "lex.c"
 if($tobool9){label=15;break;}else{label=13;break;} //@line 842 "lex.c"
 case 13: 
 var $27=$TryNextToken; //@line 842 "lex.c"
 var $tobool11=($27|0)!=0; //@line 842 "lex.c"
 if($tobool11){label=14;break;}else{label=15;break;} //@line 842 "lex.c"
 case 14: 
 var $28=$Parser_addr; //@line 843 "lex.c"
 var $call12=_LexGetRawToken($28,0,1); //@line 843 "lex.c"
 label=15;break; //@line 843 "lex.c"
 case 15: 
 label=16;break; //@line 845 "lex.c"
 case 16: 
 var $29=$TryNextToken; //@line 845 "lex.c"
 var $tobool13=($29|0)!=0; //@line 845 "lex.c"
 if($tobool13){label=2;break;}else{label=17;break;} //@line 845 "lex.c"
 case 17: 
 var $30=$Token; //@line 847 "lex.c"
 return $30; //@line 847 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexRawPeekToken($Parser){
 var label=0;
 var $Parser_addr;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 853 "lex.c"
 var $Pos=(($0)|0); //@line 853 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 853 "lex.c"
 var $2=HEAP8[($1)]; //@line 853 "lex.c"
 var $conv=($2&255); //@line 853 "lex.c"
 return $conv; //@line 853 "lex.c"
}
function _LexToEndOfLine($Parser){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Token;
 $Parser_addr=$Parser;
 label=2;break; //@line 859 "lex.c"
 case 2: 
 var $0=$Parser_addr; //@line 861 "lex.c"
 var $Pos=(($0)|0); //@line 861 "lex.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 861 "lex.c"
 var $2=HEAP8[($1)]; //@line 861 "lex.c"
 var $conv=($2&255); //@line 861 "lex.c"
 $Token=$conv; //@line 861 "lex.c"
 var $3=$Token; //@line 862 "lex.c"
 var $cmp=($3|0)==94; //@line 862 "lex.c"
 if($cmp){label=4;break;}else{label=3;break;} //@line 862 "lex.c"
 case 3: 
 var $4=$Token; //@line 862 "lex.c"
 var $cmp2=($4|0)==93; //@line 862 "lex.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 862 "lex.c"
 case 4: 
 return; //@line 863 "lex.c"
 case 5: 
 var $5=$Parser_addr; //@line 865 "lex.c"
 var $call=_LexGetRawToken($5,0,1); //@line 865 "lex.c"
 label=6;break;
 case 6: 
 label=2;break; //@line 866 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexCopyTokens($StartParser,$EndParser){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $StartParser_addr;
 var $EndParser_addr;
 var $MemSize;
 var $CopySize;
 var $Pos;
 var $NewTokens;
 var $NewTokenPos;
 var $ILine;
 $StartParser_addr=$StartParser;
 $EndParser_addr=$EndParser;
 $MemSize=0; //@line 872 "lex.c"
 var $0=$StartParser_addr; //@line 874 "lex.c"
 var $Pos1=(($0)|0); //@line 874 "lex.c"
 var $1=HEAP32[(($Pos1)>>2)]; //@line 874 "lex.c"
 $Pos=$1; //@line 874 "lex.c"
 var $2=HEAP32[((18392)>>2)]; //@line 879 "lex.c"
 var $cmp=($2|0)==0; //@line 879 "lex.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 879 "lex.c"
 case 2: 
 var $3=$EndParser_addr; //@line 882 "lex.c"
 var $Pos2=(($3)|0); //@line 882 "lex.c"
 var $4=HEAP32[(($Pos2)>>2)]; //@line 882 "lex.c"
 var $5=$StartParser_addr; //@line 882 "lex.c"
 var $Pos3=(($5)|0); //@line 882 "lex.c"
 var $6=HEAP32[(($Pos3)>>2)]; //@line 882 "lex.c"
 var $sub_ptr_lhs_cast=$4; //@line 882 "lex.c"
 var $sub_ptr_rhs_cast=$6; //@line 882 "lex.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 882 "lex.c"
 $MemSize=$sub_ptr_sub; //@line 882 "lex.c"
 var $7=$StartParser_addr; //@line 883 "lex.c"
 var $8=$MemSize; //@line 883 "lex.c"
 var $add=((($8)+(2))|0); //@line 883 "lex.c"
 var $call=_VariableAlloc($7,$add,1); //@line 883 "lex.c"
 $NewTokens=$call; //@line 883 "lex.c"
 var $9=$NewTokens; //@line 884 "lex.c"
 var $10=$StartParser_addr; //@line 884 "lex.c"
 var $Pos4=(($10)|0); //@line 884 "lex.c"
 var $11=HEAP32[(($Pos4)>>2)]; //@line 884 "lex.c"
 var $12=$MemSize; //@line 884 "lex.c"
 assert($12 % 1 === 0);(_memcpy($9, $11, $12)|0); //@line 884 "lex.c"
 label=36;break; //@line 885 "lex.c"
 case 3: 
 var $13=HEAP32[((18392)>>2)]; //@line 889 "lex.c"
 HEAP32[((18400)>>2)]=$13; //@line 889 "lex.c"
 label=4;break; //@line 889 "lex.c"
 case 4: 
 var $14=HEAP32[((18400)>>2)]; //@line 889 "lex.c"
 var $cmp5=($14|0)!=0; //@line 889 "lex.c"
 if($cmp5){label=5;break;}else{var $24=0;label=8;break;} //@line 889 "lex.c"
 case 5: 
 var $15=$Pos; //@line 889 "lex.c"
 var $16=HEAP32[((18400)>>2)]; //@line 889 "lex.c"
 var $Tokens=(($16+4)|0); //@line 889 "lex.c"
 var $17=HEAP32[(($Tokens)>>2)]; //@line 889 "lex.c"
 var $arrayidx=(($17)|0); //@line 889 "lex.c"
 var $cmp6=($15>>>0)<($arrayidx>>>0); //@line 889 "lex.c"
 if($cmp6){var $23=1;label=7;break;}else{label=6;break;} //@line 889 "lex.c"
 case 6: 
 var $18=$Pos; //@line 889 "lex.c"
 var $19=HEAP32[((18400)>>2)]; //@line 889 "lex.c"
 var $NumBytes=(($19+8)|0); //@line 889 "lex.c"
 var $20=HEAP32[(($NumBytes)>>2)]; //@line 889 "lex.c"
 var $21=HEAP32[((18400)>>2)]; //@line 889 "lex.c"
 var $Tokens7=(($21+4)|0); //@line 889 "lex.c"
 var $22=HEAP32[(($Tokens7)>>2)]; //@line 889 "lex.c"
 var $arrayidx8=(($22+$20)|0); //@line 889 "lex.c"
 var $cmp9=($18>>>0)>=($arrayidx8>>>0); //@line 889 "lex.c"
 var $23=$cmp9;label=7;break; //@line 889 "lex.c"
 case 7: 
 var $23;
 var $24=$23;label=8;break;
 case 8: 
 var $24;
 if($24){label=9;break;}else{label=11;break;}
 case 9: 
 label=10;break; //@line 890 "lex.c"
 case 10: 
 var $25=HEAP32[((18400)>>2)]; //@line 889 "lex.c"
 var $Next=(($25)|0); //@line 889 "lex.c"
 var $26=HEAP32[(($Next)>>2)]; //@line 889 "lex.c"
 HEAP32[((18400)>>2)]=$26; //@line 889 "lex.c"
 label=4;break; //@line 889 "lex.c"
 case 11: 
 var $27=$EndParser_addr; //@line 892 "lex.c"
 var $Pos10=(($27)|0); //@line 892 "lex.c"
 var $28=HEAP32[(($Pos10)>>2)]; //@line 892 "lex.c"
 var $29=$StartParser_addr; //@line 892 "lex.c"
 var $Pos11=(($29)|0); //@line 892 "lex.c"
 var $30=HEAP32[(($Pos11)>>2)]; //@line 892 "lex.c"
 var $cmp12=($28>>>0)>=($30>>>0); //@line 892 "lex.c"
 if($cmp12){label=12;break;}else{label=14;break;} //@line 892 "lex.c"
 case 12: 
 var $31=$EndParser_addr; //@line 892 "lex.c"
 var $Pos13=(($31)|0); //@line 892 "lex.c"
 var $32=HEAP32[(($Pos13)>>2)]; //@line 892 "lex.c"
 var $33=HEAP32[((18400)>>2)]; //@line 892 "lex.c"
 var $NumBytes14=(($33+8)|0); //@line 892 "lex.c"
 var $34=HEAP32[(($NumBytes14)>>2)]; //@line 892 "lex.c"
 var $35=HEAP32[((18400)>>2)]; //@line 892 "lex.c"
 var $Tokens15=(($35+4)|0); //@line 892 "lex.c"
 var $36=HEAP32[(($Tokens15)>>2)]; //@line 892 "lex.c"
 var $arrayidx16=(($36+$34)|0); //@line 892 "lex.c"
 var $cmp17=($32>>>0)<($arrayidx16>>>0); //@line 892 "lex.c"
 if($cmp17){label=13;break;}else{label=14;break;} //@line 892 "lex.c"
 case 13: 
 var $37=$EndParser_addr; //@line 895 "lex.c"
 var $Pos19=(($37)|0); //@line 895 "lex.c"
 var $38=HEAP32[(($Pos19)>>2)]; //@line 895 "lex.c"
 var $39=$StartParser_addr; //@line 895 "lex.c"
 var $Pos20=(($39)|0); //@line 895 "lex.c"
 var $40=HEAP32[(($Pos20)>>2)]; //@line 895 "lex.c"
 var $sub_ptr_lhs_cast21=$38; //@line 895 "lex.c"
 var $sub_ptr_rhs_cast22=$40; //@line 895 "lex.c"
 var $sub_ptr_sub23=((($sub_ptr_lhs_cast21)-($sub_ptr_rhs_cast22))|0); //@line 895 "lex.c"
 $MemSize=$sub_ptr_sub23; //@line 895 "lex.c"
 var $41=$StartParser_addr; //@line 896 "lex.c"
 var $42=$MemSize; //@line 896 "lex.c"
 var $add24=((($42)+(2))|0); //@line 896 "lex.c"
 var $call25=_VariableAlloc($41,$add24,1); //@line 896 "lex.c"
 $NewTokens=$call25; //@line 896 "lex.c"
 var $43=$NewTokens; //@line 897 "lex.c"
 var $44=$StartParser_addr; //@line 897 "lex.c"
 var $Pos26=(($44)|0); //@line 897 "lex.c"
 var $45=HEAP32[(($Pos26)>>2)]; //@line 897 "lex.c"
 var $46=$MemSize; //@line 897 "lex.c"
 assert($46 % 1 === 0);(_memcpy($43, $45, $46)|0); //@line 897 "lex.c"
 label=35;break; //@line 898 "lex.c"
 case 14: 
 var $47=HEAP32[((18400)>>2)]; //@line 902 "lex.c"
 var $NumBytes28=(($47+8)|0); //@line 902 "lex.c"
 var $48=HEAP32[(($NumBytes28)>>2)]; //@line 902 "lex.c"
 var $sub=((($48)-(2))|0); //@line 902 "lex.c"
 var $49=HEAP32[((18400)>>2)]; //@line 902 "lex.c"
 var $Tokens29=(($49+4)|0); //@line 902 "lex.c"
 var $50=HEAP32[(($Tokens29)>>2)]; //@line 902 "lex.c"
 var $arrayidx30=(($50+$sub)|0); //@line 902 "lex.c"
 var $51=$Pos; //@line 902 "lex.c"
 var $sub_ptr_lhs_cast31=$arrayidx30; //@line 902 "lex.c"
 var $sub_ptr_rhs_cast32=$51; //@line 902 "lex.c"
 var $sub_ptr_sub33=((($sub_ptr_lhs_cast31)-($sub_ptr_rhs_cast32))|0); //@line 902 "lex.c"
 $MemSize=$sub_ptr_sub33; //@line 902 "lex.c"
 var $52=HEAP32[((18400)>>2)]; //@line 904 "lex.c"
 var $Next34=(($52)|0); //@line 904 "lex.c"
 var $53=HEAP32[(($Next34)>>2)]; //@line 904 "lex.c"
 $ILine=$53; //@line 904 "lex.c"
 label=15;break; //@line 904 "lex.c"
 case 15: 
 var $54=$ILine; //@line 904 "lex.c"
 var $cmp36=($54|0)!=0; //@line 904 "lex.c"
 if($cmp36){label=16;break;}else{var $66=0;label=19;break;} //@line 904 "lex.c"
 case 16: 
 var $55=$EndParser_addr; //@line 904 "lex.c"
 var $Pos38=(($55)|0); //@line 904 "lex.c"
 var $56=HEAP32[(($Pos38)>>2)]; //@line 904 "lex.c"
 var $57=$ILine; //@line 904 "lex.c"
 var $Tokens39=(($57+4)|0); //@line 904 "lex.c"
 var $58=HEAP32[(($Tokens39)>>2)]; //@line 904 "lex.c"
 var $arrayidx40=(($58)|0); //@line 904 "lex.c"
 var $cmp41=($56>>>0)<($arrayidx40>>>0); //@line 904 "lex.c"
 if($cmp41){var $65=1;label=18;break;}else{label=17;break;} //@line 904 "lex.c"
 case 17: 
 var $59=$EndParser_addr; //@line 904 "lex.c"
 var $Pos43=(($59)|0); //@line 904 "lex.c"
 var $60=HEAP32[(($Pos43)>>2)]; //@line 904 "lex.c"
 var $61=$ILine; //@line 904 "lex.c"
 var $NumBytes44=(($61+8)|0); //@line 904 "lex.c"
 var $62=HEAP32[(($NumBytes44)>>2)]; //@line 904 "lex.c"
 var $63=$ILine; //@line 904 "lex.c"
 var $Tokens45=(($63+4)|0); //@line 904 "lex.c"
 var $64=HEAP32[(($Tokens45)>>2)]; //@line 904 "lex.c"
 var $arrayidx46=(($64+$62)|0); //@line 904 "lex.c"
 var $cmp47=($60>>>0)>=($arrayidx46>>>0); //@line 904 "lex.c"
 var $65=$cmp47;label=18;break; //@line 904 "lex.c"
 case 18: 
 var $65;
 var $66=$65;label=19;break;
 case 19: 
 var $66;
 if($66){label=20;break;}else{label=22;break;}
 case 20: 
 var $67=$ILine; //@line 905 "lex.c"
 var $NumBytes51=(($67+8)|0); //@line 905 "lex.c"
 var $68=HEAP32[(($NumBytes51)>>2)]; //@line 905 "lex.c"
 var $sub52=((($68)-(2))|0); //@line 905 "lex.c"
 var $69=$MemSize; //@line 905 "lex.c"
 var $add53=((($69)+($sub52))|0); //@line 905 "lex.c"
 $MemSize=$add53; //@line 905 "lex.c"
 label=21;break; //@line 905 "lex.c"
 case 21: 
 var $70=$ILine; //@line 904 "lex.c"
 var $Next55=(($70)|0); //@line 904 "lex.c"
 var $71=HEAP32[(($Next55)>>2)]; //@line 904 "lex.c"
 $ILine=$71; //@line 904 "lex.c"
 label=15;break; //@line 904 "lex.c"
 case 22: 
 var $72=$ILine; //@line 907 "lex.c"
 var $cmp57=($72|0)!=0; //@line 907 "lex.c"
 if($cmp57){var $74=1;label=24;break;}else{label=23;break;} //@line 907 "lex.c"
 case 23: 
 ___assert_fail(10240,5208,907,12408); //@line 907 "lex.c"
 throw "Reached an unreachable!"; //@line 907 "lex.c"
 label=24;break; //@line 907 "lex.c"
 case 24: 
 var $74;
 var $lor_ext=($74&1); //@line 907 "lex.c"
 var $75=$EndParser_addr; //@line 908 "lex.c"
 var $Pos60=(($75)|0); //@line 908 "lex.c"
 var $76=HEAP32[(($Pos60)>>2)]; //@line 908 "lex.c"
 var $77=$ILine; //@line 908 "lex.c"
 var $Tokens61=(($77+4)|0); //@line 908 "lex.c"
 var $78=HEAP32[(($Tokens61)>>2)]; //@line 908 "lex.c"
 var $arrayidx62=(($78)|0); //@line 908 "lex.c"
 var $sub_ptr_lhs_cast63=$76; //@line 908 "lex.c"
 var $sub_ptr_rhs_cast64=$arrayidx62; //@line 908 "lex.c"
 var $sub_ptr_sub65=((($sub_ptr_lhs_cast63)-($sub_ptr_rhs_cast64))|0); //@line 908 "lex.c"
 var $79=$MemSize; //@line 908 "lex.c"
 var $add66=((($79)+($sub_ptr_sub65))|0); //@line 908 "lex.c"
 $MemSize=$add66; //@line 908 "lex.c"
 var $80=$StartParser_addr; //@line 909 "lex.c"
 var $81=$MemSize; //@line 909 "lex.c"
 var $add67=((($81)+(2))|0); //@line 909 "lex.c"
 var $call68=_VariableAlloc($80,$add67,1); //@line 909 "lex.c"
 $NewTokens=$call68; //@line 909 "lex.c"
 var $82=HEAP32[((18400)>>2)]; //@line 911 "lex.c"
 var $NumBytes69=(($82+8)|0); //@line 911 "lex.c"
 var $83=HEAP32[(($NumBytes69)>>2)]; //@line 911 "lex.c"
 var $sub70=((($83)-(2))|0); //@line 911 "lex.c"
 var $84=HEAP32[((18400)>>2)]; //@line 911 "lex.c"
 var $Tokens71=(($84+4)|0); //@line 911 "lex.c"
 var $85=HEAP32[(($Tokens71)>>2)]; //@line 911 "lex.c"
 var $arrayidx72=(($85+$sub70)|0); //@line 911 "lex.c"
 var $86=$Pos; //@line 911 "lex.c"
 var $sub_ptr_lhs_cast73=$arrayidx72; //@line 911 "lex.c"
 var $sub_ptr_rhs_cast74=$86; //@line 911 "lex.c"
 var $sub_ptr_sub75=((($sub_ptr_lhs_cast73)-($sub_ptr_rhs_cast74))|0); //@line 911 "lex.c"
 $CopySize=$sub_ptr_sub75; //@line 911 "lex.c"
 var $87=$NewTokens; //@line 912 "lex.c"
 var $88=$Pos; //@line 912 "lex.c"
 var $89=$CopySize; //@line 912 "lex.c"
 assert($89 % 1 === 0);(_memcpy($87, $88, $89)|0); //@line 912 "lex.c"
 var $90=$NewTokens; //@line 913 "lex.c"
 var $91=$CopySize; //@line 913 "lex.c"
 var $add_ptr=(($90+$91)|0); //@line 913 "lex.c"
 $NewTokenPos=$add_ptr; //@line 913 "lex.c"
 var $92=HEAP32[((18400)>>2)]; //@line 914 "lex.c"
 var $Next76=(($92)|0); //@line 914 "lex.c"
 var $93=HEAP32[(($Next76)>>2)]; //@line 914 "lex.c"
 $ILine=$93; //@line 914 "lex.c"
 label=25;break; //@line 914 "lex.c"
 case 25: 
 var $94=$ILine; //@line 914 "lex.c"
 var $cmp78=($94|0)!=0; //@line 914 "lex.c"
 if($cmp78){label=26;break;}else{var $106=0;label=29;break;} //@line 914 "lex.c"
 case 26: 
 var $95=$EndParser_addr; //@line 914 "lex.c"
 var $Pos80=(($95)|0); //@line 914 "lex.c"
 var $96=HEAP32[(($Pos80)>>2)]; //@line 914 "lex.c"
 var $97=$ILine; //@line 914 "lex.c"
 var $Tokens81=(($97+4)|0); //@line 914 "lex.c"
 var $98=HEAP32[(($Tokens81)>>2)]; //@line 914 "lex.c"
 var $arrayidx82=(($98)|0); //@line 914 "lex.c"
 var $cmp83=($96>>>0)<($arrayidx82>>>0); //@line 914 "lex.c"
 if($cmp83){var $105=1;label=28;break;}else{label=27;break;} //@line 914 "lex.c"
 case 27: 
 var $99=$EndParser_addr; //@line 914 "lex.c"
 var $Pos85=(($99)|0); //@line 914 "lex.c"
 var $100=HEAP32[(($Pos85)>>2)]; //@line 914 "lex.c"
 var $101=$ILine; //@line 914 "lex.c"
 var $NumBytes86=(($101+8)|0); //@line 914 "lex.c"
 var $102=HEAP32[(($NumBytes86)>>2)]; //@line 914 "lex.c"
 var $103=$ILine; //@line 914 "lex.c"
 var $Tokens87=(($103+4)|0); //@line 914 "lex.c"
 var $104=HEAP32[(($Tokens87)>>2)]; //@line 914 "lex.c"
 var $arrayidx88=(($104+$102)|0); //@line 914 "lex.c"
 var $cmp89=($100>>>0)>=($arrayidx88>>>0); //@line 914 "lex.c"
 var $105=$cmp89;label=28;break; //@line 914 "lex.c"
 case 28: 
 var $105;
 var $106=$105;label=29;break;
 case 29: 
 var $106;
 if($106){label=30;break;}else{label=32;break;}
 case 30: 
 var $107=$NewTokenPos; //@line 916 "lex.c"
 var $108=$ILine; //@line 916 "lex.c"
 var $Tokens94=(($108+4)|0); //@line 916 "lex.c"
 var $109=HEAP32[(($Tokens94)>>2)]; //@line 916 "lex.c"
 var $arrayidx95=(($109)|0); //@line 916 "lex.c"
 var $110=$ILine; //@line 916 "lex.c"
 var $NumBytes96=(($110+8)|0); //@line 916 "lex.c"
 var $111=HEAP32[(($NumBytes96)>>2)]; //@line 916 "lex.c"
 var $sub97=((($111)-(2))|0); //@line 916 "lex.c"
 assert($sub97 % 1 === 0);(_memcpy($107, $arrayidx95, $sub97)|0); //@line 916 "lex.c"
 var $112=$ILine; //@line 917 "lex.c"
 var $NumBytes98=(($112+8)|0); //@line 917 "lex.c"
 var $113=HEAP32[(($NumBytes98)>>2)]; //@line 917 "lex.c"
 var $sub99=((($113)-(2))|0); //@line 917 "lex.c"
 var $114=$NewTokenPos; //@line 917 "lex.c"
 var $add_ptr100=(($114+$sub99)|0); //@line 917 "lex.c"
 $NewTokenPos=$add_ptr100; //@line 917 "lex.c"
 label=31;break; //@line 918 "lex.c"
 case 31: 
 var $115=$ILine; //@line 914 "lex.c"
 var $Next102=(($115)|0); //@line 914 "lex.c"
 var $116=HEAP32[(($Next102)>>2)]; //@line 914 "lex.c"
 $ILine=$116; //@line 914 "lex.c"
 label=25;break; //@line 914 "lex.c"
 case 32: 
 var $117=$ILine; //@line 919 "lex.c"
 var $cmp104=($117|0)!=0; //@line 919 "lex.c"
 if($cmp104){var $119=1;label=34;break;}else{label=33;break;} //@line 919 "lex.c"
 case 33: 
 ___assert_fail(10240,5208,919,12408); //@line 919 "lex.c"
 throw "Reached an unreachable!"; //@line 919 "lex.c"
 label=34;break; //@line 919 "lex.c"
 case 34: 
 var $119;
 var $lor_ext107=($119&1); //@line 919 "lex.c"
 var $120=$NewTokenPos; //@line 920 "lex.c"
 var $121=$ILine; //@line 920 "lex.c"
 var $Tokens108=(($121+4)|0); //@line 920 "lex.c"
 var $122=HEAP32[(($Tokens108)>>2)]; //@line 920 "lex.c"
 var $arrayidx109=(($122)|0); //@line 920 "lex.c"
 var $123=$EndParser_addr; //@line 920 "lex.c"
 var $Pos110=(($123)|0); //@line 920 "lex.c"
 var $124=HEAP32[(($Pos110)>>2)]; //@line 920 "lex.c"
 var $125=$ILine; //@line 920 "lex.c"
 var $Tokens111=(($125+4)|0); //@line 920 "lex.c"
 var $126=HEAP32[(($Tokens111)>>2)]; //@line 920 "lex.c"
 var $arrayidx112=(($126)|0); //@line 920 "lex.c"
 var $sub_ptr_lhs_cast113=$124; //@line 920 "lex.c"
 var $sub_ptr_rhs_cast114=$arrayidx112; //@line 920 "lex.c"
 var $sub_ptr_sub115=((($sub_ptr_lhs_cast113)-($sub_ptr_rhs_cast114))|0); //@line 920 "lex.c"
 assert($sub_ptr_sub115 % 1 === 0);(_memcpy($120, $arrayidx109, $sub_ptr_sub115)|0); //@line 920 "lex.c"
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $127=$MemSize; //@line 924 "lex.c"
 var $128=$NewTokens; //@line 924 "lex.c"
 var $arrayidx117=(($128+$127)|0); //@line 924 "lex.c"
 HEAP8[($arrayidx117)]=95; //@line 924 "lex.c"
 var $129=$NewTokens; //@line 926 "lex.c"
 return $129; //@line 926 "lex.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseStatementMaybeRun($Parser,$Condition,$CheckTrailingSemicolon){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Condition_addr;
 var $CheckTrailingSemicolon_addr;
 var $OldMode;
 var $Result;
 $Parser_addr=$Parser;
 $Condition_addr=$Condition;
 $CheckTrailingSemicolon_addr=$CheckTrailingSemicolon;
 var $0=$Parser_addr; //@line 34 "parse.c"
 var $Mode=(($0+12)|0); //@line 34 "parse.c"
 var $1=HEAP32[(($Mode)>>2)]; //@line 34 "parse.c"
 var $cmp=($1|0)!=1; //@line 34 "parse.c"
 if($cmp){label=2;break;}else{label=4;break;} //@line 34 "parse.c"
 case 2: 
 var $2=$Condition_addr; //@line 34 "parse.c"
 var $tobool=($2|0)!=0; //@line 34 "parse.c"
 if($tobool){label=4;break;}else{label=3;break;} //@line 34 "parse.c"
 case 3: 
 var $3=$Parser_addr; //@line 36 "parse.c"
 var $Mode1=(($3+12)|0); //@line 36 "parse.c"
 var $4=HEAP32[(($Mode1)>>2)]; //@line 36 "parse.c"
 $OldMode=$4; //@line 36 "parse.c"
 var $5=$Parser_addr; //@line 38 "parse.c"
 var $Mode2=(($5+12)|0); //@line 38 "parse.c"
 HEAP32[(($Mode2)>>2)]=1; //@line 38 "parse.c"
 var $6=$Parser_addr; //@line 39 "parse.c"
 var $7=$CheckTrailingSemicolon_addr; //@line 39 "parse.c"
 var $call=_ParseStatement($6,$7); //@line 39 "parse.c"
 $Result=$call; //@line 39 "parse.c"
 var $8=$OldMode; //@line 40 "parse.c"
 var $9=$Parser_addr; //@line 40 "parse.c"
 var $Mode3=(($9+12)|0); //@line 40 "parse.c"
 HEAP32[(($Mode3)>>2)]=$8; //@line 40 "parse.c"
 var $10=$Result; //@line 41 "parse.c"
 $retval=$10; //@line 41 "parse.c"
 label=5;break; //@line 41 "parse.c"
 case 4: 
 var $11=$Parser_addr; //@line 44 "parse.c"
 var $12=$CheckTrailingSemicolon_addr; //@line 44 "parse.c"
 var $call4=_ParseStatement($11,$12); //@line 44 "parse.c"
 $retval=$call4; //@line 44 "parse.c"
 label=5;break; //@line 44 "parse.c"
 case 5: 
 var $13=$retval; //@line 45 "parse.c"
 return $13; //@line 45 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseStatement($Parser,$CheckTrailingSemicolon){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $CheckTrailingSemicolon_addr;
 var $CValue=sp;
 var $LexerValue=(sp)+(8);
 var $VarValue=(sp)+(16);
 var $Condition;
 var $PreState=(sp)+(24);
 var $Token;
 var $NextToken;
 var $PreConditional=(sp)+(56);
 var $PreMode;
 var $PreStatement=(sp)+(88);
 var $PreMode81;
 var $OldMode;
 var $OldSearchLabel;
 $Parser_addr=$Parser;
 $CheckTrailingSemicolon_addr=$CheckTrailingSemicolon;
 var $0=$Parser_addr; //@line 487 "parse.c"
 _ParserCopy($PreState,$0); //@line 487 "parse.c"
 var $1=$Parser_addr; //@line 488 "parse.c"
 var $call=_LexGetToken($1,$LexerValue,1); //@line 488 "parse.c"
 $Token=$call; //@line 488 "parse.c"
 var $2=$Token; //@line 490 "parse.c"
 switch(($2|0)){case 70:{ label=110;break;}case 75:{ label=111;break;}case 91:{ label=116;break;}case 30:case 19:case 33:case 34:case 43:{ label=14;break;}case 52:{ label=17;break;}case 76:{ label=18;break;}case 93:{ label=2;break;}case 77:{ label=29;break;}case 45:{ label=3;break;}case 72:{ label=45;break;}case 74:{ label=63;break;}case 50:{ label=64;break;}case 54:case 62:case 55:case 60:case 56:case 57:case 58:case 67:case 68:case 59:case 61:case 69:case 63:case 64:case 65:case 66:{ label=65;break;}case 83:{ label=66;break;}case 84:{ label=67;break;}case 79:{ label=70;break;}case 80:{ label=79;break;}case 81:{ label=88;break;}case 78:{ label=93;break;}case 71:{ label=96;break;}case 82:{ label=99;break;}default:{label=123;break;}}break;
 case 2: 
 $retval=0; //@line 493 "parse.c"
 label=129;break; //@line 493 "parse.c"
 case 3: 
 var $3=HEAP32[(($LexerValue)>>2)]; //@line 497 "parse.c"
 var $Val=(($3+4)|0); //@line 497 "parse.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 497 "parse.c"
 var $Identifier=$4; //@line 497 "parse.c"
 var $5=HEAP32[(($Identifier)>>2)]; //@line 497 "parse.c"
 var $call2=_VariableDefined($5); //@line 497 "parse.c"
 var $tobool=($call2|0)!=0; //@line 497 "parse.c"
 if($tobool){label=4;break;}else{label=7;break;} //@line 497 "parse.c"
 case 4: 
 var $6=$Parser_addr; //@line 499 "parse.c"
 var $7=HEAP32[(($LexerValue)>>2)]; //@line 499 "parse.c"
 var $Val3=(($7+4)|0); //@line 499 "parse.c"
 var $8=HEAP32[(($Val3)>>2)]; //@line 499 "parse.c"
 var $Identifier4=$8; //@line 499 "parse.c"
 var $9=HEAP32[(($Identifier4)>>2)]; //@line 499 "parse.c"
 _VariableGet($6,$9,$VarValue); //@line 499 "parse.c"
 var $10=HEAP32[(($VarValue)>>2)]; //@line 500 "parse.c"
 var $Typ=(($10)|0); //@line 500 "parse.c"
 var $11=HEAP32[(($Typ)>>2)]; //@line 500 "parse.c"
 var $Base=(($11)|0); //@line 500 "parse.c"
 var $12=HEAP32[(($Base)>>2)]; //@line 500 "parse.c"
 var $cmp=($12|0)==17; //@line 500 "parse.c"
 if($cmp){label=5;break;}else{label=6;break;} //@line 500 "parse.c"
 case 5: 
 var $13=$Parser_addr; //@line 502 "parse.c"
 var $14=$13; //@line 502 "parse.c"
 var $15=$PreState; //@line 502 "parse.c"
 assert(32 % 1 === 0);(_memcpy($14, $15, 32)|0); //@line 502 "parse.c"
 var $16=$Parser_addr; //@line 503 "parse.c"
 var $17=$Token; //@line 503 "parse.c"
 var $call6=_ParseDeclaration($16,$17); //@line 503 "parse.c"
 label=124;break; //@line 504 "parse.c"
 case 6: 
 label=13;break; //@line 506 "parse.c"
 case 7: 
 var $18=$Parser_addr; //@line 510 "parse.c"
 var $call7=_LexGetToken($18,0,0); //@line 510 "parse.c"
 $NextToken=$call7; //@line 510 "parse.c"
 var $19=$NextToken; //@line 511 "parse.c"
 var $cmp8=($19|0)==14; //@line 511 "parse.c"
 if($cmp8){label=8;break;}else{label=12;break;} //@line 511 "parse.c"
 case 8: 
 var $20=$Parser_addr; //@line 514 "parse.c"
 var $call10=_LexGetToken($20,0,1); //@line 514 "parse.c"
 var $21=$Parser_addr; //@line 515 "parse.c"
 var $Mode=(($21+12)|0); //@line 515 "parse.c"
 var $22=HEAP32[(($Mode)>>2)]; //@line 515 "parse.c"
 var $cmp11=($22|0)==6; //@line 515 "parse.c"
 if($cmp11){label=9;break;}else{label=11;break;} //@line 515 "parse.c"
 case 9: 
 var $23=HEAP32[(($LexerValue)>>2)]; //@line 515 "parse.c"
 var $Val12=(($23+4)|0); //@line 515 "parse.c"
 var $24=HEAP32[(($Val12)>>2)]; //@line 515 "parse.c"
 var $Identifier13=$24; //@line 515 "parse.c"
 var $25=HEAP32[(($Identifier13)>>2)]; //@line 515 "parse.c"
 var $26=$Parser_addr; //@line 515 "parse.c"
 var $SearchGotoLabel=(($26+20)|0); //@line 515 "parse.c"
 var $27=HEAP32[(($SearchGotoLabel)>>2)]; //@line 515 "parse.c"
 var $cmp14=($25|0)==($27|0); //@line 515 "parse.c"
 if($cmp14){label=10;break;}else{label=11;break;} //@line 515 "parse.c"
 case 10: 
 var $28=$Parser_addr; //@line 516 "parse.c"
 var $Mode16=(($28+12)|0); //@line 516 "parse.c"
 HEAP32[(($Mode16)>>2)]=0; //@line 516 "parse.c"
 label=11;break; //@line 516 "parse.c"
 case 11: 
 $CheckTrailingSemicolon_addr=0; //@line 518 "parse.c"
 label=124;break; //@line 519 "parse.c"
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $29=$Parser_addr; //@line 529 "parse.c"
 var $30=$29; //@line 529 "parse.c"
 var $31=$PreState; //@line 529 "parse.c"
 assert(32 % 1 === 0);(_memcpy($30, $31, 32)|0); //@line 529 "parse.c"
 var $32=$Parser_addr; //@line 530 "parse.c"
 var $call21=_ExpressionParse($32,$CValue); //@line 530 "parse.c"
 var $33=$Parser_addr; //@line 531 "parse.c"
 var $Mode22=(($33+12)|0); //@line 531 "parse.c"
 var $34=HEAP32[(($Mode22)>>2)]; //@line 531 "parse.c"
 var $cmp23=($34|0)==0; //@line 531 "parse.c"
 if($cmp23){label=15;break;}else{label=16;break;} //@line 531 "parse.c"
 case 15: 
 var $35=$Parser_addr; //@line 532 "parse.c"
 var $36=HEAP32[(($CValue)>>2)]; //@line 532 "parse.c"
 _VariableStackPop($35,$36); //@line 532 "parse.c"
 label=16;break; //@line 532 "parse.c"
 case 16: 
 label=124;break; //@line 533 "parse.c"
 case 17: 
 var $37=$Parser_addr; //@line 536 "parse.c"
 var $call27=_ParseBlock($37,0,1); //@line 536 "parse.c"
 $CheckTrailingSemicolon_addr=0; //@line 537 "parse.c"
 label=124;break; //@line 538 "parse.c"
 case 18: 
 var $38=$Parser_addr; //@line 541 "parse.c"
 var $call29=_LexGetToken($38,0,1); //@line 541 "parse.c"
 var $cmp30=($call29|0)!=43; //@line 541 "parse.c"
 if($cmp30){label=19;break;}else{label=20;break;} //@line 541 "parse.c"
 case 19: 
 var $39=$Parser_addr; //@line 542 "parse.c"
 _ProgramFail($39,9920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 542 "parse.c"
 label=20;break; //@line 542 "parse.c"
 case 20: 
 var $40=$Parser_addr; //@line 544 "parse.c"
 var $call33=_ExpressionParseInt($40); //@line 544 "parse.c"
 $Condition=$call33; //@line 544 "parse.c"
 var $41=$Parser_addr; //@line 546 "parse.c"
 var $call34=_LexGetToken($41,0,1); //@line 546 "parse.c"
 var $cmp35=($call34|0)!=44; //@line 546 "parse.c"
 if($cmp35){label=21;break;}else{label=22;break;} //@line 546 "parse.c"
 case 21: 
 var $42=$Parser_addr; //@line 547 "parse.c"
 _ProgramFail($42,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 547 "parse.c"
 label=22;break; //@line 547 "parse.c"
 case 22: 
 var $43=$Parser_addr; //@line 549 "parse.c"
 var $44=$Condition; //@line 549 "parse.c"
 var $call38=_ParseStatementMaybeRun($43,$44,1); //@line 549 "parse.c"
 var $cmp39=($call38|0)!=2; //@line 549 "parse.c"
 if($cmp39){label=23;break;}else{label=24;break;} //@line 549 "parse.c"
 case 23: 
 var $45=$Parser_addr; //@line 550 "parse.c"
 _ProgramFail($45,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 550 "parse.c"
 label=24;break; //@line 550 "parse.c"
 case 24: 
 var $46=$Parser_addr; //@line 552 "parse.c"
 var $call42=_LexGetToken($46,0,0); //@line 552 "parse.c"
 var $cmp43=($call42|0)==73; //@line 552 "parse.c"
 if($cmp43){label=25;break;}else{label=28;break;} //@line 552 "parse.c"
 case 25: 
 var $47=$Parser_addr; //@line 554 "parse.c"
 var $call45=_LexGetToken($47,0,1); //@line 554 "parse.c"
 var $48=$Parser_addr; //@line 555 "parse.c"
 var $49=$Condition; //@line 555 "parse.c"
 var $tobool46=($49|0)!=0; //@line 555 "parse.c"
 var $lnot=$tobool46^1; //@line 555 "parse.c"
 var $lnot_ext=($lnot&1); //@line 555 "parse.c"
 var $call47=_ParseStatementMaybeRun($48,$lnot_ext,1); //@line 555 "parse.c"
 var $cmp48=($call47|0)!=2; //@line 555 "parse.c"
 if($cmp48){label=26;break;}else{label=27;break;} //@line 555 "parse.c"
 case 26: 
 var $50=$Parser_addr; //@line 556 "parse.c"
 _ProgramFail($50,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 556 "parse.c"
 label=27;break; //@line 556 "parse.c"
 case 27: 
 label=28;break; //@line 557 "parse.c"
 case 28: 
 $CheckTrailingSemicolon_addr=0; //@line 558 "parse.c"
 label=124;break; //@line 559 "parse.c"
 case 29: 
 var $51=$Parser_addr; //@line 564 "parse.c"
 var $Mode53=(($51+12)|0); //@line 564 "parse.c"
 var $52=HEAP32[(($Mode53)>>2)]; //@line 564 "parse.c"
 $PreMode=$52; //@line 564 "parse.c"
 var $53=$Parser_addr; //@line 566 "parse.c"
 var $call54=_LexGetToken($53,0,1); //@line 566 "parse.c"
 var $cmp55=($call54|0)!=43; //@line 566 "parse.c"
 if($cmp55){label=30;break;}else{label=31;break;} //@line 566 "parse.c"
 case 30: 
 var $54=$Parser_addr; //@line 567 "parse.c"
 _ProgramFail($54,9920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 567 "parse.c"
 label=31;break; //@line 567 "parse.c"
 case 31: 
 var $55=$Parser_addr; //@line 569 "parse.c"
 _ParserCopyPos($PreConditional,$55); //@line 569 "parse.c"
 label=32;break; //@line 570 "parse.c"
 case 32: 
 var $56=$Parser_addr; //@line 572 "parse.c"
 _ParserCopyPos($56,$PreConditional); //@line 572 "parse.c"
 var $57=$Parser_addr; //@line 573 "parse.c"
 var $call58=_ExpressionParseInt($57); //@line 573 "parse.c"
 $Condition=$call58; //@line 573 "parse.c"
 var $58=$Parser_addr; //@line 574 "parse.c"
 var $call59=_LexGetToken($58,0,1); //@line 574 "parse.c"
 var $cmp60=($call59|0)!=44; //@line 574 "parse.c"
 if($cmp60){label=33;break;}else{label=34;break;} //@line 574 "parse.c"
 case 33: 
 var $59=$Parser_addr; //@line 575 "parse.c"
 _ProgramFail($59,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 575 "parse.c"
 label=34;break; //@line 575 "parse.c"
 case 34: 
 var $60=$Parser_addr; //@line 577 "parse.c"
 var $61=$Condition; //@line 577 "parse.c"
 var $call63=_ParseStatementMaybeRun($60,$61,1); //@line 577 "parse.c"
 var $cmp64=($call63|0)!=2; //@line 577 "parse.c"
 if($cmp64){label=35;break;}else{label=36;break;} //@line 577 "parse.c"
 case 35: 
 var $62=$Parser_addr; //@line 578 "parse.c"
 _ProgramFail($62,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 578 "parse.c"
 label=36;break; //@line 578 "parse.c"
 case 36: 
 var $63=$Parser_addr; //@line 580 "parse.c"
 var $Mode67=(($63+12)|0); //@line 580 "parse.c"
 var $64=HEAP32[(($Mode67)>>2)]; //@line 580 "parse.c"
 var $cmp68=($64|0)==5; //@line 580 "parse.c"
 if($cmp68){label=37;break;}else{label=38;break;} //@line 580 "parse.c"
 case 37: 
 var $65=$PreMode; //@line 581 "parse.c"
 var $66=$Parser_addr; //@line 581 "parse.c"
 var $Mode70=(($66+12)|0); //@line 581 "parse.c"
 HEAP32[(($Mode70)>>2)]=$65; //@line 581 "parse.c"
 label=38;break; //@line 581 "parse.c"
 case 38: 
 label=39;break; //@line 583 "parse.c"
 case 39: 
 var $67=$Parser_addr; //@line 583 "parse.c"
 var $Mode72=(($67+12)|0); //@line 583 "parse.c"
 var $68=HEAP32[(($Mode72)>>2)]; //@line 583 "parse.c"
 var $cmp73=($68|0)==0; //@line 583 "parse.c"
 if($cmp73){label=40;break;}else{var $70=0;label=41;break;} //@line 583 "parse.c"
 case 40: 
 var $69=$Condition; //@line 583 "parse.c"
 var $tobool74=($69|0)!=0; //@line 583 "parse.c"
 var $70=$tobool74;label=41;break;
 case 41: 
 var $70;
 if($70){label=32;break;}else{label=42;break;}
 case 42: 
 var $71=$Parser_addr; //@line 585 "parse.c"
 var $Mode75=(($71+12)|0); //@line 585 "parse.c"
 var $72=HEAP32[(($Mode75)>>2)]; //@line 585 "parse.c"
 var $cmp76=($72|0)==4; //@line 585 "parse.c"
 if($cmp76){label=43;break;}else{label=44;break;} //@line 585 "parse.c"
 case 43: 
 var $73=$PreMode; //@line 586 "parse.c"
 var $74=$Parser_addr; //@line 586 "parse.c"
 var $Mode78=(($74+12)|0); //@line 586 "parse.c"
 HEAP32[(($Mode78)>>2)]=$73; //@line 586 "parse.c"
 label=44;break; //@line 586 "parse.c"
 case 44: 
 $CheckTrailingSemicolon_addr=0; //@line 588 "parse.c"
 label=124;break; //@line 590 "parse.c"
 case 45: 
 var $75=$Parser_addr; //@line 595 "parse.c"
 var $Mode82=(($75+12)|0); //@line 595 "parse.c"
 var $76=HEAP32[(($Mode82)>>2)]; //@line 595 "parse.c"
 $PreMode81=$76; //@line 595 "parse.c"
 var $77=$Parser_addr; //@line 596 "parse.c"
 _ParserCopyPos($PreStatement,$77); //@line 596 "parse.c"
 label=46;break; //@line 597 "parse.c"
 case 46: 
 var $78=$Parser_addr; //@line 599 "parse.c"
 _ParserCopyPos($78,$PreStatement); //@line 599 "parse.c"
 var $79=$Parser_addr; //@line 600 "parse.c"
 var $call84=_ParseStatement($79,1); //@line 600 "parse.c"
 var $cmp85=($call84|0)!=2; //@line 600 "parse.c"
 if($cmp85){label=47;break;}else{label=48;break;} //@line 600 "parse.c"
 case 47: 
 var $80=$Parser_addr; //@line 601 "parse.c"
 _ProgramFail($80,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 601 "parse.c"
 label=48;break; //@line 601 "parse.c"
 case 48: 
 var $81=$Parser_addr; //@line 603 "parse.c"
 var $Mode88=(($81+12)|0); //@line 603 "parse.c"
 var $82=HEAP32[(($Mode88)>>2)]; //@line 603 "parse.c"
 var $cmp89=($82|0)==5; //@line 603 "parse.c"
 if($cmp89){label=49;break;}else{label=50;break;} //@line 603 "parse.c"
 case 49: 
 var $83=$PreMode81; //@line 604 "parse.c"
 var $84=$Parser_addr; //@line 604 "parse.c"
 var $Mode91=(($84+12)|0); //@line 604 "parse.c"
 HEAP32[(($Mode91)>>2)]=$83; //@line 604 "parse.c"
 label=50;break; //@line 604 "parse.c"
 case 50: 
 var $85=$Parser_addr; //@line 606 "parse.c"
 var $call93=_LexGetToken($85,0,1); //@line 606 "parse.c"
 var $cmp94=($call93|0)!=77; //@line 606 "parse.c"
 if($cmp94){label=51;break;}else{label=52;break;} //@line 606 "parse.c"
 case 51: 
 var $86=$Parser_addr; //@line 607 "parse.c"
 _ProgramFail($86,8776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 607 "parse.c"
 label=52;break; //@line 607 "parse.c"
 case 52: 
 var $87=$Parser_addr; //@line 609 "parse.c"
 var $call97=_LexGetToken($87,0,1); //@line 609 "parse.c"
 var $cmp98=($call97|0)!=43; //@line 609 "parse.c"
 if($cmp98){label=53;break;}else{label=54;break;} //@line 609 "parse.c"
 case 53: 
 var $88=$Parser_addr; //@line 610 "parse.c"
 _ProgramFail($88,9920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 610 "parse.c"
 label=54;break; //@line 610 "parse.c"
 case 54: 
 var $89=$Parser_addr; //@line 612 "parse.c"
 var $call101=_ExpressionParseInt($89); //@line 612 "parse.c"
 $Condition=$call101; //@line 612 "parse.c"
 var $90=$Parser_addr; //@line 613 "parse.c"
 var $call102=_LexGetToken($90,0,1); //@line 613 "parse.c"
 var $cmp103=($call102|0)!=44; //@line 613 "parse.c"
 if($cmp103){label=55;break;}else{label=56;break;} //@line 613 "parse.c"
 case 55: 
 var $91=$Parser_addr; //@line 614 "parse.c"
 _ProgramFail($91,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 614 "parse.c"
 label=56;break; //@line 614 "parse.c"
 case 56: 
 label=57;break; //@line 616 "parse.c"
 case 57: 
 var $92=$Condition; //@line 616 "parse.c"
 var $tobool107=($92|0)!=0; //@line 616 "parse.c"
 if($tobool107){label=58;break;}else{var $95=0;label=59;break;} //@line 616 "parse.c"
 case 58: 
 var $93=$Parser_addr; //@line 616 "parse.c"
 var $Mode109=(($93+12)|0); //@line 616 "parse.c"
 var $94=HEAP32[(($Mode109)>>2)]; //@line 616 "parse.c"
 var $cmp110=($94|0)==0; //@line 616 "parse.c"
 var $95=$cmp110;label=59;break;
 case 59: 
 var $95;
 if($95){label=46;break;}else{label=60;break;}
 case 60: 
 var $96=$Parser_addr; //@line 618 "parse.c"
 var $Mode113=(($96+12)|0); //@line 618 "parse.c"
 var $97=HEAP32[(($Mode113)>>2)]; //@line 618 "parse.c"
 var $cmp114=($97|0)==4; //@line 618 "parse.c"
 if($cmp114){label=61;break;}else{label=62;break;} //@line 618 "parse.c"
 case 61: 
 var $98=$PreMode81; //@line 619 "parse.c"
 var $99=$Parser_addr; //@line 619 "parse.c"
 var $Mode116=(($99+12)|0); //@line 619 "parse.c"
 HEAP32[(($Mode116)>>2)]=$98; //@line 619 "parse.c"
 label=62;break; //@line 619 "parse.c"
 case 62: 
 label=124;break; //@line 621 "parse.c"
 case 63: 
 var $100=$Parser_addr; //@line 624 "parse.c"
 _ParseFor($100); //@line 624 "parse.c"
 $CheckTrailingSemicolon_addr=0; //@line 625 "parse.c"
 label=124;break; //@line 626 "parse.c"
 case 64: 
 $CheckTrailingSemicolon_addr=0; //@line 629 "parse.c"
 label=124;break; //@line 630 "parse.c"
 case 65: 
 var $101=$Parser_addr; //@line 648 "parse.c"
 var $102=$101; //@line 648 "parse.c"
 var $103=$PreState; //@line 648 "parse.c"
 assert(32 % 1 === 0);(_memcpy($102, $103, 32)|0); //@line 648 "parse.c"
 var $104=$Parser_addr; //@line 649 "parse.c"
 var $105=$Token; //@line 649 "parse.c"
 var $call121=_ParseDeclaration($104,$105); //@line 649 "parse.c"
 $CheckTrailingSemicolon_addr=$call121; //@line 649 "parse.c"
 label=124;break; //@line 650 "parse.c"
 case 66: 
 var $106=$Parser_addr; //@line 653 "parse.c"
 _ParseMacroDefinition($106); //@line 653 "parse.c"
 $CheckTrailingSemicolon_addr=0; //@line 654 "parse.c"
 label=124;break; //@line 655 "parse.c"
 case 67: 
 var $107=$Parser_addr; //@line 659 "parse.c"
 var $call124=_LexGetToken($107,$LexerValue,1); //@line 659 "parse.c"
 var $cmp125=($call124|0)!=48; //@line 659 "parse.c"
 if($cmp125){label=68;break;}else{label=69;break;} //@line 659 "parse.c"
 case 68: 
 var $108=$Parser_addr; //@line 660 "parse.c"
 _ProgramFail($108,8584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 660 "parse.c"
 label=69;break; //@line 660 "parse.c"
 case 69: 
 var $109=HEAP32[(($LexerValue)>>2)]; //@line 662 "parse.c"
 var $Val128=(($109+4)|0); //@line 662 "parse.c"
 var $110=HEAP32[(($Val128)>>2)]; //@line 662 "parse.c"
 var $Pointer=$110; //@line 662 "parse.c"
 var $111=HEAP32[(($Pointer)>>2)]; //@line 662 "parse.c"
 _IncludeFile($111); //@line 662 "parse.c"
 $CheckTrailingSemicolon_addr=0; //@line 663 "parse.c"
 label=124;break; //@line 664 "parse.c"
 case 70: 
 var $112=$Parser_addr; //@line 668 "parse.c"
 var $call130=_LexGetToken($112,0,1); //@line 668 "parse.c"
 var $cmp131=($call130|0)!=43; //@line 668 "parse.c"
 if($cmp131){label=71;break;}else{label=72;break;} //@line 668 "parse.c"
 case 71: 
 var $113=$Parser_addr; //@line 669 "parse.c"
 _ProgramFail($113,9920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 669 "parse.c"
 label=72;break; //@line 669 "parse.c"
 case 72: 
 var $114=$Parser_addr; //@line 671 "parse.c"
 var $call134=_ExpressionParseInt($114); //@line 671 "parse.c"
 $Condition=$call134; //@line 671 "parse.c"
 var $115=$Parser_addr; //@line 673 "parse.c"
 var $call135=_LexGetToken($115,0,1); //@line 673 "parse.c"
 var $cmp136=($call135|0)!=44; //@line 673 "parse.c"
 if($cmp136){label=73;break;}else{label=74;break;} //@line 673 "parse.c"
 case 73: 
 var $116=$Parser_addr; //@line 674 "parse.c"
 _ProgramFail($116,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 674 "parse.c"
 label=74;break; //@line 674 "parse.c"
 case 74: 
 var $117=$Parser_addr; //@line 676 "parse.c"
 var $call139=_LexGetToken($117,0,0); //@line 676 "parse.c"
 var $cmp140=($call139|0)!=52; //@line 676 "parse.c"
 if($cmp140){label=75;break;}else{label=76;break;} //@line 676 "parse.c"
 case 75: 
 var $118=$Parser_addr; //@line 677 "parse.c"
 _ProgramFail($118,8968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 677 "parse.c"
 label=76;break; //@line 677 "parse.c"
 case 76: 
 var $119=$Parser_addr; //@line 681 "parse.c"
 var $Mode143=(($119+12)|0); //@line 681 "parse.c"
 var $120=HEAP32[(($Mode143)>>2)]; //@line 681 "parse.c"
 $OldMode=$120; //@line 681 "parse.c"
 var $121=$Parser_addr; //@line 682 "parse.c"
 var $SearchLabel=(($121+16)|0); //@line 682 "parse.c"
 var $122=HEAP32[(($SearchLabel)>>2)]; //@line 682 "parse.c"
 $OldSearchLabel=$122; //@line 682 "parse.c"
 var $123=$Parser_addr; //@line 683 "parse.c"
 var $Mode144=(($123+12)|0); //@line 683 "parse.c"
 HEAP32[(($Mode144)>>2)]=3; //@line 683 "parse.c"
 var $124=$Condition; //@line 684 "parse.c"
 var $125=$Parser_addr; //@line 684 "parse.c"
 var $SearchLabel145=(($125+16)|0); //@line 684 "parse.c"
 HEAP32[(($SearchLabel145)>>2)]=$124; //@line 684 "parse.c"
 var $126=$Parser_addr; //@line 686 "parse.c"
 var $127=$OldMode; //@line 686 "parse.c"
 var $cmp146=($127|0)!=1; //@line 686 "parse.c"
 var $conv=($cmp146&1); //@line 686 "parse.c"
 var $call147=_ParseBlock($126,1,$conv); //@line 686 "parse.c"
 var $128=$Parser_addr; //@line 688 "parse.c"
 var $Mode148=(($128+12)|0); //@line 688 "parse.c"
 var $129=HEAP32[(($Mode148)>>2)]; //@line 688 "parse.c"
 var $cmp149=($129|0)!=2; //@line 688 "parse.c"
 if($cmp149){label=77;break;}else{label=78;break;} //@line 688 "parse.c"
 case 77: 
 var $130=$OldMode; //@line 689 "parse.c"
 var $131=$Parser_addr; //@line 689 "parse.c"
 var $Mode152=(($131+12)|0); //@line 689 "parse.c"
 HEAP32[(($Mode152)>>2)]=$130; //@line 689 "parse.c"
 label=78;break; //@line 689 "parse.c"
 case 78: 
 var $132=$OldSearchLabel; //@line 691 "parse.c"
 var $133=$Parser_addr; //@line 691 "parse.c"
 var $SearchLabel154=(($133+16)|0); //@line 691 "parse.c"
 HEAP32[(($SearchLabel154)>>2)]=$132; //@line 691 "parse.c"
 $CheckTrailingSemicolon_addr=0; //@line 694 "parse.c"
 label=124;break; //@line 695 "parse.c"
 case 79: 
 var $134=$Parser_addr; //@line 698 "parse.c"
 var $Mode156=(($134+12)|0); //@line 698 "parse.c"
 var $135=HEAP32[(($Mode156)>>2)]; //@line 698 "parse.c"
 var $cmp157=($135|0)==3; //@line 698 "parse.c"
 if($cmp157){label=80;break;}else{label=81;break;} //@line 698 "parse.c"
 case 80: 
 var $136=$Parser_addr; //@line 700 "parse.c"
 var $Mode160=(($136+12)|0); //@line 700 "parse.c"
 HEAP32[(($Mode160)>>2)]=0; //@line 700 "parse.c"
 var $137=$Parser_addr; //@line 701 "parse.c"
 var $call161=_ExpressionParseInt($137); //@line 701 "parse.c"
 $Condition=$call161; //@line 701 "parse.c"
 var $138=$Parser_addr; //@line 702 "parse.c"
 var $Mode162=(($138+12)|0); //@line 702 "parse.c"
 HEAP32[(($Mode162)>>2)]=3; //@line 702 "parse.c"
 label=82;break; //@line 703 "parse.c"
 case 81: 
 var $139=$Parser_addr; //@line 705 "parse.c"
 var $call164=_ExpressionParseInt($139); //@line 705 "parse.c"
 $Condition=$call164; //@line 705 "parse.c"
 label=82;break;
 case 82: 
 var $140=$Parser_addr; //@line 707 "parse.c"
 var $call166=_LexGetToken($140,0,1); //@line 707 "parse.c"
 var $cmp167=($call166|0)!=14; //@line 707 "parse.c"
 if($cmp167){label=83;break;}else{label=84;break;} //@line 707 "parse.c"
 case 83: 
 var $141=$Parser_addr; //@line 708 "parse.c"
 _ProgramFail($141,8320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 708 "parse.c"
 label=84;break; //@line 708 "parse.c"
 case 84: 
 var $142=$Parser_addr; //@line 710 "parse.c"
 var $Mode171=(($142+12)|0); //@line 710 "parse.c"
 var $143=HEAP32[(($Mode171)>>2)]; //@line 710 "parse.c"
 var $cmp172=($143|0)==3; //@line 710 "parse.c"
 if($cmp172){label=85;break;}else{label=87;break;} //@line 710 "parse.c"
 case 85: 
 var $144=$Condition; //@line 710 "parse.c"
 var $145=$Parser_addr; //@line 710 "parse.c"
 var $SearchLabel175=(($145+16)|0); //@line 710 "parse.c"
 var $146=HEAP32[(($SearchLabel175)>>2)]; //@line 710 "parse.c"
 var $cmp176=($144|0)==($146|0); //@line 710 "parse.c"
 if($cmp176){label=86;break;}else{label=87;break;} //@line 710 "parse.c"
 case 86: 
 var $147=$Parser_addr; //@line 711 "parse.c"
 var $Mode179=(($147+12)|0); //@line 711 "parse.c"
 HEAP32[(($Mode179)>>2)]=0; //@line 711 "parse.c"
 label=87;break; //@line 711 "parse.c"
 case 87: 
 $CheckTrailingSemicolon_addr=0; //@line 713 "parse.c"
 label=124;break; //@line 714 "parse.c"
 case 88: 
 var $148=$Parser_addr; //@line 717 "parse.c"
 var $call182=_LexGetToken($148,0,1); //@line 717 "parse.c"
 var $cmp183=($call182|0)!=14; //@line 717 "parse.c"
 if($cmp183){label=89;break;}else{label=90;break;} //@line 717 "parse.c"
 case 89: 
 var $149=$Parser_addr; //@line 718 "parse.c"
 _ProgramFail($149,8320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 718 "parse.c"
 label=90;break; //@line 718 "parse.c"
 case 90: 
 var $150=$Parser_addr; //@line 720 "parse.c"
 var $Mode187=(($150+12)|0); //@line 720 "parse.c"
 var $151=HEAP32[(($Mode187)>>2)]; //@line 720 "parse.c"
 var $cmp188=($151|0)==3; //@line 720 "parse.c"
 if($cmp188){label=91;break;}else{label=92;break;} //@line 720 "parse.c"
 case 91: 
 var $152=$Parser_addr; //@line 721 "parse.c"
 var $Mode191=(($152+12)|0); //@line 721 "parse.c"
 HEAP32[(($Mode191)>>2)]=0; //@line 721 "parse.c"
 label=92;break; //@line 721 "parse.c"
 case 92: 
 $CheckTrailingSemicolon_addr=0; //@line 723 "parse.c"
 label=124;break; //@line 724 "parse.c"
 case 93: 
 var $153=$Parser_addr; //@line 727 "parse.c"
 var $Mode194=(($153+12)|0); //@line 727 "parse.c"
 var $154=HEAP32[(($Mode194)>>2)]; //@line 727 "parse.c"
 var $cmp195=($154|0)==0; //@line 727 "parse.c"
 if($cmp195){label=94;break;}else{label=95;break;} //@line 727 "parse.c"
 case 94: 
 var $155=$Parser_addr; //@line 728 "parse.c"
 var $Mode198=(($155+12)|0); //@line 728 "parse.c"
 HEAP32[(($Mode198)>>2)]=4; //@line 728 "parse.c"
 label=95;break; //@line 728 "parse.c"
 case 95: 
 label=124;break; //@line 729 "parse.c"
 case 96: 
 var $156=$Parser_addr; //@line 732 "parse.c"
 var $Mode201=(($156+12)|0); //@line 732 "parse.c"
 var $157=HEAP32[(($Mode201)>>2)]; //@line 732 "parse.c"
 var $cmp202=($157|0)==0; //@line 732 "parse.c"
 if($cmp202){label=97;break;}else{label=98;break;} //@line 732 "parse.c"
 case 97: 
 var $158=$Parser_addr; //@line 733 "parse.c"
 var $Mode205=(($158+12)|0); //@line 733 "parse.c"
 HEAP32[(($Mode205)>>2)]=5; //@line 733 "parse.c"
 label=98;break; //@line 733 "parse.c"
 case 98: 
 label=124;break; //@line 734 "parse.c"
 case 99: 
 var $159=$Parser_addr; //@line 737 "parse.c"
 var $Mode208=(($159+12)|0); //@line 737 "parse.c"
 var $160=HEAP32[(($Mode208)>>2)]; //@line 737 "parse.c"
 var $cmp209=($160|0)==0; //@line 737 "parse.c"
 if($cmp209){label=100;break;}else{label=108;break;} //@line 737 "parse.c"
 case 100: 
 var $161=HEAP32[((17160)>>2)]; //@line 739 "parse.c"
 var $ReturnValue=(($161+36)|0); //@line 739 "parse.c"
 var $162=HEAP32[(($ReturnValue)>>2)]; //@line 739 "parse.c"
 var $Typ212=(($162)|0); //@line 739 "parse.c"
 var $163=HEAP32[(($Typ212)>>2)]; //@line 739 "parse.c"
 var $Base213=(($163)|0); //@line 739 "parse.c"
 var $164=HEAP32[(($Base213)>>2)]; //@line 739 "parse.c"
 var $cmp214=($164|0)!=0; //@line 739 "parse.c"
 if($cmp214){label=101;break;}else{label=104;break;} //@line 739 "parse.c"
 case 101: 
 var $165=$Parser_addr; //@line 741 "parse.c"
 var $call217=_ExpressionParse($165,$CValue); //@line 741 "parse.c"
 var $tobool218=($call217|0)!=0; //@line 741 "parse.c"
 if($tobool218){label=103;break;}else{label=102;break;} //@line 741 "parse.c"
 case 102: 
 var $166=$Parser_addr; //@line 742 "parse.c"
 _ProgramFail($166,8024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 742 "parse.c"
 label=103;break; //@line 742 "parse.c"
 case 103: 
 var $167=$Parser_addr; //@line 744 "parse.c"
 var $168=HEAP32[((17160)>>2)]; //@line 744 "parse.c"
 var $ReturnValue221=(($168+36)|0); //@line 744 "parse.c"
 var $169=HEAP32[(($ReturnValue221)>>2)]; //@line 744 "parse.c"
 var $170=HEAP32[(($CValue)>>2)]; //@line 744 "parse.c"
 _ExpressionAssign($167,$169,$170,1,0,0,0); //@line 744 "parse.c"
 var $171=$Parser_addr; //@line 745 "parse.c"
 var $172=HEAP32[(($CValue)>>2)]; //@line 745 "parse.c"
 _VariableStackPop($171,$172); //@line 745 "parse.c"
 label=107;break; //@line 746 "parse.c"
 case 104: 
 var $173=$Parser_addr; //@line 749 "parse.c"
 var $call223=_ExpressionParse($173,$CValue); //@line 749 "parse.c"
 var $tobool224=($call223|0)!=0; //@line 749 "parse.c"
 if($tobool224){label=105;break;}else{label=106;break;} //@line 749 "parse.c"
 case 105: 
 var $174=$Parser_addr; //@line 750 "parse.c"
 _ProgramFail($174,7824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 750 "parse.c"
 label=106;break; //@line 750 "parse.c"
 case 106: 
 label=107;break;
 case 107: 
 var $175=$Parser_addr; //@line 753 "parse.c"
 var $Mode228=(($175+12)|0); //@line 753 "parse.c"
 HEAP32[(($Mode228)>>2)]=2; //@line 753 "parse.c"
 label=109;break; //@line 754 "parse.c"
 case 108: 
 var $176=$Parser_addr; //@line 756 "parse.c"
 var $call230=_ExpressionParse($176,$CValue); //@line 756 "parse.c"
 label=109;break;
 case 109: 
 label=124;break; //@line 757 "parse.c"
 case 110: 
 var $177=$Parser_addr; //@line 760 "parse.c"
 _ParseTypedef($177); //@line 760 "parse.c"
 label=124;break; //@line 761 "parse.c"
 case 111: 
 var $178=$Parser_addr; //@line 764 "parse.c"
 var $call234=_LexGetToken($178,$LexerValue,1); //@line 764 "parse.c"
 var $cmp235=($call234|0)!=45; //@line 764 "parse.c"
 if($cmp235){label=112;break;}else{label=113;break;} //@line 764 "parse.c"
 case 112: 
 var $179=$Parser_addr; //@line 765 "parse.c"
 _ProgramFail($179,11056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 765 "parse.c"
 label=113;break; //@line 765 "parse.c"
 case 113: 
 var $180=$Parser_addr; //@line 767 "parse.c"
 var $Mode239=(($180+12)|0); //@line 767 "parse.c"
 var $181=HEAP32[(($Mode239)>>2)]; //@line 767 "parse.c"
 var $cmp240=($181|0)==0; //@line 767 "parse.c"
 if($cmp240){label=114;break;}else{label=115;break;} //@line 767 "parse.c"
 case 114: 
 var $182=HEAP32[(($LexerValue)>>2)]; //@line 770 "parse.c"
 var $Val243=(($182+4)|0); //@line 770 "parse.c"
 var $183=HEAP32[(($Val243)>>2)]; //@line 770 "parse.c"
 var $Identifier244=$183; //@line 770 "parse.c"
 var $184=HEAP32[(($Identifier244)>>2)]; //@line 770 "parse.c"
 var $185=$Parser_addr; //@line 770 "parse.c"
 var $SearchGotoLabel245=(($185+20)|0); //@line 770 "parse.c"
 HEAP32[(($SearchGotoLabel245)>>2)]=$184; //@line 770 "parse.c"
 var $186=$Parser_addr; //@line 771 "parse.c"
 var $Mode246=(($186+12)|0); //@line 771 "parse.c"
 HEAP32[(($Mode246)>>2)]=6; //@line 771 "parse.c"
 label=115;break; //@line 772 "parse.c"
 case 115: 
 label=124;break; //@line 773 "parse.c"
 case 116: 
 var $187=$Parser_addr; //@line 778 "parse.c"
 var $call249=_LexGetToken($187,$LexerValue,1); //@line 778 "parse.c"
 var $cmp250=($call249|0)!=45; //@line 778 "parse.c"
 if($cmp250){label=117;break;}else{label=118;break;} //@line 778 "parse.c"
 case 117: 
 var $188=$Parser_addr; //@line 779 "parse.c"
 _ProgramFail($188,11056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 779 "parse.c"
 label=118;break; //@line 779 "parse.c"
 case 118: 
 var $189=$Parser_addr; //@line 781 "parse.c"
 var $Mode254=(($189+12)|0); //@line 781 "parse.c"
 var $190=HEAP32[(($Mode254)>>2)]; //@line 781 "parse.c"
 var $cmp255=($190|0)==0; //@line 781 "parse.c"
 if($cmp255){label=119;break;}else{label=122;break;} //@line 781 "parse.c"
 case 119: 
 var $191=HEAP32[(($LexerValue)>>2)]; //@line 784 "parse.c"
 var $Val258=(($191+4)|0); //@line 784 "parse.c"
 var $192=HEAP32[(($Val258)>>2)]; //@line 784 "parse.c"
 var $Identifier259=$192; //@line 784 "parse.c"
 var $193=HEAP32[(($Identifier259)>>2)]; //@line 784 "parse.c"
 var $call260=_TableDelete(18544,$193); //@line 784 "parse.c"
 HEAP32[(($CValue)>>2)]=$call260; //@line 784 "parse.c"
 var $194=HEAP32[(($CValue)>>2)]; //@line 786 "parse.c"
 var $cmp261=($194|0)==0; //@line 786 "parse.c"
 if($cmp261){label=120;break;}else{label=121;break;} //@line 786 "parse.c"
 case 120: 
 var $195=$Parser_addr; //@line 787 "parse.c"
 var $196=HEAP32[(($LexerValue)>>2)]; //@line 787 "parse.c"
 var $Val264=(($196+4)|0); //@line 787 "parse.c"
 var $197=HEAP32[(($Val264)>>2)]; //@line 787 "parse.c"
 var $Identifier265=$197; //@line 787 "parse.c"
 var $198=HEAP32[(($Identifier265)>>2)]; //@line 787 "parse.c"
 _ProgramFail($195,7488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$198,tempVarArgs)); STACKTOP=tempVarArgs; //@line 787 "parse.c"
 label=121;break; //@line 787 "parse.c"
 case 121: 
 var $199=HEAP32[(($CValue)>>2)]; //@line 789 "parse.c"
 _VariableFree($199); //@line 789 "parse.c"
 label=122;break; //@line 790 "parse.c"
 case 122: 
 label=124;break; //@line 791 "parse.c"
 case 123: 
 var $200=$Parser_addr; //@line 795 "parse.c"
 var $201=$200; //@line 795 "parse.c"
 var $202=$PreState; //@line 795 "parse.c"
 assert(32 % 1 === 0);(_memcpy($201, $202, 32)|0); //@line 795 "parse.c"
 $retval=1; //@line 796 "parse.c"
 label=129;break; //@line 796 "parse.c"
 case 124: 
 var $203=$CheckTrailingSemicolon_addr; //@line 799 "parse.c"
 var $tobool268=($203|0)!=0; //@line 799 "parse.c"
 if($tobool268){label=125;break;}else{label=128;break;} //@line 799 "parse.c"
 case 125: 
 var $204=$Parser_addr; //@line 801 "parse.c"
 var $call270=_LexGetToken($204,0,1); //@line 801 "parse.c"
 var $cmp271=($call270|0)!=50; //@line 801 "parse.c"
 if($cmp271){label=126;break;}else{label=127;break;} //@line 801 "parse.c"
 case 126: 
 var $205=$Parser_addr; //@line 802 "parse.c"
 _ProgramFail($205,9384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 802 "parse.c"
 label=127;break; //@line 802 "parse.c"
 case 127: 
 label=128;break; //@line 803 "parse.c"
 case 128: 
 $retval=2; //@line 805 "parse.c"
 label=129;break; //@line 805 "parse.c"
 case 129: 
 var $206=$retval; //@line 806 "parse.c"
 STACKTOP=sp;return $206; //@line 806 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseCountParams($Parser){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $ParamCount;
 var $Token;
 $Parser_addr=$Parser;
 $ParamCount=0; //@line 50 "parse.c"
 var $0=$Parser_addr; //@line 52 "parse.c"
 var $call=_LexGetToken($0,0,1); //@line 52 "parse.c"
 $Token=$call; //@line 52 "parse.c"
 var $1=$Token; //@line 53 "parse.c"
 var $cmp=($1|0)!=44; //@line 53 "parse.c"
 if($cmp){label=2;break;}else{label=11;break;} //@line 53 "parse.c"
 case 2: 
 var $2=$Token; //@line 53 "parse.c"
 var $cmp1=($2|0)!=93; //@line 53 "parse.c"
 if($cmp1){label=3;break;}else{label=11;break;} //@line 53 "parse.c"
 case 3: 
 var $3=$ParamCount; //@line 56 "parse.c"
 var $inc=((($3)+(1))|0); //@line 56 "parse.c"
 $ParamCount=$inc; //@line 56 "parse.c"
 label=4;break; //@line 57 "parse.c"
 case 4: 
 var $4=$Parser_addr; //@line 57 "parse.c"
 var $call2=_LexGetToken($4,0,1); //@line 57 "parse.c"
 $Token=$call2; //@line 57 "parse.c"
 var $cmp3=($call2|0)!=44; //@line 57 "parse.c"
 if($cmp3){label=5;break;}else{var $6=0;label=6;break;} //@line 57 "parse.c"
 case 5: 
 var $5=$Token; //@line 57 "parse.c"
 var $cmp4=($5|0)!=93; //@line 57 "parse.c"
 var $6=$cmp4;label=6;break;
 case 6: 
 var $6;
 if($6){label=7;break;}else{label=10;break;}
 case 7: 
 var $7=$Token; //@line 59 "parse.c"
 var $cmp5=($7|0)==1; //@line 59 "parse.c"
 if($cmp5){label=8;break;}else{label=9;break;} //@line 59 "parse.c"
 case 8: 
 var $8=$ParamCount; //@line 60 "parse.c"
 var $inc7=((($8)+(1))|0); //@line 60 "parse.c"
 $ParamCount=$inc7; //@line 60 "parse.c"
 label=9;break; //@line 60 "parse.c"
 case 9: 
 label=4;break; //@line 61 "parse.c"
 case 10: 
 label=11;break; //@line 62 "parse.c"
 case 11: 
 var $9=$ParamCount; //@line 64 "parse.c"
 return $9; //@line 64 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseFunctionDefinition($Parser,$ReturnType,$Identifier){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $ReturnType_addr;
 var $Identifier_addr;
 var $ParamType=sp;
 var $ParamIdentifier=(sp)+(8);
 var $Token;
 var $ParamParser=(sp)+(16);
 var $FuncValue;
 var $OldFuncValue=(sp)+(48);
 var $FuncBody=(sp)+(56);
 var $ParamCount;
 $Parser_addr=$Parser;
 $ReturnType_addr=$ReturnType;
 $Identifier_addr=$Identifier;
 $Token=0; //@line 72 "parse.c"
 $ParamCount=0; //@line 77 "parse.c"
 var $0=HEAP32[((17160)>>2)]; //@line 79 "parse.c"
 var $cmp=($0|0)!=0; //@line 79 "parse.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 79 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 80 "parse.c"
 _ProgramFail($1,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 80 "parse.c"
 label=3;break; //@line 80 "parse.c"
 case 3: 
 var $2=$Parser_addr; //@line 82 "parse.c"
 var $call=_LexGetToken($2,0,1); //@line 82 "parse.c"
 var $3=$Parser_addr; //@line 83 "parse.c"
 _ParserCopy($ParamParser,$3); //@line 83 "parse.c"
 var $4=$Parser_addr; //@line 84 "parse.c"
 var $call1=_ParseCountParams($4); //@line 84 "parse.c"
 $ParamCount=$call1; //@line 84 "parse.c"
 var $5=$ParamCount; //@line 85 "parse.c"
 var $cmp2=($5|0)>16; //@line 85 "parse.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 85 "parse.c"
 case 4: 
 var $6=$Parser_addr; //@line 86 "parse.c"
 _ProgramFail($6,9992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 86 "parse.c"
 label=5;break; //@line 86 "parse.c"
 case 5: 
 var $7=$Parser_addr; //@line 88 "parse.c"
 var $8=$ParamCount; //@line 88 "parse.c"
 var $mul=($8<<2); //@line 88 "parse.c"
 var $add=((($mul)+(56))|0); //@line 88 "parse.c"
 var $9=$ParamCount; //@line 88 "parse.c"
 var $mul5=($9<<2); //@line 88 "parse.c"
 var $add6=((($add)+($mul5))|0); //@line 88 "parse.c"
 var $call7=_VariableAllocValueAndData($7,$add6,0,0,1); //@line 88 "parse.c"
 $FuncValue=$call7; //@line 88 "parse.c"
 var $10=$FuncValue; //@line 89 "parse.c"
 var $Typ=(($10)|0); //@line 89 "parse.c"
 HEAP32[(($Typ)>>2)]=18944; //@line 89 "parse.c"
 var $11=$ReturnType_addr; //@line 90 "parse.c"
 var $12=$FuncValue; //@line 90 "parse.c"
 var $Val=(($12+4)|0); //@line 90 "parse.c"
 var $13=HEAP32[(($Val)>>2)]; //@line 90 "parse.c"
 var $FuncDef=$13; //@line 90 "parse.c"
 var $ReturnType8=(($FuncDef)|0); //@line 90 "parse.c"
 HEAP32[(($ReturnType8)>>2)]=$11; //@line 90 "parse.c"
 var $14=$ParamCount; //@line 91 "parse.c"
 var $15=$FuncValue; //@line 91 "parse.c"
 var $Val9=(($15+4)|0); //@line 91 "parse.c"
 var $16=HEAP32[(($Val9)>>2)]; //@line 91 "parse.c"
 var $FuncDef10=$16; //@line 91 "parse.c"
 var $NumParams=(($FuncDef10+4)|0); //@line 91 "parse.c"
 HEAP32[(($NumParams)>>2)]=$14; //@line 91 "parse.c"
 var $17=$FuncValue; //@line 92 "parse.c"
 var $Val11=(($17+4)|0); //@line 92 "parse.c"
 var $18=HEAP32[(($Val11)>>2)]; //@line 92 "parse.c"
 var $FuncDef12=$18; //@line 92 "parse.c"
 var $VarArgs=(($FuncDef12+8)|0); //@line 92 "parse.c"
 HEAP32[(($VarArgs)>>2)]=0; //@line 92 "parse.c"
 var $19=$FuncValue; //@line 93 "parse.c"
 var $Val13=(($19+4)|0); //@line 93 "parse.c"
 var $20=HEAP32[(($Val13)>>2)]; //@line 93 "parse.c"
 var $21=$20; //@line 93 "parse.c"
 var $add_ptr=(($21+56)|0); //@line 93 "parse.c"
 var $22=$add_ptr; //@line 93 "parse.c"
 var $23=$FuncValue; //@line 93 "parse.c"
 var $Val14=(($23+4)|0); //@line 93 "parse.c"
 var $24=HEAP32[(($Val14)>>2)]; //@line 93 "parse.c"
 var $FuncDef15=$24; //@line 93 "parse.c"
 var $ParamType16=(($FuncDef15+12)|0); //@line 93 "parse.c"
 HEAP32[(($ParamType16)>>2)]=$22; //@line 93 "parse.c"
 var $25=$FuncValue; //@line 94 "parse.c"
 var $Val17=(($25+4)|0); //@line 94 "parse.c"
 var $26=HEAP32[(($Val17)>>2)]; //@line 94 "parse.c"
 var $FuncDef18=$26; //@line 94 "parse.c"
 var $ParamType19=(($FuncDef18+12)|0); //@line 94 "parse.c"
 var $27=HEAP32[(($ParamType19)>>2)]; //@line 94 "parse.c"
 var $28=$27; //@line 94 "parse.c"
 var $29=$ParamCount; //@line 94 "parse.c"
 var $mul20=($29<<2); //@line 94 "parse.c"
 var $add_ptr21=(($28+$mul20)|0); //@line 94 "parse.c"
 var $30=$add_ptr21; //@line 94 "parse.c"
 var $31=$FuncValue; //@line 94 "parse.c"
 var $Val22=(($31+4)|0); //@line 94 "parse.c"
 var $32=HEAP32[(($Val22)>>2)]; //@line 94 "parse.c"
 var $FuncDef23=$32; //@line 94 "parse.c"
 var $ParamName=(($FuncDef23+16)|0); //@line 94 "parse.c"
 HEAP32[(($ParamName)>>2)]=$30; //@line 94 "parse.c"
 $ParamCount=0; //@line 96 "parse.c"
 label=6;break; //@line 96 "parse.c"
 case 6: 
 var $33=$ParamCount; //@line 96 "parse.c"
 var $34=$FuncValue; //@line 96 "parse.c"
 var $Val24=(($34+4)|0); //@line 96 "parse.c"
 var $35=HEAP32[(($Val24)>>2)]; //@line 96 "parse.c"
 var $FuncDef25=$35; //@line 96 "parse.c"
 var $NumParams26=(($FuncDef25+4)|0); //@line 96 "parse.c"
 var $36=HEAP32[(($NumParams26)>>2)]; //@line 96 "parse.c"
 var $cmp27=($33|0)<($36|0); //@line 96 "parse.c"
 if($cmp27){label=7;break;}else{label=19;break;} //@line 96 "parse.c"
 case 7: 
 var $37=$ParamCount; //@line 99 "parse.c"
 var $38=$FuncValue; //@line 99 "parse.c"
 var $Val28=(($38+4)|0); //@line 99 "parse.c"
 var $39=HEAP32[(($Val28)>>2)]; //@line 99 "parse.c"
 var $FuncDef29=$39; //@line 99 "parse.c"
 var $NumParams30=(($FuncDef29+4)|0); //@line 99 "parse.c"
 var $40=HEAP32[(($NumParams30)>>2)]; //@line 99 "parse.c"
 var $sub=((($40)-(1))|0); //@line 99 "parse.c"
 var $cmp31=($37|0)==($sub|0); //@line 99 "parse.c"
 if($cmp31){label=8;break;}else{label=10;break;} //@line 99 "parse.c"
 case 8: 
 var $call32=_LexGetToken($ParamParser,0,0); //@line 99 "parse.c"
 var $cmp33=($call32|0)==51; //@line 99 "parse.c"
 if($cmp33){label=9;break;}else{label=10;break;} //@line 99 "parse.c"
 case 9: 
 var $41=$FuncValue; //@line 102 "parse.c"
 var $Val35=(($41+4)|0); //@line 102 "parse.c"
 var $42=HEAP32[(($Val35)>>2)]; //@line 102 "parse.c"
 var $FuncDef36=$42; //@line 102 "parse.c"
 var $NumParams37=(($FuncDef36+4)|0); //@line 102 "parse.c"
 var $43=HEAP32[(($NumParams37)>>2)]; //@line 102 "parse.c"
 var $dec=((($43)-(1))|0); //@line 102 "parse.c"
 HEAP32[(($NumParams37)>>2)]=$dec; //@line 102 "parse.c"
 var $44=$FuncValue; //@line 103 "parse.c"
 var $Val38=(($44+4)|0); //@line 103 "parse.c"
 var $45=HEAP32[(($Val38)>>2)]; //@line 103 "parse.c"
 var $FuncDef39=$45; //@line 103 "parse.c"
 var $VarArgs40=(($FuncDef39+8)|0); //@line 103 "parse.c"
 HEAP32[(($VarArgs40)>>2)]=1; //@line 103 "parse.c"
 label=19;break; //@line 104 "parse.c"
 case 10: 
 _TypeParse($ParamParser,$ParamType,$ParamIdentifier,0); //@line 109 "parse.c"
 var $46=HEAP32[(($ParamType)>>2)]; //@line 110 "parse.c"
 var $Base=(($46)|0); //@line 110 "parse.c"
 var $47=HEAP32[(($Base)>>2)]; //@line 110 "parse.c"
 var $cmp41=($47|0)==0; //@line 110 "parse.c"
 if($cmp41){label=11;break;}else{label=12;break;} //@line 110 "parse.c"
 case 11: 
 var $48=$ParamCount; //@line 113 "parse.c"
 var $dec43=((($48)-(1))|0); //@line 113 "parse.c"
 $ParamCount=$dec43; //@line 113 "parse.c"
 var $49=$FuncValue; //@line 114 "parse.c"
 var $Val44=(($49+4)|0); //@line 114 "parse.c"
 var $50=HEAP32[(($Val44)>>2)]; //@line 114 "parse.c"
 var $FuncDef45=$50; //@line 114 "parse.c"
 var $NumParams46=(($FuncDef45+4)|0); //@line 114 "parse.c"
 var $51=HEAP32[(($NumParams46)>>2)]; //@line 114 "parse.c"
 var $dec47=((($51)-(1))|0); //@line 114 "parse.c"
 HEAP32[(($NumParams46)>>2)]=$dec47; //@line 114 "parse.c"
 label=13;break; //@line 115 "parse.c"
 case 12: 
 var $52=HEAP32[(($ParamType)>>2)]; //@line 118 "parse.c"
 var $53=$ParamCount; //@line 118 "parse.c"
 var $54=$FuncValue; //@line 118 "parse.c"
 var $Val49=(($54+4)|0); //@line 118 "parse.c"
 var $55=HEAP32[(($Val49)>>2)]; //@line 118 "parse.c"
 var $FuncDef50=$55; //@line 118 "parse.c"
 var $ParamType51=(($FuncDef50+12)|0); //@line 118 "parse.c"
 var $56=HEAP32[(($ParamType51)>>2)]; //@line 118 "parse.c"
 var $arrayidx=(($56+($53<<2))|0); //@line 118 "parse.c"
 HEAP32[(($arrayidx)>>2)]=$52; //@line 118 "parse.c"
 var $57=HEAP32[(($ParamIdentifier)>>2)]; //@line 119 "parse.c"
 var $58=$ParamCount; //@line 119 "parse.c"
 var $59=$FuncValue; //@line 119 "parse.c"
 var $Val52=(($59+4)|0); //@line 119 "parse.c"
 var $60=HEAP32[(($Val52)>>2)]; //@line 119 "parse.c"
 var $FuncDef53=$60; //@line 119 "parse.c"
 var $ParamName54=(($FuncDef53+16)|0); //@line 119 "parse.c"
 var $61=HEAP32[(($ParamName54)>>2)]; //@line 119 "parse.c"
 var $arrayidx55=(($61+($58<<2))|0); //@line 119 "parse.c"
 HEAP32[(($arrayidx55)>>2)]=$57; //@line 119 "parse.c"
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $call58=_LexGetToken($ParamParser,0,1); //@line 123 "parse.c"
 $Token=$call58; //@line 123 "parse.c"
 var $62=$Token; //@line 124 "parse.c"
 var $cmp59=($62|0)!=1; //@line 124 "parse.c"
 if($cmp59){label=15;break;}else{label=17;break;} //@line 124 "parse.c"
 case 15: 
 var $63=$ParamCount; //@line 124 "parse.c"
 var $64=$FuncValue; //@line 124 "parse.c"
 var $Val61=(($64+4)|0); //@line 124 "parse.c"
 var $65=HEAP32[(($Val61)>>2)]; //@line 124 "parse.c"
 var $FuncDef62=$65; //@line 124 "parse.c"
 var $NumParams63=(($FuncDef62+4)|0); //@line 124 "parse.c"
 var $66=HEAP32[(($NumParams63)>>2)]; //@line 124 "parse.c"
 var $sub64=((($66)-(1))|0); //@line 124 "parse.c"
 var $cmp65=($63|0)<($sub64|0); //@line 124 "parse.c"
 if($cmp65){label=16;break;}else{label=17;break;} //@line 124 "parse.c"
 case 16: 
 _ProgramFail($ParamParser,7512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 125 "parse.c"
 label=17;break; //@line 125 "parse.c"
 case 17: 
 label=18;break; //@line 126 "parse.c"
 case 18: 
 var $67=$ParamCount; //@line 96 "parse.c"
 var $inc=((($67)+(1))|0); //@line 96 "parse.c"
 $ParamCount=$inc; //@line 96 "parse.c"
 label=6;break; //@line 96 "parse.c"
 case 19: 
 var $68=$FuncValue; //@line 128 "parse.c"
 var $Val68=(($68+4)|0); //@line 128 "parse.c"
 var $69=HEAP32[(($Val68)>>2)]; //@line 128 "parse.c"
 var $FuncDef69=$69; //@line 128 "parse.c"
 var $NumParams70=(($FuncDef69+4)|0); //@line 128 "parse.c"
 var $70=HEAP32[(($NumParams70)>>2)]; //@line 128 "parse.c"
 var $cmp71=($70|0)!=0; //@line 128 "parse.c"
 if($cmp71){label=20;break;}else{label=24;break;} //@line 128 "parse.c"
 case 20: 
 var $71=$Token; //@line 128 "parse.c"
 var $cmp73=($71|0)!=44; //@line 128 "parse.c"
 if($cmp73){label=21;break;}else{label=24;break;} //@line 128 "parse.c"
 case 21: 
 var $72=$Token; //@line 128 "parse.c"
 var $cmp75=($72|0)!=1; //@line 128 "parse.c"
 if($cmp75){label=22;break;}else{label=24;break;} //@line 128 "parse.c"
 case 22: 
 var $73=$Token; //@line 128 "parse.c"
 var $cmp77=($73|0)!=51; //@line 128 "parse.c"
 if($cmp77){label=23;break;}else{label=24;break;} //@line 128 "parse.c"
 case 23: 
 _ProgramFail($ParamParser,5864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 129 "parse.c"
 label=24;break; //@line 129 "parse.c"
 case 24: 
 var $74=$Identifier_addr; //@line 131 "parse.c"
 var $call80=_strcmp($74,4312); //@line 131 "parse.c"
 var $cmp81=($call80|0)==0; //@line 131 "parse.c"
 if($cmp81){label=25;break;}else{label=33;break;} //@line 131 "parse.c"
 case 25: 
 var $75=$FuncValue; //@line 134 "parse.c"
 var $Val83=(($75+4)|0); //@line 134 "parse.c"
 var $76=HEAP32[(($Val83)>>2)]; //@line 134 "parse.c"
 var $FuncDef84=$76; //@line 134 "parse.c"
 var $ReturnType85=(($FuncDef84)|0); //@line 134 "parse.c"
 var $77=HEAP32[(($ReturnType85)>>2)]; //@line 134 "parse.c"
 var $cmp86=($77|0)!=18408; //@line 134 "parse.c"
 if($cmp86){label=26;break;}else{label=28;break;} //@line 134 "parse.c"
 case 26: 
 var $78=$FuncValue; //@line 134 "parse.c"
 var $Val88=(($78+4)|0); //@line 134 "parse.c"
 var $79=HEAP32[(($Val88)>>2)]; //@line 134 "parse.c"
 var $FuncDef89=$79; //@line 134 "parse.c"
 var $ReturnType90=(($FuncDef89)|0); //@line 134 "parse.c"
 var $80=HEAP32[(($ReturnType90)>>2)]; //@line 134 "parse.c"
 var $cmp91=($80|0)!=16856; //@line 134 "parse.c"
 if($cmp91){label=27;break;}else{label=28;break;} //@line 134 "parse.c"
 case 27: 
 var $81=$Parser_addr; //@line 136 "parse.c"
 _ProgramFail($81,2800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 136 "parse.c"
 label=28;break; //@line 136 "parse.c"
 case 28: 
 var $82=$FuncValue; //@line 138 "parse.c"
 var $Val94=(($82+4)|0); //@line 138 "parse.c"
 var $83=HEAP32[(($Val94)>>2)]; //@line 138 "parse.c"
 var $FuncDef95=$83; //@line 138 "parse.c"
 var $NumParams96=(($FuncDef95+4)|0); //@line 138 "parse.c"
 var $84=HEAP32[(($NumParams96)>>2)]; //@line 138 "parse.c"
 var $cmp97=($84|0)!=0; //@line 138 "parse.c"
 if($cmp97){label=29;break;}else{label=32;break;} //@line 138 "parse.c"
 case 29: 
 var $85=$FuncValue; //@line 138 "parse.c"
 var $Val99=(($85+4)|0); //@line 138 "parse.c"
 var $86=HEAP32[(($Val99)>>2)]; //@line 138 "parse.c"
 var $FuncDef100=$86; //@line 138 "parse.c"
 var $NumParams101=(($FuncDef100+4)|0); //@line 138 "parse.c"
 var $87=HEAP32[(($NumParams101)>>2)]; //@line 138 "parse.c"
 var $cmp102=($87|0)!=2; //@line 138 "parse.c"
 if($cmp102){label=31;break;}else{label=30;break;} //@line 138 "parse.c"
 case 30: 
 var $88=$FuncValue; //@line 138 "parse.c"
 var $Val103=(($88+4)|0); //@line 138 "parse.c"
 var $89=HEAP32[(($Val103)>>2)]; //@line 138 "parse.c"
 var $FuncDef104=$89; //@line 138 "parse.c"
 var $ParamType105=(($FuncDef104+12)|0); //@line 138 "parse.c"
 var $90=HEAP32[(($ParamType105)>>2)]; //@line 138 "parse.c"
 var $arrayidx106=(($90)|0); //@line 138 "parse.c"
 var $91=HEAP32[(($arrayidx106)>>2)]; //@line 138 "parse.c"
 var $cmp107=($91|0)!=18408; //@line 138 "parse.c"
 if($cmp107){label=31;break;}else{label=32;break;} //@line 138 "parse.c"
 case 31: 
 var $92=$Parser_addr; //@line 140 "parse.c"
 _ProgramFail($92,1800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 140 "parse.c"
 label=32;break; //@line 140 "parse.c"
 case 32: 
 label=33;break; //@line 141 "parse.c"
 case 33: 
 var $93=$Parser_addr; //@line 144 "parse.c"
 var $call111=_LexGetToken($93,0,0); //@line 144 "parse.c"
 $Token=$call111; //@line 144 "parse.c"
 var $94=$Token; //@line 145 "parse.c"
 var $cmp112=($94|0)==50; //@line 145 "parse.c"
 if($cmp112){label=34;break;}else{label=35;break;} //@line 145 "parse.c"
 case 34: 
 var $95=$Parser_addr; //@line 146 "parse.c"
 var $call114=_LexGetToken($95,0,1); //@line 146 "parse.c"
 label=45;break; //@line 146 "parse.c"
 case 35: 
 var $96=$Token; //@line 150 "parse.c"
 var $cmp116=($96|0)!=52; //@line 150 "parse.c"
 if($cmp116){label=36;break;}else{label=37;break;} //@line 150 "parse.c"
 case 36: 
 var $97=$Parser_addr; //@line 151 "parse.c"
 _ProgramFail($97,1104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 151 "parse.c"
 label=37;break; //@line 151 "parse.c"
 case 37: 
 var $98=$Parser_addr; //@line 153 "parse.c"
 _ParserCopy($FuncBody,$98); //@line 153 "parse.c"
 var $99=$Parser_addr; //@line 154 "parse.c"
 var $call119=_ParseStatementMaybeRun($99,0,1); //@line 154 "parse.c"
 var $cmp120=($call119|0)!=2; //@line 154 "parse.c"
 if($cmp120){label=38;break;}else{label=39;break;} //@line 154 "parse.c"
 case 38: 
 var $100=$Parser_addr; //@line 155 "parse.c"
 _ProgramFail($100,632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 155 "parse.c"
 label=39;break; //@line 155 "parse.c"
 case 39: 
 var $101=$FuncValue; //@line 157 "parse.c"
 var $Val123=(($101+4)|0); //@line 157 "parse.c"
 var $102=HEAP32[(($Val123)>>2)]; //@line 157 "parse.c"
 var $FuncDef124=$102; //@line 157 "parse.c"
 var $Body=(($FuncDef124+24)|0); //@line 157 "parse.c"
 var $103=$Body; //@line 157 "parse.c"
 var $104=$FuncBody; //@line 157 "parse.c"
 assert(32 % 1 === 0);(_memcpy($103, $104, 32)|0); //@line 157 "parse.c"
 var $105=$Parser_addr; //@line 158 "parse.c"
 var $call125=_LexCopyTokens($FuncBody,$105); //@line 158 "parse.c"
 var $106=$FuncValue; //@line 158 "parse.c"
 var $Val126=(($106+4)|0); //@line 158 "parse.c"
 var $107=HEAP32[(($Val126)>>2)]; //@line 158 "parse.c"
 var $FuncDef127=$107; //@line 158 "parse.c"
 var $Body128=(($FuncDef127+24)|0); //@line 158 "parse.c"
 var $Pos=(($Body128)|0); //@line 158 "parse.c"
 HEAP32[(($Pos)>>2)]=$call125; //@line 158 "parse.c"
 var $108=$Identifier_addr; //@line 161 "parse.c"
 var $call129=_TableGet(18544,$108,$OldFuncValue,0,0,0); //@line 161 "parse.c"
 var $tobool=($call129|0)!=0; //@line 161 "parse.c"
 if($tobool){label=40;break;}else{label=44;break;} //@line 161 "parse.c"
 case 40: 
 var $109=HEAP32[(($OldFuncValue)>>2)]; //@line 163 "parse.c"
 var $Val131=(($109+4)|0); //@line 163 "parse.c"
 var $110=HEAP32[(($Val131)>>2)]; //@line 163 "parse.c"
 var $FuncDef132=$110; //@line 163 "parse.c"
 var $Body133=(($FuncDef132+24)|0); //@line 163 "parse.c"
 var $Pos134=(($Body133)|0); //@line 163 "parse.c"
 var $111=HEAP32[(($Pos134)>>2)]; //@line 163 "parse.c"
 var $cmp135=($111|0)==0; //@line 163 "parse.c"
 if($cmp135){label=41;break;}else{label=42;break;} //@line 163 "parse.c"
 case 41: 
 var $112=$Identifier_addr; //@line 166 "parse.c"
 var $call137=_TableDelete(18544,$112); //@line 166 "parse.c"
 _VariableFree($call137); //@line 166 "parse.c"
 label=43;break; //@line 167 "parse.c"
 case 42: 
 var $113=$Parser_addr; //@line 169 "parse.c"
 var $114=$Identifier_addr; //@line 169 "parse.c"
 _ProgramFail($113,192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$114,tempVarArgs)); STACKTOP=tempVarArgs; //@line 169 "parse.c"
 label=43;break;
 case 43: 
 label=44;break; //@line 170 "parse.c"
 case 44: 
 label=45;break;
 case 45: 
 var $115=$Identifier_addr; //@line 173 "parse.c"
 var $116=$FuncValue; //@line 173 "parse.c"
 var $117=$Parser_addr; //@line 173 "parse.c"
 var $FileName=(($117+4)|0); //@line 173 "parse.c"
 var $118=HEAP32[(($FileName)>>2)]; //@line 173 "parse.c"
 var $119=$Parser_addr; //@line 173 "parse.c"
 var $Line=(($119+8)|0); //@line 173 "parse.c"
 var $120=HEAP16[(($Line)>>1)]; //@line 173 "parse.c"
 var $conv=(($120<<16)>>16); //@line 173 "parse.c"
 var $121=$Parser_addr; //@line 173 "parse.c"
 var $CharacterPos=(($121+10)|0); //@line 173 "parse.c"
 var $122=HEAP16[(($CharacterPos)>>1)]; //@line 173 "parse.c"
 var $conv142=(($122<<16)>>16); //@line 173 "parse.c"
 var $call143=_TableSet(18544,$115,$116,$118,$conv,$conv142); //@line 173 "parse.c"
 var $tobool144=($call143|0)!=0; //@line 173 "parse.c"
 if($tobool144){label=47;break;}else{label=46;break;} //@line 173 "parse.c"
 case 46: 
 var $123=$Parser_addr; //@line 174 "parse.c"
 var $124=$Identifier_addr; //@line 174 "parse.c"
 _ProgramFail($123,192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$124,tempVarArgs)); STACKTOP=tempVarArgs; //@line 174 "parse.c"
 label=47;break; //@line 174 "parse.c"
 case 47: 
 var $125=$FuncValue; //@line 176 "parse.c"
 STACKTOP=sp;return $125; //@line 176 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParserCopy($To,$From){
 var label=0;
 var $To_addr;
 var $From_addr;
 $To_addr=$To;
 $From_addr=$From;
 var $0=$To_addr; //@line 351 "parse.c"
 var $1=$0; //@line 351 "parse.c"
 var $2=$From_addr; //@line 351 "parse.c"
 var $3=$2; //@line 351 "parse.c"
 assert(32 % 1 === 0);(_memcpy($1, $3, 32)|0); //@line 351 "parse.c"
 return; //@line 352 "parse.c"
}
function _ParseDeclarationAssignment($Parser,$NewVariable,$DoAssignment){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $NewVariable_addr;
 var $DoAssignment_addr;
 var $CValue=sp;
 var $ArrayIndex;
 var $Token;
 var $ArrayElement;
 $Parser_addr=$Parser;
 $NewVariable_addr=$NewVariable;
 $DoAssignment_addr=$DoAssignment;
 $Token=1; //@line 184 "parse.c"
 var $0=$Parser_addr; //@line 186 "parse.c"
 var $call=_LexGetToken($0,0,0); //@line 186 "parse.c"
 var $cmp=($call|0)==52; //@line 186 "parse.c"
 if($cmp){label=2;break;}else{label=25;break;} //@line 186 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 189 "parse.c"
 var $call1=_LexGetToken($1,0,1); //@line 189 "parse.c"
 $ArrayIndex=0; //@line 191 "parse.c"
 label=3;break; //@line 191 "parse.c"
 case 3: 
 var $2=$Parser_addr; //@line 191 "parse.c"
 var $Mode=(($2+12)|0); //@line 191 "parse.c"
 var $3=HEAP32[(($Mode)>>2)]; //@line 191 "parse.c"
 var $cmp2=($3|0)!=0; //@line 191 "parse.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 191 "parse.c"
 case 4: 
 var $4=$Token; //@line 191 "parse.c"
 var $cmp3=($4|0)==1; //@line 191 "parse.c"
 if($cmp3){var $12=1;label=8;break;}else{label=5;break;} //@line 191 "parse.c"
 case 5: 
 var $5=$Parser_addr; //@line 191 "parse.c"
 var $Mode4=(($5+12)|0); //@line 191 "parse.c"
 var $6=HEAP32[(($Mode4)>>2)]; //@line 191 "parse.c"
 var $cmp5=($6|0)==0; //@line 191 "parse.c"
 if($cmp5){label=6;break;}else{var $11=0;label=7;break;} //@line 191 "parse.c"
 case 6: 
 var $7=$ArrayIndex; //@line 191 "parse.c"
 var $8=$NewVariable_addr; //@line 191 "parse.c"
 var $Typ=(($8)|0); //@line 191 "parse.c"
 var $9=HEAP32[(($Typ)>>2)]; //@line 191 "parse.c"
 var $ArraySize=(($9+4)|0); //@line 191 "parse.c"
 var $10=HEAP32[(($ArraySize)>>2)]; //@line 191 "parse.c"
 var $cmp6=($7|0)<($10|0); //@line 191 "parse.c"
 var $11=$cmp6;label=7;break;
 case 7: 
 var $11;
 var $12=$11;label=8;break;
 case 8: 
 var $12;
 if($12){label=9;break;}else{label=20;break;}
 case 9: 
 $ArrayElement=0; //@line 193 "parse.c"
 var $13=$Token; //@line 195 "parse.c"
 var $cmp7=($13|0)!=1; //@line 195 "parse.c"
 if($cmp7){label=10;break;}else{label=11;break;} //@line 195 "parse.c"
 case 10: 
 var $14=$Parser_addr; //@line 196 "parse.c"
 _ProgramFail($14,7512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 196 "parse.c"
 label=11;break; //@line 196 "parse.c"
 case 11: 
 var $15=$Parser_addr; //@line 198 "parse.c"
 var $Mode9=(($15+12)|0); //@line 198 "parse.c"
 var $16=HEAP32[(($Mode9)>>2)]; //@line 198 "parse.c"
 var $cmp10=($16|0)==0; //@line 198 "parse.c"
 if($cmp10){label=12;break;}else{label=13;break;} //@line 198 "parse.c"
 case 12: 
 var $17=$Parser_addr; //@line 199 "parse.c"
 var $18=$NewVariable_addr; //@line 199 "parse.c"
 var $Typ12=(($18)|0); //@line 199 "parse.c"
 var $19=HEAP32[(($Typ12)>>2)]; //@line 199 "parse.c"
 var $FromType=(($19+20)|0); //@line 199 "parse.c"
 var $20=HEAP32[(($FromType)>>2)]; //@line 199 "parse.c"
 var $21=$NewVariable_addr; //@line 199 "parse.c"
 var $Val=(($21+4)|0); //@line 199 "parse.c"
 var $22=HEAP32[(($Val)>>2)]; //@line 199 "parse.c"
 var $ArrayMem=$22; //@line 199 "parse.c"
 var $arrayidx=(($ArrayMem)|0); //@line 199 "parse.c"
 var $23=$NewVariable_addr; //@line 199 "parse.c"
 var $Typ13=(($23)|0); //@line 199 "parse.c"
 var $24=HEAP32[(($Typ13)>>2)]; //@line 199 "parse.c"
 var $FromType14=(($24+20)|0); //@line 199 "parse.c"
 var $25=HEAP32[(($FromType14)>>2)]; //@line 199 "parse.c"
 var $call15=_TypeSize($25,0,1); //@line 199 "parse.c"
 var $26=$ArrayIndex; //@line 199 "parse.c"
 var $mul=(Math_imul($call15,$26)|0); //@line 199 "parse.c"
 var $add_ptr=(($arrayidx+$mul)|0); //@line 199 "parse.c"
 var $27=$add_ptr; //@line 199 "parse.c"
 var $28=$NewVariable_addr; //@line 199 "parse.c"
 var $call16=_VariableAllocValueFromExistingData($17,$20,$27,1,$28); //@line 199 "parse.c"
 $ArrayElement=$call16; //@line 199 "parse.c"
 label=13;break; //@line 199 "parse.c"
 case 13: 
 var $29=$Parser_addr; //@line 201 "parse.c"
 var $call18=_ExpressionParse($29,$CValue); //@line 201 "parse.c"
 var $tobool=($call18|0)!=0; //@line 201 "parse.c"
 if($tobool){label=15;break;}else{label=14;break;} //@line 201 "parse.c"
 case 14: 
 var $30=$Parser_addr; //@line 202 "parse.c"
 _ProgramFail($30,11792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 202 "parse.c"
 label=15;break; //@line 202 "parse.c"
 case 15: 
 var $31=$Parser_addr; //@line 204 "parse.c"
 var $Mode21=(($31+12)|0); //@line 204 "parse.c"
 var $32=HEAP32[(($Mode21)>>2)]; //@line 204 "parse.c"
 var $cmp22=($32|0)==0; //@line 204 "parse.c"
 if($cmp22){label=16;break;}else{label=18;break;} //@line 204 "parse.c"
 case 16: 
 var $33=$DoAssignment_addr; //@line 204 "parse.c"
 var $tobool24=($33|0)!=0; //@line 204 "parse.c"
 if($tobool24){label=17;break;}else{label=18;break;} //@line 204 "parse.c"
 case 17: 
 var $34=$Parser_addr; //@line 206 "parse.c"
 var $35=$ArrayElement; //@line 206 "parse.c"
 var $36=HEAP32[(($CValue)>>2)]; //@line 206 "parse.c"
 _ExpressionAssign($34,$35,$36,0,0,0,0); //@line 206 "parse.c"
 var $37=$Parser_addr; //@line 207 "parse.c"
 var $38=HEAP32[(($CValue)>>2)]; //@line 207 "parse.c"
 _VariableStackPop($37,$38); //@line 207 "parse.c"
 var $39=$Parser_addr; //@line 208 "parse.c"
 var $40=$ArrayElement; //@line 208 "parse.c"
 _VariableStackPop($39,$40); //@line 208 "parse.c"
 label=18;break; //@line 209 "parse.c"
 case 18: 
 var $41=$Parser_addr; //@line 211 "parse.c"
 var $call27=_LexGetToken($41,0,1); //@line 211 "parse.c"
 $Token=$call27; //@line 211 "parse.c"
 label=19;break; //@line 212 "parse.c"
 case 19: 
 var $42=$ArrayIndex; //@line 191 "parse.c"
 var $inc=((($42)+(1))|0); //@line 191 "parse.c"
 $ArrayIndex=$inc; //@line 191 "parse.c"
 label=3;break; //@line 191 "parse.c"
 case 20: 
 var $43=$Token; //@line 214 "parse.c"
 var $cmp28=($43|0)==1; //@line 214 "parse.c"
 if($cmp28){label=21;break;}else{label=22;break;} //@line 214 "parse.c"
 case 21: 
 var $44=$Parser_addr; //@line 215 "parse.c"
 var $call30=_LexGetToken($44,0,1); //@line 215 "parse.c"
 $Token=$call30; //@line 215 "parse.c"
 label=22;break; //@line 215 "parse.c"
 case 22: 
 var $45=$Token; //@line 217 "parse.c"
 var $cmp32=($45|0)!=53; //@line 217 "parse.c"
 if($cmp32){label=23;break;}else{label=24;break;} //@line 217 "parse.c"
 case 23: 
 var $46=$Parser_addr; //@line 218 "parse.c"
 _ProgramFail($46,11432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 218 "parse.c"
 label=24;break; //@line 218 "parse.c"
 case 24: 
 label=31;break; //@line 219 "parse.c"
 case 25: 
 var $47=$Parser_addr; //@line 223 "parse.c"
 var $call35=_ExpressionParse($47,$CValue); //@line 223 "parse.c"
 var $tobool36=($call35|0)!=0; //@line 223 "parse.c"
 if($tobool36){label=27;break;}else{label=26;break;} //@line 223 "parse.c"
 case 26: 
 var $48=$Parser_addr; //@line 224 "parse.c"
 _ProgramFail($48,11792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 224 "parse.c"
 label=27;break; //@line 224 "parse.c"
 case 27: 
 var $49=$Parser_addr; //@line 226 "parse.c"
 var $Mode39=(($49+12)|0); //@line 226 "parse.c"
 var $50=HEAP32[(($Mode39)>>2)]; //@line 226 "parse.c"
 var $cmp40=($50|0)==0; //@line 226 "parse.c"
 if($cmp40){label=28;break;}else{label=30;break;} //@line 226 "parse.c"
 case 28: 
 var $51=$DoAssignment_addr; //@line 226 "parse.c"
 var $tobool42=($51|0)!=0; //@line 226 "parse.c"
 if($tobool42){label=29;break;}else{label=30;break;} //@line 226 "parse.c"
 case 29: 
 var $52=$Parser_addr; //@line 228 "parse.c"
 var $53=$NewVariable_addr; //@line 228 "parse.c"
 var $54=HEAP32[(($CValue)>>2)]; //@line 228 "parse.c"
 _ExpressionAssign($52,$53,$54,0,0,0,0); //@line 228 "parse.c"
 var $55=$Parser_addr; //@line 229 "parse.c"
 var $56=HEAP32[(($CValue)>>2)]; //@line 229 "parse.c"
 _VariableStackPop($55,$56); //@line 229 "parse.c"
 label=30;break; //@line 230 "parse.c"
 case 30: 
 label=31;break;
 case 31: 
 STACKTOP=sp;return; //@line 232 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseDeclaration($Parser,$Token){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Token_addr;
 var $Identifier=sp;
 var $BasicType=(sp)+(8);
 var $Typ=(sp)+(16);
 var $NewVariable;
 var $IsStatic=(sp)+(24);
 var $FirstVisit=(sp)+(32);
 $Parser_addr=$Parser;
 $Token_addr=$Token;
 $NewVariable=0; //@line 240 "parse.c"
 HEAP32[(($IsStatic)>>2)]=0; //@line 241 "parse.c"
 HEAP32[(($FirstVisit)>>2)]=0; //@line 242 "parse.c"
 var $0=$Parser_addr; //@line 244 "parse.c"
 var $call=_TypeParseFront($0,$BasicType,$IsStatic); //@line 244 "parse.c"
 label=2;break; //@line 245 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 247 "parse.c"
 var $2=HEAP32[(($BasicType)>>2)]; //@line 247 "parse.c"
 _TypeParseIdentPart($1,$2,$Typ,$Identifier); //@line 247 "parse.c"
 var $3=$Token_addr; //@line 248 "parse.c"
 var $cmp=($3|0)!=58; //@line 248 "parse.c"
 if($cmp){label=3;break;}else{label=8;break;} //@line 248 "parse.c"
 case 3: 
 var $4=$Token_addr; //@line 248 "parse.c"
 var $cmp1=($4|0)!=67; //@line 248 "parse.c"
 if($cmp1){label=4;break;}else{label=8;break;} //@line 248 "parse.c"
 case 4: 
 var $5=$Token_addr; //@line 248 "parse.c"
 var $cmp3=($5|0)!=68; //@line 248 "parse.c"
 if($cmp3){label=5;break;}else{label=8;break;} //@line 248 "parse.c"
 case 5: 
 var $6=$Token_addr; //@line 248 "parse.c"
 var $cmp5=($6|0)!=59; //@line 248 "parse.c"
 if($cmp5){label=6;break;}else{label=8;break;} //@line 248 "parse.c"
 case 6: 
 var $7=HEAP32[(($Identifier)>>2)]; //@line 248 "parse.c"
 var $8=HEAP32[((17968)>>2)]; //@line 248 "parse.c"
 var $cmp7=($7|0)==($8|0); //@line 248 "parse.c"
 if($cmp7){label=7;break;}else{label=8;break;} //@line 248 "parse.c"
 case 7: 
 var $9=$Parser_addr; //@line 249 "parse.c"
 _ProgramFail($9,11056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 249 "parse.c"
 label=8;break; //@line 249 "parse.c"
 case 8: 
 var $10=HEAP32[(($Identifier)>>2)]; //@line 251 "parse.c"
 var $11=HEAP32[((17968)>>2)]; //@line 251 "parse.c"
 var $cmp8=($10|0)!=($11|0); //@line 251 "parse.c"
 if($cmp8){label=9;break;}else{label=23;break;} //@line 251 "parse.c"
 case 9: 
 var $12=$Parser_addr; //@line 254 "parse.c"
 var $call10=_LexGetToken($12,0,0); //@line 254 "parse.c"
 var $cmp11=($call10|0)==43; //@line 254 "parse.c"
 if($cmp11){label=10;break;}else{label=11;break;} //@line 254 "parse.c"
 case 10: 
 var $13=$Parser_addr; //@line 256 "parse.c"
 var $14=HEAP32[(($Typ)>>2)]; //@line 256 "parse.c"
 var $15=HEAP32[(($Identifier)>>2)]; //@line 256 "parse.c"
 var $call13=_ParseFunctionDefinition($13,$14,$15); //@line 256 "parse.c"
 $retval=0; //@line 257 "parse.c"
 label=28;break; //@line 257 "parse.c"
 case 11: 
 var $16=HEAP32[(($Typ)>>2)]; //@line 261 "parse.c"
 var $cmp14=($16|0)==16856; //@line 261 "parse.c"
 if($cmp14){label=12;break;}else{label=14;break;} //@line 261 "parse.c"
 case 12: 
 var $17=HEAP32[(($Identifier)>>2)]; //@line 261 "parse.c"
 var $18=HEAP32[((17968)>>2)]; //@line 261 "parse.c"
 var $cmp16=($17|0)!=($18|0); //@line 261 "parse.c"
 if($cmp16){label=13;break;}else{label=14;break;} //@line 261 "parse.c"
 case 13: 
 var $19=$Parser_addr; //@line 262 "parse.c"
 _ProgramFail($19,10640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 262 "parse.c"
 label=14;break; //@line 262 "parse.c"
 case 14: 
 var $20=$Parser_addr; //@line 264 "parse.c"
 var $Mode=(($20+12)|0); //@line 264 "parse.c"
 var $21=HEAP32[(($Mode)>>2)]; //@line 264 "parse.c"
 var $cmp19=($21|0)==0; //@line 264 "parse.c"
 if($cmp19){label=16;break;}else{label=15;break;} //@line 264 "parse.c"
 case 15: 
 var $22=$Parser_addr; //@line 264 "parse.c"
 var $Mode20=(($22+12)|0); //@line 264 "parse.c"
 var $23=HEAP32[(($Mode20)>>2)]; //@line 264 "parse.c"
 var $cmp21=($23|0)==6; //@line 264 "parse.c"
 if($cmp21){label=16;break;}else{label=17;break;} //@line 264 "parse.c"
 case 16: 
 var $24=$Parser_addr; //@line 265 "parse.c"
 var $25=HEAP32[(($Identifier)>>2)]; //@line 265 "parse.c"
 var $26=HEAP32[(($Typ)>>2)]; //@line 265 "parse.c"
 var $27=HEAP32[(($IsStatic)>>2)]; //@line 265 "parse.c"
 var $call23=_VariableDefineButIgnoreIdentical($24,$25,$26,$27,$FirstVisit); //@line 265 "parse.c"
 $NewVariable=$call23; //@line 265 "parse.c"
 label=17;break; //@line 265 "parse.c"
 case 17: 
 var $28=$Parser_addr; //@line 267 "parse.c"
 var $call25=_LexGetToken($28,0,0); //@line 267 "parse.c"
 var $cmp26=($call25|0)==2; //@line 267 "parse.c"
 if($cmp26){label=18;break;}else{label=21;break;} //@line 267 "parse.c"
 case 18: 
 var $29=$Parser_addr; //@line 270 "parse.c"
 var $call28=_LexGetToken($29,0,1); //@line 270 "parse.c"
 var $30=$Parser_addr; //@line 271 "parse.c"
 var $31=$NewVariable; //@line 271 "parse.c"
 var $32=HEAP32[(($IsStatic)>>2)]; //@line 271 "parse.c"
 var $tobool=($32|0)!=0; //@line 271 "parse.c"
 if($tobool){label=19;break;}else{var $34=1;label=20;break;} //@line 271 "parse.c"
 case 19: 
 var $33=HEAP32[(($FirstVisit)>>2)]; //@line 271 "parse.c"
 var $tobool29=($33|0)!=0; //@line 271 "parse.c"
 var $34=$tobool29;label=20;break; //@line 271 "parse.c"
 case 20: 
 var $34;
 var $lor_ext=($34&1); //@line 271 "parse.c"
 _ParseDeclarationAssignment($30,$31,$lor_ext); //@line 271 "parse.c"
 label=21;break; //@line 272 "parse.c"
 case 21: 
 label=22;break;
 case 22: 
 label=23;break; //@line 274 "parse.c"
 case 23: 
 var $35=$Parser_addr; //@line 276 "parse.c"
 var $call33=_LexGetToken($35,0,0); //@line 276 "parse.c"
 $Token_addr=$call33; //@line 276 "parse.c"
 var $36=$Token_addr; //@line 277 "parse.c"
 var $cmp34=($36|0)==1; //@line 277 "parse.c"
 if($cmp34){label=24;break;}else{label=25;break;} //@line 277 "parse.c"
 case 24: 
 var $37=$Parser_addr; //@line 278 "parse.c"
 var $call36=_LexGetToken($37,0,1); //@line 278 "parse.c"
 label=25;break; //@line 278 "parse.c"
 case 25: 
 label=26;break; //@line 280 "parse.c"
 case 26: 
 var $38=$Token_addr; //@line 280 "parse.c"
 var $cmp38=($38|0)==1; //@line 280 "parse.c"
 if($cmp38){label=2;break;}else{label=27;break;} //@line 280 "parse.c"
 case 27: 
 $retval=1; //@line 282 "parse.c"
 label=28;break; //@line 282 "parse.c"
 case 28: 
 var $39=$retval; //@line 283 "parse.c"
 STACKTOP=sp;return $39; //@line 283 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseMacroDefinition($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $MacroName=sp;
 var $MacroNameStr;
 var $ParamName=(sp)+(8);
 var $MacroValue;
 var $Token;
 var $ParamParser=(sp)+(16);
 var $NumParams;
 var $ParamCount;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 293 "parse.c"
 var $call=_LexGetToken($0,$MacroName,1); //@line 293 "parse.c"
 var $cmp=($call|0)!=45; //@line 293 "parse.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 293 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 294 "parse.c"
 _ProgramFail($1,11056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 294 "parse.c"
 label=3;break; //@line 294 "parse.c"
 case 3: 
 var $2=HEAP32[(($MacroName)>>2)]; //@line 296 "parse.c"
 var $Val=(($2+4)|0); //@line 296 "parse.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 296 "parse.c"
 var $Identifier=$3; //@line 296 "parse.c"
 var $4=HEAP32[(($Identifier)>>2)]; //@line 296 "parse.c"
 $MacroNameStr=$4; //@line 296 "parse.c"
 var $5=$Parser_addr; //@line 298 "parse.c"
 var $call1=_LexRawPeekToken($5); //@line 298 "parse.c"
 var $cmp2=($call1|0)==92; //@line 298 "parse.c"
 if($cmp2){label=4;break;}else{label=15;break;} //@line 298 "parse.c"
 case 4: 
 var $6=$Parser_addr; //@line 301 "parse.c"
 var $call4=_LexGetToken($6,0,1); //@line 301 "parse.c"
 $Token=$call4; //@line 301 "parse.c"
 $ParamCount=0; //@line 304 "parse.c"
 var $7=$Parser_addr; //@line 306 "parse.c"
 _ParserCopy($ParamParser,$7); //@line 306 "parse.c"
 var $call5=_ParseCountParams($ParamParser); //@line 307 "parse.c"
 $NumParams=$call5; //@line 307 "parse.c"
 var $8=$Parser_addr; //@line 308 "parse.c"
 var $9=$NumParams; //@line 308 "parse.c"
 var $mul=($9<<2); //@line 308 "parse.c"
 var $add=((($mul)+(40))|0); //@line 308 "parse.c"
 var $call6=_VariableAllocValueAndData($8,$add,0,0,1); //@line 308 "parse.c"
 $MacroValue=$call6; //@line 308 "parse.c"
 var $10=$NumParams; //@line 309 "parse.c"
 var $11=$MacroValue; //@line 309 "parse.c"
 var $Val7=(($11+4)|0); //@line 309 "parse.c"
 var $12=HEAP32[(($Val7)>>2)]; //@line 309 "parse.c"
 var $MacroDef=$12; //@line 309 "parse.c"
 var $NumParams8=(($MacroDef)|0); //@line 309 "parse.c"
 HEAP32[(($NumParams8)>>2)]=$10; //@line 309 "parse.c"
 var $13=$MacroValue; //@line 310 "parse.c"
 var $Val9=(($13+4)|0); //@line 310 "parse.c"
 var $14=HEAP32[(($Val9)>>2)]; //@line 310 "parse.c"
 var $15=$14; //@line 310 "parse.c"
 var $add_ptr=(($15+40)|0); //@line 310 "parse.c"
 var $16=$add_ptr; //@line 310 "parse.c"
 var $17=$MacroValue; //@line 310 "parse.c"
 var $Val10=(($17+4)|0); //@line 310 "parse.c"
 var $18=HEAP32[(($Val10)>>2)]; //@line 310 "parse.c"
 var $MacroDef11=$18; //@line 310 "parse.c"
 var $ParamName12=(($MacroDef11+4)|0); //@line 310 "parse.c"
 HEAP32[(($ParamName12)>>2)]=$16; //@line 310 "parse.c"
 var $19=$Parser_addr; //@line 312 "parse.c"
 var $call13=_LexGetToken($19,$ParamName,1); //@line 312 "parse.c"
 $Token=$call13; //@line 312 "parse.c"
 label=5;break; //@line 314 "parse.c"
 case 5: 
 var $20=$Token; //@line 314 "parse.c"
 var $cmp14=($20|0)==45; //@line 314 "parse.c"
 if($cmp14){label=6;break;}else{label=12;break;} //@line 314 "parse.c"
 case 6: 
 var $21=HEAP32[(($ParamName)>>2)]; //@line 317 "parse.c"
 var $Val15=(($21+4)|0); //@line 317 "parse.c"
 var $22=HEAP32[(($Val15)>>2)]; //@line 317 "parse.c"
 var $Identifier16=$22; //@line 317 "parse.c"
 var $23=HEAP32[(($Identifier16)>>2)]; //@line 317 "parse.c"
 var $24=$ParamCount; //@line 317 "parse.c"
 var $inc=((($24)+(1))|0); //@line 317 "parse.c"
 $ParamCount=$inc; //@line 317 "parse.c"
 var $25=$MacroValue; //@line 317 "parse.c"
 var $Val17=(($25+4)|0); //@line 317 "parse.c"
 var $26=HEAP32[(($Val17)>>2)]; //@line 317 "parse.c"
 var $MacroDef18=$26; //@line 317 "parse.c"
 var $ParamName19=(($MacroDef18+4)|0); //@line 317 "parse.c"
 var $27=HEAP32[(($ParamName19)>>2)]; //@line 317 "parse.c"
 var $arrayidx=(($27+($24<<2))|0); //@line 317 "parse.c"
 HEAP32[(($arrayidx)>>2)]=$23; //@line 317 "parse.c"
 var $28=$Parser_addr; //@line 320 "parse.c"
 var $call20=_LexGetToken($28,0,1); //@line 320 "parse.c"
 $Token=$call20; //@line 320 "parse.c"
 var $29=$Token; //@line 321 "parse.c"
 var $cmp21=($29|0)==1; //@line 321 "parse.c"
 if($cmp21){label=7;break;}else{label=8;break;} //@line 321 "parse.c"
 case 7: 
 var $30=$Parser_addr; //@line 322 "parse.c"
 var $call23=_LexGetToken($30,$ParamName,1); //@line 322 "parse.c"
 $Token=$call23; //@line 322 "parse.c"
 label=11;break; //@line 322 "parse.c"
 case 8: 
 var $31=$Token; //@line 324 "parse.c"
 var $cmp24=($31|0)!=44; //@line 324 "parse.c"
 if($cmp24){label=9;break;}else{label=10;break;} //@line 324 "parse.c"
 case 9: 
 var $32=$Parser_addr; //@line 325 "parse.c"
 _ProgramFail($32,7512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 325 "parse.c"
 label=10;break; //@line 325 "parse.c"
 case 10: 
 label=11;break;
 case 11: 
 label=5;break; //@line 326 "parse.c"
 case 12: 
 var $33=$Token; //@line 328 "parse.c"
 var $cmp28=($33|0)!=44; //@line 328 "parse.c"
 if($cmp28){label=13;break;}else{label=14;break;} //@line 328 "parse.c"
 case 13: 
 var $34=$Parser_addr; //@line 329 "parse.c"
 _ProgramFail($34,10360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 329 "parse.c"
 label=14;break; //@line 329 "parse.c"
 case 14: 
 label=16;break; //@line 330 "parse.c"
 case 15: 
 var $35=$Parser_addr; //@line 334 "parse.c"
 var $call32=_VariableAllocValueAndData($35,40,0,0,1); //@line 334 "parse.c"
 $MacroValue=$call32; //@line 334 "parse.c"
 var $36=$MacroValue; //@line 335 "parse.c"
 var $Val33=(($36+4)|0); //@line 335 "parse.c"
 var $37=HEAP32[(($Val33)>>2)]; //@line 335 "parse.c"
 var $MacroDef34=$37; //@line 335 "parse.c"
 var $NumParams35=(($MacroDef34)|0); //@line 335 "parse.c"
 HEAP32[(($NumParams35)>>2)]=0; //@line 335 "parse.c"
 label=16;break;
 case 16: 
 var $38=$MacroValue; //@line 339 "parse.c"
 var $Val37=(($38+4)|0); //@line 339 "parse.c"
 var $39=HEAP32[(($Val37)>>2)]; //@line 339 "parse.c"
 var $MacroDef38=$39; //@line 339 "parse.c"
 var $Body=(($MacroDef38+8)|0); //@line 339 "parse.c"
 var $40=$Parser_addr; //@line 339 "parse.c"
 _ParserCopy($Body,$40); //@line 339 "parse.c"
 var $41=$MacroValue; //@line 340 "parse.c"
 var $Typ=(($41)|0); //@line 340 "parse.c"
 HEAP32[(($Typ)>>2)]=18216; //@line 340 "parse.c"
 var $42=$Parser_addr; //@line 341 "parse.c"
 _LexToEndOfLine($42); //@line 341 "parse.c"
 var $43=$MacroValue; //@line 342 "parse.c"
 var $Val39=(($43+4)|0); //@line 342 "parse.c"
 var $44=HEAP32[(($Val39)>>2)]; //@line 342 "parse.c"
 var $MacroDef40=$44; //@line 342 "parse.c"
 var $Body41=(($MacroDef40+8)|0); //@line 342 "parse.c"
 var $45=$Parser_addr; //@line 342 "parse.c"
 var $call42=_LexCopyTokens($Body41,$45); //@line 342 "parse.c"
 var $46=$MacroValue; //@line 342 "parse.c"
 var $Val43=(($46+4)|0); //@line 342 "parse.c"
 var $47=HEAP32[(($Val43)>>2)]; //@line 342 "parse.c"
 var $MacroDef44=$47; //@line 342 "parse.c"
 var $Body45=(($MacroDef44+8)|0); //@line 342 "parse.c"
 var $Pos=(($Body45)|0); //@line 342 "parse.c"
 HEAP32[(($Pos)>>2)]=$call42; //@line 342 "parse.c"
 var $48=$MacroNameStr; //@line 344 "parse.c"
 var $49=$MacroValue; //@line 344 "parse.c"
 var $50=$Parser_addr; //@line 344 "parse.c"
 var $FileName=(($50+4)|0); //@line 344 "parse.c"
 var $51=HEAP32[(($FileName)>>2)]; //@line 344 "parse.c"
 var $52=$Parser_addr; //@line 344 "parse.c"
 var $Line=(($52+8)|0); //@line 344 "parse.c"
 var $53=HEAP16[(($Line)>>1)]; //@line 344 "parse.c"
 var $conv=(($53<<16)>>16); //@line 344 "parse.c"
 var $54=$Parser_addr; //@line 344 "parse.c"
 var $CharacterPos=(($54+10)|0); //@line 344 "parse.c"
 var $55=HEAP16[(($CharacterPos)>>1)]; //@line 344 "parse.c"
 var $conv46=(($55<<16)>>16); //@line 344 "parse.c"
 var $call47=_TableSet(18544,$48,$49,$51,$conv,$conv46); //@line 344 "parse.c"
 var $tobool=($call47|0)!=0; //@line 344 "parse.c"
 if($tobool){label=18;break;}else{label=17;break;} //@line 344 "parse.c"
 case 17: 
 var $56=$Parser_addr; //@line 345 "parse.c"
 var $57=$MacroNameStr; //@line 345 "parse.c"
 _ProgramFail($56,192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,tempVarArgs)); STACKTOP=tempVarArgs; //@line 345 "parse.c"
 label=18;break; //@line 345 "parse.c"
 case 18: 
 STACKTOP=sp;return; //@line 346 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParserCopyPos($To,$From){
 var label=0;
 var $To_addr;
 var $From_addr;
 $To_addr=$To;
 $From_addr=$From;
 var $0=$From_addr; //@line 357 "parse.c"
 var $Pos=(($0)|0); //@line 357 "parse.c"
 var $1=HEAP32[(($Pos)>>2)]; //@line 357 "parse.c"
 var $2=$To_addr; //@line 357 "parse.c"
 var $Pos1=(($2)|0); //@line 357 "parse.c"
 HEAP32[(($Pos1)>>2)]=$1; //@line 357 "parse.c"
 var $3=$From_addr; //@line 358 "parse.c"
 var $Line=(($3+8)|0); //@line 358 "parse.c"
 var $4=HEAP16[(($Line)>>1)]; //@line 358 "parse.c"
 var $5=$To_addr; //@line 358 "parse.c"
 var $Line2=(($5+8)|0); //@line 358 "parse.c"
 HEAP16[(($Line2)>>1)]=$4; //@line 358 "parse.c"
 var $6=$From_addr; //@line 359 "parse.c"
 var $HashIfLevel=(($6+24)|0); //@line 359 "parse.c"
 var $7=HEAP16[(($HashIfLevel)>>1)]; //@line 359 "parse.c"
 var $8=$To_addr; //@line 359 "parse.c"
 var $HashIfLevel3=(($8+24)|0); //@line 359 "parse.c"
 HEAP16[(($HashIfLevel3)>>1)]=$7; //@line 359 "parse.c"
 var $9=$From_addr; //@line 360 "parse.c"
 var $HashIfEvaluateToLevel=(($9+26)|0); //@line 360 "parse.c"
 var $10=HEAP16[(($HashIfEvaluateToLevel)>>1)]; //@line 360 "parse.c"
 var $11=$To_addr; //@line 360 "parse.c"
 var $HashIfEvaluateToLevel4=(($11+26)|0); //@line 360 "parse.c"
 HEAP16[(($HashIfEvaluateToLevel4)>>1)]=$10; //@line 360 "parse.c"
 var $12=$From_addr; //@line 361 "parse.c"
 var $CharacterPos=(($12+10)|0); //@line 361 "parse.c"
 var $13=HEAP16[(($CharacterPos)>>1)]; //@line 361 "parse.c"
 var $14=$To_addr; //@line 361 "parse.c"
 var $CharacterPos5=(($14+10)|0); //@line 361 "parse.c"
 HEAP16[(($CharacterPos5)>>1)]=$13; //@line 361 "parse.c"
 return; //@line 362 "parse.c"
}
function _ParseFor($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Condition;
 var $PreConditional=sp;
 var $PreIncrement=(sp)+(32);
 var $PreStatement=(sp)+(64);
 var $After=(sp)+(96);
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 373 "parse.c"
 var $call=_LexGetToken($0,0,1); //@line 373 "parse.c"
 var $cmp=($call|0)!=43; //@line 373 "parse.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 373 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 374 "parse.c"
 _ProgramFail($1,9920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 374 "parse.c"
 label=3;break; //@line 374 "parse.c"
 case 3: 
 var $2=$Parser_addr; //@line 376 "parse.c"
 var $call1=_ParseStatement($2,1); //@line 376 "parse.c"
 var $cmp2=($call1|0)!=2; //@line 376 "parse.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 376 "parse.c"
 case 4: 
 var $3=$Parser_addr; //@line 377 "parse.c"
 _ProgramFail($3,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 377 "parse.c"
 label=5;break; //@line 377 "parse.c"
 case 5: 
 var $4=$Parser_addr; //@line 379 "parse.c"
 _ParserCopyPos($PreConditional,$4); //@line 379 "parse.c"
 var $5=$Parser_addr; //@line 380 "parse.c"
 var $call5=_LexGetToken($5,0,0); //@line 380 "parse.c"
 var $cmp6=($call5|0)==50; //@line 380 "parse.c"
 if($cmp6){label=6;break;}else{label=7;break;} //@line 380 "parse.c"
 case 6: 
 $Condition=1; //@line 381 "parse.c"
 label=8;break; //@line 381 "parse.c"
 case 7: 
 var $6=$Parser_addr; //@line 383 "parse.c"
 var $call8=_ExpressionParseInt($6); //@line 383 "parse.c"
 $Condition=$call8; //@line 383 "parse.c"
 label=8;break;
 case 8: 
 var $7=$Parser_addr; //@line 385 "parse.c"
 var $call10=_LexGetToken($7,0,1); //@line 385 "parse.c"
 var $cmp11=($call10|0)!=50; //@line 385 "parse.c"
 if($cmp11){label=9;break;}else{label=10;break;} //@line 385 "parse.c"
 case 9: 
 var $8=$Parser_addr; //@line 386 "parse.c"
 _ProgramFail($8,9384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 386 "parse.c"
 label=10;break; //@line 386 "parse.c"
 case 10: 
 var $9=$Parser_addr; //@line 388 "parse.c"
 _ParserCopyPos($PreIncrement,$9); //@line 388 "parse.c"
 var $10=$Parser_addr; //@line 389 "parse.c"
 var $call14=_ParseStatementMaybeRun($10,0,0); //@line 389 "parse.c"
 var $11=$Parser_addr; //@line 391 "parse.c"
 var $call15=_LexGetToken($11,0,1); //@line 391 "parse.c"
 var $cmp16=($call15|0)!=44; //@line 391 "parse.c"
 if($cmp16){label=11;break;}else{label=12;break;} //@line 391 "parse.c"
 case 11: 
 var $12=$Parser_addr; //@line 392 "parse.c"
 _ProgramFail($12,9192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 392 "parse.c"
 label=12;break; //@line 392 "parse.c"
 case 12: 
 var $13=$Parser_addr; //@line 394 "parse.c"
 _ParserCopyPos($PreStatement,$13); //@line 394 "parse.c"
 var $14=$Parser_addr; //@line 395 "parse.c"
 var $15=$Condition; //@line 395 "parse.c"
 var $call19=_ParseStatementMaybeRun($14,$15,1); //@line 395 "parse.c"
 var $cmp20=($call19|0)!=2; //@line 395 "parse.c"
 if($cmp20){label=13;break;}else{label=14;break;} //@line 395 "parse.c"
 case 13: 
 var $16=$Parser_addr; //@line 396 "parse.c"
 _ProgramFail($16,9632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 396 "parse.c"
 label=14;break; //@line 396 "parse.c"
 case 14: 
 var $17=$Parser_addr; //@line 398 "parse.c"
 var $Mode=(($17+12)|0); //@line 398 "parse.c"
 var $18=HEAP32[(($Mode)>>2)]; //@line 398 "parse.c"
 var $cmp23=($18|0)==5; //@line 398 "parse.c"
 if($cmp23){label=15;break;}else{label=16;break;} //@line 398 "parse.c"
 case 15: 
 var $19=$Parser_addr; //@line 399 "parse.c"
 var $Mode25=(($19+12)|0); //@line 399 "parse.c"
 HEAP32[(($Mode25)>>2)]=0; //@line 399 "parse.c"
 label=16;break; //@line 399 "parse.c"
 case 16: 
 var $20=$Parser_addr; //@line 401 "parse.c"
 _ParserCopyPos($After,$20); //@line 401 "parse.c"
 label=17;break; //@line 403 "parse.c"
 case 17: 
 var $21=$Condition; //@line 403 "parse.c"
 var $tobool=($21|0)!=0; //@line 403 "parse.c"
 if($tobool){label=18;break;}else{var $24=0;label=19;break;} //@line 403 "parse.c"
 case 18: 
 var $22=$Parser_addr; //@line 403 "parse.c"
 var $Mode27=(($22+12)|0); //@line 403 "parse.c"
 var $23=HEAP32[(($Mode27)>>2)]; //@line 403 "parse.c"
 var $cmp28=($23|0)==0; //@line 403 "parse.c"
 var $24=$cmp28;label=19;break;
 case 19: 
 var $24;
 if($24){label=20;break;}else{label=28;break;}
 case 20: 
 var $25=$Parser_addr; //@line 405 "parse.c"
 _ParserCopyPos($25,$PreIncrement); //@line 405 "parse.c"
 var $26=$Parser_addr; //@line 406 "parse.c"
 var $call29=_ParseStatement($26,0); //@line 406 "parse.c"
 var $27=$Parser_addr; //@line 408 "parse.c"
 _ParserCopyPos($27,$PreConditional); //@line 408 "parse.c"
 var $28=$Parser_addr; //@line 409 "parse.c"
 var $call30=_LexGetToken($28,0,0); //@line 409 "parse.c"
 var $cmp31=($call30|0)==50; //@line 409 "parse.c"
 if($cmp31){label=21;break;}else{label=22;break;} //@line 409 "parse.c"
 case 21: 
 $Condition=1; //@line 410 "parse.c"
 label=23;break; //@line 410 "parse.c"
 case 22: 
 var $29=$Parser_addr; //@line 412 "parse.c"
 var $call34=_ExpressionParseInt($29); //@line 412 "parse.c"
 $Condition=$call34; //@line 412 "parse.c"
 label=23;break;
 case 23: 
 var $30=$Condition; //@line 414 "parse.c"
 var $tobool36=($30|0)!=0; //@line 414 "parse.c"
 if($tobool36){label=24;break;}else{label=27;break;} //@line 414 "parse.c"
 case 24: 
 var $31=$Parser_addr; //@line 416 "parse.c"
 _ParserCopyPos($31,$PreStatement); //@line 416 "parse.c"
 var $32=$Parser_addr; //@line 417 "parse.c"
 var $call38=_ParseStatement($32,1); //@line 417 "parse.c"
 var $33=$Parser_addr; //@line 419 "parse.c"
 var $Mode39=(($33+12)|0); //@line 419 "parse.c"
 var $34=HEAP32[(($Mode39)>>2)]; //@line 419 "parse.c"
 var $cmp40=($34|0)==5; //@line 419 "parse.c"
 if($cmp40){label=25;break;}else{label=26;break;} //@line 419 "parse.c"
 case 25: 
 var $35=$Parser_addr; //@line 420 "parse.c"
 var $Mode42=(($35+12)|0); //@line 420 "parse.c"
 HEAP32[(($Mode42)>>2)]=0; //@line 420 "parse.c"
 label=26;break; //@line 420 "parse.c"
 case 26: 
 label=27;break; //@line 421 "parse.c"
 case 27: 
 label=17;break; //@line 422 "parse.c"
 case 28: 
 var $36=$Parser_addr; //@line 424 "parse.c"
 var $Mode45=(($36+12)|0); //@line 424 "parse.c"
 var $37=HEAP32[(($Mode45)>>2)]; //@line 424 "parse.c"
 var $cmp46=($37|0)==4; //@line 424 "parse.c"
 if($cmp46){label=29;break;}else{label=30;break;} //@line 424 "parse.c"
 case 29: 
 var $38=$Parser_addr; //@line 425 "parse.c"
 var $Mode48=(($38+12)|0); //@line 425 "parse.c"
 HEAP32[(($Mode48)>>2)]=0; //@line 425 "parse.c"
 label=30;break; //@line 425 "parse.c"
 case 30: 
 var $39=$Parser_addr; //@line 427 "parse.c"
 _ParserCopyPos($39,$After); //@line 427 "parse.c"
 STACKTOP=sp;return; //@line 428 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseBlock($Parser,$AbsorbOpenBrace,$Condition){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $AbsorbOpenBrace_addr;
 var $Condition_addr;
 var $OldMode;
 $Parser_addr=$Parser;
 $AbsorbOpenBrace_addr=$AbsorbOpenBrace;
 $Condition_addr=$Condition;
 var $0=$AbsorbOpenBrace_addr; //@line 433 "parse.c"
 var $tobool=($0|0)!=0; //@line 433 "parse.c"
 if($tobool){label=2;break;}else{label=4;break;} //@line 433 "parse.c"
 case 2: 
 var $1=$Parser_addr; //@line 433 "parse.c"
 var $call=_LexGetToken($1,0,1); //@line 433 "parse.c"
 var $cmp=($call|0)!=52; //@line 433 "parse.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 433 "parse.c"
 case 3: 
 var $2=$Parser_addr; //@line 434 "parse.c"
 _ProgramFail($2,8968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 434 "parse.c"
 label=4;break; //@line 434 "parse.c"
 case 4: 
 var $3=$Parser_addr; //@line 436 "parse.c"
 var $Mode=(($3+12)|0); //@line 436 "parse.c"
 var $4=HEAP32[(($Mode)>>2)]; //@line 436 "parse.c"
 var $cmp1=($4|0)==1; //@line 436 "parse.c"
 if($cmp1){label=6;break;}else{label=5;break;} //@line 436 "parse.c"
 case 5: 
 var $5=$Condition_addr; //@line 436 "parse.c"
 var $tobool2=($5|0)!=0; //@line 436 "parse.c"
 if($tobool2){label=10;break;}else{label=6;break;} //@line 436 "parse.c"
 case 6: 
 var $6=$Parser_addr; //@line 439 "parse.c"
 var $Mode4=(($6+12)|0); //@line 439 "parse.c"
 var $7=HEAP32[(($Mode4)>>2)]; //@line 439 "parse.c"
 $OldMode=$7; //@line 439 "parse.c"
 var $8=$Parser_addr; //@line 440 "parse.c"
 var $Mode5=(($8+12)|0); //@line 440 "parse.c"
 HEAP32[(($Mode5)>>2)]=1; //@line 440 "parse.c"
 label=7;break; //@line 441 "parse.c"
 case 7: 
 var $9=$Parser_addr; //@line 441 "parse.c"
 var $call6=_ParseStatement($9,1); //@line 441 "parse.c"
 var $cmp7=($call6|0)==2; //@line 441 "parse.c"
 if($cmp7){label=8;break;}else{label=9;break;} //@line 441 "parse.c"
 case 8: 
 label=7;break; //@line 442 "parse.c"
 case 9: 
 var $10=$OldMode; //@line 443 "parse.c"
 var $11=$Parser_addr; //@line 443 "parse.c"
 var $Mode8=(($11+12)|0); //@line 443 "parse.c"
 HEAP32[(($Mode8)>>2)]=$10; //@line 443 "parse.c"
 label=14;break; //@line 444 "parse.c"
 case 10: 
 label=11;break; //@line 448 "parse.c"
 case 11: 
 var $12=$Parser_addr; //@line 448 "parse.c"
 var $call10=_ParseStatement($12,1); //@line 448 "parse.c"
 var $cmp11=($call10|0)==2; //@line 448 "parse.c"
 if($cmp11){label=12;break;}else{label=13;break;} //@line 448 "parse.c"
 case 12: 
 label=11;break; //@line 449 "parse.c"
 case 13: 
 label=14;break;
 case 14: 
 var $13=$Parser_addr; //@line 452 "parse.c"
 var $call15=_LexGetToken($13,0,1); //@line 452 "parse.c"
 var $cmp16=($call15|0)!=53; //@line 452 "parse.c"
 if($cmp16){label=15;break;}else{label=16;break;} //@line 452 "parse.c"
 case 15: 
 var $14=$Parser_addr; //@line 453 "parse.c"
 _ProgramFail($14,11432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 453 "parse.c"
 label=16;break; //@line 453 "parse.c"
 case 16: 
 var $15=$Parser_addr; //@line 455 "parse.c"
 var $Mode19=(($15+12)|0); //@line 455 "parse.c"
 var $16=HEAP32[(($Mode19)>>2)]; //@line 455 "parse.c"
 STACKTOP=sp;return $16; //@line 455 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ParseTypedef($Parser){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Typ=sp;
 var $TypPtr;
 var $TypeName=(sp)+(8);
 var $InitValue=(sp)+(16);
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 466 "parse.c"
 _TypeParse($0,$Typ,$TypeName,0); //@line 466 "parse.c"
 var $1=$Parser_addr; //@line 468 "parse.c"
 var $Mode=(($1+12)|0); //@line 468 "parse.c"
 var $2=HEAP32[(($Mode)>>2)]; //@line 468 "parse.c"
 var $cmp=($2|0)==0; //@line 468 "parse.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 468 "parse.c"
 case 2: 
 $TypPtr=$Typ; //@line 470 "parse.c"
 var $Typ1=(($InitValue)|0); //@line 471 "parse.c"
 HEAP32[(($Typ1)>>2)]=17112; //@line 471 "parse.c"
 var $3=$TypPtr; //@line 472 "parse.c"
 var $4=$3; //@line 472 "parse.c"
 var $Val=(($InitValue+4)|0); //@line 472 "parse.c"
 HEAP32[(($Val)>>2)]=$4; //@line 472 "parse.c"
 var $5=$Parser_addr; //@line 473 "parse.c"
 var $6=HEAP32[(($TypeName)>>2)]; //@line 473 "parse.c"
 var $call=_VariableDefine($5,$6,$InitValue,0,0); //@line 473 "parse.c"
 label=3;break; //@line 474 "parse.c"
 case 3: 
 STACKTOP=sp;return; //@line 475 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PicocParse($FileName,$Source,$SourceLen,$RunIt,$CleanupNow,$CleanupSource){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $FileName_addr;
 var $Source_addr;
 var $SourceLen_addr;
 var $RunIt_addr;
 var $CleanupNow_addr;
 var $CleanupSource_addr;
 var $Parser=sp;
 var $Ok;
 var $NewCleanupNode;
 var $Tokens;
 $FileName_addr=$FileName;
 $Source_addr=$Source;
 $SourceLen_addr=$SourceLen;
 $RunIt_addr=$RunIt;
 $CleanupNow_addr=$CleanupNow;
 $CleanupSource_addr=$CleanupSource;
 var $0=$FileName_addr; //@line 815 "parse.c"
 var $1=$Source_addr; //@line 815 "parse.c"
 var $2=$SourceLen_addr; //@line 815 "parse.c"
 var $call=_LexAnalyse($0,$1,$2,0); //@line 815 "parse.c"
 $Tokens=$call; //@line 815 "parse.c"
 var $3=$CleanupNow_addr; //@line 818 "parse.c"
 var $tobool=($3|0)!=0; //@line 818 "parse.c"
 if($tobool){label=8;break;}else{label=2;break;} //@line 818 "parse.c"
 case 2: 
 var $call1=_HeapAllocMem(12); //@line 820 "parse.c"
 var $4=$call1; //@line 820 "parse.c"
 $NewCleanupNode=$4; //@line 820 "parse.c"
 var $5=$NewCleanupNode; //@line 821 "parse.c"
 var $cmp=($5|0)==0; //@line 821 "parse.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 821 "parse.c"
 case 3: 
 _ProgramFail(0,7296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 822 "parse.c"
 label=4;break; //@line 822 "parse.c"
 case 4: 
 var $6=$Tokens; //@line 824 "parse.c"
 var $7=$NewCleanupNode; //@line 824 "parse.c"
 var $Tokens3=(($7)|0); //@line 824 "parse.c"
 HEAP32[(($Tokens3)>>2)]=$6; //@line 824 "parse.c"
 var $8=$CleanupSource_addr; //@line 825 "parse.c"
 var $tobool4=($8|0)!=0; //@line 825 "parse.c"
 if($tobool4){label=5;break;}else{label=6;break;} //@line 825 "parse.c"
 case 5: 
 var $9=$Source_addr; //@line 826 "parse.c"
 var $10=$NewCleanupNode; //@line 826 "parse.c"
 var $SourceText=(($10+4)|0); //@line 826 "parse.c"
 HEAP32[(($SourceText)>>2)]=$9; //@line 826 "parse.c"
 label=7;break; //@line 826 "parse.c"
 case 6: 
 var $11=$NewCleanupNode; //@line 828 "parse.c"
 var $SourceText6=(($11+4)|0); //@line 828 "parse.c"
 HEAP32[(($SourceText6)>>2)]=0; //@line 828 "parse.c"
 label=7;break;
 case 7: 
 var $12=HEAP32[((19080)>>2)]; //@line 830 "parse.c"
 var $13=$NewCleanupNode; //@line 830 "parse.c"
 var $Next=(($13+8)|0); //@line 830 "parse.c"
 HEAP32[(($Next)>>2)]=$12; //@line 830 "parse.c"
 var $14=$NewCleanupNode; //@line 831 "parse.c"
 HEAP32[((19080)>>2)]=$14; //@line 831 "parse.c"
 label=8;break; //@line 832 "parse.c"
 case 8: 
 var $15=$Source_addr; //@line 835 "parse.c"
 var $16=$Tokens; //@line 835 "parse.c"
 var $17=$FileName_addr; //@line 835 "parse.c"
 var $18=$RunIt_addr; //@line 835 "parse.c"
 _LexInitParser($Parser,$15,$16,$17,$18); //@line 835 "parse.c"
 label=9;break; //@line 837 "parse.c"
 case 9: 
 var $call9=_ParseStatement($Parser,1); //@line 838 "parse.c"
 $Ok=$call9; //@line 838 "parse.c"
 label=10;break; //@line 839 "parse.c"
 case 10: 
 var $19=$Ok; //@line 839 "parse.c"
 var $cmp10=($19|0)==2; //@line 839 "parse.c"
 if($cmp10){label=9;break;}else{label=11;break;} //@line 839 "parse.c"
 case 11: 
 var $20=$Ok; //@line 841 "parse.c"
 var $cmp11=($20|0)==1; //@line 841 "parse.c"
 if($cmp11){label=12;break;}else{label=13;break;} //@line 841 "parse.c"
 case 12: 
 _ProgramFail($Parser,7184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 842 "parse.c"
 label=13;break; //@line 842 "parse.c"
 case 13: 
 var $21=$CleanupNow_addr; //@line 845 "parse.c"
 var $tobool14=($21|0)!=0; //@line 845 "parse.c"
 if($tobool14){label=14;break;}else{label=15;break;} //@line 845 "parse.c"
 case 14: 
 var $22=$Tokens; //@line 846 "parse.c"
 _HeapFreeMem($22); //@line 846 "parse.c"
 label=15;break; //@line 846 "parse.c"
 case 15: 
 STACKTOP=sp;return; //@line 847 "parse.c"
  default: assert(0, "bad label: " + label);
 }
}
function _debugf($Format,varrp){
 var label=0;
 var $Format_addr;
 $Format_addr=$Format;
 return; //@line 16 "expression.c"
}
function _ExpressionCoerceInteger($Val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Val_addr;
 $Val_addr=$Val;
 var $0=$Val_addr; //@line 140 "expression.c"
 var $Typ=(($0)|0); //@line 140 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 140 "expression.c"
 var $Base=(($1)|0); //@line 140 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 140 "expression.c"
 switch(($2|0)){case 8:{ label=10;break;}case 1:{ label=2;break;}case 3:{ label=3;break;}case 2:{ label=4;break;}case 4:{ label=5;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 7:{ label=8;break;}case 11:{ label=9;break;}default:{label=11;break;}}break;
 case 2: 
 var $3=$Val_addr; //@line 142 "expression.c"
 var $Val1=(($3+4)|0); //@line 142 "expression.c"
 var $4=HEAP32[(($Val1)>>2)]; //@line 142 "expression.c"
 var $Integer=$4; //@line 142 "expression.c"
 var $5=HEAP32[(($Integer)>>2)]; //@line 142 "expression.c"
 $retval=$5; //@line 142 "expression.c"
 label=12;break; //@line 142 "expression.c"
 case 3: 
 var $6=$Val_addr; //@line 143 "expression.c"
 var $Val3=(($6+4)|0); //@line 143 "expression.c"
 var $7=HEAP32[(($Val3)>>2)]; //@line 143 "expression.c"
 var $Character=$7; //@line 143 "expression.c"
 var $8=HEAP8[($Character)]; //@line 143 "expression.c"
 var $conv=($8&255); //@line 143 "expression.c"
 $retval=$conv; //@line 143 "expression.c"
 label=12;break; //@line 143 "expression.c"
 case 4: 
 var $9=$Val_addr; //@line 144 "expression.c"
 var $Val5=(($9+4)|0); //@line 144 "expression.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 144 "expression.c"
 var $ShortInteger=$10; //@line 144 "expression.c"
 var $11=HEAP16[(($ShortInteger)>>1)]; //@line 144 "expression.c"
 var $conv6=(($11<<16)>>16); //@line 144 "expression.c"
 $retval=$conv6; //@line 144 "expression.c"
 label=12;break; //@line 144 "expression.c"
 case 5: 
 var $12=$Val_addr; //@line 145 "expression.c"
 var $Val8=(($12+4)|0); //@line 145 "expression.c"
 var $13=HEAP32[(($Val8)>>2)]; //@line 145 "expression.c"
 var $LongInteger=$13; //@line 145 "expression.c"
 var $14=HEAP32[(($LongInteger)>>2)]; //@line 145 "expression.c"
 $retval=$14; //@line 145 "expression.c"
 label=12;break; //@line 145 "expression.c"
 case 6: 
 var $15=$Val_addr; //@line 146 "expression.c"
 var $Val10=(($15+4)|0); //@line 146 "expression.c"
 var $16=HEAP32[(($Val10)>>2)]; //@line 146 "expression.c"
 var $UnsignedInteger=$16; //@line 146 "expression.c"
 var $17=HEAP32[(($UnsignedInteger)>>2)]; //@line 146 "expression.c"
 $retval=$17; //@line 146 "expression.c"
 label=12;break; //@line 146 "expression.c"
 case 7: 
 var $18=$Val_addr; //@line 147 "expression.c"
 var $Val12=(($18+4)|0); //@line 147 "expression.c"
 var $19=HEAP32[(($Val12)>>2)]; //@line 147 "expression.c"
 var $UnsignedShortInteger=$19; //@line 147 "expression.c"
 var $20=HEAP16[(($UnsignedShortInteger)>>1)]; //@line 147 "expression.c"
 var $conv13=($20&65535); //@line 147 "expression.c"
 $retval=$conv13; //@line 147 "expression.c"
 label=12;break; //@line 147 "expression.c"
 case 8: 
 var $21=$Val_addr; //@line 148 "expression.c"
 var $Val15=(($21+4)|0); //@line 148 "expression.c"
 var $22=HEAP32[(($Val15)>>2)]; //@line 148 "expression.c"
 var $UnsignedLongInteger=$22; //@line 148 "expression.c"
 var $23=HEAP32[(($UnsignedLongInteger)>>2)]; //@line 148 "expression.c"
 $retval=$23; //@line 148 "expression.c"
 label=12;break; //@line 148 "expression.c"
 case 9: 
 var $24=$Val_addr; //@line 149 "expression.c"
 var $Val17=(($24+4)|0); //@line 149 "expression.c"
 var $25=HEAP32[(($Val17)>>2)]; //@line 149 "expression.c"
 var $Pointer=$25; //@line 149 "expression.c"
 var $26=HEAP32[(($Pointer)>>2)]; //@line 149 "expression.c"
 var $27=$26; //@line 149 "expression.c"
 $retval=$27; //@line 149 "expression.c"
 label=12;break; //@line 149 "expression.c"
 case 10: 
 var $28=$Val_addr; //@line 151 "expression.c"
 var $Val19=(($28+4)|0); //@line 151 "expression.c"
 var $29=HEAP32[(($Val19)>>2)]; //@line 151 "expression.c"
 var $FP=$29; //@line 151 "expression.c"
 var $30=HEAPF64[(($FP)>>3)]; //@line 151 "expression.c"
 var $conv20=(($30)&-1); //@line 151 "expression.c"
 $retval=$conv20; //@line 151 "expression.c"
 label=12;break; //@line 151 "expression.c"
 case 11: 
 $retval=0; //@line 153 "expression.c"
 label=12;break; //@line 153 "expression.c"
 case 12: 
 var $31=$retval; //@line 155 "expression.c"
 return $31; //@line 155 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionCoerceUnsignedInteger($Val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Val_addr;
 $Val_addr=$Val;
 var $0=$Val_addr; //@line 159 "expression.c"
 var $Typ=(($0)|0); //@line 159 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 159 "expression.c"
 var $Base=(($1)|0); //@line 159 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 159 "expression.c"
 switch(($2|0)){case 8:{ label=10;break;}case 1:{ label=2;break;}case 3:{ label=3;break;}case 2:{ label=4;break;}case 4:{ label=5;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 7:{ label=8;break;}case 11:{ label=9;break;}default:{label=11;break;}}break;
 case 2: 
 var $3=$Val_addr; //@line 161 "expression.c"
 var $Val1=(($3+4)|0); //@line 161 "expression.c"
 var $4=HEAP32[(($Val1)>>2)]; //@line 161 "expression.c"
 var $Integer=$4; //@line 161 "expression.c"
 var $5=HEAP32[(($Integer)>>2)]; //@line 161 "expression.c"
 $retval=$5; //@line 161 "expression.c"
 label=12;break; //@line 161 "expression.c"
 case 3: 
 var $6=$Val_addr; //@line 162 "expression.c"
 var $Val3=(($6+4)|0); //@line 162 "expression.c"
 var $7=HEAP32[(($Val3)>>2)]; //@line 162 "expression.c"
 var $Character=$7; //@line 162 "expression.c"
 var $8=HEAP8[($Character)]; //@line 162 "expression.c"
 var $conv=($8&255); //@line 162 "expression.c"
 $retval=$conv; //@line 162 "expression.c"
 label=12;break; //@line 162 "expression.c"
 case 4: 
 var $9=$Val_addr; //@line 163 "expression.c"
 var $Val5=(($9+4)|0); //@line 163 "expression.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 163 "expression.c"
 var $ShortInteger=$10; //@line 163 "expression.c"
 var $11=HEAP16[(($ShortInteger)>>1)]; //@line 163 "expression.c"
 var $conv6=(($11<<16)>>16); //@line 163 "expression.c"
 $retval=$conv6; //@line 163 "expression.c"
 label=12;break; //@line 163 "expression.c"
 case 5: 
 var $12=$Val_addr; //@line 164 "expression.c"
 var $Val8=(($12+4)|0); //@line 164 "expression.c"
 var $13=HEAP32[(($Val8)>>2)]; //@line 164 "expression.c"
 var $LongInteger=$13; //@line 164 "expression.c"
 var $14=HEAP32[(($LongInteger)>>2)]; //@line 164 "expression.c"
 $retval=$14; //@line 164 "expression.c"
 label=12;break; //@line 164 "expression.c"
 case 6: 
 var $15=$Val_addr; //@line 165 "expression.c"
 var $Val10=(($15+4)|0); //@line 165 "expression.c"
 var $16=HEAP32[(($Val10)>>2)]; //@line 165 "expression.c"
 var $UnsignedInteger=$16; //@line 165 "expression.c"
 var $17=HEAP32[(($UnsignedInteger)>>2)]; //@line 165 "expression.c"
 $retval=$17; //@line 165 "expression.c"
 label=12;break; //@line 165 "expression.c"
 case 7: 
 var $18=$Val_addr; //@line 166 "expression.c"
 var $Val12=(($18+4)|0); //@line 166 "expression.c"
 var $19=HEAP32[(($Val12)>>2)]; //@line 166 "expression.c"
 var $UnsignedShortInteger=$19; //@line 166 "expression.c"
 var $20=HEAP16[(($UnsignedShortInteger)>>1)]; //@line 166 "expression.c"
 var $conv13=($20&65535); //@line 166 "expression.c"
 $retval=$conv13; //@line 166 "expression.c"
 label=12;break; //@line 166 "expression.c"
 case 8: 
 var $21=$Val_addr; //@line 167 "expression.c"
 var $Val15=(($21+4)|0); //@line 167 "expression.c"
 var $22=HEAP32[(($Val15)>>2)]; //@line 167 "expression.c"
 var $UnsignedLongInteger=$22; //@line 167 "expression.c"
 var $23=HEAP32[(($UnsignedLongInteger)>>2)]; //@line 167 "expression.c"
 $retval=$23; //@line 167 "expression.c"
 label=12;break; //@line 167 "expression.c"
 case 9: 
 var $24=$Val_addr; //@line 168 "expression.c"
 var $Val17=(($24+4)|0); //@line 168 "expression.c"
 var $25=HEAP32[(($Val17)>>2)]; //@line 168 "expression.c"
 var $Pointer=$25; //@line 168 "expression.c"
 var $26=HEAP32[(($Pointer)>>2)]; //@line 168 "expression.c"
 var $27=$26; //@line 168 "expression.c"
 $retval=$27; //@line 168 "expression.c"
 label=12;break; //@line 168 "expression.c"
 case 10: 
 var $28=$Val_addr; //@line 170 "expression.c"
 var $Val19=(($28+4)|0); //@line 170 "expression.c"
 var $29=HEAP32[(($Val19)>>2)]; //@line 170 "expression.c"
 var $FP=$29; //@line 170 "expression.c"
 var $30=HEAPF64[(($FP)>>3)]; //@line 170 "expression.c"
 var $conv20=($30>=0 ? Math_floor($30) : Math_ceil($30)); //@line 170 "expression.c"
 $retval=$conv20; //@line 170 "expression.c"
 label=12;break; //@line 170 "expression.c"
 case 11: 
 $retval=0; //@line 172 "expression.c"
 label=12;break; //@line 172 "expression.c"
 case 12: 
 var $31=$retval; //@line 174 "expression.c"
 return $31; //@line 174 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionCoerceFP($Val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Val_addr;
 var $IntVal;
 var $UnsignedVal;
 $Val_addr=$Val;
 var $0=$Val_addr; //@line 183 "expression.c"
 var $Typ=(($0)|0); //@line 183 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 183 "expression.c"
 var $Base=(($1)|0); //@line 183 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 183 "expression.c"
 switch(($2|0)){case 1:{ label=2;break;}case 3:{ label=3;break;}case 2:{ label=4;break;}case 4:{ label=5;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 7:{ label=8;break;}case 8:{ label=9;break;}default:{label=10;break;}}break;
 case 2: 
 var $3=$Val_addr; //@line 185 "expression.c"
 var $Val1=(($3+4)|0); //@line 185 "expression.c"
 var $4=HEAP32[(($Val1)>>2)]; //@line 185 "expression.c"
 var $Integer=$4; //@line 185 "expression.c"
 var $5=HEAP32[(($Integer)>>2)]; //@line 185 "expression.c"
 $IntVal=$5; //@line 185 "expression.c"
 var $6=$IntVal; //@line 185 "expression.c"
 var $conv=($6|0); //@line 185 "expression.c"
 $retval=$conv; //@line 185 "expression.c"
 label=11;break; //@line 185 "expression.c"
 case 3: 
 var $7=$Val_addr; //@line 186 "expression.c"
 var $Val3=(($7+4)|0); //@line 186 "expression.c"
 var $8=HEAP32[(($Val3)>>2)]; //@line 186 "expression.c"
 var $Character=$8; //@line 186 "expression.c"
 var $9=HEAP8[($Character)]; //@line 186 "expression.c"
 var $conv4=($9&255); //@line 186 "expression.c"
 $IntVal=$conv4; //@line 186 "expression.c"
 var $10=$IntVal; //@line 186 "expression.c"
 var $conv5=($10|0); //@line 186 "expression.c"
 $retval=$conv5; //@line 186 "expression.c"
 label=11;break; //@line 186 "expression.c"
 case 4: 
 var $11=$Val_addr; //@line 187 "expression.c"
 var $Val7=(($11+4)|0); //@line 187 "expression.c"
 var $12=HEAP32[(($Val7)>>2)]; //@line 187 "expression.c"
 var $ShortInteger=$12; //@line 187 "expression.c"
 var $13=HEAP16[(($ShortInteger)>>1)]; //@line 187 "expression.c"
 var $conv8=(($13<<16)>>16); //@line 187 "expression.c"
 $IntVal=$conv8; //@line 187 "expression.c"
 var $14=$IntVal; //@line 187 "expression.c"
 var $conv9=($14|0); //@line 187 "expression.c"
 $retval=$conv9; //@line 187 "expression.c"
 label=11;break; //@line 187 "expression.c"
 case 5: 
 var $15=$Val_addr; //@line 188 "expression.c"
 var $Val11=(($15+4)|0); //@line 188 "expression.c"
 var $16=HEAP32[(($Val11)>>2)]; //@line 188 "expression.c"
 var $LongInteger=$16; //@line 188 "expression.c"
 var $17=HEAP32[(($LongInteger)>>2)]; //@line 188 "expression.c"
 $IntVal=$17; //@line 188 "expression.c"
 var $18=$IntVal; //@line 188 "expression.c"
 var $conv12=($18|0); //@line 188 "expression.c"
 $retval=$conv12; //@line 188 "expression.c"
 label=11;break; //@line 188 "expression.c"
 case 6: 
 var $19=$Val_addr; //@line 189 "expression.c"
 var $Val14=(($19+4)|0); //@line 189 "expression.c"
 var $20=HEAP32[(($Val14)>>2)]; //@line 189 "expression.c"
 var $UnsignedInteger=$20; //@line 189 "expression.c"
 var $21=HEAP32[(($UnsignedInteger)>>2)]; //@line 189 "expression.c"
 $UnsignedVal=$21; //@line 189 "expression.c"
 var $22=$UnsignedVal; //@line 189 "expression.c"
 var $conv15=($22>>>0); //@line 189 "expression.c"
 $retval=$conv15; //@line 189 "expression.c"
 label=11;break; //@line 189 "expression.c"
 case 7: 
 var $23=$Val_addr; //@line 190 "expression.c"
 var $Val17=(($23+4)|0); //@line 190 "expression.c"
 var $24=HEAP32[(($Val17)>>2)]; //@line 190 "expression.c"
 var $UnsignedShortInteger=$24; //@line 190 "expression.c"
 var $25=HEAP16[(($UnsignedShortInteger)>>1)]; //@line 190 "expression.c"
 var $conv18=($25&65535); //@line 190 "expression.c"
 $UnsignedVal=$conv18; //@line 190 "expression.c"
 var $26=$UnsignedVal; //@line 190 "expression.c"
 var $conv19=($26>>>0); //@line 190 "expression.c"
 $retval=$conv19; //@line 190 "expression.c"
 label=11;break; //@line 190 "expression.c"
 case 8: 
 var $27=$Val_addr; //@line 191 "expression.c"
 var $Val21=(($27+4)|0); //@line 191 "expression.c"
 var $28=HEAP32[(($Val21)>>2)]; //@line 191 "expression.c"
 var $UnsignedLongInteger=$28; //@line 191 "expression.c"
 var $29=HEAP32[(($UnsignedLongInteger)>>2)]; //@line 191 "expression.c"
 $UnsignedVal=$29; //@line 191 "expression.c"
 var $30=$UnsignedVal; //@line 191 "expression.c"
 var $conv22=($30>>>0); //@line 191 "expression.c"
 $retval=$conv22; //@line 191 "expression.c"
 label=11;break; //@line 191 "expression.c"
 case 9: 
 var $31=$Val_addr; //@line 192 "expression.c"
 var $Val24=(($31+4)|0); //@line 192 "expression.c"
 var $32=HEAP32[(($Val24)>>2)]; //@line 192 "expression.c"
 var $FP=$32; //@line 192 "expression.c"
 var $33=HEAPF64[(($FP)>>3)]; //@line 192 "expression.c"
 $retval=$33; //@line 192 "expression.c"
 label=11;break; //@line 192 "expression.c"
 case 10: 
 $retval=0; //@line 193 "expression.c"
 label=11;break; //@line 193 "expression.c"
 case 11: 
 var $34=$retval; //@line 209 "expression.c"
 return $34; //@line 209 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionAssignInt($Parser,$DestValue,$FromInt,$After){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $DestValue_addr;
 var $FromInt_addr;
 var $After_addr;
 var $Result;
 $Parser_addr=$Parser;
 $DestValue_addr=$DestValue;
 $FromInt_addr=$FromInt;
 $After_addr=$After;
 var $0=$DestValue_addr; //@line 217 "expression.c"
 var $IsLValue=(($0+14)|0); //@line 217 "expression.c"
 var $1=HEAP8[($IsLValue)]; //@line 217 "expression.c"
 var $tobool=(($1<<24)>>24)!=0; //@line 217 "expression.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 217 "expression.c"
 case 2: 
 var $2=$Parser_addr; //@line 218 "expression.c"
 _ProgramFail($2,552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 218 "expression.c"
 label=3;break; //@line 218 "expression.c"
 case 3: 
 var $3=$After_addr; //@line 220 "expression.c"
 var $tobool1=($3|0)!=0; //@line 220 "expression.c"
 if($tobool1){label=4;break;}else{label=5;break;} //@line 220 "expression.c"
 case 4: 
 var $4=$DestValue_addr; //@line 221 "expression.c"
 var $call=_ExpressionCoerceInteger($4); //@line 221 "expression.c"
 $Result=$call; //@line 221 "expression.c"
 label=6;break; //@line 221 "expression.c"
 case 5: 
 var $5=$FromInt_addr; //@line 223 "expression.c"
 $Result=$5; //@line 223 "expression.c"
 label=6;break;
 case 6: 
 var $6=$DestValue_addr; //@line 225 "expression.c"
 var $Typ=(($6)|0); //@line 225 "expression.c"
 var $7=HEAP32[(($Typ)>>2)]; //@line 225 "expression.c"
 var $Base=(($7)|0); //@line 225 "expression.c"
 var $8=HEAP32[(($Base)>>2)]; //@line 225 "expression.c"
 switch(($8|0)){case 4:{ label=10;break;}case 5:{ label=11;break;}case 6:{ label=12;break;}case 7:{ label=13;break;}case 1:{ label=7;break;}case 2:{ label=8;break;}case 3:{ label=9;break;}default:{label=14;break;}}break;
 case 7: 
 var $9=$FromInt_addr; //@line 227 "expression.c"
 var $10=$DestValue_addr; //@line 227 "expression.c"
 var $Val=(($10+4)|0); //@line 227 "expression.c"
 var $11=HEAP32[(($Val)>>2)]; //@line 227 "expression.c"
 var $Integer=$11; //@line 227 "expression.c"
 HEAP32[(($Integer)>>2)]=$9; //@line 227 "expression.c"
 label=15;break; //@line 227 "expression.c"
 case 8: 
 var $12=$FromInt_addr; //@line 228 "expression.c"
 var $conv=(($12)&65535); //@line 228 "expression.c"
 var $13=$DestValue_addr; //@line 228 "expression.c"
 var $Val5=(($13+4)|0); //@line 228 "expression.c"
 var $14=HEAP32[(($Val5)>>2)]; //@line 228 "expression.c"
 var $ShortInteger=$14; //@line 228 "expression.c"
 HEAP16[(($ShortInteger)>>1)]=$conv; //@line 228 "expression.c"
 label=15;break; //@line 228 "expression.c"
 case 9: 
 var $15=$FromInt_addr; //@line 229 "expression.c"
 var $conv7=(($15)&255); //@line 229 "expression.c"
 var $16=$DestValue_addr; //@line 229 "expression.c"
 var $Val8=(($16+4)|0); //@line 229 "expression.c"
 var $17=HEAP32[(($Val8)>>2)]; //@line 229 "expression.c"
 var $Character=$17; //@line 229 "expression.c"
 HEAP8[($Character)]=$conv7; //@line 229 "expression.c"
 label=15;break; //@line 229 "expression.c"
 case 10: 
 var $18=$FromInt_addr; //@line 230 "expression.c"
 var $19=$DestValue_addr; //@line 230 "expression.c"
 var $Val10=(($19+4)|0); //@line 230 "expression.c"
 var $20=HEAP32[(($Val10)>>2)]; //@line 230 "expression.c"
 var $LongInteger=$20; //@line 230 "expression.c"
 HEAP32[(($LongInteger)>>2)]=$18; //@line 230 "expression.c"
 label=15;break; //@line 230 "expression.c"
 case 11: 
 var $21=$FromInt_addr; //@line 231 "expression.c"
 var $22=$DestValue_addr; //@line 231 "expression.c"
 var $Val12=(($22+4)|0); //@line 231 "expression.c"
 var $23=HEAP32[(($Val12)>>2)]; //@line 231 "expression.c"
 var $UnsignedInteger=$23; //@line 231 "expression.c"
 HEAP32[(($UnsignedInteger)>>2)]=$21; //@line 231 "expression.c"
 label=15;break; //@line 231 "expression.c"
 case 12: 
 var $24=$FromInt_addr; //@line 232 "expression.c"
 var $conv14=(($24)&65535); //@line 232 "expression.c"
 var $25=$DestValue_addr; //@line 232 "expression.c"
 var $Val15=(($25+4)|0); //@line 232 "expression.c"
 var $26=HEAP32[(($Val15)>>2)]; //@line 232 "expression.c"
 var $UnsignedShortInteger=$26; //@line 232 "expression.c"
 HEAP16[(($UnsignedShortInteger)>>1)]=$conv14; //@line 232 "expression.c"
 label=15;break; //@line 232 "expression.c"
 case 13: 
 var $27=$FromInt_addr; //@line 233 "expression.c"
 var $28=$DestValue_addr; //@line 233 "expression.c"
 var $Val17=(($28+4)|0); //@line 233 "expression.c"
 var $29=HEAP32[(($Val17)>>2)]; //@line 233 "expression.c"
 var $UnsignedLongInteger=$29; //@line 233 "expression.c"
 HEAP32[(($UnsignedLongInteger)>>2)]=$27; //@line 233 "expression.c"
 label=15;break; //@line 233 "expression.c"
 case 14: 
 label=15;break; //@line 234 "expression.c"
 case 15: 
 var $30=$Result; //@line 236 "expression.c"
 STACKTOP=sp;return $30; //@line 236 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionAssignFP($Parser,$DestValue,$FromFP){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $DestValue_addr;
 var $FromFP_addr;
 $Parser_addr=$Parser;
 $DestValue_addr=$DestValue;
 $FromFP_addr=$FromFP;
 var $0=$DestValue_addr; //@line 243 "expression.c"
 var $IsLValue=(($0+14)|0); //@line 243 "expression.c"
 var $1=HEAP8[($IsLValue)]; //@line 243 "expression.c"
 var $tobool=(($1<<24)>>24)!=0; //@line 243 "expression.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 243 "expression.c"
 case 2: 
 var $2=$Parser_addr; //@line 244 "expression.c"
 _ProgramFail($2,552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 244 "expression.c"
 label=3;break; //@line 244 "expression.c"
 case 3: 
 var $3=$FromFP_addr; //@line 246 "expression.c"
 var $4=$DestValue_addr; //@line 246 "expression.c"
 var $Val=(($4+4)|0); //@line 246 "expression.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 246 "expression.c"
 var $FP=$5; //@line 246 "expression.c"
 HEAPF64[(($FP)>>3)]=$3; //@line 246 "expression.c"
 var $6=$FromFP_addr; //@line 247 "expression.c"
 STACKTOP=sp;return $6; //@line 247 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionStackPushValueNode($Parser,$StackTop,$ValueLoc){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $ValueLoc_addr;
 var $StackNode;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $ValueLoc_addr=$ValueLoc;
 var $0=$Parser_addr; //@line 254 "expression.c"
 var $call=_VariableAlloc($0,16,0); //@line 254 "expression.c"
 var $1=$call; //@line 254 "expression.c"
 $StackNode=$1; //@line 254 "expression.c"
 var $2=$StackTop_addr; //@line 255 "expression.c"
 var $3=HEAP32[(($2)>>2)]; //@line 255 "expression.c"
 var $4=$StackNode; //@line 255 "expression.c"
 var $Next=(($4)|0); //@line 255 "expression.c"
 HEAP32[(($Next)>>2)]=$3; //@line 255 "expression.c"
 var $5=$ValueLoc_addr; //@line 256 "expression.c"
 var $6=$StackNode; //@line 256 "expression.c"
 var $Val=(($6+4)|0); //@line 256 "expression.c"
 HEAP32[(($Val)>>2)]=$5; //@line 256 "expression.c"
 var $7=$StackNode; //@line 257 "expression.c"
 var $8=$StackTop_addr; //@line 257 "expression.c"
 HEAP32[(($8)>>2)]=$7; //@line 257 "expression.c"
 return; //@line 265 "expression.c"
}
function _ExpressionStackPushValueByType($Parser,$StackTop,$PushType){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $PushType_addr;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $PushType_addr=$PushType;
 var $0=$Parser_addr; //@line 270 "expression.c"
 var $1=$PushType_addr; //@line 270 "expression.c"
 var $call=_VariableAllocValueFromType($0,$1,0,0,0); //@line 270 "expression.c"
 $ValueLoc=$call; //@line 270 "expression.c"
 var $2=$Parser_addr; //@line 271 "expression.c"
 var $3=$StackTop_addr; //@line 271 "expression.c"
 var $4=$ValueLoc; //@line 271 "expression.c"
 _ExpressionStackPushValueNode($2,$3,$4); //@line 271 "expression.c"
 var $5=$ValueLoc; //@line 273 "expression.c"
 return $5; //@line 273 "expression.c"
}
function _ExpressionStackPushValue($Parser,$StackTop,$PushValue){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $PushValue_addr;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $PushValue_addr=$PushValue;
 var $0=$Parser_addr; //@line 279 "expression.c"
 var $1=$PushValue_addr; //@line 279 "expression.c"
 var $call=_VariableAllocValueAndCopy($0,$1,0); //@line 279 "expression.c"
 $ValueLoc=$call; //@line 279 "expression.c"
 var $2=$Parser_addr; //@line 280 "expression.c"
 var $3=$StackTop_addr; //@line 280 "expression.c"
 var $4=$ValueLoc; //@line 280 "expression.c"
 _ExpressionStackPushValueNode($2,$3,$4); //@line 280 "expression.c"
 return; //@line 281 "expression.c"
}
function _ExpressionStackPushLValue($Parser,$StackTop,$PushValue,$Offset){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $PushValue_addr;
 var $Offset_addr;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $PushValue_addr=$PushValue;
 $Offset_addr=$Offset;
 var $0=$Parser_addr; //@line 285 "expression.c"
 var $1=$PushValue_addr; //@line 285 "expression.c"
 var $call=_VariableAllocValueShared($0,$1); //@line 285 "expression.c"
 $ValueLoc=$call; //@line 285 "expression.c"
 var $2=$ValueLoc; //@line 286 "expression.c"
 var $Val=(($2+4)|0); //@line 286 "expression.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 286 "expression.c"
 var $4=$3; //@line 286 "expression.c"
 var $5=$Offset_addr; //@line 286 "expression.c"
 var $add_ptr=(($4+$5)|0); //@line 286 "expression.c"
 var $6=$add_ptr; //@line 286 "expression.c"
 var $7=$ValueLoc; //@line 286 "expression.c"
 var $Val1=(($7+4)|0); //@line 286 "expression.c"
 HEAP32[(($Val1)>>2)]=$6; //@line 286 "expression.c"
 var $8=$Parser_addr; //@line 287 "expression.c"
 var $9=$StackTop_addr; //@line 287 "expression.c"
 var $10=$ValueLoc; //@line 287 "expression.c"
 _ExpressionStackPushValueNode($8,$9,$10); //@line 287 "expression.c"
 return; //@line 288 "expression.c"
}
function _ExpressionStackPushDereference($Parser,$StackTop,$DereferenceValue){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $DereferenceValue_addr;
 var $DerefVal=sp;
 var $ValueLoc;
 var $Offset=(sp)+(8);
 var $DerefType=(sp)+(16);
 var $DerefIsLValue=(sp)+(24);
 var $DerefDataLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $DereferenceValue_addr=$DereferenceValue;
 var $0=$Parser_addr; //@line 297 "expression.c"
 var $1=$DereferenceValue_addr; //@line 297 "expression.c"
 var $call=_VariableDereferencePointer($0,$1,$DerefVal,$Offset,$DerefType,$DerefIsLValue); //@line 297 "expression.c"
 $DerefDataLoc=$call; //@line 297 "expression.c"
 var $2=$DerefDataLoc; //@line 298 "expression.c"
 var $cmp=($2|0)==0; //@line 298 "expression.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 298 "expression.c"
 case 2: 
 var $3=$Parser_addr; //@line 299 "expression.c"
 _ProgramFail($3,9152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 299 "expression.c"
 label=3;break; //@line 299 "expression.c"
 case 3: 
 var $4=$Parser_addr; //@line 301 "expression.c"
 var $5=HEAP32[(($DerefType)>>2)]; //@line 301 "expression.c"
 var $6=$DerefDataLoc; //@line 301 "expression.c"
 var $7=$6; //@line 301 "expression.c"
 var $8=HEAP32[(($DerefIsLValue)>>2)]; //@line 301 "expression.c"
 var $9=HEAP32[(($DerefVal)>>2)]; //@line 301 "expression.c"
 var $call1=_VariableAllocValueFromExistingData($4,$5,$7,$8,$9); //@line 301 "expression.c"
 $ValueLoc=$call1; //@line 301 "expression.c"
 var $10=$Parser_addr; //@line 302 "expression.c"
 var $11=$StackTop_addr; //@line 302 "expression.c"
 var $12=$ValueLoc; //@line 302 "expression.c"
 _ExpressionStackPushValueNode($10,$11,$12); //@line 302 "expression.c"
 STACKTOP=sp;return; //@line 303 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionPushInt($Parser,$StackTop,$IntValue){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $IntValue_addr;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $IntValue_addr=$IntValue;
 var $0=$Parser_addr; //@line 307 "expression.c"
 var $call=_VariableAllocValueFromType($0,18408,0,0,0); //@line 307 "expression.c"
 $ValueLoc=$call; //@line 307 "expression.c"
 var $1=$IntValue_addr; //@line 308 "expression.c"
 var $2=$ValueLoc; //@line 308 "expression.c"
 var $Val=(($2+4)|0); //@line 308 "expression.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 308 "expression.c"
 var $Integer=$3; //@line 308 "expression.c"
 HEAP32[(($Integer)>>2)]=$1; //@line 308 "expression.c"
 var $4=$Parser_addr; //@line 309 "expression.c"
 var $5=$StackTop_addr; //@line 309 "expression.c"
 var $6=$ValueLoc; //@line 309 "expression.c"
 _ExpressionStackPushValueNode($4,$5,$6); //@line 309 "expression.c"
 return; //@line 310 "expression.c"
}
function _ExpressionPushFP($Parser,$StackTop,$FPValue){
 var label=0;
 var $Parser_addr;
 var $StackTop_addr;
 var $FPValue_addr;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $FPValue_addr=$FPValue;
 var $0=$Parser_addr; //@line 315 "expression.c"
 var $call=_VariableAllocValueFromType($0,19032,0,0,0); //@line 315 "expression.c"
 $ValueLoc=$call; //@line 315 "expression.c"
 var $1=$FPValue_addr; //@line 316 "expression.c"
 var $2=$ValueLoc; //@line 316 "expression.c"
 var $Val=(($2+4)|0); //@line 316 "expression.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 316 "expression.c"
 var $FP=$3; //@line 316 "expression.c"
 HEAPF64[(($FP)>>3)]=$1; //@line 316 "expression.c"
 var $4=$Parser_addr; //@line 317 "expression.c"
 var $5=$StackTop_addr; //@line 317 "expression.c"
 var $6=$ValueLoc; //@line 317 "expression.c"
 _ExpressionStackPushValueNode($4,$5,$6); //@line 317 "expression.c"
 return; //@line 318 "expression.c"
}
function _ExpressionAssignToPointer($Parser,$ToValue,$FromValue,$FuncName,$ParamNo,$AllowPointerCoercion){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $ToValue_addr;
 var $FromValue_addr;
 var $FuncName_addr;
 var $ParamNo_addr;
 var $AllowPointerCoercion_addr;
 var $PointedToType;
 $Parser_addr=$Parser;
 $ToValue_addr=$ToValue;
 $FromValue_addr=$FromValue;
 $FuncName_addr=$FuncName;
 $ParamNo_addr=$ParamNo;
 $AllowPointerCoercion_addr=$AllowPointerCoercion;
 var $0=$ToValue_addr; //@line 324 "expression.c"
 var $Typ=(($0)|0); //@line 324 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 324 "expression.c"
 var $FromType=(($1+20)|0); //@line 324 "expression.c"
 var $2=HEAP32[(($FromType)>>2)]; //@line 324 "expression.c"
 $PointedToType=$2; //@line 324 "expression.c"
 var $3=$FromValue_addr; //@line 326 "expression.c"
 var $Typ1=(($3)|0); //@line 326 "expression.c"
 var $4=HEAP32[(($Typ1)>>2)]; //@line 326 "expression.c"
 var $5=$ToValue_addr; //@line 326 "expression.c"
 var $Typ2=(($5)|0); //@line 326 "expression.c"
 var $6=HEAP32[(($Typ2)>>2)]; //@line 326 "expression.c"
 var $cmp=($4|0)==($6|0); //@line 326 "expression.c"
 if($cmp){label=5;break;}else{label=2;break;} //@line 326 "expression.c"
 case 2: 
 var $7=$FromValue_addr; //@line 326 "expression.c"
 var $Typ3=(($7)|0); //@line 326 "expression.c"
 var $8=HEAP32[(($Typ3)>>2)]; //@line 326 "expression.c"
 var $9=HEAP32[((16904)>>2)]; //@line 326 "expression.c"
 var $cmp4=($8|0)==($9|0); //@line 326 "expression.c"
 if($cmp4){label=5;break;}else{label=3;break;} //@line 326 "expression.c"
 case 3: 
 var $10=$ToValue_addr; //@line 326 "expression.c"
 var $Typ6=(($10)|0); //@line 326 "expression.c"
 var $11=HEAP32[(($Typ6)>>2)]; //@line 326 "expression.c"
 var $12=HEAP32[((16904)>>2)]; //@line 326 "expression.c"
 var $cmp7=($11|0)==($12|0); //@line 326 "expression.c"
 if($cmp7){label=4;break;}else{label=6;break;} //@line 326 "expression.c"
 case 4: 
 var $13=$FromValue_addr; //@line 326 "expression.c"
 var $Typ8=(($13)|0); //@line 326 "expression.c"
 var $14=HEAP32[(($Typ8)>>2)]; //@line 326 "expression.c"
 var $Base=(($14)|0); //@line 326 "expression.c"
 var $15=HEAP32[(($Base)>>2)]; //@line 326 "expression.c"
 var $cmp9=($15|0)==11; //@line 326 "expression.c"
 if($cmp9){label=5;break;}else{label=6;break;} //@line 326 "expression.c"
 case 5: 
 var $16=$FromValue_addr; //@line 327 "expression.c"
 var $Val=(($16+4)|0); //@line 327 "expression.c"
 var $17=HEAP32[(($Val)>>2)]; //@line 327 "expression.c"
 var $Pointer=$17; //@line 327 "expression.c"
 var $18=HEAP32[(($Pointer)>>2)]; //@line 327 "expression.c"
 var $19=$ToValue_addr; //@line 327 "expression.c"
 var $Val10=(($19+4)|0); //@line 327 "expression.c"
 var $20=HEAP32[(($Val10)>>2)]; //@line 327 "expression.c"
 var $Pointer11=$20; //@line 327 "expression.c"
 HEAP32[(($Pointer11)>>2)]=$18; //@line 327 "expression.c"
 label=34;break; //@line 327 "expression.c"
 case 6: 
 var $21=$FromValue_addr; //@line 329 "expression.c"
 var $Typ12=(($21)|0); //@line 329 "expression.c"
 var $22=HEAP32[(($Typ12)>>2)]; //@line 329 "expression.c"
 var $Base13=(($22)|0); //@line 329 "expression.c"
 var $23=HEAP32[(($Base13)>>2)]; //@line 329 "expression.c"
 var $cmp14=($23|0)==12; //@line 329 "expression.c"
 if($cmp14){label=7;break;}else{label=10;break;} //@line 329 "expression.c"
 case 7: 
 var $24=$PointedToType; //@line 329 "expression.c"
 var $25=$FromValue_addr; //@line 329 "expression.c"
 var $Typ16=(($25)|0); //@line 329 "expression.c"
 var $26=HEAP32[(($Typ16)>>2)]; //@line 329 "expression.c"
 var $FromType17=(($26+20)|0); //@line 329 "expression.c"
 var $27=HEAP32[(($FromType17)>>2)]; //@line 329 "expression.c"
 var $cmp18=($24|0)==($27|0); //@line 329 "expression.c"
 if($cmp18){label=9;break;}else{label=8;break;} //@line 329 "expression.c"
 case 8: 
 var $28=$ToValue_addr; //@line 329 "expression.c"
 var $Typ20=(($28)|0); //@line 329 "expression.c"
 var $29=HEAP32[(($Typ20)>>2)]; //@line 329 "expression.c"
 var $30=HEAP32[((16904)>>2)]; //@line 329 "expression.c"
 var $cmp21=($29|0)==($30|0); //@line 329 "expression.c"
 if($cmp21){label=9;break;}else{label=10;break;} //@line 329 "expression.c"
 case 9: 
 var $31=$FromValue_addr; //@line 332 "expression.c"
 var $Val23=(($31+4)|0); //@line 332 "expression.c"
 var $32=HEAP32[(($Val23)>>2)]; //@line 332 "expression.c"
 var $ArrayMem=$32; //@line 332 "expression.c"
 var $arrayidx=(($ArrayMem)|0); //@line 332 "expression.c"
 var $33=$ToValue_addr; //@line 332 "expression.c"
 var $Val24=(($33+4)|0); //@line 332 "expression.c"
 var $34=HEAP32[(($Val24)>>2)]; //@line 332 "expression.c"
 var $Pointer25=$34; //@line 332 "expression.c"
 HEAP32[(($Pointer25)>>2)]=$arrayidx; //@line 332 "expression.c"
 label=33;break; //@line 333 "expression.c"
 case 10: 
 var $35=$FromValue_addr; //@line 334 "expression.c"
 var $Typ27=(($35)|0); //@line 334 "expression.c"
 var $36=HEAP32[(($Typ27)>>2)]; //@line 334 "expression.c"
 var $Base28=(($36)|0); //@line 334 "expression.c"
 var $37=HEAP32[(($Base28)>>2)]; //@line 334 "expression.c"
 var $cmp29=($37|0)==11; //@line 334 "expression.c"
 if($cmp29){label=11;break;}else{label=15;break;} //@line 334 "expression.c"
 case 11: 
 var $38=$FromValue_addr; //@line 334 "expression.c"
 var $Typ31=(($38)|0); //@line 334 "expression.c"
 var $39=HEAP32[(($Typ31)>>2)]; //@line 334 "expression.c"
 var $FromType32=(($39+20)|0); //@line 334 "expression.c"
 var $40=HEAP32[(($FromType32)>>2)]; //@line 334 "expression.c"
 var $Base33=(($40)|0); //@line 334 "expression.c"
 var $41=HEAP32[(($Base33)>>2)]; //@line 334 "expression.c"
 var $cmp34=($41|0)==12; //@line 334 "expression.c"
 if($cmp34){label=12;break;}else{label=15;break;} //@line 334 "expression.c"
 case 12: 
 var $42=$PointedToType; //@line 334 "expression.c"
 var $43=$FromValue_addr; //@line 334 "expression.c"
 var $Typ36=(($43)|0); //@line 334 "expression.c"
 var $44=HEAP32[(($Typ36)>>2)]; //@line 334 "expression.c"
 var $FromType37=(($44+20)|0); //@line 334 "expression.c"
 var $45=HEAP32[(($FromType37)>>2)]; //@line 334 "expression.c"
 var $FromType38=(($45+20)|0); //@line 334 "expression.c"
 var $46=HEAP32[(($FromType38)>>2)]; //@line 334 "expression.c"
 var $cmp39=($42|0)==($46|0); //@line 334 "expression.c"
 if($cmp39){label=14;break;}else{label=13;break;} //@line 334 "expression.c"
 case 13: 
 var $47=$ToValue_addr; //@line 334 "expression.c"
 var $Typ41=(($47)|0); //@line 334 "expression.c"
 var $48=HEAP32[(($Typ41)>>2)]; //@line 334 "expression.c"
 var $49=HEAP32[((16904)>>2)]; //@line 334 "expression.c"
 var $cmp42=($48|0)==($49|0); //@line 334 "expression.c"
 if($cmp42){label=14;break;}else{label=15;break;} //@line 334 "expression.c"
 case 14: 
 var $50=$Parser_addr; //@line 338 "expression.c"
 var $51=$FromValue_addr; //@line 338 "expression.c"
 var $call=_VariableDereferencePointer($50,$51,0,0,0,0); //@line 338 "expression.c"
 var $52=$ToValue_addr; //@line 338 "expression.c"
 var $Val44=(($52+4)|0); //@line 338 "expression.c"
 var $53=HEAP32[(($Val44)>>2)]; //@line 338 "expression.c"
 var $Pointer45=$53; //@line 338 "expression.c"
 HEAP32[(($Pointer45)>>2)]=$call; //@line 338 "expression.c"
 label=32;break; //@line 339 "expression.c"
 case 15: 
 var $54=$FromValue_addr; //@line 340 "expression.c"
 var $Typ47=(($54)|0); //@line 340 "expression.c"
 var $55=HEAP32[(($Typ47)>>2)]; //@line 340 "expression.c"
 var $Base48=(($55)|0); //@line 340 "expression.c"
 var $56=HEAP32[(($Base48)>>2)]; //@line 340 "expression.c"
 var $cmp49=($56>>>0)>=1; //@line 340 "expression.c"
 if($cmp49){label=16;break;}else{label=17;break;} //@line 340 "expression.c"
 case 16: 
 var $57=$FromValue_addr; //@line 340 "expression.c"
 var $Typ51=(($57)|0); //@line 340 "expression.c"
 var $58=HEAP32[(($Typ51)>>2)]; //@line 340 "expression.c"
 var $Base52=(($58)|0); //@line 340 "expression.c"
 var $59=HEAP32[(($Base52)>>2)]; //@line 340 "expression.c"
 var $cmp53=($59>>>0)<=7; //@line 340 "expression.c"
 if($cmp53){label=18;break;}else{label=17;break;} //@line 340 "expression.c"
 case 17: 
 var $60=$FromValue_addr; //@line 340 "expression.c"
 var $Typ55=(($60)|0); //@line 340 "expression.c"
 var $61=HEAP32[(($Typ55)>>2)]; //@line 340 "expression.c"
 var $Base56=(($61)|0); //@line 340 "expression.c"
 var $62=HEAP32[(($Base56)>>2)]; //@line 340 "expression.c"
 var $cmp57=($62|0)==8; //@line 340 "expression.c"
 if($cmp57){label=18;break;}else{label=20;break;} //@line 340 "expression.c"
 case 18: 
 var $63=$FromValue_addr; //@line 340 "expression.c"
 var $call59=_ExpressionCoerceInteger($63); //@line 340 "expression.c"
 var $cmp60=($call59|0)==0; //@line 340 "expression.c"
 if($cmp60){label=19;break;}else{label=20;break;} //@line 340 "expression.c"
 case 19: 
 var $64=$ToValue_addr; //@line 343 "expression.c"
 var $Val62=(($64+4)|0); //@line 343 "expression.c"
 var $65=HEAP32[(($Val62)>>2)]; //@line 343 "expression.c"
 var $Pointer63=$65; //@line 343 "expression.c"
 HEAP32[(($Pointer63)>>2)]=0; //@line 343 "expression.c"
 label=31;break; //@line 344 "expression.c"
 case 20: 
 var $66=$AllowPointerCoercion_addr; //@line 345 "expression.c"
 var $tobool=($66|0)!=0; //@line 345 "expression.c"
 if($tobool){label=21;break;}else{label=25;break;} //@line 345 "expression.c"
 case 21: 
 var $67=$FromValue_addr; //@line 345 "expression.c"
 var $Typ66=(($67)|0); //@line 345 "expression.c"
 var $68=HEAP32[(($Typ66)>>2)]; //@line 345 "expression.c"
 var $Base67=(($68)|0); //@line 345 "expression.c"
 var $69=HEAP32[(($Base67)>>2)]; //@line 345 "expression.c"
 var $cmp68=($69>>>0)>=1; //@line 345 "expression.c"
 if($cmp68){label=22;break;}else{label=23;break;} //@line 345 "expression.c"
 case 22: 
 var $70=$FromValue_addr; //@line 345 "expression.c"
 var $Typ70=(($70)|0); //@line 345 "expression.c"
 var $71=HEAP32[(($Typ70)>>2)]; //@line 345 "expression.c"
 var $Base71=(($71)|0); //@line 345 "expression.c"
 var $72=HEAP32[(($Base71)>>2)]; //@line 345 "expression.c"
 var $cmp72=($72>>>0)<=7; //@line 345 "expression.c"
 if($cmp72){label=24;break;}else{label=23;break;} //@line 345 "expression.c"
 case 23: 
 var $73=$FromValue_addr; //@line 345 "expression.c"
 var $Typ74=(($73)|0); //@line 345 "expression.c"
 var $74=HEAP32[(($Typ74)>>2)]; //@line 345 "expression.c"
 var $Base75=(($74)|0); //@line 345 "expression.c"
 var $75=HEAP32[(($Base75)>>2)]; //@line 345 "expression.c"
 var $cmp76=($75|0)==8; //@line 345 "expression.c"
 if($cmp76){label=24;break;}else{label=25;break;} //@line 345 "expression.c"
 case 24: 
 var $76=$FromValue_addr; //@line 348 "expression.c"
 var $call78=_ExpressionCoerceUnsignedInteger($76); //@line 348 "expression.c"
 var $77=$call78; //@line 348 "expression.c"
 var $78=$ToValue_addr; //@line 348 "expression.c"
 var $Val79=(($78+4)|0); //@line 348 "expression.c"
 var $79=HEAP32[(($Val79)>>2)]; //@line 348 "expression.c"
 var $Pointer80=$79; //@line 348 "expression.c"
 HEAP32[(($Pointer80)>>2)]=$77; //@line 348 "expression.c"
 label=30;break; //@line 349 "expression.c"
 case 25: 
 var $80=$AllowPointerCoercion_addr; //@line 350 "expression.c"
 var $tobool82=($80|0)!=0; //@line 350 "expression.c"
 if($tobool82){label=26;break;}else{label=28;break;} //@line 350 "expression.c"
 case 26: 
 var $81=$FromValue_addr; //@line 350 "expression.c"
 var $Typ84=(($81)|0); //@line 350 "expression.c"
 var $82=HEAP32[(($Typ84)>>2)]; //@line 350 "expression.c"
 var $Base85=(($82)|0); //@line 350 "expression.c"
 var $83=HEAP32[(($Base85)>>2)]; //@line 350 "expression.c"
 var $cmp86=($83|0)==11; //@line 350 "expression.c"
 if($cmp86){label=27;break;}else{label=28;break;} //@line 350 "expression.c"
 case 27: 
 var $84=$FromValue_addr; //@line 353 "expression.c"
 var $Val88=(($84+4)|0); //@line 353 "expression.c"
 var $85=HEAP32[(($Val88)>>2)]; //@line 353 "expression.c"
 var $Pointer89=$85; //@line 353 "expression.c"
 var $86=HEAP32[(($Pointer89)>>2)]; //@line 353 "expression.c"
 var $87=$ToValue_addr; //@line 353 "expression.c"
 var $Val90=(($87+4)|0); //@line 353 "expression.c"
 var $88=HEAP32[(($Val90)>>2)]; //@line 353 "expression.c"
 var $Pointer91=$88; //@line 353 "expression.c"
 HEAP32[(($Pointer91)>>2)]=$86; //@line 353 "expression.c"
 label=29;break; //@line 354 "expression.c"
 case 28: 
 var $89=$Parser_addr; //@line 356 "expression.c"
 var $90=$ToValue_addr; //@line 356 "expression.c"
 var $Typ93=(($90)|0); //@line 356 "expression.c"
 var $91=HEAP32[(($Typ93)>>2)]; //@line 356 "expression.c"
 var $92=$FromValue_addr; //@line 356 "expression.c"
 var $Typ94=(($92)|0); //@line 356 "expression.c"
 var $93=HEAP32[(($Typ94)>>2)]; //@line 356 "expression.c"
 var $94=$FuncName_addr; //@line 356 "expression.c"
 var $95=$ParamNo_addr; //@line 356 "expression.c"
 _AssignFail($89,6992,$91,$93,0,0,$94,$95); //@line 356 "expression.c"
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 return; //@line 357 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionAssign($Parser,$DestValue,$SourceValue,$Force,$FuncName,$ParamNo,$AllowPointerCoercion){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $DestValue_addr;
 var $SourceValue_addr;
 var $Force_addr;
 var $FuncName_addr;
 var $ParamNo_addr;
 var $AllowPointerCoercion_addr;
 $Parser_addr=$Parser;
 $DestValue_addr=$DestValue;
 $SourceValue_addr=$SourceValue;
 $Force_addr=$Force;
 $FuncName_addr=$FuncName;
 $ParamNo_addr=$ParamNo;
 $AllowPointerCoercion_addr=$AllowPointerCoercion;
 var $0=$DestValue_addr; //@line 362 "expression.c"
 var $IsLValue=(($0+14)|0); //@line 362 "expression.c"
 var $1=HEAP8[($IsLValue)]; //@line 362 "expression.c"
 var $tobool=(($1<<24)>>24)!=0; //@line 362 "expression.c"
 if($tobool){label=4;break;}else{label=2;break;} //@line 362 "expression.c"
 case 2: 
 var $2=$Force_addr; //@line 362 "expression.c"
 var $tobool1=($2|0)!=0; //@line 362 "expression.c"
 if($tobool1){label=4;break;}else{label=3;break;} //@line 362 "expression.c"
 case 3: 
 var $3=$Parser_addr; //@line 363 "expression.c"
 var $4=$FuncName_addr; //@line 363 "expression.c"
 var $5=$ParamNo_addr; //@line 363 "expression.c"
 _AssignFail($3,5392,0,0,0,0,$4,$5); //@line 363 "expression.c"
 label=4;break; //@line 363 "expression.c"
 case 4: 
 var $6=$DestValue_addr; //@line 365 "expression.c"
 var $Typ=(($6)|0); //@line 365 "expression.c"
 var $7=HEAP32[(($Typ)>>2)]; //@line 365 "expression.c"
 var $Base=(($7)|0); //@line 365 "expression.c"
 var $8=HEAP32[(($Base)>>2)]; //@line 365 "expression.c"
 var $cmp=($8>>>0)>=1; //@line 365 "expression.c"
 if($cmp){label=5;break;}else{label=6;break;} //@line 365 "expression.c"
 case 5: 
 var $9=$DestValue_addr; //@line 365 "expression.c"
 var $Typ3=(($9)|0); //@line 365 "expression.c"
 var $10=HEAP32[(($Typ3)>>2)]; //@line 365 "expression.c"
 var $Base4=(($10)|0); //@line 365 "expression.c"
 var $11=HEAP32[(($Base4)>>2)]; //@line 365 "expression.c"
 var $cmp5=($11>>>0)<=7; //@line 365 "expression.c"
 if($cmp5){label=7;break;}else{label=6;break;} //@line 365 "expression.c"
 case 6: 
 var $12=$DestValue_addr; //@line 365 "expression.c"
 var $Typ6=(($12)|0); //@line 365 "expression.c"
 var $13=HEAP32[(($Typ6)>>2)]; //@line 365 "expression.c"
 var $Base7=(($13)|0); //@line 365 "expression.c"
 var $14=HEAP32[(($Base7)>>2)]; //@line 365 "expression.c"
 var $cmp8=($14|0)==8; //@line 365 "expression.c"
 if($cmp8){label=7;break;}else{label=14;break;} //@line 365 "expression.c"
 case 7: 
 var $15=$SourceValue_addr; //@line 365 "expression.c"
 var $Typ10=(($15)|0); //@line 365 "expression.c"
 var $16=HEAP32[(($Typ10)>>2)]; //@line 365 "expression.c"
 var $Base11=(($16)|0); //@line 365 "expression.c"
 var $17=HEAP32[(($Base11)>>2)]; //@line 365 "expression.c"
 var $cmp12=($17>>>0)>=1; //@line 365 "expression.c"
 if($cmp12){label=8;break;}else{label=9;break;} //@line 365 "expression.c"
 case 8: 
 var $18=$SourceValue_addr; //@line 365 "expression.c"
 var $Typ14=(($18)|0); //@line 365 "expression.c"
 var $19=HEAP32[(($Typ14)>>2)]; //@line 365 "expression.c"
 var $Base15=(($19)|0); //@line 365 "expression.c"
 var $20=HEAP32[(($Base15)>>2)]; //@line 365 "expression.c"
 var $cmp16=($20>>>0)<=7; //@line 365 "expression.c"
 if($cmp16){label=14;break;}else{label=9;break;} //@line 365 "expression.c"
 case 9: 
 var $21=$SourceValue_addr; //@line 365 "expression.c"
 var $Typ18=(($21)|0); //@line 365 "expression.c"
 var $22=HEAP32[(($Typ18)>>2)]; //@line 365 "expression.c"
 var $Base19=(($22)|0); //@line 365 "expression.c"
 var $23=HEAP32[(($Base19)>>2)]; //@line 365 "expression.c"
 var $cmp20=($23|0)==8; //@line 365 "expression.c"
 if($cmp20){label=14;break;}else{label=10;break;} //@line 365 "expression.c"
 case 10: 
 var $24=$AllowPointerCoercion_addr; //@line 365 "expression.c"
 var $tobool22=($24|0)!=0; //@line 365 "expression.c"
 if($tobool22){label=11;break;}else{label=12;break;} //@line 365 "expression.c"
 case 11: 
 var $25=$SourceValue_addr; //@line 365 "expression.c"
 var $Typ23=(($25)|0); //@line 365 "expression.c"
 var $26=HEAP32[(($Typ23)>>2)]; //@line 365 "expression.c"
 var $Base24=(($26)|0); //@line 365 "expression.c"
 var $27=HEAP32[(($Base24)>>2)]; //@line 365 "expression.c"
 var $cmp25=($27|0)==11; //@line 365 "expression.c"
 if($cmp25){label=14;break;}else{label=13;break;} //@line 365 "expression.c"
 case 12: 
 if(0){label=14;break;}else{label=13;break;} //@line 365 "expression.c"
 case 13: 
 var $28=$Parser_addr; //@line 366 "expression.c"
 var $29=$DestValue_addr; //@line 366 "expression.c"
 var $Typ27=(($29)|0); //@line 366 "expression.c"
 var $30=HEAP32[(($Typ27)>>2)]; //@line 366 "expression.c"
 var $31=$SourceValue_addr; //@line 366 "expression.c"
 var $Typ28=(($31)|0); //@line 366 "expression.c"
 var $32=HEAP32[(($Typ28)>>2)]; //@line 366 "expression.c"
 var $33=$FuncName_addr; //@line 366 "expression.c"
 var $34=$ParamNo_addr; //@line 366 "expression.c"
 _AssignFail($28,6992,$30,$32,0,0,$33,$34); //@line 366 "expression.c"
 label=14;break; //@line 366 "expression.c"
 case 14: 
 var $35=$DestValue_addr; //@line 368 "expression.c"
 var $Typ30=(($35)|0); //@line 368 "expression.c"
 var $36=HEAP32[(($Typ30)>>2)]; //@line 368 "expression.c"
 var $Base31=(($36)|0); //@line 368 "expression.c"
 var $37=HEAP32[(($Base31)>>2)]; //@line 368 "expression.c"
 switch(($37|0)){case 1:{ label=15;break;}case 2:{ label=16;break;}case 3:{ label=17;break;}case 4:{ label=18;break;}case 5:{ label=19;break;}case 6:{ label=20;break;}case 7:{ label=21;break;}case 8:{ label=22;break;}case 11:{ label=30;break;}case 12:{ label=31;break;}case 13:case 14:{ label=36;break;}default:{label=39;break;}}break;
 case 15: 
 var $38=$SourceValue_addr; //@line 370 "expression.c"
 var $call=_ExpressionCoerceInteger($38); //@line 370 "expression.c"
 var $39=$DestValue_addr; //@line 370 "expression.c"
 var $Val=(($39+4)|0); //@line 370 "expression.c"
 var $40=HEAP32[(($Val)>>2)]; //@line 370 "expression.c"
 var $Integer=$40; //@line 370 "expression.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 370 "expression.c"
 label=40;break; //@line 370 "expression.c"
 case 16: 
 var $41=$SourceValue_addr; //@line 371 "expression.c"
 var $call33=_ExpressionCoerceInteger($41); //@line 371 "expression.c"
 var $conv=(($call33)&65535); //@line 371 "expression.c"
 var $42=$DestValue_addr; //@line 371 "expression.c"
 var $Val34=(($42+4)|0); //@line 371 "expression.c"
 var $43=HEAP32[(($Val34)>>2)]; //@line 371 "expression.c"
 var $ShortInteger=$43; //@line 371 "expression.c"
 HEAP16[(($ShortInteger)>>1)]=$conv; //@line 371 "expression.c"
 label=40;break; //@line 371 "expression.c"
 case 17: 
 var $44=$SourceValue_addr; //@line 372 "expression.c"
 var $call36=_ExpressionCoerceUnsignedInteger($44); //@line 372 "expression.c"
 var $conv37=(($call36)&255); //@line 372 "expression.c"
 var $45=$DestValue_addr; //@line 372 "expression.c"
 var $Val38=(($45+4)|0); //@line 372 "expression.c"
 var $46=HEAP32[(($Val38)>>2)]; //@line 372 "expression.c"
 var $Character=$46; //@line 372 "expression.c"
 HEAP8[($Character)]=$conv37; //@line 372 "expression.c"
 label=40;break; //@line 372 "expression.c"
 case 18: 
 var $47=$SourceValue_addr; //@line 373 "expression.c"
 var $call40=_ExpressionCoerceInteger($47); //@line 373 "expression.c"
 var $48=$DestValue_addr; //@line 373 "expression.c"
 var $Val41=(($48+4)|0); //@line 373 "expression.c"
 var $49=HEAP32[(($Val41)>>2)]; //@line 373 "expression.c"
 var $LongInteger=$49; //@line 373 "expression.c"
 HEAP32[(($LongInteger)>>2)]=$call40; //@line 373 "expression.c"
 label=40;break; //@line 373 "expression.c"
 case 19: 
 var $50=$SourceValue_addr; //@line 374 "expression.c"
 var $call43=_ExpressionCoerceUnsignedInteger($50); //@line 374 "expression.c"
 var $51=$DestValue_addr; //@line 374 "expression.c"
 var $Val44=(($51+4)|0); //@line 374 "expression.c"
 var $52=HEAP32[(($Val44)>>2)]; //@line 374 "expression.c"
 var $UnsignedInteger=$52; //@line 374 "expression.c"
 HEAP32[(($UnsignedInteger)>>2)]=$call43; //@line 374 "expression.c"
 label=40;break; //@line 374 "expression.c"
 case 20: 
 var $53=$SourceValue_addr; //@line 375 "expression.c"
 var $call46=_ExpressionCoerceUnsignedInteger($53); //@line 375 "expression.c"
 var $conv47=(($call46)&65535); //@line 375 "expression.c"
 var $54=$DestValue_addr; //@line 375 "expression.c"
 var $Val48=(($54+4)|0); //@line 375 "expression.c"
 var $55=HEAP32[(($Val48)>>2)]; //@line 375 "expression.c"
 var $UnsignedShortInteger=$55; //@line 375 "expression.c"
 HEAP16[(($UnsignedShortInteger)>>1)]=$conv47; //@line 375 "expression.c"
 label=40;break; //@line 375 "expression.c"
 case 21: 
 var $56=$SourceValue_addr; //@line 376 "expression.c"
 var $call50=_ExpressionCoerceUnsignedInteger($56); //@line 376 "expression.c"
 var $57=$DestValue_addr; //@line 376 "expression.c"
 var $Val51=(($57+4)|0); //@line 376 "expression.c"
 var $58=HEAP32[(($Val51)>>2)]; //@line 376 "expression.c"
 var $UnsignedLongInteger=$58; //@line 376 "expression.c"
 HEAP32[(($UnsignedLongInteger)>>2)]=$call50; //@line 376 "expression.c"
 label=40;break; //@line 376 "expression.c"
 case 22: 
 var $59=$SourceValue_addr; //@line 380 "expression.c"
 var $Typ53=(($59)|0); //@line 380 "expression.c"
 var $60=HEAP32[(($Typ53)>>2)]; //@line 380 "expression.c"
 var $Base54=(($60)|0); //@line 380 "expression.c"
 var $61=HEAP32[(($Base54)>>2)]; //@line 380 "expression.c"
 var $cmp55=($61>>>0)>=1; //@line 380 "expression.c"
 if($cmp55){label=23;break;}else{label=24;break;} //@line 380 "expression.c"
 case 23: 
 var $62=$SourceValue_addr; //@line 380 "expression.c"
 var $Typ58=(($62)|0); //@line 380 "expression.c"
 var $63=HEAP32[(($Typ58)>>2)]; //@line 380 "expression.c"
 var $Base59=(($63)|0); //@line 380 "expression.c"
 var $64=HEAP32[(($Base59)>>2)]; //@line 380 "expression.c"
 var $cmp60=($64>>>0)<=7; //@line 380 "expression.c"
 if($cmp60){label=29;break;}else{label=24;break;} //@line 380 "expression.c"
 case 24: 
 var $65=$SourceValue_addr; //@line 380 "expression.c"
 var $Typ63=(($65)|0); //@line 380 "expression.c"
 var $66=HEAP32[(($Typ63)>>2)]; //@line 380 "expression.c"
 var $Base64=(($66)|0); //@line 380 "expression.c"
 var $67=HEAP32[(($Base64)>>2)]; //@line 380 "expression.c"
 var $cmp65=($67|0)==8; //@line 380 "expression.c"
 if($cmp65){label=29;break;}else{label=25;break;} //@line 380 "expression.c"
 case 25: 
 var $68=$AllowPointerCoercion_addr; //@line 380 "expression.c"
 var $tobool68=($68|0)!=0; //@line 380 "expression.c"
 if($tobool68){label=26;break;}else{label=27;break;} //@line 380 "expression.c"
 case 26: 
 var $69=$SourceValue_addr; //@line 380 "expression.c"
 var $Typ70=(($69)|0); //@line 380 "expression.c"
 var $70=HEAP32[(($Typ70)>>2)]; //@line 380 "expression.c"
 var $Base71=(($70)|0); //@line 380 "expression.c"
 var $71=HEAP32[(($Base71)>>2)]; //@line 380 "expression.c"
 var $cmp72=($71|0)==11; //@line 380 "expression.c"
 if($cmp72){label=29;break;}else{label=28;break;} //@line 380 "expression.c"
 case 27: 
 if(0){label=29;break;}else{label=28;break;} //@line 380 "expression.c"
 case 28: 
 var $72=$Parser_addr; //@line 381 "expression.c"
 var $73=$DestValue_addr; //@line 381 "expression.c"
 var $Typ76=(($73)|0); //@line 381 "expression.c"
 var $74=HEAP32[(($Typ76)>>2)]; //@line 381 "expression.c"
 var $75=$SourceValue_addr; //@line 381 "expression.c"
 var $Typ77=(($75)|0); //@line 381 "expression.c"
 var $76=HEAP32[(($Typ77)>>2)]; //@line 381 "expression.c"
 var $77=$FuncName_addr; //@line 381 "expression.c"
 var $78=$ParamNo_addr; //@line 381 "expression.c"
 _AssignFail($72,6992,$74,$76,0,0,$77,$78); //@line 381 "expression.c"
 label=29;break; //@line 381 "expression.c"
 case 29: 
 var $79=$SourceValue_addr; //@line 383 "expression.c"
 var $call79=_ExpressionCoerceFP($79); //@line 383 "expression.c"
 var $80=$DestValue_addr; //@line 383 "expression.c"
 var $Val80=(($80+4)|0); //@line 383 "expression.c"
 var $81=HEAP32[(($Val80)>>2)]; //@line 383 "expression.c"
 var $FP=$81; //@line 383 "expression.c"
 HEAPF64[(($FP)>>3)]=$call79; //@line 383 "expression.c"
 label=40;break; //@line 384 "expression.c"
 case 30: 
 var $82=$Parser_addr; //@line 387 "expression.c"
 var $83=$DestValue_addr; //@line 387 "expression.c"
 var $84=$SourceValue_addr; //@line 387 "expression.c"
 var $85=$FuncName_addr; //@line 387 "expression.c"
 var $86=$ParamNo_addr; //@line 387 "expression.c"
 var $87=$AllowPointerCoercion_addr; //@line 387 "expression.c"
 _ExpressionAssignToPointer($82,$83,$84,$85,$86,$87); //@line 387 "expression.c"
 label=40;break; //@line 388 "expression.c"
 case 31: 
 var $88=$DestValue_addr; //@line 391 "expression.c"
 var $Typ83=(($88)|0); //@line 391 "expression.c"
 var $89=HEAP32[(($Typ83)>>2)]; //@line 391 "expression.c"
 var $90=$SourceValue_addr; //@line 391 "expression.c"
 var $Typ84=(($90)|0); //@line 391 "expression.c"
 var $91=HEAP32[(($Typ84)>>2)]; //@line 391 "expression.c"
 var $cmp85=($89|0)!=($91|0); //@line 391 "expression.c"
 if($cmp85){label=32;break;}else{label=33;break;} //@line 391 "expression.c"
 case 32: 
 var $92=$Parser_addr; //@line 392 "expression.c"
 var $93=$DestValue_addr; //@line 392 "expression.c"
 var $Typ88=(($93)|0); //@line 392 "expression.c"
 var $94=HEAP32[(($Typ88)>>2)]; //@line 392 "expression.c"
 var $95=$SourceValue_addr; //@line 392 "expression.c"
 var $Typ89=(($95)|0); //@line 392 "expression.c"
 var $96=HEAP32[(($Typ89)>>2)]; //@line 392 "expression.c"
 var $97=$FuncName_addr; //@line 392 "expression.c"
 var $98=$ParamNo_addr; //@line 392 "expression.c"
 _AssignFail($92,6992,$94,$96,0,0,$97,$98); //@line 392 "expression.c"
 label=33;break; //@line 392 "expression.c"
 case 33: 
 var $99=$DestValue_addr; //@line 394 "expression.c"
 var $Typ91=(($99)|0); //@line 394 "expression.c"
 var $100=HEAP32[(($Typ91)>>2)]; //@line 394 "expression.c"
 var $ArraySize=(($100+4)|0); //@line 394 "expression.c"
 var $101=HEAP32[(($ArraySize)>>2)]; //@line 394 "expression.c"
 var $102=$SourceValue_addr; //@line 394 "expression.c"
 var $Typ92=(($102)|0); //@line 394 "expression.c"
 var $103=HEAP32[(($Typ92)>>2)]; //@line 394 "expression.c"
 var $ArraySize93=(($103+4)|0); //@line 394 "expression.c"
 var $104=HEAP32[(($ArraySize93)>>2)]; //@line 394 "expression.c"
 var $cmp94=($101|0)!=($104|0); //@line 394 "expression.c"
 if($cmp94){label=34;break;}else{label=35;break;} //@line 394 "expression.c"
 case 34: 
 var $105=$Parser_addr; //@line 395 "expression.c"
 var $106=$DestValue_addr; //@line 395 "expression.c"
 var $Typ97=(($106)|0); //@line 395 "expression.c"
 var $107=HEAP32[(($Typ97)>>2)]; //@line 395 "expression.c"
 var $ArraySize98=(($107+4)|0); //@line 395 "expression.c"
 var $108=HEAP32[(($ArraySize98)>>2)]; //@line 395 "expression.c"
 var $109=$SourceValue_addr; //@line 395 "expression.c"
 var $Typ99=(($109)|0); //@line 395 "expression.c"
 var $110=HEAP32[(($Typ99)>>2)]; //@line 395 "expression.c"
 var $ArraySize100=(($110+4)|0); //@line 395 "expression.c"
 var $111=HEAP32[(($ArraySize100)>>2)]; //@line 395 "expression.c"
 var $112=$FuncName_addr; //@line 395 "expression.c"
 var $113=$ParamNo_addr; //@line 395 "expression.c"
 _AssignFail($105,3768,0,0,$108,$111,$112,$113); //@line 395 "expression.c"
 label=35;break; //@line 395 "expression.c"
 case 35: 
 var $114=$DestValue_addr; //@line 397 "expression.c"
 var $Val102=(($114+4)|0); //@line 397 "expression.c"
 var $115=HEAP32[(($Val102)>>2)]; //@line 397 "expression.c"
 var $116=$115; //@line 397 "expression.c"
 var $117=$SourceValue_addr; //@line 397 "expression.c"
 var $Val103=(($117+4)|0); //@line 397 "expression.c"
 var $118=HEAP32[(($Val103)>>2)]; //@line 397 "expression.c"
 var $119=$118; //@line 397 "expression.c"
 var $120=$DestValue_addr; //@line 397 "expression.c"
 var $call104=_TypeSizeValue($120,0); //@line 397 "expression.c"
 assert($call104 % 1 === 0);(_memcpy($116, $119, $call104)|0); //@line 397 "expression.c"
 label=40;break; //@line 398 "expression.c"
 case 36: 
 var $121=$DestValue_addr; //@line 402 "expression.c"
 var $Typ106=(($121)|0); //@line 402 "expression.c"
 var $122=HEAP32[(($Typ106)>>2)]; //@line 402 "expression.c"
 var $123=$SourceValue_addr; //@line 402 "expression.c"
 var $Typ107=(($123)|0); //@line 402 "expression.c"
 var $124=HEAP32[(($Typ107)>>2)]; //@line 402 "expression.c"
 var $cmp108=($122|0)!=($124|0); //@line 402 "expression.c"
 if($cmp108){label=37;break;}else{label=38;break;} //@line 402 "expression.c"
 case 37: 
 var $125=$Parser_addr; //@line 403 "expression.c"
 var $126=$DestValue_addr; //@line 403 "expression.c"
 var $Typ111=(($126)|0); //@line 403 "expression.c"
 var $127=HEAP32[(($Typ111)>>2)]; //@line 403 "expression.c"
 var $128=$SourceValue_addr; //@line 403 "expression.c"
 var $Typ112=(($128)|0); //@line 403 "expression.c"
 var $129=HEAP32[(($Typ112)>>2)]; //@line 403 "expression.c"
 var $130=$FuncName_addr; //@line 403 "expression.c"
 var $131=$ParamNo_addr; //@line 403 "expression.c"
 _AssignFail($125,6992,$127,$129,0,0,$130,$131); //@line 403 "expression.c"
 label=38;break; //@line 403 "expression.c"
 case 38: 
 var $132=$DestValue_addr; //@line 405 "expression.c"
 var $Val114=(($132+4)|0); //@line 405 "expression.c"
 var $133=HEAP32[(($Val114)>>2)]; //@line 405 "expression.c"
 var $134=$133; //@line 405 "expression.c"
 var $135=$SourceValue_addr; //@line 405 "expression.c"
 var $Val115=(($135+4)|0); //@line 405 "expression.c"
 var $136=HEAP32[(($Val115)>>2)]; //@line 405 "expression.c"
 var $137=$136; //@line 405 "expression.c"
 var $138=$SourceValue_addr; //@line 405 "expression.c"
 var $call116=_TypeSizeValue($138,0); //@line 405 "expression.c"
 assert($call116 % 1 === 0);(_memcpy($134, $137, $call116)|0); //@line 405 "expression.c"
 label=40;break; //@line 406 "expression.c"
 case 39: 
 var $139=$Parser_addr; //@line 409 "expression.c"
 var $140=$DestValue_addr; //@line 409 "expression.c"
 var $Typ117=(($140)|0); //@line 409 "expression.c"
 var $141=HEAP32[(($Typ117)>>2)]; //@line 409 "expression.c"
 var $142=$FuncName_addr; //@line 409 "expression.c"
 var $143=$ParamNo_addr; //@line 409 "expression.c"
 _AssignFail($139,2560,$141,0,0,0,$142,$143); //@line 409 "expression.c"
 label=40;break; //@line 410 "expression.c"
 case 40: 
 return; //@line 412 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionQuestionMarkOperator($Parser,$StackTop,$BottomValue,$TopValue){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $BottomValue_addr;
 var $TopValue_addr;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $BottomValue_addr=$BottomValue;
 $TopValue_addr=$TopValue;
 var $0=$TopValue_addr; //@line 417 "expression.c"
 var $Typ=(($0)|0); //@line 417 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 417 "expression.c"
 var $Base=(($1)|0); //@line 417 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 417 "expression.c"
 var $cmp=($2>>>0)>=1; //@line 417 "expression.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 417 "expression.c"
 case 2: 
 var $3=$TopValue_addr; //@line 417 "expression.c"
 var $Typ1=(($3)|0); //@line 417 "expression.c"
 var $4=HEAP32[(($Typ1)>>2)]; //@line 417 "expression.c"
 var $Base2=(($4)|0); //@line 417 "expression.c"
 var $5=HEAP32[(($Base2)>>2)]; //@line 417 "expression.c"
 var $cmp3=($5>>>0)<=7; //@line 417 "expression.c"
 if($cmp3){label=5;break;}else{label=3;break;} //@line 417 "expression.c"
 case 3: 
 var $6=$TopValue_addr; //@line 417 "expression.c"
 var $Typ4=(($6)|0); //@line 417 "expression.c"
 var $7=HEAP32[(($Typ4)>>2)]; //@line 417 "expression.c"
 var $Base5=(($7)|0); //@line 417 "expression.c"
 var $8=HEAP32[(($Base5)>>2)]; //@line 417 "expression.c"
 var $cmp6=($8|0)==8; //@line 417 "expression.c"
 if($cmp6){label=5;break;}else{label=4;break;} //@line 417 "expression.c"
 case 4: 
 var $9=$Parser_addr; //@line 418 "expression.c"
 _ProgramFail($9,1552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 418 "expression.c"
 label=5;break; //@line 418 "expression.c"
 case 5: 
 var $10=$TopValue_addr; //@line 420 "expression.c"
 var $call=_ExpressionCoerceInteger($10); //@line 420 "expression.c"
 var $tobool=($call|0)!=0; //@line 420 "expression.c"
 if($tobool){label=6;break;}else{label=7;break;} //@line 420 "expression.c"
 case 6: 
 var $11=$Parser_addr; //@line 423 "expression.c"
 var $12=$StackTop_addr; //@line 423 "expression.c"
 var $13=$BottomValue_addr; //@line 423 "expression.c"
 _ExpressionStackPushValue($11,$12,$13); //@line 423 "expression.c"
 label=8;break; //@line 424 "expression.c"
 case 7: 
 var $14=$Parser_addr; //@line 428 "expression.c"
 var $15=$StackTop_addr; //@line 428 "expression.c"
 var $call8=_ExpressionStackPushValueByType($14,$15,16856); //@line 428 "expression.c"
 label=8;break;
 case 8: 
 STACKTOP=sp;return; //@line 430 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionColonOperator($Parser,$StackTop,$BottomValue,$TopValue){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $BottomValue_addr;
 var $TopValue_addr;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $BottomValue_addr=$BottomValue;
 $TopValue_addr=$TopValue;
 var $0=$TopValue_addr; //@line 435 "expression.c"
 var $Typ=(($0)|0); //@line 435 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 435 "expression.c"
 var $Base=(($1)|0); //@line 435 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 435 "expression.c"
 var $cmp=($2|0)==0; //@line 435 "expression.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 435 "expression.c"
 case 2: 
 var $3=$Parser_addr; //@line 438 "expression.c"
 var $4=$StackTop_addr; //@line 438 "expression.c"
 var $5=$BottomValue_addr; //@line 438 "expression.c"
 _ExpressionStackPushValue($3,$4,$5); //@line 438 "expression.c"
 label=4;break; //@line 439 "expression.c"
 case 3: 
 var $6=$Parser_addr; //@line 443 "expression.c"
 var $7=$StackTop_addr; //@line 443 "expression.c"
 var $8=$TopValue_addr; //@line 443 "expression.c"
 _ExpressionStackPushValue($6,$7,$8); //@line 443 "expression.c"
 label=4;break;
 case 4: 
 return; //@line 445 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionPrefixOperator($Parser,$StackTop,$Op,$TopValue){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $Op_addr;
 var $TopValue_addr;
 var $Result;
 var $ValPtr;
 var $ResultFP;
 var $ResultInt;
 var $TopInt;
 var $Size;
 var $StackValue;
 var $ResultPtr;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Op_addr=$Op;
 $TopValue_addr=$TopValue;
 _debugf(960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 453 "expression.c"
 var $0=$Op_addr; //@line 454 "expression.c"
 if(($0|0)==19){ label=2;break;}else if(($0|0)==30){ label=5;break;}else if(($0|0)==37){ label=6;break;}else{label=10;break;}
 case 2: 
 var $1=$TopValue_addr; //@line 457 "expression.c"
 var $IsLValue=(($1+14)|0); //@line 457 "expression.c"
 var $2=HEAP8[($IsLValue)]; //@line 457 "expression.c"
 var $tobool=(($2<<24)>>24)!=0; //@line 457 "expression.c"
 if($tobool){label=4;break;}else{label=3;break;} //@line 457 "expression.c"
 case 3: 
 var $3=$Parser_addr; //@line 458 "expression.c"
 _ProgramFail($3,512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 458 "expression.c"
 label=4;break; //@line 458 "expression.c"
 case 4: 
 var $4=$TopValue_addr; //@line 460 "expression.c"
 var $Val=(($4+4)|0); //@line 460 "expression.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 460 "expression.c"
 $ValPtr=$5; //@line 460 "expression.c"
 var $6=$Parser_addr; //@line 461 "expression.c"
 var $7=$Parser_addr; //@line 461 "expression.c"
 var $8=$TopValue_addr; //@line 461 "expression.c"
 var $Typ=(($8)|0); //@line 461 "expression.c"
 var $9=HEAP32[(($Typ)>>2)]; //@line 461 "expression.c"
 var $10=HEAP32[((17968)>>2)]; //@line 461 "expression.c"
 var $call=_TypeGetMatching($7,$9,11,0,$10,1); //@line 461 "expression.c"
 var $call1=_VariableAllocValueFromType($6,$call,0,0,0); //@line 461 "expression.c"
 $Result=$call1; //@line 461 "expression.c"
 var $11=$ValPtr; //@line 462 "expression.c"
 var $12=$11; //@line 462 "expression.c"
 var $13=$Result; //@line 462 "expression.c"
 var $Val2=(($13+4)|0); //@line 462 "expression.c"
 var $14=HEAP32[(($Val2)>>2)]; //@line 462 "expression.c"
 var $Pointer=$14; //@line 462 "expression.c"
 HEAP32[(($Pointer)>>2)]=$12; //@line 462 "expression.c"
 var $15=$Parser_addr; //@line 463 "expression.c"
 var $16=$StackTop_addr; //@line 463 "expression.c"
 var $17=$Result; //@line 463 "expression.c"
 _ExpressionStackPushValueNode($15,$16,$17); //@line 463 "expression.c"
 label=42;break; //@line 464 "expression.c"
 case 5: 
 var $18=$Parser_addr; //@line 467 "expression.c"
 var $19=$StackTop_addr; //@line 467 "expression.c"
 var $20=$TopValue_addr; //@line 467 "expression.c"
 _ExpressionStackPushDereference($18,$19,$20); //@line 467 "expression.c"
 label=42;break; //@line 468 "expression.c"
 case 6: 
 var $21=$TopValue_addr; //@line 472 "expression.c"
 var $Typ5=(($21)|0); //@line 472 "expression.c"
 var $22=HEAP32[(($Typ5)>>2)]; //@line 472 "expression.c"
 var $cmp=($22|0)==17112; //@line 472 "expression.c"
 if($cmp){label=7;break;}else{label=8;break;} //@line 472 "expression.c"
 case 7: 
 var $23=$Parser_addr; //@line 473 "expression.c"
 var $24=$StackTop_addr; //@line 473 "expression.c"
 var $25=$TopValue_addr; //@line 473 "expression.c"
 var $Val7=(($25+4)|0); //@line 473 "expression.c"
 var $26=HEAP32[(($Val7)>>2)]; //@line 473 "expression.c"
 var $Typ8=$26; //@line 473 "expression.c"
 var $27=HEAP32[(($Typ8)>>2)]; //@line 473 "expression.c"
 var $28=$TopValue_addr; //@line 473 "expression.c"
 var $Val9=(($28+4)|0); //@line 473 "expression.c"
 var $29=HEAP32[(($Val9)>>2)]; //@line 473 "expression.c"
 var $Typ10=$29; //@line 473 "expression.c"
 var $30=HEAP32[(($Typ10)>>2)]; //@line 473 "expression.c"
 var $ArraySize=(($30+4)|0); //@line 473 "expression.c"
 var $31=HEAP32[(($ArraySize)>>2)]; //@line 473 "expression.c"
 var $call11=_TypeSize($27,$31,1); //@line 473 "expression.c"
 _ExpressionPushInt($23,$24,$call11); //@line 473 "expression.c"
 label=9;break; //@line 473 "expression.c"
 case 8: 
 var $32=$Parser_addr; //@line 475 "expression.c"
 var $33=$StackTop_addr; //@line 475 "expression.c"
 var $34=$TopValue_addr; //@line 475 "expression.c"
 var $Typ12=(($34)|0); //@line 475 "expression.c"
 var $35=HEAP32[(($Typ12)>>2)]; //@line 475 "expression.c"
 var $36=$TopValue_addr; //@line 475 "expression.c"
 var $Typ13=(($36)|0); //@line 475 "expression.c"
 var $37=HEAP32[(($Typ13)>>2)]; //@line 475 "expression.c"
 var $ArraySize14=(($37+4)|0); //@line 475 "expression.c"
 var $38=HEAP32[(($ArraySize14)>>2)]; //@line 475 "expression.c"
 var $call15=_TypeSize($35,$38,1); //@line 475 "expression.c"
 _ExpressionPushInt($32,$33,$call15); //@line 475 "expression.c"
 label=9;break;
 case 9: 
 label=42;break; //@line 476 "expression.c"
 case 10: 
 var $39=$TopValue_addr; //@line 481 "expression.c"
 var $Typ17=(($39)|0); //@line 481 "expression.c"
 var $40=HEAP32[(($Typ17)>>2)]; //@line 481 "expression.c"
 var $cmp18=($40|0)==19032; //@line 481 "expression.c"
 if($cmp18){label=11;break;}else{label=16;break;} //@line 481 "expression.c"
 case 11: 
 $ResultFP=0; //@line 484 "expression.c"
 var $41=$Op_addr; //@line 486 "expression.c"
 if(($41|0)==28){ label=12;break;}else if(($41|0)==29){ label=13;break;}else{label=14;break;}
 case 12: 
 var $42=$TopValue_addr; //@line 488 "expression.c"
 var $Val21=(($42+4)|0); //@line 488 "expression.c"
 var $43=HEAP32[(($Val21)>>2)]; //@line 488 "expression.c"
 var $FP=$43; //@line 488 "expression.c"
 var $44=HEAPF64[(($FP)>>3)]; //@line 488 "expression.c"
 $ResultFP=$44; //@line 488 "expression.c"
 label=15;break; //@line 488 "expression.c"
 case 13: 
 var $45=$TopValue_addr; //@line 489 "expression.c"
 var $Val23=(($45+4)|0); //@line 489 "expression.c"
 var $46=HEAP32[(($Val23)>>2)]; //@line 489 "expression.c"
 var $FP24=$46; //@line 489 "expression.c"
 var $47=HEAPF64[(($FP24)>>3)]; //@line 489 "expression.c"
 var $sub=((-.0))-($47); //@line 489 "expression.c"
 $ResultFP=$sub; //@line 489 "expression.c"
 label=15;break; //@line 489 "expression.c"
 case 14: 
 var $48=$Parser_addr; //@line 490 "expression.c"
 _ProgramFail($48,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 490 "expression.c"
 label=15;break; //@line 490 "expression.c"
 case 15: 
 var $49=$Parser_addr; //@line 493 "expression.c"
 var $50=$StackTop_addr; //@line 493 "expression.c"
 var $51=$ResultFP; //@line 493 "expression.c"
 _ExpressionPushFP($49,$50,$51); //@line 493 "expression.c"
 label=41;break; //@line 494 "expression.c"
 case 16: 
 var $52=$TopValue_addr; //@line 497 "expression.c"
 var $Typ27=(($52)|0); //@line 497 "expression.c"
 var $53=HEAP32[(($Typ27)>>2)]; //@line 497 "expression.c"
 var $Base=(($53)|0); //@line 497 "expression.c"
 var $54=HEAP32[(($Base)>>2)]; //@line 497 "expression.c"
 var $cmp28=($54>>>0)>=1; //@line 497 "expression.c"
 if($cmp28){label=17;break;}else{label=18;break;} //@line 497 "expression.c"
 case 17: 
 var $55=$TopValue_addr; //@line 497 "expression.c"
 var $Typ29=(($55)|0); //@line 497 "expression.c"
 var $56=HEAP32[(($Typ29)>>2)]; //@line 497 "expression.c"
 var $Base30=(($56)|0); //@line 497 "expression.c"
 var $57=HEAP32[(($Base30)>>2)]; //@line 497 "expression.c"
 var $cmp31=($57>>>0)<=7; //@line 497 "expression.c"
 if($cmp31){label=19;break;}else{label=18;break;} //@line 497 "expression.c"
 case 18: 
 var $58=$TopValue_addr; //@line 497 "expression.c"
 var $Typ32=(($58)|0); //@line 497 "expression.c"
 var $59=HEAP32[(($Typ32)>>2)]; //@line 497 "expression.c"
 var $Base33=(($59)|0); //@line 497 "expression.c"
 var $60=HEAP32[(($Base33)>>2)]; //@line 497 "expression.c"
 var $cmp34=($60|0)==8; //@line 497 "expression.c"
 if($cmp34){label=19;break;}else{label=28;break;} //@line 497 "expression.c"
 case 19: 
 $ResultInt=0; //@line 500 "expression.c"
 var $61=$TopValue_addr; //@line 501 "expression.c"
 var $call36=_ExpressionCoerceInteger($61); //@line 501 "expression.c"
 $TopInt=$call36; //@line 501 "expression.c"
 var $62=$Op_addr; //@line 502 "expression.c"
 switch(($62|0)){case 28:{ label=20;break;}case 29:{ label=21;break;}case 33:{ label=22;break;}case 34:{ label=23;break;}case 35:{ label=24;break;}case 36:{ label=25;break;}default:{label=26;break;}}break;
 case 20: 
 var $63=$TopInt; //@line 504 "expression.c"
 $ResultInt=$63; //@line 504 "expression.c"
 label=27;break; //@line 504 "expression.c"
 case 21: 
 var $64=$TopInt; //@line 505 "expression.c"
 var $sub39=(((-$64))|0); //@line 505 "expression.c"
 $ResultInt=$sub39; //@line 505 "expression.c"
 label=27;break; //@line 505 "expression.c"
 case 22: 
 var $65=$Parser_addr; //@line 506 "expression.c"
 var $66=$TopValue_addr; //@line 506 "expression.c"
 var $67=$TopInt; //@line 506 "expression.c"
 var $add=((($67)+(1))|0); //@line 506 "expression.c"
 var $call41=_ExpressionAssignInt($65,$66,$add,0); //@line 506 "expression.c"
 $ResultInt=$call41; //@line 506 "expression.c"
 label=27;break; //@line 506 "expression.c"
 case 23: 
 var $68=$Parser_addr; //@line 507 "expression.c"
 var $69=$TopValue_addr; //@line 507 "expression.c"
 var $70=$TopInt; //@line 507 "expression.c"
 var $sub43=((($70)-(1))|0); //@line 507 "expression.c"
 var $call44=_ExpressionAssignInt($68,$69,$sub43,0); //@line 507 "expression.c"
 $ResultInt=$call44; //@line 507 "expression.c"
 label=27;break; //@line 507 "expression.c"
 case 24: 
 var $71=$TopInt; //@line 508 "expression.c"
 var $tobool46=($71|0)!=0; //@line 508 "expression.c"
 var $lnot=$tobool46^1; //@line 508 "expression.c"
 var $lnot_ext=($lnot&1); //@line 508 "expression.c"
 $ResultInt=$lnot_ext; //@line 508 "expression.c"
 label=27;break; //@line 508 "expression.c"
 case 25: 
 var $72=$TopInt; //@line 509 "expression.c"
 var $neg=$72^-1; //@line 509 "expression.c"
 $ResultInt=$neg; //@line 509 "expression.c"
 label=27;break; //@line 509 "expression.c"
 case 26: 
 var $73=$Parser_addr; //@line 510 "expression.c"
 _ProgramFail($73,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 510 "expression.c"
 label=27;break; //@line 510 "expression.c"
 case 27: 
 var $74=$Parser_addr; //@line 513 "expression.c"
 var $75=$StackTop_addr; //@line 513 "expression.c"
 var $76=$ResultInt; //@line 513 "expression.c"
 _ExpressionPushInt($74,$75,$76); //@line 513 "expression.c"
 label=40;break; //@line 514 "expression.c"
 case 28: 
 var $77=$TopValue_addr; //@line 515 "expression.c"
 var $Typ51=(($77)|0); //@line 515 "expression.c"
 var $78=HEAP32[(($Typ51)>>2)]; //@line 515 "expression.c"
 var $Base52=(($78)|0); //@line 515 "expression.c"
 var $79=HEAP32[(($Base52)>>2)]; //@line 515 "expression.c"
 var $cmp53=($79|0)==11; //@line 515 "expression.c"
 if($cmp53){label=29;break;}else{label=38;break;} //@line 515 "expression.c"
 case 29: 
 var $80=$TopValue_addr; //@line 518 "expression.c"
 var $Typ55=(($80)|0); //@line 518 "expression.c"
 var $81=HEAP32[(($Typ55)>>2)]; //@line 518 "expression.c"
 var $FromType=(($81+20)|0); //@line 518 "expression.c"
 var $82=HEAP32[(($FromType)>>2)]; //@line 518 "expression.c"
 var $call56=_TypeSize($82,0,1); //@line 518 "expression.c"
 $Size=$call56; //@line 518 "expression.c"
 var $83=$TopValue_addr; //@line 522 "expression.c"
 var $Val57=(($83+4)|0); //@line 522 "expression.c"
 var $84=HEAP32[(($Val57)>>2)]; //@line 522 "expression.c"
 var $Pointer58=$84; //@line 522 "expression.c"
 var $85=HEAP32[(($Pointer58)>>2)]; //@line 522 "expression.c"
 var $cmp59=($85|0)==0; //@line 522 "expression.c"
 if($cmp59){label=30;break;}else{label=31;break;} //@line 522 "expression.c"
 case 30: 
 var $86=$Parser_addr; //@line 523 "expression.c"
 _ProgramFail($86,11736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 523 "expression.c"
 label=31;break; //@line 523 "expression.c"
 case 31: 
 var $87=$TopValue_addr; //@line 525 "expression.c"
 var $IsLValue62=(($87+14)|0); //@line 525 "expression.c"
 var $88=HEAP8[($IsLValue62)]; //@line 525 "expression.c"
 var $tobool63=(($88<<24)>>24)!=0; //@line 525 "expression.c"
 if($tobool63){label=33;break;}else{label=32;break;} //@line 525 "expression.c"
 case 32: 
 var $89=$Parser_addr; //@line 526 "expression.c"
 _ProgramFail($89,552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 526 "expression.c"
 label=33;break; //@line 526 "expression.c"
 case 33: 
 var $90=$Op_addr; //@line 528 "expression.c"
 if(($90|0)==33){ label=34;break;}else if(($90|0)==34){ label=35;break;}else{label=36;break;}
 case 34: 
 var $91=$TopValue_addr; //@line 530 "expression.c"
 var $Val67=(($91+4)|0); //@line 530 "expression.c"
 var $92=HEAP32[(($Val67)>>2)]; //@line 530 "expression.c"
 var $Pointer68=$92; //@line 530 "expression.c"
 var $93=HEAP32[(($Pointer68)>>2)]; //@line 530 "expression.c"
 var $94=$Size; //@line 530 "expression.c"
 var $add_ptr=(($93+$94)|0); //@line 530 "expression.c"
 var $95=$TopValue_addr; //@line 530 "expression.c"
 var $Val69=(($95+4)|0); //@line 530 "expression.c"
 var $96=HEAP32[(($Val69)>>2)]; //@line 530 "expression.c"
 var $Pointer70=$96; //@line 530 "expression.c"
 HEAP32[(($Pointer70)>>2)]=$add_ptr; //@line 530 "expression.c"
 label=37;break; //@line 530 "expression.c"
 case 35: 
 var $97=$TopValue_addr; //@line 531 "expression.c"
 var $Val72=(($97+4)|0); //@line 531 "expression.c"
 var $98=HEAP32[(($Val72)>>2)]; //@line 531 "expression.c"
 var $Pointer73=$98; //@line 531 "expression.c"
 var $99=HEAP32[(($Pointer73)>>2)]; //@line 531 "expression.c"
 var $100=$Size; //@line 531 "expression.c"
 var $idx_neg=(((-$100))|0); //@line 531 "expression.c"
 var $add_ptr74=(($99+$idx_neg)|0); //@line 531 "expression.c"
 var $101=$TopValue_addr; //@line 531 "expression.c"
 var $Val75=(($101+4)|0); //@line 531 "expression.c"
 var $102=HEAP32[(($Val75)>>2)]; //@line 531 "expression.c"
 var $Pointer76=$102; //@line 531 "expression.c"
 HEAP32[(($Pointer76)>>2)]=$add_ptr74; //@line 531 "expression.c"
 label=37;break; //@line 531 "expression.c"
 case 36: 
 var $103=$Parser_addr; //@line 532 "expression.c"
 _ProgramFail($103,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 532 "expression.c"
 label=37;break; //@line 532 "expression.c"
 case 37: 
 var $104=$TopValue_addr; //@line 535 "expression.c"
 var $Val79=(($104+4)|0); //@line 535 "expression.c"
 var $105=HEAP32[(($Val79)>>2)]; //@line 535 "expression.c"
 var $Pointer80=$105; //@line 535 "expression.c"
 var $106=HEAP32[(($Pointer80)>>2)]; //@line 535 "expression.c"
 $ResultPtr=$106; //@line 535 "expression.c"
 var $107=$Parser_addr; //@line 536 "expression.c"
 var $108=$StackTop_addr; //@line 536 "expression.c"
 var $109=$TopValue_addr; //@line 536 "expression.c"
 var $Typ81=(($109)|0); //@line 536 "expression.c"
 var $110=HEAP32[(($Typ81)>>2)]; //@line 536 "expression.c"
 var $call82=_ExpressionStackPushValueByType($107,$108,$110); //@line 536 "expression.c"
 $StackValue=$call82; //@line 536 "expression.c"
 var $111=$ResultPtr; //@line 537 "expression.c"
 var $112=$StackValue; //@line 537 "expression.c"
 var $Val83=(($112+4)|0); //@line 537 "expression.c"
 var $113=HEAP32[(($Val83)>>2)]; //@line 537 "expression.c"
 var $Pointer84=$113; //@line 537 "expression.c"
 HEAP32[(($Pointer84)>>2)]=$111; //@line 537 "expression.c"
 label=39;break; //@line 538 "expression.c"
 case 38: 
 var $114=$Parser_addr; //@line 540 "expression.c"
 _ProgramFail($114,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 540 "expression.c"
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break; //@line 541 "expression.c"
 case 42: 
 STACKTOP=sp;return; //@line 543 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionPostfixOperator($Parser,$StackTop,$Op,$TopValue){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $Op_addr;
 var $TopValue_addr;
 var $ResultInt;
 var $TopInt;
 var $Size;
 var $StackValue;
 var $OrigPointer;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Op_addr=$Op;
 $TopValue_addr=$TopValue;
 _debugf(11680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 548 "expression.c"
 var $0=$TopValue_addr; //@line 549 "expression.c"
 var $Typ=(($0)|0); //@line 549 "expression.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 549 "expression.c"
 var $Base=(($1)|0); //@line 549 "expression.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 549 "expression.c"
 var $cmp=($2>>>0)>=1; //@line 549 "expression.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 549 "expression.c"
 case 2: 
 var $3=$TopValue_addr; //@line 549 "expression.c"
 var $Typ1=(($3)|0); //@line 549 "expression.c"
 var $4=HEAP32[(($Typ1)>>2)]; //@line 549 "expression.c"
 var $Base2=(($4)|0); //@line 549 "expression.c"
 var $5=HEAP32[(($Base2)>>2)]; //@line 549 "expression.c"
 var $cmp3=($5>>>0)<=7; //@line 549 "expression.c"
 if($cmp3){label=4;break;}else{label=3;break;} //@line 549 "expression.c"
 case 3: 
 var $6=$TopValue_addr; //@line 549 "expression.c"
 var $Typ4=(($6)|0); //@line 549 "expression.c"
 var $7=HEAP32[(($Typ4)>>2)]; //@line 549 "expression.c"
 var $Base5=(($7)|0); //@line 549 "expression.c"
 var $8=HEAP32[(($Base5)>>2)]; //@line 549 "expression.c"
 var $cmp6=($8|0)==8; //@line 549 "expression.c"
 if($cmp6){label=4;break;}else{label=11;break;} //@line 549 "expression.c"
 case 4: 
 $ResultInt=0; //@line 551 "expression.c"
 var $9=$TopValue_addr; //@line 552 "expression.c"
 var $call=_ExpressionCoerceInteger($9); //@line 552 "expression.c"
 $TopInt=$call; //@line 552 "expression.c"
 var $10=$Op_addr; //@line 553 "expression.c"
 if(($10|0)==33){ label=5;break;}else if(($10|0)==34){ label=6;break;}else if(($10|0)==40){ label=7;break;}else if(($10|0)==44){ label=8;break;}else{label=9;break;}
 case 5: 
 var $11=$Parser_addr; //@line 555 "expression.c"
 var $12=$TopValue_addr; //@line 555 "expression.c"
 var $13=$TopInt; //@line 555 "expression.c"
 var $add=((($13)+(1))|0); //@line 555 "expression.c"
 var $call7=_ExpressionAssignInt($11,$12,$add,1); //@line 555 "expression.c"
 $ResultInt=$call7; //@line 555 "expression.c"
 label=10;break; //@line 555 "expression.c"
 case 6: 
 var $14=$Parser_addr; //@line 556 "expression.c"
 var $15=$TopValue_addr; //@line 556 "expression.c"
 var $16=$TopInt; //@line 556 "expression.c"
 var $sub=((($16)-(1))|0); //@line 556 "expression.c"
 var $call9=_ExpressionAssignInt($14,$15,$sub,1); //@line 556 "expression.c"
 $ResultInt=$call9; //@line 556 "expression.c"
 label=10;break; //@line 556 "expression.c"
 case 7: 
 var $17=$Parser_addr; //@line 557 "expression.c"
 _ProgramFail($17,11336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 557 "expression.c"
 label=10;break; //@line 557 "expression.c"
 case 8: 
 var $18=$Parser_addr; //@line 558 "expression.c"
 _ProgramFail($18,11336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 558 "expression.c"
 label=10;break; //@line 558 "expression.c"
 case 9: 
 var $19=$Parser_addr; //@line 559 "expression.c"
 _ProgramFail($19,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 559 "expression.c"
 label=10;break; //@line 559 "expression.c"
 case 10: 
 var $20=$Parser_addr; //@line 562 "expression.c"
 var $21=$StackTop_addr; //@line 562 "expression.c"
 var $22=$ResultInt; //@line 562 "expression.c"
 _ExpressionPushInt($20,$21,$22); //@line 562 "expression.c"
 label=23;break; //@line 563 "expression.c"
 case 11: 
 var $23=$TopValue_addr; //@line 564 "expression.c"
 var $Typ12=(($23)|0); //@line 564 "expression.c"
 var $24=HEAP32[(($Typ12)>>2)]; //@line 564 "expression.c"
 var $Base13=(($24)|0); //@line 564 "expression.c"
 var $25=HEAP32[(($Base13)>>2)]; //@line 564 "expression.c"
 var $cmp14=($25|0)==11; //@line 564 "expression.c"
 if($cmp14){label=12;break;}else{label=21;break;} //@line 564 "expression.c"
 case 12: 
 var $26=$TopValue_addr; //@line 567 "expression.c"
 var $Typ16=(($26)|0); //@line 567 "expression.c"
 var $27=HEAP32[(($Typ16)>>2)]; //@line 567 "expression.c"
 var $FromType=(($27+20)|0); //@line 567 "expression.c"
 var $28=HEAP32[(($FromType)>>2)]; //@line 567 "expression.c"
 var $call17=_TypeSize($28,0,1); //@line 567 "expression.c"
 $Size=$call17; //@line 567 "expression.c"
 var $29=$TopValue_addr; //@line 569 "expression.c"
 var $Val=(($29+4)|0); //@line 569 "expression.c"
 var $30=HEAP32[(($Val)>>2)]; //@line 569 "expression.c"
 var $Pointer=$30; //@line 569 "expression.c"
 var $31=HEAP32[(($Pointer)>>2)]; //@line 569 "expression.c"
 $OrigPointer=$31; //@line 569 "expression.c"
 var $32=$TopValue_addr; //@line 571 "expression.c"
 var $Val18=(($32+4)|0); //@line 571 "expression.c"
 var $33=HEAP32[(($Val18)>>2)]; //@line 571 "expression.c"
 var $Pointer19=$33; //@line 571 "expression.c"
 var $34=HEAP32[(($Pointer19)>>2)]; //@line 571 "expression.c"
 var $cmp20=($34|0)==0; //@line 571 "expression.c"
 if($cmp20){label=13;break;}else{label=14;break;} //@line 571 "expression.c"
 case 13: 
 var $35=$Parser_addr; //@line 572 "expression.c"
 _ProgramFail($35,11736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 572 "expression.c"
 label=14;break; //@line 572 "expression.c"
 case 14: 
 var $36=$TopValue_addr; //@line 574 "expression.c"
 var $IsLValue=(($36+14)|0); //@line 574 "expression.c"
 var $37=HEAP8[($IsLValue)]; //@line 574 "expression.c"
 var $tobool=(($37<<24)>>24)!=0; //@line 574 "expression.c"
 if($tobool){label=16;break;}else{label=15;break;} //@line 574 "expression.c"
 case 15: 
 var $38=$Parser_addr; //@line 575 "expression.c"
 _ProgramFail($38,552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 575 "expression.c"
 label=16;break; //@line 575 "expression.c"
 case 16: 
 var $39=$Op_addr; //@line 577 "expression.c"
 if(($39|0)==33){ label=17;break;}else if(($39|0)==34){ label=18;break;}else{label=19;break;}
 case 17: 
 var $40=$TopValue_addr; //@line 579 "expression.c"
 var $Val25=(($40+4)|0); //@line 579 "expression.c"
 var $41=HEAP32[(($Val25)>>2)]; //@line 579 "expression.c"
 var $Pointer26=$41; //@line 579 "expression.c"
 var $42=HEAP32[(($Pointer26)>>2)]; //@line 579 "expression.c"
 var $43=$Size; //@line 579 "expression.c"
 var $add_ptr=(($42+$43)|0); //@line 579 "expression.c"
 var $44=$TopValue_addr; //@line 579 "expression.c"
 var $Val27=(($44+4)|0); //@line 579 "expression.c"
 var $45=HEAP32[(($Val27)>>2)]; //@line 579 "expression.c"
 var $Pointer28=$45; //@line 579 "expression.c"
 HEAP32[(($Pointer28)>>2)]=$add_ptr; //@line 579 "expression.c"
 label=20;break; //@line 579 "expression.c"
 case 18: 
 var $46=$TopValue_addr; //@line 580 "expression.c"
 var $Val30=(($46+4)|0); //@line 580 "expression.c"
 var $47=HEAP32[(($Val30)>>2)]; //@line 580 "expression.c"
 var $Pointer31=$47; //@line 580 "expression.c"
 var $48=HEAP32[(($Pointer31)>>2)]; //@line 580 "expression.c"
 var $49=$Size; //@line 580 "expression.c"
 var $idx_neg=(((-$49))|0); //@line 580 "expression.c"
 var $add_ptr32=(($48+$idx_neg)|0); //@line 580 "expression.c"
 var $50=$TopValue_addr; //@line 580 "expression.c"
 var $Val33=(($50+4)|0); //@line 580 "expression.c"
 var $51=HEAP32[(($Val33)>>2)]; //@line 580 "expression.c"
 var $Pointer34=$51; //@line 580 "expression.c"
 HEAP32[(($Pointer34)>>2)]=$add_ptr32; //@line 580 "expression.c"
 label=20;break; //@line 580 "expression.c"
 case 19: 
 var $52=$Parser_addr; //@line 581 "expression.c"
 _ProgramFail($52,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 581 "expression.c"
 label=20;break; //@line 581 "expression.c"
 case 20: 
 var $53=$Parser_addr; //@line 584 "expression.c"
 var $54=$StackTop_addr; //@line 584 "expression.c"
 var $55=$TopValue_addr; //@line 584 "expression.c"
 var $Typ37=(($55)|0); //@line 584 "expression.c"
 var $56=HEAP32[(($Typ37)>>2)]; //@line 584 "expression.c"
 var $call38=_ExpressionStackPushValueByType($53,$54,$56); //@line 584 "expression.c"
 $StackValue=$call38; //@line 584 "expression.c"
 var $57=$OrigPointer; //@line 585 "expression.c"
 var $58=$StackValue; //@line 585 "expression.c"
 var $Val39=(($58+4)|0); //@line 585 "expression.c"
 var $59=HEAP32[(($Val39)>>2)]; //@line 585 "expression.c"
 var $Pointer40=$59; //@line 585 "expression.c"
 HEAP32[(($Pointer40)>>2)]=$57; //@line 585 "expression.c"
 label=22;break; //@line 586 "expression.c"
 case 21: 
 var $60=$Parser_addr; //@line 588 "expression.c"
 _ProgramFail($60,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 588 "expression.c"
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 STACKTOP=sp;return; //@line 589 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionInfixOperator($Parser,$StackTop,$Op,$BottomValue,$TopValue){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $Op_addr;
 var $BottomValue_addr;
 var $TopValue_addr;
 var $ResultInt;
 var $StackValue;
 var $Pointer;
 var $ArrayIndex;
 var $Result;
 var $ResultIsInt;
 var $ResultFP;
 var $TopFP;
 var $BottomFP;
 var $TopInt;
 var $BottomInt;
 var $TopInt273;
 var $Size;
 var $Size341;
 var $TopLoc;
 var $BottomLoc;
 var $ValueLoc;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Op_addr=$Op;
 $BottomValue_addr=$BottomValue;
 $TopValue_addr=$TopValue;
 $ResultInt=0; //@line 594 "expression.c"
 _debugf(10976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 598 "expression.c"
 var $0=$BottomValue_addr; //@line 599 "expression.c"
 var $cmp=($0|0)==0; //@line 599 "expression.c"
 if($cmp){label=3;break;}else{label=2;break;} //@line 599 "expression.c"
 case 2: 
 var $1=$TopValue_addr; //@line 599 "expression.c"
 var $cmp1=($1|0)==0; //@line 599 "expression.c"
 if($cmp1){label=3;break;}else{label=4;break;} //@line 599 "expression.c"
 case 3: 
 var $2=$Parser_addr; //@line 600 "expression.c"
 _ProgramFail($2,10592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 600 "expression.c"
 label=4;break; //@line 600 "expression.c"
 case 4: 
 var $3=$Op_addr; //@line 602 "expression.c"
 var $cmp2=($3|0)==39; //@line 602 "expression.c"
 if($cmp2){label=5;break;}else{label=14;break;} //@line 602 "expression.c"
 case 5: 
 $Result=0; //@line 606 "expression.c"
 var $4=$TopValue_addr; //@line 608 "expression.c"
 var $Typ=(($4)|0); //@line 608 "expression.c"
 var $5=HEAP32[(($Typ)>>2)]; //@line 608 "expression.c"
 var $Base=(($5)|0); //@line 608 "expression.c"
 var $6=HEAP32[(($Base)>>2)]; //@line 608 "expression.c"
 var $cmp4=($6>>>0)>=1; //@line 608 "expression.c"
 if($cmp4){label=6;break;}else{label=7;break;} //@line 608 "expression.c"
 case 6: 
 var $7=$TopValue_addr; //@line 608 "expression.c"
 var $Typ5=(($7)|0); //@line 608 "expression.c"
 var $8=HEAP32[(($Typ5)>>2)]; //@line 608 "expression.c"
 var $Base6=(($8)|0); //@line 608 "expression.c"
 var $9=HEAP32[(($Base6)>>2)]; //@line 608 "expression.c"
 var $cmp7=($9>>>0)<=7; //@line 608 "expression.c"
 if($cmp7){label=9;break;}else{label=7;break;} //@line 608 "expression.c"
 case 7: 
 var $10=$TopValue_addr; //@line 608 "expression.c"
 var $Typ9=(($10)|0); //@line 608 "expression.c"
 var $11=HEAP32[(($Typ9)>>2)]; //@line 608 "expression.c"
 var $Base10=(($11)|0); //@line 608 "expression.c"
 var $12=HEAP32[(($Base10)>>2)]; //@line 608 "expression.c"
 var $cmp11=($12|0)==8; //@line 608 "expression.c"
 if($cmp11){label=9;break;}else{label=8;break;} //@line 608 "expression.c"
 case 8: 
 var $13=$Parser_addr; //@line 609 "expression.c"
 _ProgramFail($13,10280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 609 "expression.c"
 label=9;break; //@line 609 "expression.c"
 case 9: 
 var $14=$TopValue_addr; //@line 611 "expression.c"
 var $call=_ExpressionCoerceInteger($14); //@line 611 "expression.c"
 $ArrayIndex=$call; //@line 611 "expression.c"
 var $15=$BottomValue_addr; //@line 614 "expression.c"
 var $Typ14=(($15)|0); //@line 614 "expression.c"
 var $16=HEAP32[(($Typ14)>>2)]; //@line 614 "expression.c"
 var $Base15=(($16)|0); //@line 614 "expression.c"
 var $17=HEAP32[(($Base15)>>2)]; //@line 614 "expression.c"
 if(($17|0)==12){ label=10;break;}else if(($17|0)==11){ label=11;break;}else{label=12;break;}
 case 10: 
 var $18=$Parser_addr; //@line 616 "expression.c"
 var $19=$BottomValue_addr; //@line 616 "expression.c"
 var $Typ16=(($19)|0); //@line 616 "expression.c"
 var $20=HEAP32[(($Typ16)>>2)]; //@line 616 "expression.c"
 var $FromType=(($20+20)|0); //@line 616 "expression.c"
 var $21=HEAP32[(($FromType)>>2)]; //@line 616 "expression.c"
 var $22=$BottomValue_addr; //@line 616 "expression.c"
 var $Val=(($22+4)|0); //@line 616 "expression.c"
 var $23=HEAP32[(($Val)>>2)]; //@line 616 "expression.c"
 var $ArrayMem=$23; //@line 616 "expression.c"
 var $arrayidx=(($ArrayMem)|0); //@line 616 "expression.c"
 var $24=$BottomValue_addr; //@line 616 "expression.c"
 var $Typ17=(($24)|0); //@line 616 "expression.c"
 var $25=HEAP32[(($Typ17)>>2)]; //@line 616 "expression.c"
 var $26=$ArrayIndex; //@line 616 "expression.c"
 var $call18=_TypeSize($25,$26,1); //@line 616 "expression.c"
 var $add_ptr=(($arrayidx+$call18)|0); //@line 616 "expression.c"
 var $27=$add_ptr; //@line 616 "expression.c"
 var $28=$BottomValue_addr; //@line 616 "expression.c"
 var $IsLValue=(($28+14)|0); //@line 616 "expression.c"
 var $29=HEAP8[($IsLValue)]; //@line 616 "expression.c"
 var $conv=(($29<<24)>>24); //@line 616 "expression.c"
 var $30=$BottomValue_addr; //@line 616 "expression.c"
 var $LValueFrom=(($30+8)|0); //@line 616 "expression.c"
 var $31=HEAP32[(($LValueFrom)>>2)]; //@line 616 "expression.c"
 var $call19=_VariableAllocValueFromExistingData($18,$21,$27,$conv,$31); //@line 616 "expression.c"
 $Result=$call19; //@line 616 "expression.c"
 label=13;break; //@line 616 "expression.c"
 case 11: 
 var $32=$Parser_addr; //@line 617 "expression.c"
 var $33=$BottomValue_addr; //@line 617 "expression.c"
 var $Typ21=(($33)|0); //@line 617 "expression.c"
 var $34=HEAP32[(($Typ21)>>2)]; //@line 617 "expression.c"
 var $FromType22=(($34+20)|0); //@line 617 "expression.c"
 var $35=HEAP32[(($FromType22)>>2)]; //@line 617 "expression.c"
 var $36=$BottomValue_addr; //@line 617 "expression.c"
 var $Val23=(($36+4)|0); //@line 617 "expression.c"
 var $37=HEAP32[(($Val23)>>2)]; //@line 617 "expression.c"
 var $Pointer24=$37; //@line 617 "expression.c"
 var $38=HEAP32[(($Pointer24)>>2)]; //@line 617 "expression.c"
 var $39=$BottomValue_addr; //@line 617 "expression.c"
 var $Typ25=(($39)|0); //@line 617 "expression.c"
 var $40=HEAP32[(($Typ25)>>2)]; //@line 617 "expression.c"
 var $FromType26=(($40+20)|0); //@line 617 "expression.c"
 var $41=HEAP32[(($FromType26)>>2)]; //@line 617 "expression.c"
 var $call27=_TypeSize($41,0,1); //@line 617 "expression.c"
 var $42=$ArrayIndex; //@line 617 "expression.c"
 var $mul=(Math_imul($call27,$42)|0); //@line 617 "expression.c"
 var $add_ptr28=(($38+$mul)|0); //@line 617 "expression.c"
 var $43=$add_ptr28; //@line 617 "expression.c"
 var $44=$BottomValue_addr; //@line 617 "expression.c"
 var $IsLValue29=(($44+14)|0); //@line 617 "expression.c"
 var $45=HEAP8[($IsLValue29)]; //@line 617 "expression.c"
 var $conv30=(($45<<24)>>24); //@line 617 "expression.c"
 var $46=$BottomValue_addr; //@line 617 "expression.c"
 var $LValueFrom31=(($46+8)|0); //@line 617 "expression.c"
 var $47=HEAP32[(($LValueFrom31)>>2)]; //@line 617 "expression.c"
 var $call32=_VariableAllocValueFromExistingData($32,$35,$43,$conv30,$47); //@line 617 "expression.c"
 $Result=$call32; //@line 617 "expression.c"
 label=13;break; //@line 617 "expression.c"
 case 12: 
 var $48=$Parser_addr; //@line 618 "expression.c"
 var $49=$BottomValue_addr; //@line 618 "expression.c"
 var $Typ33=(($49)|0); //@line 618 "expression.c"
 var $50=HEAP32[(($Typ33)>>2)]; //@line 618 "expression.c"
 _ProgramFail($48,9888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs; //@line 618 "expression.c"
 label=13;break; //@line 619 "expression.c"
 case 13: 
 var $51=$Parser_addr; //@line 621 "expression.c"
 var $52=$StackTop_addr; //@line 621 "expression.c"
 var $53=$Result; //@line 621 "expression.c"
 _ExpressionStackPushValueNode($51,$52,$53); //@line 621 "expression.c"
 label=155;break; //@line 622 "expression.c"
 case 14: 
 var $54=$Op_addr; //@line 623 "expression.c"
 var $cmp34=($54|0)==13; //@line 623 "expression.c"
 if($cmp34){label=15;break;}else{label=16;break;} //@line 623 "expression.c"
 case 15: 
 var $55=$Parser_addr; //@line 624 "expression.c"
 var $56=$StackTop_addr; //@line 624 "expression.c"
 var $57=$TopValue_addr; //@line 624 "expression.c"
 var $58=$BottomValue_addr; //@line 624 "expression.c"
 _ExpressionQuestionMarkOperator($55,$56,$57,$58); //@line 624 "expression.c"
 label=154;break; //@line 624 "expression.c"
 case 16: 
 var $59=$Op_addr; //@line 626 "expression.c"
 var $cmp38=($59|0)==14; //@line 626 "expression.c"
 if($cmp38){label=17;break;}else{label=18;break;} //@line 626 "expression.c"
 case 17: 
 var $60=$Parser_addr; //@line 627 "expression.c"
 var $61=$StackTop_addr; //@line 627 "expression.c"
 var $62=$TopValue_addr; //@line 627 "expression.c"
 var $63=$BottomValue_addr; //@line 627 "expression.c"
 _ExpressionColonOperator($60,$61,$62,$63); //@line 627 "expression.c"
 label=153;break; //@line 627 "expression.c"
 case 18: 
 var $64=$TopValue_addr; //@line 630 "expression.c"
 var $Typ42=(($64)|0); //@line 630 "expression.c"
 var $65=HEAP32[(($Typ42)>>2)]; //@line 630 "expression.c"
 var $cmp43=($65|0)==19032; //@line 630 "expression.c"
 if($cmp43){label=19;break;}else{label=20;break;} //@line 630 "expression.c"
 case 19: 
 var $66=$BottomValue_addr; //@line 630 "expression.c"
 var $Typ46=(($66)|0); //@line 630 "expression.c"
 var $67=HEAP32[(($Typ46)>>2)]; //@line 630 "expression.c"
 var $cmp47=($67|0)==19032; //@line 630 "expression.c"
 if($cmp47){label=28;break;}else{label=20;break;} //@line 630 "expression.c"
 case 20: 
 var $68=$TopValue_addr; //@line 630 "expression.c"
 var $Typ50=(($68)|0); //@line 630 "expression.c"
 var $69=HEAP32[(($Typ50)>>2)]; //@line 630 "expression.c"
 var $cmp51=($69|0)==19032; //@line 630 "expression.c"
 if($cmp51){label=21;break;}else{label=24;break;} //@line 630 "expression.c"
 case 21: 
 var $70=$BottomValue_addr; //@line 630 "expression.c"
 var $Typ54=(($70)|0); //@line 630 "expression.c"
 var $71=HEAP32[(($Typ54)>>2)]; //@line 630 "expression.c"
 var $Base55=(($71)|0); //@line 630 "expression.c"
 var $72=HEAP32[(($Base55)>>2)]; //@line 630 "expression.c"
 var $cmp56=($72>>>0)>=1; //@line 630 "expression.c"
 if($cmp56){label=22;break;}else{label=23;break;} //@line 630 "expression.c"
 case 22: 
 var $73=$BottomValue_addr; //@line 630 "expression.c"
 var $Typ59=(($73)|0); //@line 630 "expression.c"
 var $74=HEAP32[(($Typ59)>>2)]; //@line 630 "expression.c"
 var $Base60=(($74)|0); //@line 630 "expression.c"
 var $75=HEAP32[(($Base60)>>2)]; //@line 630 "expression.c"
 var $cmp61=($75>>>0)<=7; //@line 630 "expression.c"
 if($cmp61){label=28;break;}else{label=23;break;} //@line 630 "expression.c"
 case 23: 
 var $76=$BottomValue_addr; //@line 630 "expression.c"
 var $Typ64=(($76)|0); //@line 630 "expression.c"
 var $77=HEAP32[(($Typ64)>>2)]; //@line 630 "expression.c"
 var $Base65=(($77)|0); //@line 630 "expression.c"
 var $78=HEAP32[(($Base65)>>2)]; //@line 630 "expression.c"
 var $cmp66=($78|0)==8; //@line 630 "expression.c"
 if($cmp66){label=28;break;}else{label=24;break;} //@line 630 "expression.c"
 case 24: 
 var $79=$TopValue_addr; //@line 630 "expression.c"
 var $Typ69=(($79)|0); //@line 630 "expression.c"
 var $80=HEAP32[(($Typ69)>>2)]; //@line 630 "expression.c"
 var $Base70=(($80)|0); //@line 630 "expression.c"
 var $81=HEAP32[(($Base70)>>2)]; //@line 630 "expression.c"
 var $cmp71=($81>>>0)>=1; //@line 630 "expression.c"
 if($cmp71){label=25;break;}else{label=26;break;} //@line 630 "expression.c"
 case 25: 
 var $82=$TopValue_addr; //@line 630 "expression.c"
 var $Typ74=(($82)|0); //@line 630 "expression.c"
 var $83=HEAP32[(($Typ74)>>2)]; //@line 630 "expression.c"
 var $Base75=(($83)|0); //@line 630 "expression.c"
 var $84=HEAP32[(($Base75)>>2)]; //@line 630 "expression.c"
 var $cmp76=($84>>>0)<=7; //@line 630 "expression.c"
 if($cmp76){label=27;break;}else{label=26;break;} //@line 630 "expression.c"
 case 26: 
 var $85=$TopValue_addr; //@line 630 "expression.c"
 var $Typ79=(($85)|0); //@line 630 "expression.c"
 var $86=HEAP32[(($Typ79)>>2)]; //@line 630 "expression.c"
 var $Base80=(($86)|0); //@line 630 "expression.c"
 var $87=HEAP32[(($Base80)>>2)]; //@line 630 "expression.c"
 var $cmp81=($87|0)==8; //@line 630 "expression.c"
 if($cmp81){label=27;break;}else{label=55;break;} //@line 630 "expression.c"
 case 27: 
 var $88=$BottomValue_addr; //@line 630 "expression.c"
 var $Typ84=(($88)|0); //@line 630 "expression.c"
 var $89=HEAP32[(($Typ84)>>2)]; //@line 630 "expression.c"
 var $cmp85=($89|0)==19032; //@line 630 "expression.c"
 if($cmp85){label=28;break;}else{label=55;break;} //@line 630 "expression.c"
 case 28: 
 $ResultIsInt=0; //@line 635 "expression.c"
 $ResultFP=0; //@line 636 "expression.c"
 var $90=$TopValue_addr; //@line 637 "expression.c"
 var $Typ88=(($90)|0); //@line 637 "expression.c"
 var $91=HEAP32[(($Typ88)>>2)]; //@line 637 "expression.c"
 var $cmp89=($91|0)==19032; //@line 637 "expression.c"
 if($cmp89){label=29;break;}else{label=30;break;} //@line 637 "expression.c"
 case 29: 
 var $92=$TopValue_addr; //@line 637 "expression.c"
 var $Val91=(($92+4)|0); //@line 637 "expression.c"
 var $93=HEAP32[(($Val91)>>2)]; //@line 637 "expression.c"
 var $FP=$93; //@line 637 "expression.c"
 var $94=HEAPF64[(($FP)>>3)]; //@line 637 "expression.c"
 var $cond=$94;label=31;break; //@line 637 "expression.c"
 case 30: 
 var $95=$TopValue_addr; //@line 637 "expression.c"
 var $call92=_ExpressionCoerceInteger($95); //@line 637 "expression.c"
 var $conv93=($call92|0); //@line 637 "expression.c"
 var $cond=$conv93;label=31;break; //@line 637 "expression.c"
 case 31: 
 var $cond; //@line 637 "expression.c"
 $TopFP=$cond; //@line 637 "expression.c"
 var $96=$BottomValue_addr; //@line 638 "expression.c"
 var $Typ94=(($96)|0); //@line 638 "expression.c"
 var $97=HEAP32[(($Typ94)>>2)]; //@line 638 "expression.c"
 var $cmp95=($97|0)==19032; //@line 638 "expression.c"
 if($cmp95){label=32;break;}else{label=33;break;} //@line 638 "expression.c"
 case 32: 
 var $98=$BottomValue_addr; //@line 638 "expression.c"
 var $Val98=(($98+4)|0); //@line 638 "expression.c"
 var $99=HEAP32[(($Val98)>>2)]; //@line 638 "expression.c"
 var $FP99=$99; //@line 638 "expression.c"
 var $100=HEAPF64[(($FP99)>>3)]; //@line 638 "expression.c"
 var $cond104=$100;label=34;break; //@line 638 "expression.c"
 case 33: 
 var $101=$BottomValue_addr; //@line 638 "expression.c"
 var $call101=_ExpressionCoerceInteger($101); //@line 638 "expression.c"
 var $conv102=($call101|0); //@line 638 "expression.c"
 var $cond104=$conv102;label=34;break; //@line 638 "expression.c"
 case 34: 
 var $cond104; //@line 638 "expression.c"
 $BottomFP=$cond104; //@line 638 "expression.c"
 var $102=$Op_addr; //@line 640 "expression.c"
 switch(($102|0)){case 2:{ label=35;break;}case 3:{ label=36;break;}case 4:{ label=37;break;}case 5:{ label=38;break;}case 6:{ label=39;break;}case 20:{ label=40;break;}case 21:{ label=41;break;}case 22:{ label=42;break;}case 23:{ label=43;break;}case 24:{ label=44;break;}case 25:{ label=45;break;}case 28:{ label=46;break;}case 29:{ label=47;break;}case 30:{ label=48;break;}case 31:{ label=49;break;}default:{label=50;break;}}break;
 case 35: 
 var $103=$Parser_addr; //@line 642 "expression.c"
 var $104=$BottomValue_addr; //@line 642 "expression.c"
 var $105=$TopFP; //@line 642 "expression.c"
 var $call106=_ExpressionAssignFP($103,$104,$105); //@line 642 "expression.c"
 $ResultFP=$call106; //@line 642 "expression.c"
 label=51;break; //@line 642 "expression.c"
 case 36: 
 var $106=$Parser_addr; //@line 643 "expression.c"
 var $107=$BottomValue_addr; //@line 643 "expression.c"
 var $108=$BottomFP; //@line 643 "expression.c"
 var $109=$TopFP; //@line 643 "expression.c"
 var $add=($108)+($109); //@line 643 "expression.c"
 var $call108=_ExpressionAssignFP($106,$107,$add); //@line 643 "expression.c"
 $ResultFP=$call108; //@line 643 "expression.c"
 label=51;break; //@line 643 "expression.c"
 case 37: 
 var $110=$Parser_addr; //@line 644 "expression.c"
 var $111=$BottomValue_addr; //@line 644 "expression.c"
 var $112=$BottomFP; //@line 644 "expression.c"
 var $113=$TopFP; //@line 644 "expression.c"
 var $sub=($112)-($113); //@line 644 "expression.c"
 var $call110=_ExpressionAssignFP($110,$111,$sub); //@line 644 "expression.c"
 $ResultFP=$call110; //@line 644 "expression.c"
 label=51;break; //@line 644 "expression.c"
 case 38: 
 var $114=$Parser_addr; //@line 645 "expression.c"
 var $115=$BottomValue_addr; //@line 645 "expression.c"
 var $116=$BottomFP; //@line 645 "expression.c"
 var $117=$TopFP; //@line 645 "expression.c"
 var $mul112=($116)*($117); //@line 645 "expression.c"
 var $call113=_ExpressionAssignFP($114,$115,$mul112); //@line 645 "expression.c"
 $ResultFP=$call113; //@line 645 "expression.c"
 label=51;break; //@line 645 "expression.c"
 case 39: 
 var $118=$Parser_addr; //@line 646 "expression.c"
 var $119=$BottomValue_addr; //@line 646 "expression.c"
 var $120=$BottomFP; //@line 646 "expression.c"
 var $121=$TopFP; //@line 646 "expression.c"
 var $div=($120)/($121); //@line 646 "expression.c"
 var $call115=_ExpressionAssignFP($118,$119,$div); //@line 646 "expression.c"
 $ResultFP=$call115; //@line 646 "expression.c"
 label=51;break; //@line 646 "expression.c"
 case 40: 
 var $122=$BottomFP; //@line 647 "expression.c"
 var $123=$TopFP; //@line 647 "expression.c"
 var $cmp117=$122==$123; //@line 647 "expression.c"
 var $conv118=($cmp117&1); //@line 647 "expression.c"
 $ResultInt=$conv118; //@line 647 "expression.c"
 $ResultIsInt=1; //@line 647 "expression.c"
 label=51;break; //@line 647 "expression.c"
 case 41: 
 var $124=$BottomFP; //@line 648 "expression.c"
 var $125=$TopFP; //@line 648 "expression.c"
 var $cmp120=$124!=$125; //@line 648 "expression.c"
 var $conv121=($cmp120&1); //@line 648 "expression.c"
 $ResultInt=$conv121; //@line 648 "expression.c"
 $ResultIsInt=1; //@line 648 "expression.c"
 label=51;break; //@line 648 "expression.c"
 case 42: 
 var $126=$BottomFP; //@line 649 "expression.c"
 var $127=$TopFP; //@line 649 "expression.c"
 var $cmp123=$126<$127; //@line 649 "expression.c"
 var $conv124=($cmp123&1); //@line 649 "expression.c"
 $ResultInt=$conv124; //@line 649 "expression.c"
 $ResultIsInt=1; //@line 649 "expression.c"
 label=51;break; //@line 649 "expression.c"
 case 43: 
 var $128=$BottomFP; //@line 650 "expression.c"
 var $129=$TopFP; //@line 650 "expression.c"
 var $cmp126=$128>$129; //@line 650 "expression.c"
 var $conv127=($cmp126&1); //@line 650 "expression.c"
 $ResultInt=$conv127; //@line 650 "expression.c"
 $ResultIsInt=1; //@line 650 "expression.c"
 label=51;break; //@line 650 "expression.c"
 case 44: 
 var $130=$BottomFP; //@line 651 "expression.c"
 var $131=$TopFP; //@line 651 "expression.c"
 var $cmp129=$130<=$131; //@line 651 "expression.c"
 var $conv130=($cmp129&1); //@line 651 "expression.c"
 $ResultInt=$conv130; //@line 651 "expression.c"
 $ResultIsInt=1; //@line 651 "expression.c"
 label=51;break; //@line 651 "expression.c"
 case 45: 
 var $132=$BottomFP; //@line 652 "expression.c"
 var $133=$TopFP; //@line 652 "expression.c"
 var $cmp132=$132>=$133; //@line 652 "expression.c"
 var $conv133=($cmp132&1); //@line 652 "expression.c"
 $ResultInt=$conv133; //@line 652 "expression.c"
 $ResultIsInt=1; //@line 652 "expression.c"
 label=51;break; //@line 652 "expression.c"
 case 46: 
 var $134=$BottomFP; //@line 653 "expression.c"
 var $135=$TopFP; //@line 653 "expression.c"
 var $add135=($134)+($135); //@line 653 "expression.c"
 $ResultFP=$add135; //@line 653 "expression.c"
 label=51;break; //@line 653 "expression.c"
 case 47: 
 var $136=$BottomFP; //@line 654 "expression.c"
 var $137=$TopFP; //@line 654 "expression.c"
 var $sub137=($136)-($137); //@line 654 "expression.c"
 $ResultFP=$sub137; //@line 654 "expression.c"
 label=51;break; //@line 654 "expression.c"
 case 48: 
 var $138=$BottomFP; //@line 655 "expression.c"
 var $139=$TopFP; //@line 655 "expression.c"
 var $mul139=($138)*($139); //@line 655 "expression.c"
 $ResultFP=$mul139; //@line 655 "expression.c"
 label=51;break; //@line 655 "expression.c"
 case 49: 
 var $140=$BottomFP; //@line 656 "expression.c"
 var $141=$TopFP; //@line 656 "expression.c"
 var $div141=($140)/($141); //@line 656 "expression.c"
 $ResultFP=$div141; //@line 656 "expression.c"
 label=51;break; //@line 656 "expression.c"
 case 50: 
 var $142=$Parser_addr; //@line 657 "expression.c"
 _ProgramFail($142,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 657 "expression.c"
 label=51;break; //@line 657 "expression.c"
 case 51: 
 var $143=$ResultIsInt; //@line 660 "expression.c"
 var $tobool=($143|0)!=0; //@line 660 "expression.c"
 if($tobool){label=52;break;}else{label=53;break;} //@line 660 "expression.c"
 case 52: 
 var $144=$Parser_addr; //@line 661 "expression.c"
 var $145=$StackTop_addr; //@line 661 "expression.c"
 var $146=$ResultInt; //@line 661 "expression.c"
 _ExpressionPushInt($144,$145,$146); //@line 661 "expression.c"
 label=54;break; //@line 661 "expression.c"
 case 53: 
 var $147=$Parser_addr; //@line 663 "expression.c"
 var $148=$StackTop_addr; //@line 663 "expression.c"
 var $149=$ResultFP; //@line 663 "expression.c"
 _ExpressionPushFP($147,$148,$149); //@line 663 "expression.c"
 label=54;break;
 case 54: 
 label=152;break; //@line 664 "expression.c"
 case 55: 
 var $150=$TopValue_addr; //@line 666 "expression.c"
 var $Typ148=(($150)|0); //@line 666 "expression.c"
 var $151=HEAP32[(($Typ148)>>2)]; //@line 666 "expression.c"
 var $Base149=(($151)|0); //@line 666 "expression.c"
 var $152=HEAP32[(($Base149)>>2)]; //@line 666 "expression.c"
 var $cmp150=($152>>>0)>=1; //@line 666 "expression.c"
 if($cmp150){label=56;break;}else{label=57;break;} //@line 666 "expression.c"
 case 56: 
 var $153=$TopValue_addr; //@line 666 "expression.c"
 var $Typ153=(($153)|0); //@line 666 "expression.c"
 var $154=HEAP32[(($Typ153)>>2)]; //@line 666 "expression.c"
 var $Base154=(($154)|0); //@line 666 "expression.c"
 var $155=HEAP32[(($Base154)>>2)]; //@line 666 "expression.c"
 var $cmp155=($155>>>0)<=7; //@line 666 "expression.c"
 if($cmp155){label=58;break;}else{label=57;break;} //@line 666 "expression.c"
 case 57: 
 var $156=$TopValue_addr; //@line 666 "expression.c"
 var $Typ158=(($156)|0); //@line 666 "expression.c"
 var $157=HEAP32[(($Typ158)>>2)]; //@line 666 "expression.c"
 var $Base159=(($157)|0); //@line 666 "expression.c"
 var $158=HEAP32[(($Base159)>>2)]; //@line 666 "expression.c"
 var $cmp160=($158|0)==8; //@line 666 "expression.c"
 if($cmp160){label=58;break;}else{label=97;break;} //@line 666 "expression.c"
 case 58: 
 var $159=$BottomValue_addr; //@line 666 "expression.c"
 var $Typ163=(($159)|0); //@line 666 "expression.c"
 var $160=HEAP32[(($Typ163)>>2)]; //@line 666 "expression.c"
 var $Base164=(($160)|0); //@line 666 "expression.c"
 var $161=HEAP32[(($Base164)>>2)]; //@line 666 "expression.c"
 var $cmp165=($161>>>0)>=1; //@line 666 "expression.c"
 if($cmp165){label=59;break;}else{label=60;break;} //@line 666 "expression.c"
 case 59: 
 var $162=$BottomValue_addr; //@line 666 "expression.c"
 var $Typ168=(($162)|0); //@line 666 "expression.c"
 var $163=HEAP32[(($Typ168)>>2)]; //@line 666 "expression.c"
 var $Base169=(($163)|0); //@line 666 "expression.c"
 var $164=HEAP32[(($Base169)>>2)]; //@line 666 "expression.c"
 var $cmp170=($164>>>0)<=7; //@line 666 "expression.c"
 if($cmp170){label=61;break;}else{label=60;break;} //@line 666 "expression.c"
 case 60: 
 var $165=$BottomValue_addr; //@line 666 "expression.c"
 var $Typ173=(($165)|0); //@line 666 "expression.c"
 var $166=HEAP32[(($Typ173)>>2)]; //@line 666 "expression.c"
 var $Base174=(($166)|0); //@line 666 "expression.c"
 var $167=HEAP32[(($Base174)>>2)]; //@line 666 "expression.c"
 var $cmp175=($167|0)==8; //@line 666 "expression.c"
 if($cmp175){label=61;break;}else{label=97;break;} //@line 666 "expression.c"
 case 61: 
 var $168=$TopValue_addr; //@line 669 "expression.c"
 var $call178=_ExpressionCoerceInteger($168); //@line 669 "expression.c"
 $TopInt=$call178; //@line 669 "expression.c"
 var $169=$BottomValue_addr; //@line 670 "expression.c"
 var $call179=_ExpressionCoerceInteger($169); //@line 670 "expression.c"
 $BottomInt=$call179; //@line 670 "expression.c"
 var $170=$Op_addr; //@line 671 "expression.c"
 switch(($170|0)){case 2:{ label=62;break;}case 3:{ label=63;break;}case 4:{ label=64;break;}case 5:{ label=65;break;}case 6:{ label=66;break;}case 7:{ label=67;break;}case 8:{ label=68;break;}case 9:{ label=69;break;}case 10:{ label=70;break;}case 11:{ label=71;break;}case 12:{ label=72;break;}case 15:{ label=73;break;}case 16:{ label=76;break;}case 17:{ label=79;break;}case 18:{ label=80;break;}case 19:{ label=81;break;}case 20:{ label=82;break;}case 21:{ label=83;break;}case 22:{ label=84;break;}case 23:{ label=85;break;}case 24:{ label=86;break;}case 25:{ label=87;break;}case 26:{ label=88;break;}case 27:{ label=89;break;}case 28:{ label=90;break;}case 29:{ label=91;break;}case 30:{ label=92;break;}case 31:{ label=93;break;}case 32:{ label=94;break;}default:{label=95;break;}}break;
 case 62: 
 var $171=$Parser_addr; //@line 673 "expression.c"
 var $172=$BottomValue_addr; //@line 673 "expression.c"
 var $173=$TopInt; //@line 673 "expression.c"
 var $call181=_ExpressionAssignInt($171,$172,$173,0); //@line 673 "expression.c"
 $ResultInt=$call181; //@line 673 "expression.c"
 label=96;break; //@line 673 "expression.c"
 case 63: 
 var $174=$Parser_addr; //@line 674 "expression.c"
 var $175=$BottomValue_addr; //@line 674 "expression.c"
 var $176=$BottomInt; //@line 674 "expression.c"
 var $177=$TopInt; //@line 674 "expression.c"
 var $add183=((($176)+($177))|0); //@line 674 "expression.c"
 var $call184=_ExpressionAssignInt($174,$175,$add183,0); //@line 674 "expression.c"
 $ResultInt=$call184; //@line 674 "expression.c"
 label=96;break; //@line 674 "expression.c"
 case 64: 
 var $178=$Parser_addr; //@line 675 "expression.c"
 var $179=$BottomValue_addr; //@line 675 "expression.c"
 var $180=$BottomInt; //@line 675 "expression.c"
 var $181=$TopInt; //@line 675 "expression.c"
 var $sub186=((($180)-($181))|0); //@line 675 "expression.c"
 var $call187=_ExpressionAssignInt($178,$179,$sub186,0); //@line 675 "expression.c"
 $ResultInt=$call187; //@line 675 "expression.c"
 label=96;break; //@line 675 "expression.c"
 case 65: 
 var $182=$Parser_addr; //@line 676 "expression.c"
 var $183=$BottomValue_addr; //@line 676 "expression.c"
 var $184=$BottomInt; //@line 676 "expression.c"
 var $185=$TopInt; //@line 676 "expression.c"
 var $mul189=(Math_imul($184,$185)|0); //@line 676 "expression.c"
 var $call190=_ExpressionAssignInt($182,$183,$mul189,0); //@line 676 "expression.c"
 $ResultInt=$call190; //@line 676 "expression.c"
 label=96;break; //@line 676 "expression.c"
 case 66: 
 var $186=$Parser_addr; //@line 677 "expression.c"
 var $187=$BottomValue_addr; //@line 677 "expression.c"
 var $188=$BottomInt; //@line 677 "expression.c"
 var $189=$TopInt; //@line 677 "expression.c"
 var $div192=(((($188|0))/(($189|0)))&-1); //@line 677 "expression.c"
 var $call193=_ExpressionAssignInt($186,$187,$div192,0); //@line 677 "expression.c"
 $ResultInt=$call193; //@line 677 "expression.c"
 label=96;break; //@line 677 "expression.c"
 case 67: 
 var $190=$Parser_addr; //@line 679 "expression.c"
 var $191=$BottomValue_addr; //@line 679 "expression.c"
 var $192=$BottomInt; //@line 679 "expression.c"
 var $193=$TopInt; //@line 679 "expression.c"
 var $rem=(((($192|0))%(($193|0)))&-1); //@line 679 "expression.c"
 var $call195=_ExpressionAssignInt($190,$191,$rem,0); //@line 679 "expression.c"
 $ResultInt=$call195; //@line 679 "expression.c"
 label=96;break; //@line 679 "expression.c"
 case 68: 
 var $194=$Parser_addr; //@line 681 "expression.c"
 var $195=$BottomValue_addr; //@line 681 "expression.c"
 var $196=$BottomInt; //@line 681 "expression.c"
 var $197=$TopInt; //@line 681 "expression.c"
 var $shl=$196<<$197; //@line 681 "expression.c"
 var $call197=_ExpressionAssignInt($194,$195,$shl,0); //@line 681 "expression.c"
 $ResultInt=$call197; //@line 681 "expression.c"
 label=96;break; //@line 681 "expression.c"
 case 69: 
 var $198=$Parser_addr; //@line 682 "expression.c"
 var $199=$BottomValue_addr; //@line 682 "expression.c"
 var $200=$BottomInt; //@line 682 "expression.c"
 var $201=$TopInt; //@line 682 "expression.c"
 var $shr=$200>>($201|0); //@line 682 "expression.c"
 var $call199=_ExpressionAssignInt($198,$199,$shr,0); //@line 682 "expression.c"
 $ResultInt=$call199; //@line 682 "expression.c"
 label=96;break; //@line 682 "expression.c"
 case 70: 
 var $202=$Parser_addr; //@line 683 "expression.c"
 var $203=$BottomValue_addr; //@line 683 "expression.c"
 var $204=$BottomInt; //@line 683 "expression.c"
 var $205=$TopInt; //@line 683 "expression.c"
 var $and=$204&$205; //@line 683 "expression.c"
 var $call201=_ExpressionAssignInt($202,$203,$and,0); //@line 683 "expression.c"
 $ResultInt=$call201; //@line 683 "expression.c"
 label=96;break; //@line 683 "expression.c"
 case 71: 
 var $206=$Parser_addr; //@line 684 "expression.c"
 var $207=$BottomValue_addr; //@line 684 "expression.c"
 var $208=$BottomInt; //@line 684 "expression.c"
 var $209=$TopInt; //@line 684 "expression.c"
 var $or=$208|$209; //@line 684 "expression.c"
 var $call203=_ExpressionAssignInt($206,$207,$or,0); //@line 684 "expression.c"
 $ResultInt=$call203; //@line 684 "expression.c"
 label=96;break; //@line 684 "expression.c"
 case 72: 
 var $210=$Parser_addr; //@line 685 "expression.c"
 var $211=$BottomValue_addr; //@line 685 "expression.c"
 var $212=$BottomInt; //@line 685 "expression.c"
 var $213=$TopInt; //@line 685 "expression.c"
 var $xor=$212^$213; //@line 685 "expression.c"
 var $call205=_ExpressionAssignInt($210,$211,$xor,0); //@line 685 "expression.c"
 $ResultInt=$call205; //@line 685 "expression.c"
 label=96;break; //@line 685 "expression.c"
 case 73: 
 var $214=$BottomInt; //@line 686 "expression.c"
 var $tobool207=($214|0)!=0; //@line 686 "expression.c"
 if($tobool207){var $216=1;label=75;break;}else{label=74;break;} //@line 686 "expression.c"
 case 74: 
 var $215=$TopInt; //@line 686 "expression.c"
 var $tobool208=($215|0)!=0; //@line 686 "expression.c"
 var $216=$tobool208;label=75;break; //@line 686 "expression.c"
 case 75: 
 var $216;
 var $lor_ext=($216&1); //@line 686 "expression.c"
 $ResultInt=$lor_ext; //@line 686 "expression.c"
 label=96;break; //@line 686 "expression.c"
 case 76: 
 var $217=$BottomInt; //@line 687 "expression.c"
 var $tobool210=($217|0)!=0; //@line 687 "expression.c"
 if($tobool210){label=77;break;}else{var $219=0;label=78;break;} //@line 687 "expression.c"
 case 77: 
 var $218=$TopInt; //@line 687 "expression.c"
 var $tobool211=($218|0)!=0; //@line 687 "expression.c"
 var $219=$tobool211;label=78;break;
 case 78: 
 var $219;
 var $land_ext=($219&1);
 $ResultInt=$land_ext;
 label=96;break; //@line 687 "expression.c"
 case 79: 
 var $220=$BottomInt; //@line 688 "expression.c"
 var $221=$TopInt; //@line 688 "expression.c"
 var $or213=$220|$221; //@line 688 "expression.c"
 $ResultInt=$or213; //@line 688 "expression.c"
 label=96;break; //@line 688 "expression.c"
 case 80: 
 var $222=$BottomInt; //@line 689 "expression.c"
 var $223=$TopInt; //@line 689 "expression.c"
 var $xor215=$222^$223; //@line 689 "expression.c"
 $ResultInt=$xor215; //@line 689 "expression.c"
 label=96;break; //@line 689 "expression.c"
 case 81: 
 var $224=$BottomInt; //@line 690 "expression.c"
 var $225=$TopInt; //@line 690 "expression.c"
 var $and217=$224&$225; //@line 690 "expression.c"
 $ResultInt=$and217; //@line 690 "expression.c"
 label=96;break; //@line 690 "expression.c"
 case 82: 
 var $226=$BottomInt; //@line 691 "expression.c"
 var $227=$TopInt; //@line 691 "expression.c"
 var $cmp219=($226|0)==($227|0); //@line 691 "expression.c"
 var $conv220=($cmp219&1); //@line 691 "expression.c"
 $ResultInt=$conv220; //@line 691 "expression.c"
 label=96;break; //@line 691 "expression.c"
 case 83: 
 var $228=$BottomInt; //@line 692 "expression.c"
 var $229=$TopInt; //@line 692 "expression.c"
 var $cmp222=($228|0)!=($229|0); //@line 692 "expression.c"
 var $conv223=($cmp222&1); //@line 692 "expression.c"
 $ResultInt=$conv223; //@line 692 "expression.c"
 label=96;break; //@line 692 "expression.c"
 case 84: 
 var $230=$BottomInt; //@line 693 "expression.c"
 var $231=$TopInt; //@line 693 "expression.c"
 var $cmp225=($230|0)<($231|0); //@line 693 "expression.c"
 var $conv226=($cmp225&1); //@line 693 "expression.c"
 $ResultInt=$conv226; //@line 693 "expression.c"
 label=96;break; //@line 693 "expression.c"
 case 85: 
 var $232=$BottomInt; //@line 694 "expression.c"
 var $233=$TopInt; //@line 694 "expression.c"
 var $cmp228=($232|0)>($233|0); //@line 694 "expression.c"
 var $conv229=($cmp228&1); //@line 694 "expression.c"
 $ResultInt=$conv229; //@line 694 "expression.c"
 label=96;break; //@line 694 "expression.c"
 case 86: 
 var $234=$BottomInt; //@line 695 "expression.c"
 var $235=$TopInt; //@line 695 "expression.c"
 var $cmp231=($234|0)<=($235|0); //@line 695 "expression.c"
 var $conv232=($cmp231&1); //@line 695 "expression.c"
 $ResultInt=$conv232; //@line 695 "expression.c"
 label=96;break; //@line 695 "expression.c"
 case 87: 
 var $236=$BottomInt; //@line 696 "expression.c"
 var $237=$TopInt; //@line 696 "expression.c"
 var $cmp234=($236|0)>=($237|0); //@line 696 "expression.c"
 var $conv235=($cmp234&1); //@line 696 "expression.c"
 $ResultInt=$conv235; //@line 696 "expression.c"
 label=96;break; //@line 696 "expression.c"
 case 88: 
 var $238=$BottomInt; //@line 697 "expression.c"
 var $239=$TopInt; //@line 697 "expression.c"
 var $shl237=$238<<$239; //@line 697 "expression.c"
 $ResultInt=$shl237; //@line 697 "expression.c"
 label=96;break; //@line 697 "expression.c"
 case 89: 
 var $240=$BottomInt; //@line 698 "expression.c"
 var $241=$TopInt; //@line 698 "expression.c"
 var $shr239=$240>>($241|0); //@line 698 "expression.c"
 $ResultInt=$shr239; //@line 698 "expression.c"
 label=96;break; //@line 698 "expression.c"
 case 90: 
 var $242=$BottomInt; //@line 699 "expression.c"
 var $243=$TopInt; //@line 699 "expression.c"
 var $add241=((($242)+($243))|0); //@line 699 "expression.c"
 $ResultInt=$add241; //@line 699 "expression.c"
 label=96;break; //@line 699 "expression.c"
 case 91: 
 var $244=$BottomInt; //@line 700 "expression.c"
 var $245=$TopInt; //@line 700 "expression.c"
 var $sub243=((($244)-($245))|0); //@line 700 "expression.c"
 $ResultInt=$sub243; //@line 700 "expression.c"
 label=96;break; //@line 700 "expression.c"
 case 92: 
 var $246=$BottomInt; //@line 701 "expression.c"
 var $247=$TopInt; //@line 701 "expression.c"
 var $mul245=(Math_imul($246,$247)|0); //@line 701 "expression.c"
 $ResultInt=$mul245; //@line 701 "expression.c"
 label=96;break; //@line 701 "expression.c"
 case 93: 
 var $248=$BottomInt; //@line 702 "expression.c"
 var $249=$TopInt; //@line 702 "expression.c"
 var $div247=(((($248|0))/(($249|0)))&-1); //@line 702 "expression.c"
 $ResultInt=$div247; //@line 702 "expression.c"
 label=96;break; //@line 702 "expression.c"
 case 94: 
 var $250=$BottomInt; //@line 704 "expression.c"
 var $251=$TopInt; //@line 704 "expression.c"
 var $rem249=(((($250|0))%(($251|0)))&-1); //@line 704 "expression.c"
 $ResultInt=$rem249; //@line 704 "expression.c"
 label=96;break; //@line 704 "expression.c"
 case 95: 
 var $252=$Parser_addr; //@line 706 "expression.c"
 _ProgramFail($252,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 706 "expression.c"
 label=96;break; //@line 706 "expression.c"
 case 96: 
 var $253=$Parser_addr; //@line 709 "expression.c"
 var $254=$StackTop_addr; //@line 709 "expression.c"
 var $255=$ResultInt; //@line 709 "expression.c"
 _ExpressionPushInt($253,$254,$255); //@line 709 "expression.c"
 label=151;break; //@line 710 "expression.c"
 case 97: 
 var $256=$BottomValue_addr; //@line 711 "expression.c"
 var $Typ253=(($256)|0); //@line 711 "expression.c"
 var $257=HEAP32[(($Typ253)>>2)]; //@line 711 "expression.c"
 var $Base254=(($257)|0); //@line 711 "expression.c"
 var $258=HEAP32[(($Base254)>>2)]; //@line 711 "expression.c"
 var $cmp255=($258|0)==11; //@line 711 "expression.c"
 if($cmp255){label=98;break;}else{label=133;break;} //@line 711 "expression.c"
 case 98: 
 var $259=$TopValue_addr; //@line 711 "expression.c"
 var $Typ258=(($259)|0); //@line 711 "expression.c"
 var $260=HEAP32[(($Typ258)>>2)]; //@line 711 "expression.c"
 var $Base259=(($260)|0); //@line 711 "expression.c"
 var $261=HEAP32[(($Base259)>>2)]; //@line 711 "expression.c"
 var $cmp260=($261>>>0)>=1; //@line 711 "expression.c"
 if($cmp260){label=99;break;}else{label=100;break;} //@line 711 "expression.c"
 case 99: 
 var $262=$TopValue_addr; //@line 711 "expression.c"
 var $Typ263=(($262)|0); //@line 711 "expression.c"
 var $263=HEAP32[(($Typ263)>>2)]; //@line 711 "expression.c"
 var $Base264=(($263)|0); //@line 711 "expression.c"
 var $264=HEAP32[(($Base264)>>2)]; //@line 711 "expression.c"
 var $cmp265=($264>>>0)<=7; //@line 711 "expression.c"
 if($cmp265){label=101;break;}else{label=100;break;} //@line 711 "expression.c"
 case 100: 
 var $265=$TopValue_addr; //@line 711 "expression.c"
 var $Typ268=(($265)|0); //@line 711 "expression.c"
 var $266=HEAP32[(($Typ268)>>2)]; //@line 711 "expression.c"
 var $Base269=(($266)|0); //@line 711 "expression.c"
 var $267=HEAP32[(($Base269)>>2)]; //@line 711 "expression.c"
 var $cmp270=($267|0)==8; //@line 711 "expression.c"
 if($cmp270){label=101;break;}else{label=133;break;} //@line 711 "expression.c"
 case 101: 
 var $268=$TopValue_addr; //@line 714 "expression.c"
 var $call274=_ExpressionCoerceInteger($268); //@line 714 "expression.c"
 $TopInt273=$call274; //@line 714 "expression.c"
 var $269=$Op_addr; //@line 716 "expression.c"
 var $cmp275=($269|0)==20; //@line 716 "expression.c"
 if($cmp275){label=103;break;}else{label=102;break;} //@line 716 "expression.c"
 case 102: 
 var $270=$Op_addr; //@line 716 "expression.c"
 var $cmp278=($270|0)==21; //@line 716 "expression.c"
 if($cmp278){label=103;break;}else{label=109;break;} //@line 716 "expression.c"
 case 103: 
 var $271=$TopInt273; //@line 719 "expression.c"
 var $cmp281=($271|0)!=0; //@line 719 "expression.c"
 if($cmp281){label=104;break;}else{label=105;break;} //@line 719 "expression.c"
 case 104: 
 var $272=$Parser_addr; //@line 720 "expression.c"
 _ProgramFail($272,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 720 "expression.c"
 label=105;break; //@line 720 "expression.c"
 case 105: 
 var $273=$Op_addr; //@line 722 "expression.c"
 var $cmp285=($273|0)==20; //@line 722 "expression.c"
 if($cmp285){label=106;break;}else{label=107;break;} //@line 722 "expression.c"
 case 106: 
 var $274=$Parser_addr; //@line 723 "expression.c"
 var $275=$StackTop_addr; //@line 723 "expression.c"
 var $276=$BottomValue_addr; //@line 723 "expression.c"
 var $Val288=(($276+4)|0); //@line 723 "expression.c"
 var $277=HEAP32[(($Val288)>>2)]; //@line 723 "expression.c"
 var $Pointer289=$277; //@line 723 "expression.c"
 var $278=HEAP32[(($Pointer289)>>2)]; //@line 723 "expression.c"
 var $cmp290=($278|0)==0; //@line 723 "expression.c"
 var $conv291=($cmp290&1); //@line 723 "expression.c"
 _ExpressionPushInt($274,$275,$conv291); //@line 723 "expression.c"
 label=108;break; //@line 723 "expression.c"
 case 107: 
 var $279=$Parser_addr; //@line 725 "expression.c"
 var $280=$StackTop_addr; //@line 725 "expression.c"
 var $281=$BottomValue_addr; //@line 725 "expression.c"
 var $Val293=(($281+4)|0); //@line 725 "expression.c"
 var $282=HEAP32[(($Val293)>>2)]; //@line 725 "expression.c"
 var $Pointer294=$282; //@line 725 "expression.c"
 var $283=HEAP32[(($Pointer294)>>2)]; //@line 725 "expression.c"
 var $cmp295=($283|0)!=0; //@line 725 "expression.c"
 var $conv296=($cmp295&1); //@line 725 "expression.c"
 _ExpressionPushInt($279,$280,$conv296); //@line 725 "expression.c"
 label=108;break;
 case 108: 
 label=132;break; //@line 726 "expression.c"
 case 109: 
 var $284=$Op_addr; //@line 727 "expression.c"
 var $cmp299=($284|0)==28; //@line 727 "expression.c"
 if($cmp299){label=111;break;}else{label=110;break;} //@line 727 "expression.c"
 case 110: 
 var $285=$Op_addr; //@line 727 "expression.c"
 var $cmp302=($285|0)==29; //@line 727 "expression.c"
 if($cmp302){label=111;break;}else{label=117;break;} //@line 727 "expression.c"
 case 111: 
 var $286=$BottomValue_addr; //@line 730 "expression.c"
 var $Typ305=(($286)|0); //@line 730 "expression.c"
 var $287=HEAP32[(($Typ305)>>2)]; //@line 730 "expression.c"
 var $FromType306=(($287+20)|0); //@line 730 "expression.c"
 var $288=HEAP32[(($FromType306)>>2)]; //@line 730 "expression.c"
 var $call307=_TypeSize($288,0,1); //@line 730 "expression.c"
 $Size=$call307; //@line 730 "expression.c"
 var $289=$BottomValue_addr; //@line 732 "expression.c"
 var $Val308=(($289+4)|0); //@line 732 "expression.c"
 var $290=HEAP32[(($Val308)>>2)]; //@line 732 "expression.c"
 var $Pointer309=$290; //@line 732 "expression.c"
 var $291=HEAP32[(($Pointer309)>>2)]; //@line 732 "expression.c"
 $Pointer=$291; //@line 732 "expression.c"
 var $292=$Pointer; //@line 733 "expression.c"
 var $cmp310=($292|0)==0; //@line 733 "expression.c"
 if($cmp310){label=112;break;}else{label=113;break;} //@line 733 "expression.c"
 case 112: 
 var $293=$Parser_addr; //@line 734 "expression.c"
 _ProgramFail($293,11736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 734 "expression.c"
 label=113;break; //@line 734 "expression.c"
 case 113: 
 var $294=$Op_addr; //@line 736 "expression.c"
 var $cmp314=($294|0)==28; //@line 736 "expression.c"
 if($cmp314){label=114;break;}else{label=115;break;} //@line 736 "expression.c"
 case 114: 
 var $295=$Pointer; //@line 737 "expression.c"
 var $296=$TopInt273; //@line 737 "expression.c"
 var $297=$Size; //@line 737 "expression.c"
 var $mul317=(Math_imul($296,$297)|0); //@line 737 "expression.c"
 var $add_ptr318=(($295+$mul317)|0); //@line 737 "expression.c"
 $Pointer=$add_ptr318; //@line 737 "expression.c"
 label=116;break; //@line 737 "expression.c"
 case 115: 
 var $298=$Pointer; //@line 739 "expression.c"
 var $299=$TopInt273; //@line 739 "expression.c"
 var $300=$Size; //@line 739 "expression.c"
 var $mul320=(Math_imul($299,$300)|0); //@line 739 "expression.c"
 var $idx_neg=(((-$mul320))|0); //@line 739 "expression.c"
 var $add_ptr321=(($298+$idx_neg)|0); //@line 739 "expression.c"
 $Pointer=$add_ptr321; //@line 739 "expression.c"
 label=116;break;
 case 116: 
 var $301=$Parser_addr; //@line 741 "expression.c"
 var $302=$StackTop_addr; //@line 741 "expression.c"
 var $303=$BottomValue_addr; //@line 741 "expression.c"
 var $Typ323=(($303)|0); //@line 741 "expression.c"
 var $304=HEAP32[(($Typ323)>>2)]; //@line 741 "expression.c"
 var $call324=_ExpressionStackPushValueByType($301,$302,$304); //@line 741 "expression.c"
 $StackValue=$call324; //@line 741 "expression.c"
 var $305=$Pointer; //@line 742 "expression.c"
 var $306=$StackValue; //@line 742 "expression.c"
 var $Val325=(($306+4)|0); //@line 742 "expression.c"
 var $307=HEAP32[(($Val325)>>2)]; //@line 742 "expression.c"
 var $Pointer326=$307; //@line 742 "expression.c"
 HEAP32[(($Pointer326)>>2)]=$305; //@line 742 "expression.c"
 label=131;break; //@line 743 "expression.c"
 case 117: 
 var $308=$Op_addr; //@line 744 "expression.c"
 var $cmp328=($308|0)==2; //@line 744 "expression.c"
 if($cmp328){label=118;break;}else{label=120;break;} //@line 744 "expression.c"
 case 118: 
 var $309=$TopInt273; //@line 744 "expression.c"
 var $cmp331=($309|0)==0; //@line 744 "expression.c"
 if($cmp331){label=119;break;}else{label=120;break;} //@line 744 "expression.c"
 case 119: 
 _HeapUnpopStack(16); //@line 747 "expression.c"
 var $310=$Parser_addr; //@line 748 "expression.c"
 var $311=$BottomValue_addr; //@line 748 "expression.c"
 var $312=$TopValue_addr; //@line 748 "expression.c"
 _ExpressionAssign($310,$311,$312,0,0,0,0); //@line 748 "expression.c"
 var $313=$Parser_addr; //@line 749 "expression.c"
 var $314=$StackTop_addr; //@line 749 "expression.c"
 var $315=$BottomValue_addr; //@line 749 "expression.c"
 _ExpressionStackPushValueNode($313,$314,$315); //@line 749 "expression.c"
 label=130;break; //@line 750 "expression.c"
 case 120: 
 var $316=$Op_addr; //@line 751 "expression.c"
 var $cmp335=($316|0)==3; //@line 751 "expression.c"
 if($cmp335){label=122;break;}else{label=121;break;} //@line 751 "expression.c"
 case 121: 
 var $317=$Op_addr; //@line 751 "expression.c"
 var $cmp338=($317|0)==4; //@line 751 "expression.c"
 if($cmp338){label=122;break;}else{label=128;break;} //@line 751 "expression.c"
 case 122: 
 var $318=$BottomValue_addr; //@line 754 "expression.c"
 var $Typ342=(($318)|0); //@line 754 "expression.c"
 var $319=HEAP32[(($Typ342)>>2)]; //@line 754 "expression.c"
 var $FromType343=(($319+20)|0); //@line 754 "expression.c"
 var $320=HEAP32[(($FromType343)>>2)]; //@line 754 "expression.c"
 var $call344=_TypeSize($320,0,1); //@line 754 "expression.c"
 $Size341=$call344; //@line 754 "expression.c"
 var $321=$BottomValue_addr; //@line 756 "expression.c"
 var $Val345=(($321+4)|0); //@line 756 "expression.c"
 var $322=HEAP32[(($Val345)>>2)]; //@line 756 "expression.c"
 var $Pointer346=$322; //@line 756 "expression.c"
 var $323=HEAP32[(($Pointer346)>>2)]; //@line 756 "expression.c"
 $Pointer=$323; //@line 756 "expression.c"
 var $324=$Pointer; //@line 757 "expression.c"
 var $cmp347=($324|0)==0; //@line 757 "expression.c"
 if($cmp347){label=123;break;}else{label=124;break;} //@line 757 "expression.c"
 case 123: 
 var $325=$Parser_addr; //@line 758 "expression.c"
 _ProgramFail($325,11736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 758 "expression.c"
 label=124;break; //@line 758 "expression.c"
 case 124: 
 var $326=$Op_addr; //@line 760 "expression.c"
 var $cmp351=($326|0)==3; //@line 760 "expression.c"
 if($cmp351){label=125;break;}else{label=126;break;} //@line 760 "expression.c"
 case 125: 
 var $327=$Pointer; //@line 761 "expression.c"
 var $328=$TopInt273; //@line 761 "expression.c"
 var $329=$Size341; //@line 761 "expression.c"
 var $mul354=(Math_imul($328,$329)|0); //@line 761 "expression.c"
 var $add_ptr355=(($327+$mul354)|0); //@line 761 "expression.c"
 $Pointer=$add_ptr355; //@line 761 "expression.c"
 label=127;break; //@line 761 "expression.c"
 case 126: 
 var $330=$Pointer; //@line 763 "expression.c"
 var $331=$TopInt273; //@line 763 "expression.c"
 var $332=$Size341; //@line 763 "expression.c"
 var $mul357=(Math_imul($331,$332)|0); //@line 763 "expression.c"
 var $idx_neg358=(((-$mul357))|0); //@line 763 "expression.c"
 var $add_ptr359=(($330+$idx_neg358)|0); //@line 763 "expression.c"
 $Pointer=$add_ptr359; //@line 763 "expression.c"
 label=127;break;
 case 127: 
 _HeapUnpopStack(16); //@line 765 "expression.c"
 var $333=$Pointer; //@line 766 "expression.c"
 var $334=$BottomValue_addr; //@line 766 "expression.c"
 var $Val361=(($334+4)|0); //@line 766 "expression.c"
 var $335=HEAP32[(($Val361)>>2)]; //@line 766 "expression.c"
 var $Pointer362=$335; //@line 766 "expression.c"
 HEAP32[(($Pointer362)>>2)]=$333; //@line 766 "expression.c"
 var $336=$Parser_addr; //@line 767 "expression.c"
 var $337=$StackTop_addr; //@line 767 "expression.c"
 var $338=$BottomValue_addr; //@line 767 "expression.c"
 _ExpressionStackPushValueNode($336,$337,$338); //@line 767 "expression.c"
 label=129;break; //@line 768 "expression.c"
 case 128: 
 var $339=$Parser_addr; //@line 770 "expression.c"
 _ProgramFail($339,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 770 "expression.c"
 label=129;break;
 case 129: 
 label=130;break;
 case 130: 
 label=131;break;
 case 131: 
 label=132;break;
 case 132: 
 label=150;break; //@line 771 "expression.c"
 case 133: 
 var $340=$BottomValue_addr; //@line 772 "expression.c"
 var $Typ369=(($340)|0); //@line 772 "expression.c"
 var $341=HEAP32[(($Typ369)>>2)]; //@line 772 "expression.c"
 var $Base370=(($341)|0); //@line 772 "expression.c"
 var $342=HEAP32[(($Base370)>>2)]; //@line 772 "expression.c"
 var $cmp371=($342|0)==11; //@line 772 "expression.c"
 if($cmp371){label=134;break;}else{label=142;break;} //@line 772 "expression.c"
 case 134: 
 var $343=$TopValue_addr; //@line 772 "expression.c"
 var $Typ374=(($343)|0); //@line 772 "expression.c"
 var $344=HEAP32[(($Typ374)>>2)]; //@line 772 "expression.c"
 var $Base375=(($344)|0); //@line 772 "expression.c"
 var $345=HEAP32[(($Base375)>>2)]; //@line 772 "expression.c"
 var $cmp376=($345|0)==11; //@line 772 "expression.c"
 if($cmp376){label=135;break;}else{label=142;break;} //@line 772 "expression.c"
 case 135: 
 var $346=$Op_addr; //@line 772 "expression.c"
 var $cmp379=($346|0)!=2; //@line 772 "expression.c"
 if($cmp379){label=136;break;}else{label=142;break;} //@line 772 "expression.c"
 case 136: 
 var $347=$TopValue_addr; //@line 775 "expression.c"
 var $Val382=(($347+4)|0); //@line 775 "expression.c"
 var $348=HEAP32[(($Val382)>>2)]; //@line 775 "expression.c"
 var $Pointer383=$348; //@line 775 "expression.c"
 var $349=HEAP32[(($Pointer383)>>2)]; //@line 775 "expression.c"
 $TopLoc=$349; //@line 775 "expression.c"
 var $350=$BottomValue_addr; //@line 776 "expression.c"
 var $Val384=(($350+4)|0); //@line 776 "expression.c"
 var $351=HEAP32[(($Val384)>>2)]; //@line 776 "expression.c"
 var $Pointer385=$351; //@line 776 "expression.c"
 var $352=HEAP32[(($Pointer385)>>2)]; //@line 776 "expression.c"
 $BottomLoc=$352; //@line 776 "expression.c"
 var $353=$Op_addr; //@line 778 "expression.c"
 if(($353|0)==20){ label=137;break;}else if(($353|0)==21){ label=138;break;}else if(($353|0)==29){ label=139;break;}else{label=140;break;}
 case 137: 
 var $354=$Parser_addr; //@line 780 "expression.c"
 var $355=$StackTop_addr; //@line 780 "expression.c"
 var $356=$BottomLoc; //@line 780 "expression.c"
 var $357=$TopLoc; //@line 780 "expression.c"
 var $cmp387=($356|0)==($357|0); //@line 780 "expression.c"
 var $conv388=($cmp387&1); //@line 780 "expression.c"
 _ExpressionPushInt($354,$355,$conv388); //@line 780 "expression.c"
 label=141;break; //@line 780 "expression.c"
 case 138: 
 var $358=$Parser_addr; //@line 781 "expression.c"
 var $359=$StackTop_addr; //@line 781 "expression.c"
 var $360=$BottomLoc; //@line 781 "expression.c"
 var $361=$TopLoc; //@line 781 "expression.c"
 var $cmp390=($360|0)!=($361|0); //@line 781 "expression.c"
 var $conv391=($cmp390&1); //@line 781 "expression.c"
 _ExpressionPushInt($358,$359,$conv391); //@line 781 "expression.c"
 label=141;break; //@line 781 "expression.c"
 case 139: 
 var $362=$Parser_addr; //@line 782 "expression.c"
 var $363=$StackTop_addr; //@line 782 "expression.c"
 var $364=$BottomLoc; //@line 782 "expression.c"
 var $365=$TopLoc; //@line 782 "expression.c"
 var $sub_ptr_lhs_cast=$364; //@line 782 "expression.c"
 var $sub_ptr_rhs_cast=$365; //@line 782 "expression.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 782 "expression.c"
 _ExpressionPushInt($362,$363,$sub_ptr_sub); //@line 782 "expression.c"
 label=141;break; //@line 782 "expression.c"
 case 140: 
 var $366=$Parser_addr; //@line 783 "expression.c"
 _ProgramFail($366,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 783 "expression.c"
 label=141;break; //@line 783 "expression.c"
 case 141: 
 label=149;break; //@line 785 "expression.c"
 case 142: 
 var $367=$Op_addr; //@line 786 "expression.c"
 var $cmp396=($367|0)==2; //@line 786 "expression.c"
 if($cmp396){label=143;break;}else{label=144;break;} //@line 786 "expression.c"
 case 143: 
 _HeapUnpopStack(16); //@line 789 "expression.c"
 var $368=$Parser_addr; //@line 790 "expression.c"
 var $369=$BottomValue_addr; //@line 790 "expression.c"
 var $370=$TopValue_addr; //@line 790 "expression.c"
 _ExpressionAssign($368,$369,$370,0,0,0,0); //@line 790 "expression.c"
 var $371=$Parser_addr; //@line 791 "expression.c"
 var $372=$StackTop_addr; //@line 791 "expression.c"
 var $373=$BottomValue_addr; //@line 791 "expression.c"
 _ExpressionStackPushValueNode($371,$372,$373); //@line 791 "expression.c"
 label=148;break; //@line 792 "expression.c"
 case 144: 
 var $374=$Op_addr; //@line 793 "expression.c"
 var $cmp400=($374|0)==38; //@line 793 "expression.c"
 if($cmp400){label=145;break;}else{label=146;break;} //@line 793 "expression.c"
 case 145: 
 var $375=$Parser_addr; //@line 796 "expression.c"
 var $376=$StackTop_addr; //@line 796 "expression.c"
 var $377=$BottomValue_addr; //@line 796 "expression.c"
 var $Val403=(($377+4)|0); //@line 796 "expression.c"
 var $378=HEAP32[(($Val403)>>2)]; //@line 796 "expression.c"
 var $Typ404=$378; //@line 796 "expression.c"
 var $379=HEAP32[(($Typ404)>>2)]; //@line 796 "expression.c"
 var $call405=_ExpressionStackPushValueByType($375,$376,$379); //@line 796 "expression.c"
 $ValueLoc=$call405; //@line 796 "expression.c"
 var $380=$Parser_addr; //@line 797 "expression.c"
 var $381=$ValueLoc; //@line 797 "expression.c"
 var $382=$TopValue_addr; //@line 797 "expression.c"
 _ExpressionAssign($380,$381,$382,1,0,0,1); //@line 797 "expression.c"
 label=147;break; //@line 798 "expression.c"
 case 146: 
 var $383=$Parser_addr; //@line 800 "expression.c"
 _ProgramFail($383,120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 800 "expression.c"
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 label=150;break;
 case 150: 
 label=151;break;
 case 151: 
 label=152;break;
 case 152: 
 label=153;break;
 case 153: 
 label=154;break;
 case 154: 
 label=155;break;
 case 155: 
 STACKTOP=sp;return; //@line 801 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionStackCollapse($Parser,$StackTop,$Precedence,$IgnorePrecedence){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $Precedence_addr;
 var $IgnorePrecedence_addr;
 var $FoundPrecedence;
 var $TopValue;
 var $BottomValue;
 var $TopStackNode;
 var $TopOperatorNode;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Precedence_addr=$Precedence;
 $IgnorePrecedence_addr=$IgnorePrecedence;
 var $0=$Precedence_addr; //@line 806 "expression.c"
 $FoundPrecedence=$0; //@line 806 "expression.c"
 var $1=$StackTop_addr; //@line 809 "expression.c"
 var $2=HEAP32[(($1)>>2)]; //@line 809 "expression.c"
 $TopStackNode=$2; //@line 809 "expression.c"
 var $3=$Precedence_addr; //@line 812 "expression.c"
 _debugf(9544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs; //@line 812 "expression.c"
 label=2;break; //@line 816 "expression.c"
 case 2: 
 var $4=$TopStackNode; //@line 816 "expression.c"
 var $cmp=($4|0)!=0; //@line 816 "expression.c"
 if($cmp){label=3;break;}else{var $9=0;label=5;break;} //@line 816 "expression.c"
 case 3: 
 var $5=$TopStackNode; //@line 816 "expression.c"
 var $Next=(($5)|0); //@line 816 "expression.c"
 var $6=HEAP32[(($Next)>>2)]; //@line 816 "expression.c"
 var $cmp1=($6|0)!=0; //@line 816 "expression.c"
 if($cmp1){label=4;break;}else{var $9=0;label=5;break;} //@line 816 "expression.c"
 case 4: 
 var $7=$FoundPrecedence; //@line 816 "expression.c"
 var $8=$Precedence_addr; //@line 816 "expression.c"
 var $cmp2=($7|0)>=($8|0); //@line 816 "expression.c"
 var $9=$cmp2;label=5;break;
 case 5: 
 var $9;
 if($9){label=6;break;}else{label=37;break;}
 case 6: 
 var $10=$TopStackNode; //@line 819 "expression.c"
 var $Order=(($10+14)|0); //@line 819 "expression.c"
 var $11=HEAP8[($Order)]; //@line 819 "expression.c"
 var $conv=($11&255); //@line 819 "expression.c"
 var $cmp3=($conv|0)==0; //@line 819 "expression.c"
 if($cmp3){label=7;break;}else{label=8;break;} //@line 819 "expression.c"
 case 7: 
 var $12=$TopStackNode; //@line 820 "expression.c"
 var $Next5=(($12)|0); //@line 820 "expression.c"
 var $13=HEAP32[(($Next5)>>2)]; //@line 820 "expression.c"
 $TopOperatorNode=$13; //@line 820 "expression.c"
 label=9;break; //@line 820 "expression.c"
 case 8: 
 var $14=$TopStackNode; //@line 822 "expression.c"
 $TopOperatorNode=$14; //@line 822 "expression.c"
 label=9;break;
 case 9: 
 var $15=$TopOperatorNode; //@line 824 "expression.c"
 var $Precedence6=(($15+12)|0); //@line 824 "expression.c"
 var $16=HEAP16[(($Precedence6)>>1)]; //@line 824 "expression.c"
 var $conv7=($16&65535); //@line 824 "expression.c"
 $FoundPrecedence=$conv7; //@line 824 "expression.c"
 var $17=$FoundPrecedence; //@line 827 "expression.c"
 var $18=$Precedence_addr; //@line 827 "expression.c"
 var $cmp8=($17|0)>=($18|0); //@line 827 "expression.c"
 if($cmp8){label=10;break;}else{label=36;break;} //@line 827 "expression.c"
 case 10: 
 var $19=$TopOperatorNode; //@line 827 "expression.c"
 var $cmp11=($19|0)!=0; //@line 827 "expression.c"
 if($cmp11){label=11;break;}else{label=36;break;} //@line 827 "expression.c"
 case 11: 
 var $20=$TopOperatorNode; //@line 830 "expression.c"
 var $Order14=(($20+14)|0); //@line 830 "expression.c"
 var $21=HEAP8[($Order14)]; //@line 830 "expression.c"
 var $conv15=($21&255); //@line 830 "expression.c"
 if(($conv15|0)==1){ label=12;break;}else if(($conv15|0)==3){ label=17;break;}else if(($conv15|0)==2){ label=22;break;}else if(($conv15|0)==0){ label=30;break;}else{label=33;break;}
 case 12: 
 _debugf(9352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 834 "expression.c"
 var $22=$TopStackNode; //@line 835 "expression.c"
 var $Val=(($22+4)|0); //@line 835 "expression.c"
 var $23=HEAP32[(($Val)>>2)]; //@line 835 "expression.c"
 $TopValue=$23; //@line 835 "expression.c"
 var $24=$TopValue; //@line 838 "expression.c"
 var $call=_TypeStackSizeValue($24); //@line 838 "expression.c"
 var $add=((($call)+(32))|0); //@line 838 "expression.c"
 var $call16=_HeapPopStack(0,$add); //@line 838 "expression.c"
 var $25=$TopOperatorNode; //@line 839 "expression.c"
 var $26=$25; //@line 839 "expression.c"
 var $call17=_HeapPopStack($26,16); //@line 839 "expression.c"
 var $27=$TopOperatorNode; //@line 840 "expression.c"
 var $Next18=(($27)|0); //@line 840 "expression.c"
 var $28=HEAP32[(($Next18)>>2)]; //@line 840 "expression.c"
 var $29=$StackTop_addr; //@line 840 "expression.c"
 HEAP32[(($29)>>2)]=$28; //@line 840 "expression.c"
 var $30=$Parser_addr; //@line 843 "expression.c"
 var $Mode=(($30+12)|0); //@line 843 "expression.c"
 var $31=HEAP32[(($Mode)>>2)]; //@line 843 "expression.c"
 var $cmp19=($31|0)==0; //@line 843 "expression.c"
 if($cmp19){label=13;break;}else{label=15;break;} //@line 843 "expression.c"
 case 13: 
 var $32=$FoundPrecedence; //@line 843 "expression.c"
 var $33=$IgnorePrecedence_addr; //@line 843 "expression.c"
 var $34=HEAP32[(($33)>>2)]; //@line 843 "expression.c"
 var $cmp22=($32|0)<($34|0); //@line 843 "expression.c"
 if($cmp22){label=14;break;}else{label=15;break;} //@line 843 "expression.c"
 case 14: 
 var $35=$Parser_addr; //@line 846 "expression.c"
 var $36=$StackTop_addr; //@line 846 "expression.c"
 var $37=$TopOperatorNode; //@line 846 "expression.c"
 var $Op=(($37+8)|0); //@line 846 "expression.c"
 var $38=HEAP32[(($Op)>>2)]; //@line 846 "expression.c"
 var $39=$TopValue; //@line 846 "expression.c"
 _ExpressionPrefixOperator($35,$36,$38,$39); //@line 846 "expression.c"
 label=16;break; //@line 847 "expression.c"
 case 15: 
 var $40=$Parser_addr; //@line 851 "expression.c"
 var $41=$StackTop_addr; //@line 851 "expression.c"
 _ExpressionPushInt($40,$41,0); //@line 851 "expression.c"
 label=16;break;
 case 16: 
 label=33;break; //@line 853 "expression.c"
 case 17: 
 _debugf(9128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 857 "expression.c"
 var $42=$TopStackNode; //@line 858 "expression.c"
 var $Next28=(($42)|0); //@line 858 "expression.c"
 var $43=HEAP32[(($Next28)>>2)]; //@line 858 "expression.c"
 var $Val29=(($43+4)|0); //@line 858 "expression.c"
 var $44=HEAP32[(($Val29)>>2)]; //@line 858 "expression.c"
 $TopValue=$44; //@line 858 "expression.c"
 var $call30=_HeapPopStack(0,16); //@line 861 "expression.c"
 var $45=$TopValue; //@line 862 "expression.c"
 var $46=$45; //@line 862 "expression.c"
 var $47=$TopValue; //@line 862 "expression.c"
 var $call31=_TypeStackSizeValue($47); //@line 862 "expression.c"
 var $add32=((($call31)+(32))|0); //@line 862 "expression.c"
 var $call33=_HeapPopStack($46,$add32); //@line 862 "expression.c"
 var $48=$TopStackNode; //@line 863 "expression.c"
 var $Next34=(($48)|0); //@line 863 "expression.c"
 var $49=HEAP32[(($Next34)>>2)]; //@line 863 "expression.c"
 var $Next35=(($49)|0); //@line 863 "expression.c"
 var $50=HEAP32[(($Next35)>>2)]; //@line 863 "expression.c"
 var $51=$StackTop_addr; //@line 863 "expression.c"
 HEAP32[(($51)>>2)]=$50; //@line 863 "expression.c"
 var $52=$Parser_addr; //@line 866 "expression.c"
 var $Mode36=(($52+12)|0); //@line 866 "expression.c"
 var $53=HEAP32[(($Mode36)>>2)]; //@line 866 "expression.c"
 var $cmp37=($53|0)==0; //@line 866 "expression.c"
 if($cmp37){label=18;break;}else{label=20;break;} //@line 866 "expression.c"
 case 18: 
 var $54=$FoundPrecedence; //@line 866 "expression.c"
 var $55=$IgnorePrecedence_addr; //@line 866 "expression.c"
 var $56=HEAP32[(($55)>>2)]; //@line 866 "expression.c"
 var $cmp40=($54|0)<($56|0); //@line 866 "expression.c"
 if($cmp40){label=19;break;}else{label=20;break;} //@line 866 "expression.c"
 case 19: 
 var $57=$Parser_addr; //@line 869 "expression.c"
 var $58=$StackTop_addr; //@line 869 "expression.c"
 var $59=$TopOperatorNode; //@line 869 "expression.c"
 var $Op43=(($59+8)|0); //@line 869 "expression.c"
 var $60=HEAP32[(($Op43)>>2)]; //@line 869 "expression.c"
 var $61=$TopValue; //@line 869 "expression.c"
 _ExpressionPostfixOperator($57,$58,$60,$61); //@line 869 "expression.c"
 label=21;break; //@line 870 "expression.c"
 case 20: 
 var $62=$Parser_addr; //@line 874 "expression.c"
 var $63=$StackTop_addr; //@line 874 "expression.c"
 _ExpressionPushInt($62,$63,0); //@line 874 "expression.c"
 label=21;break;
 case 21: 
 label=33;break; //@line 876 "expression.c"
 case 22: 
 _debugf(8920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 880 "expression.c"
 var $64=$TopStackNode; //@line 881 "expression.c"
 var $Val47=(($64+4)|0); //@line 881 "expression.c"
 var $65=HEAP32[(($Val47)>>2)]; //@line 881 "expression.c"
 $TopValue=$65; //@line 881 "expression.c"
 var $66=$TopValue; //@line 882 "expression.c"
 var $cmp48=($66|0)!=0; //@line 882 "expression.c"
 if($cmp48){label=23;break;}else{label=28;break;} //@line 882 "expression.c"
 case 23: 
 var $67=$TopOperatorNode; //@line 884 "expression.c"
 var $Next51=(($67)|0); //@line 884 "expression.c"
 var $68=HEAP32[(($Next51)>>2)]; //@line 884 "expression.c"
 var $Val52=(($68+4)|0); //@line 884 "expression.c"
 var $69=HEAP32[(($Val52)>>2)]; //@line 884 "expression.c"
 $BottomValue=$69; //@line 884 "expression.c"
 var $70=$TopValue; //@line 887 "expression.c"
 var $call53=_TypeStackSizeValue($70); //@line 887 "expression.c"
 var $add54=((($call53)+(32))|0); //@line 887 "expression.c"
 var $call55=_HeapPopStack(0,$add54); //@line 887 "expression.c"
 var $call56=_HeapPopStack(0,16); //@line 888 "expression.c"
 var $71=$BottomValue; //@line 889 "expression.c"
 var $72=$71; //@line 889 "expression.c"
 var $73=$BottomValue; //@line 889 "expression.c"
 var $call57=_TypeStackSizeValue($73); //@line 889 "expression.c"
 var $add58=((($call57)+(32))|0); //@line 889 "expression.c"
 var $call59=_HeapPopStack($72,$add58); //@line 889 "expression.c"
 var $74=$TopOperatorNode; //@line 890 "expression.c"
 var $Next60=(($74)|0); //@line 890 "expression.c"
 var $75=HEAP32[(($Next60)>>2)]; //@line 890 "expression.c"
 var $Next61=(($75)|0); //@line 890 "expression.c"
 var $76=HEAP32[(($Next61)>>2)]; //@line 890 "expression.c"
 var $77=$StackTop_addr; //@line 890 "expression.c"
 HEAP32[(($77)>>2)]=$76; //@line 890 "expression.c"
 var $78=$Parser_addr; //@line 893 "expression.c"
 var $Mode62=(($78+12)|0); //@line 893 "expression.c"
 var $79=HEAP32[(($Mode62)>>2)]; //@line 893 "expression.c"
 var $cmp63=($79|0)==0; //@line 893 "expression.c"
 if($cmp63){label=24;break;}else{label=26;break;} //@line 893 "expression.c"
 case 24: 
 var $80=$FoundPrecedence; //@line 893 "expression.c"
 var $81=$IgnorePrecedence_addr; //@line 893 "expression.c"
 var $82=HEAP32[(($81)>>2)]; //@line 893 "expression.c"
 var $cmp66=($80|0)<=($82|0); //@line 893 "expression.c"
 if($cmp66){label=25;break;}else{label=26;break;} //@line 893 "expression.c"
 case 25: 
 var $83=$Parser_addr; //@line 896 "expression.c"
 var $84=$StackTop_addr; //@line 896 "expression.c"
 var $85=$TopOperatorNode; //@line 896 "expression.c"
 var $Op69=(($85+8)|0); //@line 896 "expression.c"
 var $86=HEAP32[(($Op69)>>2)]; //@line 896 "expression.c"
 var $87=$BottomValue; //@line 896 "expression.c"
 var $88=$TopValue; //@line 896 "expression.c"
 _ExpressionInfixOperator($83,$84,$86,$87,$88); //@line 896 "expression.c"
 label=27;break; //@line 897 "expression.c"
 case 26: 
 var $89=$Parser_addr; //@line 901 "expression.c"
 var $90=$StackTop_addr; //@line 901 "expression.c"
 _ExpressionPushInt($89,$90,0); //@line 901 "expression.c"
 label=27;break;
 case 27: 
 label=29;break; //@line 903 "expression.c"
 case 28: 
 $FoundPrecedence=-1; //@line 905 "expression.c"
 label=29;break;
 case 29: 
 label=33;break; //@line 906 "expression.c"
 case 30: 
 var $91=$TopOperatorNode; //@line 910 "expression.c"
 var $Order75=(($91+14)|0); //@line 910 "expression.c"
 var $92=HEAP8[($Order75)]; //@line 910 "expression.c"
 var $conv76=($92&255); //@line 910 "expression.c"
 var $cmp77=($conv76|0)!=0; //@line 910 "expression.c"
 if($cmp77){var $94=1;label=32;break;}else{label=31;break;} //@line 910 "expression.c"
 case 31: 
 ___assert_fail(8728,8488,910,12440); //@line 910 "expression.c"
 throw "Reached an unreachable!"; //@line 910 "expression.c"
 label=32;break; //@line 910 "expression.c"
 case 32: 
 var $94;
 var $lor_ext=($94&1); //@line 910 "expression.c"
 label=33;break; //@line 911 "expression.c"
 case 33: 
 var $95=$FoundPrecedence; //@line 915 "expression.c"
 var $96=$IgnorePrecedence_addr; //@line 915 "expression.c"
 var $97=HEAP32[(($96)>>2)]; //@line 915 "expression.c"
 var $cmp79=($95|0)<=($97|0); //@line 915 "expression.c"
 if($cmp79){label=34;break;}else{label=35;break;} //@line 915 "expression.c"
 case 34: 
 var $98=$IgnorePrecedence_addr; //@line 916 "expression.c"
 HEAP32[(($98)>>2)]=20000; //@line 916 "expression.c"
 label=35;break; //@line 916 "expression.c"
 case 35: 
 label=36;break; //@line 917 "expression.c"
 case 36: 
 var $99=$StackTop_addr; //@line 921 "expression.c"
 var $100=HEAP32[(($99)>>2)]; //@line 921 "expression.c"
 $TopStackNode=$100; //@line 921 "expression.c"
 label=2;break; //@line 922 "expression.c"
 case 37: 
 _debugf(8272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 923 "expression.c"
 STACKTOP=sp;return; //@line 927 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionStackPushOperator($Parser,$StackTop,$Order,$Token,$Precedence){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $StackTop_addr;
 var $Order_addr;
 var $Token_addr;
 var $Precedence_addr;
 var $StackNode;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Order_addr=$Order;
 $Token_addr=$Token;
 $Precedence_addr=$Precedence;
 var $0=$Parser_addr; //@line 932 "expression.c"
 var $call=_VariableAlloc($0,16,0); //@line 932 "expression.c"
 var $1=$call; //@line 932 "expression.c"
 $StackNode=$1; //@line 932 "expression.c"
 var $2=$StackTop_addr; //@line 933 "expression.c"
 var $3=HEAP32[(($2)>>2)]; //@line 933 "expression.c"
 var $4=$StackNode; //@line 933 "expression.c"
 var $Next=(($4)|0); //@line 933 "expression.c"
 HEAP32[(($Next)>>2)]=$3; //@line 933 "expression.c"
 var $5=$Order_addr; //@line 934 "expression.c"
 var $conv=(($5)&255); //@line 934 "expression.c"
 var $6=$StackNode; //@line 934 "expression.c"
 var $Order1=(($6+14)|0); //@line 934 "expression.c"
 HEAP8[($Order1)]=$conv; //@line 934 "expression.c"
 var $7=$Token_addr; //@line 935 "expression.c"
 var $8=$StackNode; //@line 935 "expression.c"
 var $Op=(($8+8)|0); //@line 935 "expression.c"
 HEAP32[(($Op)>>2)]=$7; //@line 935 "expression.c"
 var $9=$Precedence_addr; //@line 936 "expression.c"
 var $conv2=(($9)&65535); //@line 936 "expression.c"
 var $10=$StackNode; //@line 936 "expression.c"
 var $Precedence3=(($10+12)|0); //@line 936 "expression.c"
 HEAP16[(($Precedence3)>>1)]=$conv2; //@line 936 "expression.c"
 var $11=$StackNode; //@line 937 "expression.c"
 var $12=$StackTop_addr; //@line 937 "expression.c"
 HEAP32[(($12)>>2)]=$11; //@line 937 "expression.c"
 _debugf(7984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 938 "expression.c"
 STACKTOP=sp;return; //@line 946 "expression.c"
}
function _ExpressionGetStructElement($Parser,$StackTop,$Token){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $Token_addr;
 var $Ident=sp;
 var $ParamVal;
 var $StructVal=(sp)+(8);
 var $StructType=(sp)+(16);
 var $DerefDataLoc;
 var $MemberValue=(sp)+(24);
 var $Result;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $Token_addr=$Token;
 var $0=$Parser_addr; //@line 954 "expression.c"
 var $call=_LexGetToken($0,$Ident,1); //@line 954 "expression.c"
 var $cmp=($call|0)!=45; //@line 954 "expression.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 954 "expression.c"
 case 2: 
 var $1=$Parser_addr; //@line 955 "expression.c"
 var $2=$Token_addr; //@line 955 "expression.c"
 var $cmp1=($2|0)==41; //@line 955 "expression.c"
 var $cond=$cmp1?7472:7272; //@line 955 "expression.c"
 _ProgramFail($1,7728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$cond,tempVarArgs)); STACKTOP=tempVarArgs; //@line 955 "expression.c"
 label=3;break; //@line 955 "expression.c"
 case 3: 
 var $3=$Parser_addr; //@line 957 "expression.c"
 var $Mode=(($3+12)|0); //@line 957 "expression.c"
 var $4=HEAP32[(($Mode)>>2)]; //@line 957 "expression.c"
 var $cmp2=($4|0)==0; //@line 957 "expression.c"
 if($cmp2){label=4;break;}else{label=15;break;} //@line 957 "expression.c"
 case 4: 
 var $5=$StackTop_addr; //@line 960 "expression.c"
 var $6=HEAP32[(($5)>>2)]; //@line 960 "expression.c"
 var $Val=(($6+4)|0); //@line 960 "expression.c"
 var $7=HEAP32[(($Val)>>2)]; //@line 960 "expression.c"
 $ParamVal=$7; //@line 960 "expression.c"
 var $8=$ParamVal; //@line 961 "expression.c"
 HEAP32[(($StructVal)>>2)]=$8; //@line 961 "expression.c"
 var $9=$ParamVal; //@line 962 "expression.c"
 var $Typ=(($9)|0); //@line 962 "expression.c"
 var $10=HEAP32[(($Typ)>>2)]; //@line 962 "expression.c"
 HEAP32[(($StructType)>>2)]=$10; //@line 962 "expression.c"
 var $11=$ParamVal; //@line 963 "expression.c"
 var $Val4=(($11+4)|0); //@line 963 "expression.c"
 var $12=HEAP32[(($Val4)>>2)]; //@line 963 "expression.c"
 var $13=$12; //@line 963 "expression.c"
 $DerefDataLoc=$13; //@line 963 "expression.c"
 var $14=$Token_addr; //@line 968 "expression.c"
 var $cmp5=($14|0)==42; //@line 968 "expression.c"
 if($cmp5){label=5;break;}else{label=6;break;} //@line 968 "expression.c"
 case 5: 
 var $15=$Parser_addr; //@line 969 "expression.c"
 var $16=$ParamVal; //@line 969 "expression.c"
 var $call7=_VariableDereferencePointer($15,$16,$StructVal,0,$StructType,0); //@line 969 "expression.c"
 $DerefDataLoc=$call7; //@line 969 "expression.c"
 label=6;break; //@line 969 "expression.c"
 case 6: 
 var $17=HEAP32[(($StructType)>>2)]; //@line 971 "expression.c"
 var $Base=(($17)|0); //@line 971 "expression.c"
 var $18=HEAP32[(($Base)>>2)]; //@line 971 "expression.c"
 var $cmp9=($18|0)!=13; //@line 971 "expression.c"
 if($cmp9){label=7;break;}else{label=9;break;} //@line 971 "expression.c"
 case 7: 
 var $19=HEAP32[(($StructType)>>2)]; //@line 971 "expression.c"
 var $Base10=(($19)|0); //@line 971 "expression.c"
 var $20=HEAP32[(($Base10)>>2)]; //@line 971 "expression.c"
 var $cmp11=($20|0)!=14; //@line 971 "expression.c"
 if($cmp11){label=8;break;}else{label=9;break;} //@line 971 "expression.c"
 case 8: 
 var $21=$Parser_addr; //@line 972 "expression.c"
 var $22=$Token_addr; //@line 972 "expression.c"
 var $cmp13=($22|0)==41; //@line 972 "expression.c"
 var $cond14=$cmp13?7472:7272; //@line 972 "expression.c"
 var $23=$Token_addr; //@line 972 "expression.c"
 var $cmp15=($23|0)==42; //@line 972 "expression.c"
 var $cond16=$cmp15?6984:16328; //@line 972 "expression.c"
 var $24=$ParamVal; //@line 972 "expression.c"
 var $Typ17=(($24)|0); //@line 972 "expression.c"
 var $25=HEAP32[(($Typ17)>>2)]; //@line 972 "expression.c"
 _ProgramFail($21,7088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$cond14,HEAP32[(((tempVarArgs)+(8))>>2)]=$cond16,HEAP32[(((tempVarArgs)+(16))>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs; //@line 972 "expression.c"
 label=9;break; //@line 972 "expression.c"
 case 9: 
 var $26=HEAP32[(($StructType)>>2)]; //@line 974 "expression.c"
 var $Members=(($26+32)|0); //@line 974 "expression.c"
 var $27=HEAP32[(($Members)>>2)]; //@line 974 "expression.c"
 var $28=HEAP32[(($Ident)>>2)]; //@line 974 "expression.c"
 var $Val19=(($28+4)|0); //@line 974 "expression.c"
 var $29=HEAP32[(($Val19)>>2)]; //@line 974 "expression.c"
 var $Identifier=$29; //@line 974 "expression.c"
 var $30=HEAP32[(($Identifier)>>2)]; //@line 974 "expression.c"
 var $call20=_TableGet($27,$30,$MemberValue,0,0,0); //@line 974 "expression.c"
 var $tobool=($call20|0)!=0; //@line 974 "expression.c"
 if($tobool){label=11;break;}else{label=10;break;} //@line 974 "expression.c"
 case 10: 
 var $31=$Parser_addr; //@line 975 "expression.c"
 var $32=HEAP32[(($Ident)>>2)]; //@line 975 "expression.c"
 var $Val22=(($32+4)|0); //@line 975 "expression.c"
 var $33=HEAP32[(($Val22)>>2)]; //@line 975 "expression.c"
 var $Identifier23=$33; //@line 975 "expression.c"
 var $34=HEAP32[(($Identifier23)>>2)]; //@line 975 "expression.c"
 _ProgramFail($31,6776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$34,tempVarArgs)); STACKTOP=tempVarArgs; //@line 975 "expression.c"
 label=11;break; //@line 975 "expression.c"
 case 11: 
 var $35=$ParamVal; //@line 978 "expression.c"
 var $36=$35; //@line 978 "expression.c"
 var $37=HEAP32[(($StructVal)>>2)]; //@line 978 "expression.c"
 var $call25=_TypeStackSizeValue($37); //@line 978 "expression.c"
 var $add=((($call25)+(32))|0); //@line 978 "expression.c"
 var $call26=_HeapPopStack($36,$add); //@line 978 "expression.c"
 var $38=$StackTop_addr; //@line 979 "expression.c"
 var $39=HEAP32[(($38)>>2)]; //@line 979 "expression.c"
 var $Next=(($39)|0); //@line 979 "expression.c"
 var $40=HEAP32[(($Next)>>2)]; //@line 979 "expression.c"
 var $41=$StackTop_addr; //@line 979 "expression.c"
 HEAP32[(($41)>>2)]=$40; //@line 979 "expression.c"
 var $42=$Parser_addr; //@line 982 "expression.c"
 var $43=HEAP32[(($MemberValue)>>2)]; //@line 982 "expression.c"
 var $Typ27=(($43)|0); //@line 982 "expression.c"
 var $44=HEAP32[(($Typ27)>>2)]; //@line 982 "expression.c"
 var $45=$DerefDataLoc; //@line 982 "expression.c"
 var $46=HEAP32[(($MemberValue)>>2)]; //@line 982 "expression.c"
 var $Val28=(($46+4)|0); //@line 982 "expression.c"
 var $47=HEAP32[(($Val28)>>2)]; //@line 982 "expression.c"
 var $Integer=$47; //@line 982 "expression.c"
 var $48=HEAP32[(($Integer)>>2)]; //@line 982 "expression.c"
 var $add_ptr=(($45+$48)|0); //@line 982 "expression.c"
 var $49=$add_ptr; //@line 982 "expression.c"
 var $50=HEAP32[(($StructVal)>>2)]; //@line 982 "expression.c"
 var $cmp29=($50|0)!=0; //@line 982 "expression.c"
 if($cmp29){label=12;break;}else{label=13;break;} //@line 982 "expression.c"
 case 12: 
 var $51=HEAP32[(($StructVal)>>2)]; //@line 982 "expression.c"
 var $LValueFrom=(($51+8)|0); //@line 982 "expression.c"
 var $52=HEAP32[(($LValueFrom)>>2)]; //@line 982 "expression.c"
 var $cond30=$52;label=14;break; //@line 982 "expression.c"
 case 13: 
 var $cond30=0;label=14;break; //@line 982 "expression.c"
 case 14: 
 var $cond30; //@line 982 "expression.c"
 var $call31=_VariableAllocValueFromExistingData($42,$44,$49,1,$cond30); //@line 982 "expression.c"
 $Result=$call31; //@line 982 "expression.c"
 var $53=$Parser_addr; //@line 983 "expression.c"
 var $54=$StackTop_addr; //@line 983 "expression.c"
 var $55=$Result; //@line 983 "expression.c"
 _ExpressionStackPushValueNode($53,$54,$55); //@line 983 "expression.c"
 label=15;break; //@line 984 "expression.c"
 case 15: 
 STACKTOP=sp;return; //@line 985 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionParse($Parser,$Result){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Result_addr;
 var $LexValue=sp;
 var $PrefixState;
 var $Done;
 var $BracketPrecedence;
 var $LocalPrecedence;
 var $Precedence;
 var $IgnorePrecedence=(sp)+(8);
 var $StackTop=(sp)+(16);
 var $TernaryDepth;
 var $PreState=(sp)+(24);
 var $Token;
 var $BracketToken;
 var $CastType=(sp)+(56);
 var $CastIdentifier=(sp)+(64);
 var $CastTypeValue;
 var $LHSInt;
 var $VariableValue=(sp)+(72);
 var $MacroParser=(sp)+(80);
 var $MacroResult=(sp)+(112);
 var $Typ181=(sp)+(120);
 var $Identifier182=(sp)+(128);
 var $TypeValue;
 $Parser_addr=$Parser;
 $Result_addr=$Result;
 $PrefixState=1; //@line 991 "expression.c"
 $Done=0; //@line 992 "expression.c"
 $BracketPrecedence=0; //@line 993 "expression.c"
 $Precedence=0; //@line 995 "expression.c"
 HEAP32[(($IgnorePrecedence)>>2)]=20000; //@line 996 "expression.c"
 HEAP32[(($StackTop)>>2)]=0; //@line 997 "expression.c"
 $TernaryDepth=0; //@line 998 "expression.c"
 _debugf(6632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1000 "expression.c"
 label=2;break; //@line 1001 "expression.c"
 case 2: 
 var $0=$Parser_addr; //@line 1006 "expression.c"
 _ParserCopy($PreState,$0); //@line 1006 "expression.c"
 var $1=$Parser_addr; //@line 1007 "expression.c"
 var $call=_LexGetToken($1,$LexValue,1); //@line 1007 "expression.c"
 $Token=$call; //@line 1007 "expression.c"
 var $2=$Token; //@line 1008 "expression.c"
 var $cmp=($2|0)>1; //@line 1008 "expression.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 1008 "expression.c"
 case 3: 
 var $3=$Token; //@line 1008 "expression.c"
 var $cmp1=($3|0)<=43; //@line 1008 "expression.c"
 if($cmp1){label=6;break;}else{label=4;break;} //@line 1008 "expression.c"
 case 4: 
 var $4=$Token; //@line 1008 "expression.c"
 var $cmp2=($4|0)==44; //@line 1008 "expression.c"
 if($cmp2){label=5;break;}else{label=63;break;} //@line 1008 "expression.c"
 case 5: 
 var $5=$BracketPrecedence; //@line 1008 "expression.c"
 var $cmp4=($5|0)!=0; //@line 1008 "expression.c"
 if($cmp4){label=6;break;}else{label=63;break;} //@line 1008 "expression.c"
 case 6: 
 var $6=$Token; //@line 1008 "expression.c"
 var $cmp6=($6|0)!=14; //@line 1008 "expression.c"
 if($cmp6){label=8;break;}else{label=7;break;} //@line 1008 "expression.c"
 case 7: 
 var $7=$TernaryDepth; //@line 1008 "expression.c"
 var $cmp8=($7|0)>0; //@line 1008 "expression.c"
 if($cmp8){label=8;break;}else{label=63;break;} //@line 1008 "expression.c"
 case 8: 
 var $8=$PrefixState; //@line 1013 "expression.c"
 var $tobool=($8|0)!=0; //@line 1013 "expression.c"
 if($tobool){label=9;break;}else{label=23;break;} //@line 1013 "expression.c"
 case 9: 
 var $9=$Token; //@line 1016 "expression.c"
 var $arrayidx=((14848+($9<<3))|0); //@line 1016 "expression.c"
 var $10=$arrayidx; //@line 1016 "expression.c"
 var $11=HEAP32[(($10)>>2)]; //@line 1016 "expression.c"
 var $bf_clear=$11&15; //@line 1016 "expression.c"
 var $cmp10=($bf_clear|0)==0; //@line 1016 "expression.c"
 if($cmp10){label=10;break;}else{label=11;break;} //@line 1016 "expression.c"
 case 10: 
 var $12=$Parser_addr; //@line 1017 "expression.c"
 _ProgramFail($12,6464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1017 "expression.c"
 label=11;break; //@line 1017 "expression.c"
 case 11: 
 var $13=$Token; //@line 1019 "expression.c"
 var $arrayidx12=((14848+($13<<3))|0); //@line 1019 "expression.c"
 var $14=$arrayidx12; //@line 1019 "expression.c"
 var $15=HEAP32[(($14)>>2)]; //@line 1019 "expression.c"
 var $bf_clear13=$15&15; //@line 1019 "expression.c"
 $LocalPrecedence=$bf_clear13; //@line 1019 "expression.c"
 var $16=$BracketPrecedence; //@line 1020 "expression.c"
 var $17=$LocalPrecedence; //@line 1020 "expression.c"
 var $add=((($16)+($17))|0); //@line 1020 "expression.c"
 $Precedence=$add; //@line 1020 "expression.c"
 var $18=$Token; //@line 1022 "expression.c"
 var $cmp14=($18|0)==43; //@line 1022 "expression.c"
 if($cmp14){label=12;break;}else{label=21;break;} //@line 1022 "expression.c"
 case 12: 
 var $19=$Parser_addr; //@line 1025 "expression.c"
 var $call16=_LexGetToken($19,$LexValue,0); //@line 1025 "expression.c"
 $BracketToken=$call16; //@line 1025 "expression.c"
 var $20=$BracketToken; //@line 1026 "expression.c"
 var $cmp17=($20>>>0)>=54; //@line 1026 "expression.c"
 if($cmp17){label=13;break;}else{label=19;break;} //@line 1026 "expression.c"
 case 13: 
 var $21=$BracketToken; //@line 1026 "expression.c"
 var $cmp19=($21>>>0)<=69; //@line 1026 "expression.c"
 if($cmp19){label=14;break;}else{label=19;break;} //@line 1026 "expression.c"
 case 14: 
 var $22=HEAP32[(($StackTop)>>2)]; //@line 1026 "expression.c"
 var $cmp21=($22|0)==0; //@line 1026 "expression.c"
 if($cmp21){label=16;break;}else{label=15;break;} //@line 1026 "expression.c"
 case 15: 
 var $23=HEAP32[(($StackTop)>>2)]; //@line 1026 "expression.c"
 var $Op=(($23+8)|0); //@line 1026 "expression.c"
 var $24=HEAP32[(($Op)>>2)]; //@line 1026 "expression.c"
 var $cmp23=($24|0)!=37; //@line 1026 "expression.c"
 if($cmp23){label=16;break;}else{label=19;break;} //@line 1026 "expression.c"
 case 16: 
 var $25=$Parser_addr; //@line 1033 "expression.c"
 _TypeParse($25,$CastType,$CastIdentifier,0); //@line 1033 "expression.c"
 var $26=$Parser_addr; //@line 1034 "expression.c"
 var $call25=_LexGetToken($26,$LexValue,1); //@line 1034 "expression.c"
 var $cmp26=($call25|0)!=44; //@line 1034 "expression.c"
 if($cmp26){label=17;break;}else{label=18;break;} //@line 1034 "expression.c"
 case 17: 
 var $27=$Parser_addr; //@line 1035 "expression.c"
 _ProgramFail($27,6272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1035 "expression.c"
 label=18;break; //@line 1035 "expression.c"
 case 18: 
 var $28=$BracketPrecedence; //@line 1038 "expression.c"
 var $29=HEAP32[((15152)>>2)]; //@line 1038 "expression.c"
 var $bf_clear29=$29&15; //@line 1038 "expression.c"
 var $add30=((($28)+($bf_clear29))|0); //@line 1038 "expression.c"
 $Precedence=$add30; //@line 1038 "expression.c"
 var $30=$Parser_addr; //@line 1040 "expression.c"
 var $31=$Precedence; //@line 1040 "expression.c"
 var $add31=((($31)+(1))|0); //@line 1040 "expression.c"
 _ExpressionStackCollapse($30,$StackTop,$add31,$IgnorePrecedence); //@line 1040 "expression.c"
 var $32=$Parser_addr; //@line 1041 "expression.c"
 var $call32=_VariableAllocValueFromType($32,17112,0,0,0); //@line 1041 "expression.c"
 $CastTypeValue=$call32; //@line 1041 "expression.c"
 var $33=HEAP32[(($CastType)>>2)]; //@line 1042 "expression.c"
 var $34=$CastTypeValue; //@line 1042 "expression.c"
 var $Val=(($34+4)|0); //@line 1042 "expression.c"
 var $35=HEAP32[(($Val)>>2)]; //@line 1042 "expression.c"
 var $Typ=$35; //@line 1042 "expression.c"
 HEAP32[(($Typ)>>2)]=$33; //@line 1042 "expression.c"
 var $36=$Parser_addr; //@line 1043 "expression.c"
 var $37=$CastTypeValue; //@line 1043 "expression.c"
 _ExpressionStackPushValueNode($36,$StackTop,$37); //@line 1043 "expression.c"
 var $38=$Parser_addr; //@line 1044 "expression.c"
 var $39=$Precedence; //@line 1044 "expression.c"
 _ExpressionStackPushOperator($38,$StackTop,2,38,$39); //@line 1044 "expression.c"
 label=20;break; //@line 1045 "expression.c"
 case 19: 
 var $40=$BracketPrecedence; //@line 1049 "expression.c"
 var $add33=((($40)+(20))|0); //@line 1049 "expression.c"
 $BracketPrecedence=$add33; //@line 1049 "expression.c"
 label=20;break;
 case 20: 
 label=22;break; //@line 1051 "expression.c"
 case 21: 
 var $41=$Parser_addr; //@line 1055 "expression.c"
 var $42=$Precedence; //@line 1055 "expression.c"
 _ExpressionStackCollapse($41,$StackTop,$42,$IgnorePrecedence); //@line 1055 "expression.c"
 var $43=$Parser_addr; //@line 1056 "expression.c"
 var $44=$Token; //@line 1056 "expression.c"
 var $45=$Precedence; //@line 1056 "expression.c"
 _ExpressionStackPushOperator($43,$StackTop,1,$44,$45); //@line 1056 "expression.c"
 label=22;break;
 case 22: 
 label=62;break; //@line 1058 "expression.c"
 case 23: 
 var $46=$Token; //@line 1062 "expression.c"
 var $arrayidx38=((14848+($46<<3))|0); //@line 1062 "expression.c"
 var $47=$arrayidx38; //@line 1062 "expression.c"
 var $48=HEAP32[(($47)>>2)]; //@line 1062 "expression.c"
 var $49=$48>>>4; //@line 1062 "expression.c"
 var $bf_clear39=$49&15; //@line 1062 "expression.c"
 var $cmp40=($bf_clear39|0)!=0; //@line 1062 "expression.c"
 if($cmp40){label=24;break;}else{label=31;break;} //@line 1062 "expression.c"
 case 24: 
 var $50=$Token; //@line 1064 "expression.c"
 if(($50|0)==44|($50|0)==40){ label=25;break;}else{label=29;break;}
 case 25: 
 var $51=$BracketPrecedence; //@line 1068 "expression.c"
 var $cmp42=($51|0)==0; //@line 1068 "expression.c"
 if($cmp42){label=26;break;}else{label=27;break;} //@line 1068 "expression.c"
 case 26: 
 var $52=$Parser_addr; //@line 1071 "expression.c"
 _ParserCopy($52,$PreState); //@line 1071 "expression.c"
 $Done=1; //@line 1072 "expression.c"
 label=28;break; //@line 1073 "expression.c"
 case 27: 
 var $53=$Parser_addr; //@line 1077 "expression.c"
 var $54=$BracketPrecedence; //@line 1077 "expression.c"
 _ExpressionStackCollapse($53,$StackTop,$54,$IgnorePrecedence); //@line 1077 "expression.c"
 var $55=$BracketPrecedence; //@line 1078 "expression.c"
 var $sub=((($55)-(20))|0); //@line 1078 "expression.c"
 $BracketPrecedence=$sub; //@line 1078 "expression.c"
 label=28;break;
 case 28: 
 label=30;break; //@line 1080 "expression.c"
 case 29: 
 var $56=$BracketPrecedence; //@line 1084 "expression.c"
 var $57=$Token; //@line 1084 "expression.c"
 var $arrayidx46=((14848+($57<<3))|0); //@line 1084 "expression.c"
 var $58=$arrayidx46; //@line 1084 "expression.c"
 var $59=HEAP32[(($58)>>2)]; //@line 1084 "expression.c"
 var $60=$59>>>4; //@line 1084 "expression.c"
 var $bf_clear47=$60&15; //@line 1084 "expression.c"
 var $add48=((($56)+($bf_clear47))|0); //@line 1084 "expression.c"
 $Precedence=$add48; //@line 1084 "expression.c"
 var $61=$Parser_addr; //@line 1085 "expression.c"
 var $62=$Precedence; //@line 1085 "expression.c"
 _ExpressionStackCollapse($61,$StackTop,$62,$IgnorePrecedence); //@line 1085 "expression.c"
 var $63=$Parser_addr; //@line 1086 "expression.c"
 var $64=$Token; //@line 1086 "expression.c"
 var $65=$Precedence; //@line 1086 "expression.c"
 _ExpressionStackPushOperator($63,$StackTop,3,$64,$65); //@line 1086 "expression.c"
 label=30;break; //@line 1087 "expression.c"
 case 30: 
 label=61;break; //@line 1089 "expression.c"
 case 31: 
 var $66=$Token; //@line 1090 "expression.c"
 var $arrayidx50=((14848+($66<<3))|0); //@line 1090 "expression.c"
 var $67=$arrayidx50; //@line 1090 "expression.c"
 var $68=HEAP32[(($67)>>2)]; //@line 1090 "expression.c"
 var $69=$68>>>8; //@line 1090 "expression.c"
 var $bf_clear51=$69&15; //@line 1090 "expression.c"
 var $cmp52=($bf_clear51|0)!=0; //@line 1090 "expression.c"
 if($cmp52){label=32;break;}else{label=59;break;} //@line 1090 "expression.c"
 case 32: 
 var $70=$BracketPrecedence; //@line 1093 "expression.c"
 var $71=$Token; //@line 1093 "expression.c"
 var $arrayidx54=((14848+($71<<3))|0); //@line 1093 "expression.c"
 var $72=$arrayidx54; //@line 1093 "expression.c"
 var $73=HEAP32[(($72)>>2)]; //@line 1093 "expression.c"
 var $74=$73>>>8; //@line 1093 "expression.c"
 var $bf_clear55=$74&15; //@line 1093 "expression.c"
 var $add56=((($70)+($bf_clear55))|0); //@line 1093 "expression.c"
 $Precedence=$add56; //@line 1093 "expression.c"
 var $75=$Token; //@line 1097 "expression.c"
 var $arrayidx57=((14848+($75<<3))|0); //@line 1097 "expression.c"
 var $76=$arrayidx57; //@line 1097 "expression.c"
 var $77=HEAP32[(($76)>>2)]; //@line 1097 "expression.c"
 var $78=$77>>>8; //@line 1097 "expression.c"
 var $bf_clear58=$78&15; //@line 1097 "expression.c"
 var $cmp59=($bf_clear58|0)!=2; //@line 1097 "expression.c"
 if($cmp59){label=33;break;}else{label=35;break;} //@line 1097 "expression.c"
 case 33: 
 var $79=$Token; //@line 1097 "expression.c"
 var $arrayidx61=((14848+($79<<3))|0); //@line 1097 "expression.c"
 var $80=$arrayidx61; //@line 1097 "expression.c"
 var $81=HEAP32[(($80)>>2)]; //@line 1097 "expression.c"
 var $82=$81>>>8; //@line 1097 "expression.c"
 var $bf_clear62=$82&15; //@line 1097 "expression.c"
 var $cmp63=($bf_clear62|0)!=14; //@line 1097 "expression.c"
 if($cmp63){label=34;break;}else{label=35;break;} //@line 1097 "expression.c"
 case 34: 
 var $83=$Parser_addr; //@line 1098 "expression.c"
 var $84=$Precedence; //@line 1098 "expression.c"
 _ExpressionStackCollapse($83,$StackTop,$84,$IgnorePrecedence); //@line 1098 "expression.c"
 label=36;break; //@line 1098 "expression.c"
 case 35: 
 var $85=$Parser_addr; //@line 1100 "expression.c"
 var $86=$Precedence; //@line 1100 "expression.c"
 var $add66=((($86)+(1))|0); //@line 1100 "expression.c"
 _ExpressionStackCollapse($85,$StackTop,$add66,$IgnorePrecedence); //@line 1100 "expression.c"
 label=36;break;
 case 36: 
 var $87=$Token; //@line 1102 "expression.c"
 var $cmp68=($87|0)==41; //@line 1102 "expression.c"
 if($cmp68){label=38;break;}else{label=37;break;} //@line 1102 "expression.c"
 case 37: 
 var $88=$Token; //@line 1102 "expression.c"
 var $cmp70=($88|0)==42; //@line 1102 "expression.c"
 if($cmp70){label=38;break;}else{label=39;break;} //@line 1102 "expression.c"
 case 38: 
 var $89=$Parser_addr; //@line 1104 "expression.c"
 var $90=$Token; //@line 1104 "expression.c"
 _ExpressionGetStructElement($89,$StackTop,$90); //@line 1104 "expression.c"
 label=56;break; //@line 1105 "expression.c"
 case 39: 
 var $91=$Token; //@line 1109 "expression.c"
 var $cmp73=($91|0)==15; //@line 1109 "expression.c"
 if($cmp73){label=41;break;}else{label=40;break;} //@line 1109 "expression.c"
 case 40: 
 var $92=$Token; //@line 1109 "expression.c"
 var $cmp75=($92|0)==16; //@line 1109 "expression.c"
 if($cmp75){label=41;break;}else{label=51;break;} //@line 1109 "expression.c"
 case 41: 
 var $93=HEAP32[(($StackTop)>>2)]; //@line 1109 "expression.c"
 var $Val77=(($93+4)|0); //@line 1109 "expression.c"
 var $94=HEAP32[(($Val77)>>2)]; //@line 1109 "expression.c"
 var $Typ78=(($94)|0); //@line 1109 "expression.c"
 var $95=HEAP32[(($Typ78)>>2)]; //@line 1109 "expression.c"
 var $Base=(($95)|0); //@line 1109 "expression.c"
 var $96=HEAP32[(($Base)>>2)]; //@line 1109 "expression.c"
 var $cmp79=($96>>>0)>=1; //@line 1109 "expression.c"
 if($cmp79){label=42;break;}else{label=43;break;} //@line 1109 "expression.c"
 case 42: 
 var $97=HEAP32[(($StackTop)>>2)]; //@line 1109 "expression.c"
 var $Val81=(($97+4)|0); //@line 1109 "expression.c"
 var $98=HEAP32[(($Val81)>>2)]; //@line 1109 "expression.c"
 var $Typ82=(($98)|0); //@line 1109 "expression.c"
 var $99=HEAP32[(($Typ82)>>2)]; //@line 1109 "expression.c"
 var $Base83=(($99)|0); //@line 1109 "expression.c"
 var $100=HEAP32[(($Base83)>>2)]; //@line 1109 "expression.c"
 var $cmp84=($100>>>0)<=7; //@line 1109 "expression.c"
 if($cmp84){label=44;break;}else{label=43;break;} //@line 1109 "expression.c"
 case 43: 
 var $101=HEAP32[(($StackTop)>>2)]; //@line 1109 "expression.c"
 var $Val86=(($101+4)|0); //@line 1109 "expression.c"
 var $102=HEAP32[(($Val86)>>2)]; //@line 1109 "expression.c"
 var $Typ87=(($102)|0); //@line 1109 "expression.c"
 var $103=HEAP32[(($Typ87)>>2)]; //@line 1109 "expression.c"
 var $Base88=(($103)|0); //@line 1109 "expression.c"
 var $104=HEAP32[(($Base88)>>2)]; //@line 1109 "expression.c"
 var $cmp89=($104|0)==8; //@line 1109 "expression.c"
 if($cmp89){label=44;break;}else{label=51;break;} //@line 1109 "expression.c"
 case 44: 
 var $105=HEAP32[(($StackTop)>>2)]; //@line 1111 "expression.c"
 var $Val91=(($105+4)|0); //@line 1111 "expression.c"
 var $106=HEAP32[(($Val91)>>2)]; //@line 1111 "expression.c"
 var $call92=_ExpressionCoerceInteger($106); //@line 1111 "expression.c"
 $LHSInt=$call92; //@line 1111 "expression.c"
 var $107=$Token; //@line 1112 "expression.c"
 var $cmp93=($107|0)==15; //@line 1112 "expression.c"
 if($cmp93){label=45;break;}else{label=46;break;} //@line 1112 "expression.c"
 case 45: 
 var $108=$LHSInt; //@line 1112 "expression.c"
 var $tobool95=($108|0)!=0; //@line 1112 "expression.c"
 if($tobool95){label=48;break;}else{label=46;break;} //@line 1112 "expression.c"
 case 46: 
 var $109=$Token; //@line 1112 "expression.c"
 var $cmp97=($109|0)==16; //@line 1112 "expression.c"
 if($cmp97){label=47;break;}else{label=50;break;} //@line 1112 "expression.c"
 case 47: 
 var $110=$LHSInt; //@line 1112 "expression.c"
 var $tobool99=($110|0)!=0; //@line 1112 "expression.c"
 if($tobool99){label=50;break;}else{label=48;break;} //@line 1112 "expression.c"
 case 48: 
 var $111=HEAP32[(($IgnorePrecedence)>>2)]; //@line 1112 "expression.c"
 var $112=$Precedence; //@line 1112 "expression.c"
 var $cmp101=($111|0)>($112|0); //@line 1112 "expression.c"
 if($cmp101){label=49;break;}else{label=50;break;} //@line 1112 "expression.c"
 case 49: 
 var $113=$Precedence; //@line 1114 "expression.c"
 HEAP32[(($IgnorePrecedence)>>2)]=$113; //@line 1114 "expression.c"
 label=50;break; //@line 1114 "expression.c"
 case 50: 
 label=51;break; //@line 1115 "expression.c"
 case 51: 
 var $114=$Parser_addr; //@line 1118 "expression.c"
 var $115=$Token; //@line 1118 "expression.c"
 var $116=$Precedence; //@line 1118 "expression.c"
 _ExpressionStackPushOperator($114,$StackTop,2,$115,$116); //@line 1118 "expression.c"
 $PrefixState=1; //@line 1119 "expression.c"
 var $117=$Token; //@line 1121 "expression.c"
 if(($117|0)==13){ label=52;break;}else if(($117|0)==14){ label=53;break;}else{label=54;break;}
 case 52: 
 var $118=$TernaryDepth; //@line 1123 "expression.c"
 var $inc=((($118)+(1))|0); //@line 1123 "expression.c"
 $TernaryDepth=$inc; //@line 1123 "expression.c"
 label=55;break; //@line 1123 "expression.c"
 case 53: 
 var $119=$TernaryDepth; //@line 1124 "expression.c"
 var $dec=((($119)-(1))|0); //@line 1124 "expression.c"
 $TernaryDepth=$dec; //@line 1124 "expression.c"
 label=55;break; //@line 1124 "expression.c"
 case 54: 
 label=55;break; //@line 1125 "expression.c"
 case 55: 
 label=56;break;
 case 56: 
 var $120=$Token; //@line 1130 "expression.c"
 var $cmp110=($120|0)==39; //@line 1130 "expression.c"
 if($cmp110){label=57;break;}else{label=58;break;} //@line 1130 "expression.c"
 case 57: 
 var $121=$BracketPrecedence; //@line 1133 "expression.c"
 var $add112=((($121)+(20))|0); //@line 1133 "expression.c"
 $BracketPrecedence=$add112; //@line 1133 "expression.c"
 label=58;break; //@line 1134 "expression.c"
 case 58: 
 label=60;break; //@line 1135 "expression.c"
 case 59: 
 var $122=$Parser_addr; //@line 1137 "expression.c"
 _ProgramFail($122,6464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1137 "expression.c"
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 label=103;break; //@line 1139 "expression.c"
 case 63: 
 var $123=$Token; //@line 1140 "expression.c"
 var $cmp119=($123|0)==45; //@line 1140 "expression.c"
 if($cmp119){label=64;break;}else{label=89;break;} //@line 1140 "expression.c"
 case 64: 
 var $124=$PrefixState; //@line 1143 "expression.c"
 var $tobool121=($124|0)!=0; //@line 1143 "expression.c"
 if($tobool121){label=66;break;}else{label=65;break;} //@line 1143 "expression.c"
 case 65: 
 var $125=$Parser_addr; //@line 1144 "expression.c"
 _ProgramFail($125,6040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1144 "expression.c"
 label=66;break; //@line 1144 "expression.c"
 case 66: 
 var $126=$Parser_addr; //@line 1146 "expression.c"
 var $call124=_LexGetToken($126,0,0); //@line 1146 "expression.c"
 var $cmp125=($call124|0)==43; //@line 1146 "expression.c"
 if($cmp125){label=67;break;}else{label=70;break;} //@line 1146 "expression.c"
 case 67: 
 var $127=$Parser_addr; //@line 1148 "expression.c"
 var $128=HEAP32[(($LexValue)>>2)]; //@line 1148 "expression.c"
 var $Val127=(($128+4)|0); //@line 1148 "expression.c"
 var $129=HEAP32[(($Val127)>>2)]; //@line 1148 "expression.c"
 var $Identifier=$129; //@line 1148 "expression.c"
 var $130=HEAP32[(($Identifier)>>2)]; //@line 1148 "expression.c"
 var $131=$Parser_addr; //@line 1148 "expression.c"
 var $Mode=(($131+12)|0); //@line 1148 "expression.c"
 var $132=HEAP32[(($Mode)>>2)]; //@line 1148 "expression.c"
 var $cmp128=($132|0)==0; //@line 1148 "expression.c"
 if($cmp128){label=68;break;}else{var $135=0;label=69;break;} //@line 1148 "expression.c"
 case 68: 
 var $133=$Precedence; //@line 1148 "expression.c"
 var $134=HEAP32[(($IgnorePrecedence)>>2)]; //@line 1148 "expression.c"
 var $cmp129=($133|0)<($134|0); //@line 1148 "expression.c"
 var $135=$cmp129;label=69;break;
 case 69: 
 var $135;
 var $land_ext=($135&1);
 _ExpressionParseFunctionCall($127,$StackTop,$130,$land_ext);
 label=86;break; //@line 1149 "expression.c"
 case 70: 
 var $136=$Parser_addr; //@line 1152 "expression.c"
 var $Mode131=(($136+12)|0); //@line 1152 "expression.c"
 var $137=HEAP32[(($Mode131)>>2)]; //@line 1152 "expression.c"
 var $cmp132=($137|0)==0; //@line 1152 "expression.c"
 if($cmp132){label=71;break;}else{label=84;break;} //@line 1152 "expression.c"
 case 71: 
 var $138=$Precedence; //@line 1152 "expression.c"
 var $139=HEAP32[(($IgnorePrecedence)>>2)]; //@line 1152 "expression.c"
 var $cmp134=($138|0)<($139|0); //@line 1152 "expression.c"
 if($cmp134){label=72;break;}else{label=84;break;} //@line 1152 "expression.c"
 case 72: 
 HEAP32[(($VariableValue)>>2)]=0; //@line 1154 "expression.c"
 var $140=$Parser_addr; //@line 1156 "expression.c"
 var $141=HEAP32[(($LexValue)>>2)]; //@line 1156 "expression.c"
 var $Val136=(($141+4)|0); //@line 1156 "expression.c"
 var $142=HEAP32[(($Val136)>>2)]; //@line 1156 "expression.c"
 var $Identifier137=$142; //@line 1156 "expression.c"
 var $143=HEAP32[(($Identifier137)>>2)]; //@line 1156 "expression.c"
 _VariableGet($140,$143,$VariableValue); //@line 1156 "expression.c"
 var $144=HEAP32[(($VariableValue)>>2)]; //@line 1157 "expression.c"
 var $Typ138=(($144)|0); //@line 1157 "expression.c"
 var $145=HEAP32[(($Typ138)>>2)]; //@line 1157 "expression.c"
 var $Base139=(($145)|0); //@line 1157 "expression.c"
 var $146=HEAP32[(($Base139)>>2)]; //@line 1157 "expression.c"
 var $cmp140=($146|0)==10; //@line 1157 "expression.c"
 if($cmp140){label=73;break;}else{label=79;break;} //@line 1157 "expression.c"
 case 73: 
 var $147=HEAP32[(($VariableValue)>>2)]; //@line 1163 "expression.c"
 var $Val142=(($147+4)|0); //@line 1163 "expression.c"
 var $148=HEAP32[(($Val142)>>2)]; //@line 1163 "expression.c"
 var $MacroDef=$148; //@line 1163 "expression.c"
 var $Body=(($MacroDef+8)|0); //@line 1163 "expression.c"
 _ParserCopy($MacroParser,$Body); //@line 1163 "expression.c"
 var $149=HEAP32[(($VariableValue)>>2)]; //@line 1164 "expression.c"
 var $Val143=(($149+4)|0); //@line 1164 "expression.c"
 var $150=HEAP32[(($Val143)>>2)]; //@line 1164 "expression.c"
 var $MacroDef144=$150; //@line 1164 "expression.c"
 var $NumParams=(($MacroDef144)|0); //@line 1164 "expression.c"
 var $151=HEAP32[(($NumParams)>>2)]; //@line 1164 "expression.c"
 var $cmp145=($151|0)!=0; //@line 1164 "expression.c"
 if($cmp145){label=74;break;}else{label=75;break;} //@line 1164 "expression.c"
 case 74: 
 _ProgramFail($MacroParser,5832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1165 "expression.c"
 label=75;break; //@line 1165 "expression.c"
 case 75: 
 var $call148=_ExpressionParse($MacroParser,$MacroResult); //@line 1167 "expression.c"
 var $tobool149=($call148|0)!=0; //@line 1167 "expression.c"
 if($tobool149){label=76;break;}else{label=77;break;} //@line 1167 "expression.c"
 case 76: 
 var $call151=_LexGetToken($MacroParser,0,0); //@line 1167 "expression.c"
 var $cmp152=($call151|0)!=95; //@line 1167 "expression.c"
 if($cmp152){label=77;break;}else{label=78;break;} //@line 1167 "expression.c"
 case 77: 
 _ProgramFail($MacroParser,5672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1168 "expression.c"
 label=78;break; //@line 1168 "expression.c"
 case 78: 
 var $152=$Parser_addr; //@line 1170 "expression.c"
 var $153=HEAP32[(($MacroResult)>>2)]; //@line 1170 "expression.c"
 _ExpressionStackPushValueNode($152,$StackTop,$153); //@line 1170 "expression.c"
 label=83;break; //@line 1171 "expression.c"
 case 79: 
 var $154=HEAP32[(($VariableValue)>>2)]; //@line 1172 "expression.c"
 var $Typ156=(($154)|0); //@line 1172 "expression.c"
 var $155=HEAP32[(($Typ156)>>2)]; //@line 1172 "expression.c"
 var $cmp157=($155|0)==0; //@line 1172 "expression.c"
 if($cmp157){label=80;break;}else{label=81;break;} //@line 1172 "expression.c"
 case 80: 
 var $156=$Parser_addr; //@line 1173 "expression.c"
 _ProgramFail($156,5536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1173 "expression.c"
 label=82;break; //@line 1173 "expression.c"
 case 81: 
 var $157=$Parser_addr; //@line 1175 "expression.c"
 var $158=HEAP32[(($VariableValue)>>2)]; //@line 1175 "expression.c"
 _ExpressionStackPushLValue($157,$StackTop,$158,0); //@line 1175 "expression.c"
 label=82;break;
 case 82: 
 label=83;break;
 case 83: 
 label=85;break; //@line 1176 "expression.c"
 case 84: 
 var $159=$Parser_addr; //@line 1178 "expression.c"
 _ExpressionPushInt($159,$StackTop,0); //@line 1178 "expression.c"
 label=85;break;
 case 85: 
 label=86;break;
 case 86: 
 var $160=$Precedence; //@line 1183 "expression.c"
 var $161=HEAP32[(($IgnorePrecedence)>>2)]; //@line 1183 "expression.c"
 var $cmp165=($160|0)<=($161|0); //@line 1183 "expression.c"
 if($cmp165){label=87;break;}else{label=88;break;} //@line 1183 "expression.c"
 case 87: 
 HEAP32[(($IgnorePrecedence)>>2)]=20000; //@line 1184 "expression.c"
 label=88;break; //@line 1184 "expression.c"
 case 88: 
 $PrefixState=0; //@line 1186 "expression.c"
 label=102;break; //@line 1187 "expression.c"
 case 89: 
 var $162=$Token; //@line 1188 "expression.c"
 var $cmp169=($162|0)>44; //@line 1188 "expression.c"
 if($cmp169){label=90;break;}else{label=94;break;} //@line 1188 "expression.c"
 case 90: 
 var $163=$Token; //@line 1188 "expression.c"
 var $cmp171=($163|0)<=49; //@line 1188 "expression.c"
 if($cmp171){label=91;break;}else{label=94;break;} //@line 1188 "expression.c"
 case 91: 
 var $164=$PrefixState; //@line 1191 "expression.c"
 var $tobool173=($164|0)!=0; //@line 1191 "expression.c"
 if($tobool173){label=93;break;}else{label=92;break;} //@line 1191 "expression.c"
 case 92: 
 var $165=$Parser_addr; //@line 1192 "expression.c"
 _ProgramFail($165,5416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1192 "expression.c"
 label=93;break; //@line 1192 "expression.c"
 case 93: 
 $PrefixState=0; //@line 1194 "expression.c"
 var $166=$Parser_addr; //@line 1195 "expression.c"
 var $167=HEAP32[(($LexValue)>>2)]; //@line 1195 "expression.c"
 _ExpressionStackPushValue($166,$StackTop,$167); //@line 1195 "expression.c"
 label=101;break; //@line 1196 "expression.c"
 case 94: 
 var $168=$Token; //@line 1197 "expression.c"
 var $cmp177=($168>>>0)>=54; //@line 1197 "expression.c"
 if($cmp177){label=95;break;}else{label=99;break;} //@line 1197 "expression.c"
 case 95: 
 var $169=$Token; //@line 1197 "expression.c"
 var $cmp179=($169>>>0)<=69; //@line 1197 "expression.c"
 if($cmp179){label=96;break;}else{label=99;break;} //@line 1197 "expression.c"
 case 96: 
 var $170=$PrefixState; //@line 1204 "expression.c"
 var $tobool183=($170|0)!=0; //@line 1204 "expression.c"
 if($tobool183){label=98;break;}else{label=97;break;} //@line 1204 "expression.c"
 case 97: 
 var $171=$Parser_addr; //@line 1205 "expression.c"
 _ProgramFail($171,5280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1205 "expression.c"
 label=98;break; //@line 1205 "expression.c"
 case 98: 
 $PrefixState=0; //@line 1207 "expression.c"
 var $172=$Parser_addr; //@line 1208 "expression.c"
 _ParserCopy($172,$PreState); //@line 1208 "expression.c"
 var $173=$Parser_addr; //@line 1209 "expression.c"
 _TypeParse($173,$Typ181,$Identifier182,0); //@line 1209 "expression.c"
 var $174=$Parser_addr; //@line 1210 "expression.c"
 var $call186=_VariableAllocValueFromType($174,17112,0,0,0); //@line 1210 "expression.c"
 $TypeValue=$call186; //@line 1210 "expression.c"
 var $175=HEAP32[(($Typ181)>>2)]; //@line 1211 "expression.c"
 var $176=$TypeValue; //@line 1211 "expression.c"
 var $Val187=(($176+4)|0); //@line 1211 "expression.c"
 var $177=HEAP32[(($Val187)>>2)]; //@line 1211 "expression.c"
 var $Typ188=$177; //@line 1211 "expression.c"
 HEAP32[(($Typ188)>>2)]=$175; //@line 1211 "expression.c"
 var $178=$Parser_addr; //@line 1212 "expression.c"
 var $179=$TypeValue; //@line 1212 "expression.c"
 _ExpressionStackPushValueNode($178,$StackTop,$179); //@line 1212 "expression.c"
 label=100;break; //@line 1213 "expression.c"
 case 99: 
 var $180=$Parser_addr; //@line 1217 "expression.c"
 _ParserCopy($180,$PreState); //@line 1217 "expression.c"
 $Done=1; //@line 1218 "expression.c"
 label=100;break;
 case 100: 
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 label=104;break; //@line 1221 "expression.c"
 case 104: 
 var $181=$Done; //@line 1221 "expression.c"
 var $tobool194=($181|0)!=0; //@line 1221 "expression.c"
 var $lnot=$tobool194^1; //@line 1221 "expression.c"
 if($lnot){label=2;break;}else{label=105;break;} //@line 1221 "expression.c"
 case 105: 
 var $182=$BracketPrecedence; //@line 1224 "expression.c"
 var $cmp195=($182|0)>0; //@line 1224 "expression.c"
 if($cmp195){label=106;break;}else{label=107;break;} //@line 1224 "expression.c"
 case 106: 
 var $183=$Parser_addr; //@line 1225 "expression.c"
 _ProgramFail($183,6272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1225 "expression.c"
 label=107;break; //@line 1225 "expression.c"
 case 107: 
 var $184=$Parser_addr; //@line 1228 "expression.c"
 _ExpressionStackCollapse($184,$StackTop,0,$IgnorePrecedence); //@line 1228 "expression.c"
 var $185=HEAP32[(($StackTop)>>2)]; //@line 1231 "expression.c"
 var $cmp198=($185|0)!=0; //@line 1231 "expression.c"
 if($cmp198){label=108;break;}else{label=115;break;} //@line 1231 "expression.c"
 case 108: 
 var $186=$Parser_addr; //@line 1234 "expression.c"
 var $Mode200=(($186+12)|0); //@line 1234 "expression.c"
 var $187=HEAP32[(($Mode200)>>2)]; //@line 1234 "expression.c"
 var $cmp201=($187|0)==0; //@line 1234 "expression.c"
 if($cmp201){label=109;break;}else{label=113;break;} //@line 1234 "expression.c"
 case 109: 
 var $188=HEAP32[(($StackTop)>>2)]; //@line 1236 "expression.c"
 var $Order=(($188+14)|0); //@line 1236 "expression.c"
 var $189=HEAP8[($Order)]; //@line 1236 "expression.c"
 var $conv=($189&255); //@line 1236 "expression.c"
 var $cmp203=($conv|0)!=0; //@line 1236 "expression.c"
 if($cmp203){label=111;break;}else{label=110;break;} //@line 1236 "expression.c"
 case 110: 
 var $190=HEAP32[(($StackTop)>>2)]; //@line 1236 "expression.c"
 var $Next=(($190)|0); //@line 1236 "expression.c"
 var $191=HEAP32[(($Next)>>2)]; //@line 1236 "expression.c"
 var $cmp206=($191|0)!=0; //@line 1236 "expression.c"
 if($cmp206){label=111;break;}else{label=112;break;} //@line 1236 "expression.c"
 case 111: 
 var $192=$Parser_addr; //@line 1237 "expression.c"
 _ProgramFail($192,10592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1237 "expression.c"
 label=112;break; //@line 1237 "expression.c"
 case 112: 
 var $193=HEAP32[(($StackTop)>>2)]; //@line 1239 "expression.c"
 var $Val210=(($193+4)|0); //@line 1239 "expression.c"
 var $194=HEAP32[(($Val210)>>2)]; //@line 1239 "expression.c"
 var $195=$Result_addr; //@line 1239 "expression.c"
 HEAP32[(($195)>>2)]=$194; //@line 1239 "expression.c"
 var $196=HEAP32[(($StackTop)>>2)]; //@line 1240 "expression.c"
 var $197=$196; //@line 1240 "expression.c"
 var $call211=_HeapPopStack($197,16); //@line 1240 "expression.c"
 label=114;break; //@line 1241 "expression.c"
 case 113: 
 var $198=HEAP32[(($StackTop)>>2)]; //@line 1243 "expression.c"
 var $Val213=(($198+4)|0); //@line 1243 "expression.c"
 var $199=HEAP32[(($Val213)>>2)]; //@line 1243 "expression.c"
 var $200=$199; //@line 1243 "expression.c"
 var $201=HEAP32[(($StackTop)>>2)]; //@line 1243 "expression.c"
 var $Val214=(($201+4)|0); //@line 1243 "expression.c"
 var $202=HEAP32[(($Val214)>>2)]; //@line 1243 "expression.c"
 var $call215=_TypeStackSizeValue($202); //@line 1243 "expression.c"
 var $add216=((($call215)+(32))|0); //@line 1243 "expression.c"
 var $call217=_HeapPopStack($200,$add216); //@line 1243 "expression.c"
 label=114;break;
 case 114: 
 label=115;break; //@line 1244 "expression.c"
 case 115: 
 _debugf(5176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1246 "expression.c"
 var $203=HEAP32[(($StackTop)>>2)]; //@line 1250 "expression.c"
 var $cmp220=($203|0)!=0; //@line 1250 "expression.c"
 var $conv221=($cmp220&1); //@line 1250 "expression.c"
 STACKTOP=sp;return $conv221; //@line 1250 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionParseFunctionCall($Parser,$StackTop,$FuncName,$RunIt){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $FuncName_addr;
 var $RunIt_addr;
 var $ReturnValue;
 var $FuncValue=sp;
 var $Param=(sp)+(8);
 var $ParamArray;
 var $ArgCount;
 var $Token;
 var $OldMode;
 var $FuncParser=(sp)+(16);
 var $Count;
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $FuncName_addr=$FuncName;
 $RunIt_addr=$RunIt;
 $ReturnValue=0; //@line 1338 "expression.c"
 $ParamArray=0; //@line 1341 "expression.c"
 var $0=$Parser_addr; //@line 1343 "expression.c"
 var $call=_LexGetToken($0,0,1); //@line 1343 "expression.c"
 $Token=$call; //@line 1343 "expression.c"
 var $1=$Parser_addr; //@line 1344 "expression.c"
 var $Mode=(($1+12)|0); //@line 1344 "expression.c"
 var $2=HEAP32[(($Mode)>>2)]; //@line 1344 "expression.c"
 $OldMode=$2; //@line 1344 "expression.c"
 var $3=$RunIt_addr; //@line 1346 "expression.c"
 var $tobool=($3|0)!=0; //@line 1346 "expression.c"
 if($tobool){label=2;break;}else{label=9;break;} //@line 1346 "expression.c"
 case 2: 
 var $4=$Parser_addr; //@line 1349 "expression.c"
 var $5=$FuncName_addr; //@line 1349 "expression.c"
 _VariableGet($4,$5,$FuncValue); //@line 1349 "expression.c"
 var $6=HEAP32[(($FuncValue)>>2)]; //@line 1351 "expression.c"
 var $Typ=(($6)|0); //@line 1351 "expression.c"
 var $7=HEAP32[(($Typ)>>2)]; //@line 1351 "expression.c"
 var $Base=(($7)|0); //@line 1351 "expression.c"
 var $8=HEAP32[(($Base)>>2)]; //@line 1351 "expression.c"
 var $cmp=($8|0)==10; //@line 1351 "expression.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 1351 "expression.c"
 case 3: 
 var $9=$Parser_addr; //@line 1354 "expression.c"
 var $10=$StackTop_addr; //@line 1354 "expression.c"
 var $11=$FuncName_addr; //@line 1354 "expression.c"
 var $12=HEAP32[(($FuncValue)>>2)]; //@line 1354 "expression.c"
 var $Val=(($12+4)|0); //@line 1354 "expression.c"
 var $13=HEAP32[(($Val)>>2)]; //@line 1354 "expression.c"
 var $MacroDef=$13; //@line 1354 "expression.c"
 _ExpressionParseMacroCall($9,$10,$11,$MacroDef); //@line 1354 "expression.c"
 label=56;break; //@line 1355 "expression.c"
 case 4: 
 var $14=HEAP32[(($FuncValue)>>2)]; //@line 1358 "expression.c"
 var $Typ2=(($14)|0); //@line 1358 "expression.c"
 var $15=HEAP32[(($Typ2)>>2)]; //@line 1358 "expression.c"
 var $Base3=(($15)|0); //@line 1358 "expression.c"
 var $16=HEAP32[(($Base3)>>2)]; //@line 1358 "expression.c"
 var $cmp4=($16|0)!=9; //@line 1358 "expression.c"
 if($cmp4){label=5;break;}else{label=6;break;} //@line 1358 "expression.c"
 case 5: 
 var $17=$Parser_addr; //@line 1359 "expression.c"
 var $18=HEAP32[(($FuncValue)>>2)]; //@line 1359 "expression.c"
 var $Typ6=(($18)|0); //@line 1359 "expression.c"
 var $19=HEAP32[(($Typ6)>>2)]; //@line 1359 "expression.c"
 _ProgramFail($17,4080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1359 "expression.c"
 label=6;break; //@line 1359 "expression.c"
 case 6: 
 var $20=$Parser_addr; //@line 1361 "expression.c"
 var $21=$StackTop_addr; //@line 1361 "expression.c"
 var $22=HEAP32[(($FuncValue)>>2)]; //@line 1361 "expression.c"
 var $Val8=(($22+4)|0); //@line 1361 "expression.c"
 var $23=HEAP32[(($Val8)>>2)]; //@line 1361 "expression.c"
 var $FuncDef=$23; //@line 1361 "expression.c"
 var $ReturnType=(($FuncDef)|0); //@line 1361 "expression.c"
 var $24=HEAP32[(($ReturnType)>>2)]; //@line 1361 "expression.c"
 var $call9=_ExpressionStackPushValueByType($20,$21,$24); //@line 1361 "expression.c"
 var $25=$StackTop_addr; //@line 1362 "expression.c"
 var $26=HEAP32[(($25)>>2)]; //@line 1362 "expression.c"
 var $Val10=(($26+4)|0); //@line 1362 "expression.c"
 var $27=HEAP32[(($Val10)>>2)]; //@line 1362 "expression.c"
 $ReturnValue=$27; //@line 1362 "expression.c"
 _HeapPushStackFrame(); //@line 1363 "expression.c"
 var $28=HEAP32[(($FuncValue)>>2)]; //@line 1364 "expression.c"
 var $Val11=(($28+4)|0); //@line 1364 "expression.c"
 var $29=HEAP32[(($Val11)>>2)]; //@line 1364 "expression.c"
 var $FuncDef12=$29; //@line 1364 "expression.c"
 var $NumParams=(($FuncDef12+4)|0); //@line 1364 "expression.c"
 var $30=HEAP32[(($NumParams)>>2)]; //@line 1364 "expression.c"
 var $mul=($30<<2); //@line 1364 "expression.c"
 var $call13=_HeapAllocStack($mul); //@line 1364 "expression.c"
 var $31=$call13; //@line 1364 "expression.c"
 $ParamArray=$31; //@line 1364 "expression.c"
 var $32=$ParamArray; //@line 1365 "expression.c"
 var $cmp14=($32|0)==0; //@line 1365 "expression.c"
 if($cmp14){label=7;break;}else{label=8;break;} //@line 1365 "expression.c"
 case 7: 
 var $33=$Parser_addr; //@line 1366 "expression.c"
 _ProgramFail($33,5024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1366 "expression.c"
 label=8;break; //@line 1366 "expression.c"
 case 8: 
 label=10;break; //@line 1367 "expression.c"
 case 9: 
 var $34=$Parser_addr; //@line 1370 "expression.c"
 var $35=$StackTop_addr; //@line 1370 "expression.c"
 _ExpressionPushInt($34,$35,0); //@line 1370 "expression.c"
 var $36=$Parser_addr; //@line 1371 "expression.c"
 var $Mode17=(($36+12)|0); //@line 1371 "expression.c"
 HEAP32[(($Mode17)>>2)]=1; //@line 1371 "expression.c"
 label=10;break;
 case 10: 
 $ArgCount=0; //@line 1375 "expression.c"
 label=11;break; //@line 1376 "expression.c"
 case 11: 
 var $37=$RunIt_addr; //@line 1377 "expression.c"
 var $tobool19=($37|0)!=0; //@line 1377 "expression.c"
 if($tobool19){label=12;break;}else{label=14;break;} //@line 1377 "expression.c"
 case 12: 
 var $38=$ArgCount; //@line 1377 "expression.c"
 var $39=HEAP32[(($FuncValue)>>2)]; //@line 1377 "expression.c"
 var $Val20=(($39+4)|0); //@line 1377 "expression.c"
 var $40=HEAP32[(($Val20)>>2)]; //@line 1377 "expression.c"
 var $FuncDef21=$40; //@line 1377 "expression.c"
 var $NumParams22=(($FuncDef21+4)|0); //@line 1377 "expression.c"
 var $41=HEAP32[(($NumParams22)>>2)]; //@line 1377 "expression.c"
 var $cmp23=($38|0)<($41|0); //@line 1377 "expression.c"
 if($cmp23){label=13;break;}else{label=14;break;} //@line 1377 "expression.c"
 case 13: 
 var $42=$Parser_addr; //@line 1378 "expression.c"
 var $43=$ArgCount; //@line 1378 "expression.c"
 var $44=HEAP32[(($FuncValue)>>2)]; //@line 1378 "expression.c"
 var $Val25=(($44+4)|0); //@line 1378 "expression.c"
 var $45=HEAP32[(($Val25)>>2)]; //@line 1378 "expression.c"
 var $FuncDef26=$45; //@line 1378 "expression.c"
 var $ParamType=(($FuncDef26+12)|0); //@line 1378 "expression.c"
 var $46=HEAP32[(($ParamType)>>2)]; //@line 1378 "expression.c"
 var $arrayidx=(($46+($43<<2))|0); //@line 1378 "expression.c"
 var $47=HEAP32[(($arrayidx)>>2)]; //@line 1378 "expression.c"
 var $call27=_VariableAllocValueFromType($42,$47,0,0,0); //@line 1378 "expression.c"
 var $48=$ArgCount; //@line 1378 "expression.c"
 var $49=$ParamArray; //@line 1378 "expression.c"
 var $arrayidx28=(($49+($48<<2))|0); //@line 1378 "expression.c"
 HEAP32[(($arrayidx28)>>2)]=$call27; //@line 1378 "expression.c"
 label=14;break; //@line 1378 "expression.c"
 case 14: 
 var $50=$Parser_addr; //@line 1380 "expression.c"
 var $call30=_ExpressionParse($50,$Param); //@line 1380 "expression.c"
 var $tobool31=($call30|0)!=0; //@line 1380 "expression.c"
 if($tobool31){label=15;break;}else{label=26;break;} //@line 1380 "expression.c"
 case 15: 
 var $51=$RunIt_addr; //@line 1382 "expression.c"
 var $tobool33=($51|0)!=0; //@line 1382 "expression.c"
 if($tobool33){label=16;break;}else{label=22;break;} //@line 1382 "expression.c"
 case 16: 
 var $52=$ArgCount; //@line 1384 "expression.c"
 var $53=HEAP32[(($FuncValue)>>2)]; //@line 1384 "expression.c"
 var $Val35=(($53+4)|0); //@line 1384 "expression.c"
 var $54=HEAP32[(($Val35)>>2)]; //@line 1384 "expression.c"
 var $FuncDef36=$54; //@line 1384 "expression.c"
 var $NumParams37=(($FuncDef36+4)|0); //@line 1384 "expression.c"
 var $55=HEAP32[(($NumParams37)>>2)]; //@line 1384 "expression.c"
 var $cmp38=($52|0)<($55|0); //@line 1384 "expression.c"
 if($cmp38){label=17;break;}else{label=18;break;} //@line 1384 "expression.c"
 case 17: 
 var $56=$Parser_addr; //@line 1386 "expression.c"
 var $57=$ArgCount; //@line 1386 "expression.c"
 var $58=$ParamArray; //@line 1386 "expression.c"
 var $arrayidx40=(($58+($57<<2))|0); //@line 1386 "expression.c"
 var $59=HEAP32[(($arrayidx40)>>2)]; //@line 1386 "expression.c"
 var $60=HEAP32[(($Param)>>2)]; //@line 1386 "expression.c"
 var $61=$FuncName_addr; //@line 1386 "expression.c"
 var $62=$ArgCount; //@line 1386 "expression.c"
 var $add=((($62)+(1))|0); //@line 1386 "expression.c"
 _ExpressionAssign($56,$59,$60,1,$61,$add,0); //@line 1386 "expression.c"
 var $63=$Parser_addr; //@line 1387 "expression.c"
 var $64=HEAP32[(($Param)>>2)]; //@line 1387 "expression.c"
 _VariableStackPop($63,$64); //@line 1387 "expression.c"
 label=21;break; //@line 1388 "expression.c"
 case 18: 
 var $65=HEAP32[(($FuncValue)>>2)]; //@line 1391 "expression.c"
 var $Val42=(($65+4)|0); //@line 1391 "expression.c"
 var $66=HEAP32[(($Val42)>>2)]; //@line 1391 "expression.c"
 var $FuncDef43=$66; //@line 1391 "expression.c"
 var $VarArgs=(($FuncDef43+8)|0); //@line 1391 "expression.c"
 var $67=HEAP32[(($VarArgs)>>2)]; //@line 1391 "expression.c"
 var $tobool44=($67|0)!=0; //@line 1391 "expression.c"
 if($tobool44){label=20;break;}else{label=19;break;} //@line 1391 "expression.c"
 case 19: 
 var $68=$Parser_addr; //@line 1392 "expression.c"
 var $69=$FuncName_addr; //@line 1392 "expression.c"
 _ProgramFail($68,4856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$69,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1392 "expression.c"
 label=20;break; //@line 1392 "expression.c"
 case 20: 
 label=21;break;
 case 21: 
 label=22;break; //@line 1394 "expression.c"
 case 22: 
 var $70=$ArgCount; //@line 1396 "expression.c"
 var $inc=((($70)+(1))|0); //@line 1396 "expression.c"
 $ArgCount=$inc; //@line 1396 "expression.c"
 var $71=$Parser_addr; //@line 1397 "expression.c"
 var $call49=_LexGetToken($71,0,1); //@line 1397 "expression.c"
 $Token=$call49; //@line 1397 "expression.c"
 var $72=$Token; //@line 1398 "expression.c"
 var $cmp50=($72|0)!=1; //@line 1398 "expression.c"
 if($cmp50){label=23;break;}else{label=25;break;} //@line 1398 "expression.c"
 case 23: 
 var $73=$Token; //@line 1398 "expression.c"
 var $cmp52=($73|0)!=44; //@line 1398 "expression.c"
 if($cmp52){label=24;break;}else{label=25;break;} //@line 1398 "expression.c"
 case 24: 
 var $74=$Parser_addr; //@line 1399 "expression.c"
 _ProgramFail($74,4624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1399 "expression.c"
 label=25;break; //@line 1399 "expression.c"
 case 25: 
 label=27;break; //@line 1400 "expression.c"
 case 26: 
 var $75=$Parser_addr; //@line 1404 "expression.c"
 var $call56=_LexGetToken($75,0,1); //@line 1404 "expression.c"
 $Token=$call56; //@line 1404 "expression.c"
 label=27;break;
 case 27: 
 label=28;break; //@line 1409 "expression.c"
 case 28: 
 var $76=$Token; //@line 1409 "expression.c"
 var $cmp58=($76|0)!=44; //@line 1409 "expression.c"
 if($cmp58){label=11;break;}else{label=29;break;} //@line 1409 "expression.c"
 case 29: 
 var $77=$RunIt_addr; //@line 1411 "expression.c"
 var $tobool59=($77|0)!=0; //@line 1411 "expression.c"
 if($tobool59){label=30;break;}else{label=55;break;} //@line 1411 "expression.c"
 case 30: 
 var $78=$ArgCount; //@line 1414 "expression.c"
 var $79=HEAP32[(($FuncValue)>>2)]; //@line 1414 "expression.c"
 var $Val61=(($79+4)|0); //@line 1414 "expression.c"
 var $80=HEAP32[(($Val61)>>2)]; //@line 1414 "expression.c"
 var $FuncDef62=$80; //@line 1414 "expression.c"
 var $NumParams63=(($FuncDef62+4)|0); //@line 1414 "expression.c"
 var $81=HEAP32[(($NumParams63)>>2)]; //@line 1414 "expression.c"
 var $cmp64=($78|0)<($81|0); //@line 1414 "expression.c"
 if($cmp64){label=31;break;}else{label=32;break;} //@line 1414 "expression.c"
 case 31: 
 var $82=$Parser_addr; //@line 1415 "expression.c"
 var $83=$FuncName_addr; //@line 1415 "expression.c"
 _ProgramFail($82,4456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$83,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1415 "expression.c"
 label=32;break; //@line 1415 "expression.c"
 case 32: 
 var $84=HEAP32[(($FuncValue)>>2)]; //@line 1417 "expression.c"
 var $Val67=(($84+4)|0); //@line 1417 "expression.c"
 var $85=HEAP32[(($Val67)>>2)]; //@line 1417 "expression.c"
 var $FuncDef68=$85; //@line 1417 "expression.c"
 var $Intrinsic=(($FuncDef68+20)|0); //@line 1417 "expression.c"
 var $86=HEAP32[(($Intrinsic)>>2)]; //@line 1417 "expression.c"
 var $cmp69=($86|0)==0; //@line 1417 "expression.c"
 if($cmp69){label=33;break;}else{label=53;break;} //@line 1417 "expression.c"
 case 33: 
 var $87=HEAP32[(($FuncValue)>>2)]; //@line 1423 "expression.c"
 var $Val71=(($87+4)|0); //@line 1423 "expression.c"
 var $88=HEAP32[(($Val71)>>2)]; //@line 1423 "expression.c"
 var $FuncDef72=$88; //@line 1423 "expression.c"
 var $Body=(($FuncDef72+24)|0); //@line 1423 "expression.c"
 var $Pos=(($Body)|0); //@line 1423 "expression.c"
 var $89=HEAP32[(($Pos)>>2)]; //@line 1423 "expression.c"
 var $cmp73=($89|0)==0; //@line 1423 "expression.c"
 if($cmp73){label=34;break;}else{label=35;break;} //@line 1423 "expression.c"
 case 34: 
 var $90=$Parser_addr; //@line 1424 "expression.c"
 var $91=$FuncName_addr; //@line 1424 "expression.c"
 _ProgramFail($90,4280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$91,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1424 "expression.c"
 label=35;break; //@line 1424 "expression.c"
 case 35: 
 var $92=HEAP32[(($FuncValue)>>2)]; //@line 1426 "expression.c"
 var $Val76=(($92+4)|0); //@line 1426 "expression.c"
 var $93=HEAP32[(($Val76)>>2)]; //@line 1426 "expression.c"
 var $FuncDef77=$93; //@line 1426 "expression.c"
 var $Body78=(($FuncDef77+24)|0); //@line 1426 "expression.c"
 _ParserCopy($FuncParser,$Body78); //@line 1426 "expression.c"
 var $94=$Parser_addr; //@line 1427 "expression.c"
 var $95=$FuncName_addr; //@line 1427 "expression.c"
 var $96=HEAP32[(($FuncValue)>>2)]; //@line 1427 "expression.c"
 var $Val79=(($96+4)|0); //@line 1427 "expression.c"
 var $97=HEAP32[(($Val79)>>2)]; //@line 1427 "expression.c"
 var $FuncDef80=$97; //@line 1427 "expression.c"
 var $Intrinsic81=(($FuncDef80+20)|0); //@line 1427 "expression.c"
 var $98=HEAP32[(($Intrinsic81)>>2)]; //@line 1427 "expression.c"
 var $tobool82=($98|0)!=0; //@line 1427 "expression.c"
 if($tobool82){label=36;break;}else{label=37;break;} //@line 1427 "expression.c"
 case 36: 
 var $99=HEAP32[(($FuncValue)>>2)]; //@line 1427 "expression.c"
 var $Val83=(($99+4)|0); //@line 1427 "expression.c"
 var $100=HEAP32[(($Val83)>>2)]; //@line 1427 "expression.c"
 var $FuncDef84=$100; //@line 1427 "expression.c"
 var $NumParams85=(($FuncDef84+4)|0); //@line 1427 "expression.c"
 var $101=HEAP32[(($NumParams85)>>2)]; //@line 1427 "expression.c"
 var $cond=$101;label=38;break; //@line 1427 "expression.c"
 case 37: 
 var $cond=0;label=38;break; //@line 1427 "expression.c"
 case 38: 
 var $cond; //@line 1427 "expression.c"
 _VariableStackFrameAdd($94,$95,$cond); //@line 1427 "expression.c"
 var $102=$ArgCount; //@line 1428 "expression.c"
 var $103=HEAP32[((17160)>>2)]; //@line 1428 "expression.c"
 var $NumParams86=(($103+44)|0); //@line 1428 "expression.c"
 HEAP32[(($NumParams86)>>2)]=$102; //@line 1428 "expression.c"
 var $104=$ReturnValue; //@line 1429 "expression.c"
 var $105=HEAP32[((17160)>>2)]; //@line 1429 "expression.c"
 var $ReturnValue87=(($105+36)|0); //@line 1429 "expression.c"
 HEAP32[(($ReturnValue87)>>2)]=$104; //@line 1429 "expression.c"
 $Count=0; //@line 1430 "expression.c"
 label=39;break; //@line 1430 "expression.c"
 case 39: 
 var $106=$Count; //@line 1430 "expression.c"
 var $107=HEAP32[(($FuncValue)>>2)]; //@line 1430 "expression.c"
 var $Val88=(($107+4)|0); //@line 1430 "expression.c"
 var $108=HEAP32[(($Val88)>>2)]; //@line 1430 "expression.c"
 var $FuncDef89=$108; //@line 1430 "expression.c"
 var $NumParams90=(($FuncDef89+4)|0); //@line 1430 "expression.c"
 var $109=HEAP32[(($NumParams90)>>2)]; //@line 1430 "expression.c"
 var $cmp91=($106|0)<($109|0); //@line 1430 "expression.c"
 if($cmp91){label=40;break;}else{label=42;break;} //@line 1430 "expression.c"
 case 40: 
 var $110=$Parser_addr; //@line 1431 "expression.c"
 var $111=$Count; //@line 1431 "expression.c"
 var $112=HEAP32[(($FuncValue)>>2)]; //@line 1431 "expression.c"
 var $Val92=(($112+4)|0); //@line 1431 "expression.c"
 var $113=HEAP32[(($Val92)>>2)]; //@line 1431 "expression.c"
 var $FuncDef93=$113; //@line 1431 "expression.c"
 var $ParamName=(($FuncDef93+16)|0); //@line 1431 "expression.c"
 var $114=HEAP32[(($ParamName)>>2)]; //@line 1431 "expression.c"
 var $arrayidx94=(($114+($111<<2))|0); //@line 1431 "expression.c"
 var $115=HEAP32[(($arrayidx94)>>2)]; //@line 1431 "expression.c"
 var $116=$Count; //@line 1431 "expression.c"
 var $117=$ParamArray; //@line 1431 "expression.c"
 var $arrayidx95=(($117+($116<<2))|0); //@line 1431 "expression.c"
 var $118=HEAP32[(($arrayidx95)>>2)]; //@line 1431 "expression.c"
 var $call96=_VariableDefine($110,$115,$118,0,1); //@line 1431 "expression.c"
 label=41;break; //@line 1431 "expression.c"
 case 41: 
 var $119=$Count; //@line 1430 "expression.c"
 var $inc97=((($119)+(1))|0); //@line 1430 "expression.c"
 $Count=$inc97; //@line 1430 "expression.c"
 label=39;break; //@line 1430 "expression.c"
 case 42: 
 var $call98=_ParseStatement($FuncParser,1); //@line 1433 "expression.c"
 var $cmp99=($call98|0)!=2; //@line 1433 "expression.c"
 if($cmp99){label=43;break;}else{label=44;break;} //@line 1433 "expression.c"
 case 43: 
 _ProgramFail($FuncParser,3952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1434 "expression.c"
 label=44;break; //@line 1434 "expression.c"
 case 44: 
 var $120=$RunIt_addr; //@line 1436 "expression.c"
 var $tobool102=($120|0)!=0; //@line 1436 "expression.c"
 if($tobool102){label=45;break;}else{label=52;break;} //@line 1436 "expression.c"
 case 45: 
 var $Mode104=(($FuncParser+12)|0); //@line 1438 "expression.c"
 var $121=HEAP32[(($Mode104)>>2)]; //@line 1438 "expression.c"
 var $cmp105=($121|0)==0; //@line 1438 "expression.c"
 if($cmp105){label=46;break;}else{label=48;break;} //@line 1438 "expression.c"
 case 46: 
 var $122=HEAP32[(($FuncValue)>>2)]; //@line 1438 "expression.c"
 var $Val107=(($122+4)|0); //@line 1438 "expression.c"
 var $123=HEAP32[(($Val107)>>2)]; //@line 1438 "expression.c"
 var $FuncDef108=$123; //@line 1438 "expression.c"
 var $ReturnType109=(($FuncDef108)|0); //@line 1438 "expression.c"
 var $124=HEAP32[(($ReturnType109)>>2)]; //@line 1438 "expression.c"
 var $cmp110=($124|0)!=16856; //@line 1438 "expression.c"
 if($cmp110){label=47;break;}else{label=48;break;} //@line 1438 "expression.c"
 case 47: 
 var $125=HEAP32[(($FuncValue)>>2)]; //@line 1439 "expression.c"
 var $Val112=(($125+4)|0); //@line 1439 "expression.c"
 var $126=HEAP32[(($Val112)>>2)]; //@line 1439 "expression.c"
 var $FuncDef113=$126; //@line 1439 "expression.c"
 var $ReturnType114=(($FuncDef113)|0); //@line 1439 "expression.c"
 var $127=HEAP32[(($ReturnType114)>>2)]; //@line 1439 "expression.c"
 _ProgramFail($FuncParser,3816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$127,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1439 "expression.c"
 label=51;break; //@line 1439 "expression.c"
 case 48: 
 var $Mode116=(($FuncParser+12)|0); //@line 1441 "expression.c"
 var $128=HEAP32[(($Mode116)>>2)]; //@line 1441 "expression.c"
 var $cmp117=($128|0)==6; //@line 1441 "expression.c"
 if($cmp117){label=49;break;}else{label=50;break;} //@line 1441 "expression.c"
 case 49: 
 var $SearchGotoLabel=(($FuncParser+20)|0); //@line 1442 "expression.c"
 var $129=HEAP32[(($SearchGotoLabel)>>2)]; //@line 1442 "expression.c"
 _ProgramFail($FuncParser,3632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$129,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1442 "expression.c"
 label=50;break; //@line 1442 "expression.c"
 case 50: 
 label=51;break;
 case 51: 
 label=52;break; //@line 1443 "expression.c"
 case 52: 
 var $130=$Parser_addr; //@line 1445 "expression.c"
 _VariableStackFramePop($130); //@line 1445 "expression.c"
 label=54;break; //@line 1446 "expression.c"
 case 53: 
 var $131=HEAP32[(($FuncValue)>>2)]; //@line 1448 "expression.c"
 var $Val123=(($131+4)|0); //@line 1448 "expression.c"
 var $132=HEAP32[(($Val123)>>2)]; //@line 1448 "expression.c"
 var $FuncDef124=$132; //@line 1448 "expression.c"
 var $Intrinsic125=(($FuncDef124+20)|0); //@line 1448 "expression.c"
 var $133=HEAP32[(($Intrinsic125)>>2)]; //@line 1448 "expression.c"
 var $134=$Parser_addr; //@line 1448 "expression.c"
 var $135=$ReturnValue; //@line 1448 "expression.c"
 var $136=$ParamArray; //@line 1448 "expression.c"
 var $137=$ArgCount; //@line 1448 "expression.c"
 var $callee_knr_cast=$133; //@line 1448 "expression.c"
 FUNCTION_TABLE[$callee_knr_cast]($134,$135,$136,$137); //@line 1448 "expression.c"
 label=54;break;
 case 54: 
 var $call127=_HeapPopStackFrame(); //@line 1450 "expression.c"
 label=55;break; //@line 1451 "expression.c"
 case 55: 
 var $138=$OldMode; //@line 1453 "expression.c"
 var $139=$Parser_addr; //@line 1453 "expression.c"
 var $Mode129=(($139+12)|0); //@line 1453 "expression.c"
 HEAP32[(($Mode129)>>2)]=$138; //@line 1453 "expression.c"
 label=56;break; //@line 1454 "expression.c"
 case 56: 
 STACKTOP=sp;return; //@line 1454 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionParseMacroCall($Parser,$StackTop,$MacroName,$MDef){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $StackTop_addr;
 var $MacroName_addr;
 var $MDef_addr;
 var $ReturnValue;
 var $Param=sp;
 var $ParamArray;
 var $ArgCount;
 var $Token;
 var $MacroParser=(sp)+(8);
 var $Count;
 var $EvalValue=(sp)+(40);
 $Parser_addr=$Parser;
 $StackTop_addr=$StackTop;
 $MacroName_addr=$MacroName;
 $MDef_addr=$MDef;
 $ReturnValue=0; //@line 1257 "expression.c"
 $ParamArray=0; //@line 1259 "expression.c"
 var $0=$Parser_addr; //@line 1263 "expression.c"
 var $Mode=(($0+12)|0); //@line 1263 "expression.c"
 var $1=HEAP32[(($Mode)>>2)]; //@line 1263 "expression.c"
 var $cmp=($1|0)==0; //@line 1263 "expression.c"
 if($cmp){label=2;break;}else{label=5;break;} //@line 1263 "expression.c"
 case 2: 
 var $2=$Parser_addr; //@line 1267 "expression.c"
 var $3=$StackTop_addr; //@line 1267 "expression.c"
 var $call=_ExpressionStackPushValueByType($2,$3,19032); //@line 1267 "expression.c"
 var $4=$StackTop_addr; //@line 1271 "expression.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1271 "expression.c"
 var $Val=(($5+4)|0); //@line 1271 "expression.c"
 var $6=HEAP32[(($Val)>>2)]; //@line 1271 "expression.c"
 $ReturnValue=$6; //@line 1271 "expression.c"
 _HeapPushStackFrame(); //@line 1272 "expression.c"
 var $7=$MDef_addr; //@line 1273 "expression.c"
 var $NumParams=(($7)|0); //@line 1273 "expression.c"
 var $8=HEAP32[(($NumParams)>>2)]; //@line 1273 "expression.c"
 var $mul=($8<<2); //@line 1273 "expression.c"
 var $call1=_HeapAllocStack($mul); //@line 1273 "expression.c"
 var $9=$call1; //@line 1273 "expression.c"
 $ParamArray=$9; //@line 1273 "expression.c"
 var $10=$ParamArray; //@line 1274 "expression.c"
 var $cmp2=($10|0)==0; //@line 1274 "expression.c"
 if($cmp2){label=3;break;}else{label=4;break;} //@line 1274 "expression.c"
 case 3: 
 var $11=$Parser_addr; //@line 1275 "expression.c"
 _ProgramFail($11,5024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1275 "expression.c"
 label=4;break; //@line 1275 "expression.c"
 case 4: 
 label=6;break; //@line 1276 "expression.c"
 case 5: 
 var $12=$Parser_addr; //@line 1278 "expression.c"
 var $13=$StackTop_addr; //@line 1278 "expression.c"
 _ExpressionPushInt($12,$13,0); //@line 1278 "expression.c"
 label=6;break;
 case 6: 
 $ArgCount=0; //@line 1281 "expression.c"
 label=7;break; //@line 1282 "expression.c"
 case 7: 
 var $14=$Parser_addr; //@line 1283 "expression.c"
 var $call5=_ExpressionParse($14,$Param); //@line 1283 "expression.c"
 var $tobool=($call5|0)!=0; //@line 1283 "expression.c"
 if($tobool){label=8;break;}else{label=17;break;} //@line 1283 "expression.c"
 case 8: 
 var $15=$Parser_addr; //@line 1285 "expression.c"
 var $Mode7=(($15+12)|0); //@line 1285 "expression.c"
 var $16=HEAP32[(($Mode7)>>2)]; //@line 1285 "expression.c"
 var $cmp8=($16|0)==0; //@line 1285 "expression.c"
 if($cmp8){label=9;break;}else{label=13;break;} //@line 1285 "expression.c"
 case 9: 
 var $17=$ArgCount; //@line 1287 "expression.c"
 var $18=$MDef_addr; //@line 1287 "expression.c"
 var $NumParams10=(($18)|0); //@line 1287 "expression.c"
 var $19=HEAP32[(($NumParams10)>>2)]; //@line 1287 "expression.c"
 var $cmp11=($17|0)<($19|0); //@line 1287 "expression.c"
 if($cmp11){label=10;break;}else{label=11;break;} //@line 1287 "expression.c"
 case 10: 
 var $20=HEAP32[(($Param)>>2)]; //@line 1288 "expression.c"
 var $21=$ArgCount; //@line 1288 "expression.c"
 var $22=$ParamArray; //@line 1288 "expression.c"
 var $arrayidx=(($22+($21<<2))|0); //@line 1288 "expression.c"
 HEAP32[(($arrayidx)>>2)]=$20; //@line 1288 "expression.c"
 label=12;break; //@line 1288 "expression.c"
 case 11: 
 var $23=$Parser_addr; //@line 1290 "expression.c"
 var $24=$MacroName_addr; //@line 1290 "expression.c"
 _ProgramFail($23,4856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1290 "expression.c"
 label=12;break;
 case 12: 
 label=13;break; //@line 1291 "expression.c"
 case 13: 
 var $25=$ArgCount; //@line 1293 "expression.c"
 var $inc=((($25)+(1))|0); //@line 1293 "expression.c"
 $ArgCount=$inc; //@line 1293 "expression.c"
 var $26=$Parser_addr; //@line 1294 "expression.c"
 var $call16=_LexGetToken($26,0,1); //@line 1294 "expression.c"
 $Token=$call16; //@line 1294 "expression.c"
 var $27=$Token; //@line 1295 "expression.c"
 var $cmp17=($27|0)!=1; //@line 1295 "expression.c"
 if($cmp17){label=14;break;}else{label=16;break;} //@line 1295 "expression.c"
 case 14: 
 var $28=$Token; //@line 1295 "expression.c"
 var $cmp18=($28|0)!=44; //@line 1295 "expression.c"
 if($cmp18){label=15;break;}else{label=16;break;} //@line 1295 "expression.c"
 case 15: 
 var $29=$Parser_addr; //@line 1296 "expression.c"
 _ProgramFail($29,4624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1296 "expression.c"
 label=16;break; //@line 1296 "expression.c"
 case 16: 
 label=18;break; //@line 1297 "expression.c"
 case 17: 
 var $30=$Parser_addr; //@line 1301 "expression.c"
 var $call22=_LexGetToken($30,0,1); //@line 1301 "expression.c"
 $Token=$call22; //@line 1301 "expression.c"
 label=18;break;
 case 18: 
 label=19;break; //@line 1306 "expression.c"
 case 19: 
 var $31=$Token; //@line 1306 "expression.c"
 var $cmp24=($31|0)!=44; //@line 1306 "expression.c"
 if($cmp24){label=7;break;}else{label=20;break;} //@line 1306 "expression.c"
 case 20: 
 var $32=$Parser_addr; //@line 1308 "expression.c"
 var $Mode25=(($32+12)|0); //@line 1308 "expression.c"
 var $33=HEAP32[(($Mode25)>>2)]; //@line 1308 "expression.c"
 var $cmp26=($33|0)==0; //@line 1308 "expression.c"
 if($cmp26){label=21;break;}else{label=30;break;} //@line 1308 "expression.c"
 case 21: 
 var $34=$ArgCount; //@line 1315 "expression.c"
 var $35=$MDef_addr; //@line 1315 "expression.c"
 var $NumParams28=(($35)|0); //@line 1315 "expression.c"
 var $36=HEAP32[(($NumParams28)>>2)]; //@line 1315 "expression.c"
 var $cmp29=($34|0)<($36|0); //@line 1315 "expression.c"
 if($cmp29){label=22;break;}else{label=23;break;} //@line 1315 "expression.c"
 case 22: 
 var $37=$Parser_addr; //@line 1316 "expression.c"
 var $38=$MacroName_addr; //@line 1316 "expression.c"
 _ProgramFail($37,4456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1316 "expression.c"
 label=23;break; //@line 1316 "expression.c"
 case 23: 
 var $39=$MDef_addr; //@line 1318 "expression.c"
 var $Body=(($39+8)|0); //@line 1318 "expression.c"
 var $Pos=(($Body)|0); //@line 1318 "expression.c"
 var $40=HEAP32[(($Pos)>>2)]; //@line 1318 "expression.c"
 var $cmp32=($40|0)==0; //@line 1318 "expression.c"
 if($cmp32){label=24;break;}else{label=25;break;} //@line 1318 "expression.c"
 case 24: 
 var $41=$Parser_addr; //@line 1319 "expression.c"
 var $42=$MacroName_addr; //@line 1319 "expression.c"
 _ProgramFail($41,4280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1319 "expression.c"
 label=25;break; //@line 1319 "expression.c"
 case 25: 
 var $43=$MDef_addr; //@line 1321 "expression.c"
 var $Body35=(($43+8)|0); //@line 1321 "expression.c"
 _ParserCopy($MacroParser,$Body35); //@line 1321 "expression.c"
 var $44=$Parser_addr; //@line 1322 "expression.c"
 var $45=$MacroName_addr; //@line 1322 "expression.c"
 _VariableStackFrameAdd($44,$45,0); //@line 1322 "expression.c"
 var $46=$ArgCount; //@line 1323 "expression.c"
 var $47=HEAP32[((17160)>>2)]; //@line 1323 "expression.c"
 var $NumParams36=(($47+44)|0); //@line 1323 "expression.c"
 HEAP32[(($NumParams36)>>2)]=$46; //@line 1323 "expression.c"
 var $48=$ReturnValue; //@line 1324 "expression.c"
 var $49=HEAP32[((17160)>>2)]; //@line 1324 "expression.c"
 var $ReturnValue37=(($49+36)|0); //@line 1324 "expression.c"
 HEAP32[(($ReturnValue37)>>2)]=$48; //@line 1324 "expression.c"
 $Count=0; //@line 1325 "expression.c"
 label=26;break; //@line 1325 "expression.c"
 case 26: 
 var $50=$Count; //@line 1325 "expression.c"
 var $51=$MDef_addr; //@line 1325 "expression.c"
 var $NumParams38=(($51)|0); //@line 1325 "expression.c"
 var $52=HEAP32[(($NumParams38)>>2)]; //@line 1325 "expression.c"
 var $cmp39=($50|0)<($52|0); //@line 1325 "expression.c"
 if($cmp39){label=27;break;}else{label=29;break;} //@line 1325 "expression.c"
 case 27: 
 var $53=$Parser_addr; //@line 1326 "expression.c"
 var $54=$Count; //@line 1326 "expression.c"
 var $55=$MDef_addr; //@line 1326 "expression.c"
 var $ParamName=(($55+4)|0); //@line 1326 "expression.c"
 var $56=HEAP32[(($ParamName)>>2)]; //@line 1326 "expression.c"
 var $arrayidx40=(($56+($54<<2))|0); //@line 1326 "expression.c"
 var $57=HEAP32[(($arrayidx40)>>2)]; //@line 1326 "expression.c"
 var $58=$Count; //@line 1326 "expression.c"
 var $59=$ParamArray; //@line 1326 "expression.c"
 var $arrayidx41=(($59+($58<<2))|0); //@line 1326 "expression.c"
 var $60=HEAP32[(($arrayidx41)>>2)]; //@line 1326 "expression.c"
 var $call42=_VariableDefine($53,$57,$60,0,1); //@line 1326 "expression.c"
 label=28;break; //@line 1326 "expression.c"
 case 28: 
 var $61=$Count; //@line 1325 "expression.c"
 var $inc43=((($61)+(1))|0); //@line 1325 "expression.c"
 $Count=$inc43; //@line 1325 "expression.c"
 label=26;break; //@line 1325 "expression.c"
 case 29: 
 var $call44=_ExpressionParse($MacroParser,$EvalValue); //@line 1328 "expression.c"
 var $62=$Parser_addr; //@line 1329 "expression.c"
 var $63=$ReturnValue; //@line 1329 "expression.c"
 var $64=HEAP32[(($EvalValue)>>2)]; //@line 1329 "expression.c"
 var $65=$MacroName_addr; //@line 1329 "expression.c"
 _ExpressionAssign($62,$63,$64,1,$65,0,0); //@line 1329 "expression.c"
 var $66=$Parser_addr; //@line 1330 "expression.c"
 _VariableStackFramePop($66); //@line 1330 "expression.c"
 var $call45=_HeapPopStackFrame(); //@line 1331 "expression.c"
 label=30;break; //@line 1332 "expression.c"
 case 30: 
 STACKTOP=sp;return; //@line 1333 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _ExpressionParseInt($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Val=sp;
 var $Result;
 $Parser_addr=$Parser;
 $Result=0; //@line 1460 "expression.c"
 var $0=$Parser_addr; //@line 1462 "expression.c"
 var $call=_ExpressionParse($0,$Val); //@line 1462 "expression.c"
 var $tobool=($call|0)!=0; //@line 1462 "expression.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 1462 "expression.c"
 case 2: 
 var $1=$Parser_addr; //@line 1463 "expression.c"
 _ProgramFail($1,5672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1463 "expression.c"
 label=3;break; //@line 1463 "expression.c"
 case 3: 
 var $2=$Parser_addr; //@line 1465 "expression.c"
 var $Mode=(($2+12)|0); //@line 1465 "expression.c"
 var $3=HEAP32[(($Mode)>>2)]; //@line 1465 "expression.c"
 var $cmp=($3|0)==0; //@line 1465 "expression.c"
 if($cmp){label=4;break;}else{label=9;break;} //@line 1465 "expression.c"
 case 4: 
 var $4=HEAP32[(($Val)>>2)]; //@line 1467 "expression.c"
 var $Typ=(($4)|0); //@line 1467 "expression.c"
 var $5=HEAP32[(($Typ)>>2)]; //@line 1467 "expression.c"
 var $Base=(($5)|0); //@line 1467 "expression.c"
 var $6=HEAP32[(($Base)>>2)]; //@line 1467 "expression.c"
 var $cmp2=($6>>>0)>=1; //@line 1467 "expression.c"
 if($cmp2){label=5;break;}else{label=6;break;} //@line 1467 "expression.c"
 case 5: 
 var $7=HEAP32[(($Val)>>2)]; //@line 1467 "expression.c"
 var $Typ3=(($7)|0); //@line 1467 "expression.c"
 var $8=HEAP32[(($Typ3)>>2)]; //@line 1467 "expression.c"
 var $Base4=(($8)|0); //@line 1467 "expression.c"
 var $9=HEAP32[(($Base4)>>2)]; //@line 1467 "expression.c"
 var $cmp5=($9>>>0)<=7; //@line 1467 "expression.c"
 if($cmp5){label=8;break;}else{label=6;break;} //@line 1467 "expression.c"
 case 6: 
 var $10=HEAP32[(($Val)>>2)]; //@line 1467 "expression.c"
 var $Typ6=(($10)|0); //@line 1467 "expression.c"
 var $11=HEAP32[(($Typ6)>>2)]; //@line 1467 "expression.c"
 var $Base7=(($11)|0); //@line 1467 "expression.c"
 var $12=HEAP32[(($Base7)>>2)]; //@line 1467 "expression.c"
 var $cmp8=($12|0)==8; //@line 1467 "expression.c"
 if($cmp8){label=8;break;}else{label=7;break;} //@line 1467 "expression.c"
 case 7: 
 var $13=$Parser_addr; //@line 1468 "expression.c"
 var $14=HEAP32[(($Val)>>2)]; //@line 1468 "expression.c"
 var $Typ10=(($14)|0); //@line 1468 "expression.c"
 var $15=HEAP32[(($Typ10)>>2)]; //@line 1468 "expression.c"
 _ProgramFail($13,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1468 "expression.c"
 label=8;break; //@line 1468 "expression.c"
 case 8: 
 var $16=HEAP32[(($Val)>>2)]; //@line 1470 "expression.c"
 var $call12=_ExpressionCoerceInteger($16); //@line 1470 "expression.c"
 $Result=$call12; //@line 1470 "expression.c"
 var $17=$Parser_addr; //@line 1471 "expression.c"
 var $18=HEAP32[(($Val)>>2)]; //@line 1471 "expression.c"
 _VariableStackPop($17,$18); //@line 1471 "expression.c"
 label=9;break; //@line 1472 "expression.c"
 case 9: 
 var $19=$Result; //@line 1474 "expression.c"
 STACKTOP=sp;return $19; //@line 1474 "expression.c"
  default: assert(0, "bad label: " + label);
 }
}
function _HeapInit($StackOrHeapSize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $StackOrHeapSize_addr;
 var $Count;
 var $AlignOffset;
 $StackOrHeapSize_addr=$StackOrHeapSize;
 $AlignOffset=0; //@line 47 "heap.c"
 var $0=$StackOrHeapSize_addr; //@line 50 "heap.c"
 var $call=_malloc($0); //@line 50 "heap.c"
 HEAP32[((18480)>>2)]=$call; //@line 50 "heap.c"
 label=2;break; //@line 53 "heap.c"
 case 2: 
 var $1=$AlignOffset; //@line 53 "heap.c"
 var $2=HEAP32[((18480)>>2)]; //@line 53 "heap.c"
 var $arrayidx=(($2+$1)|0); //@line 53 "heap.c"
 var $3=$arrayidx; //@line 53 "heap.c"
 var $and=$3&3; //@line 53 "heap.c"
 var $cmp=($and|0)!=0; //@line 53 "heap.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 53 "heap.c"
 case 3: 
 var $4=$AlignOffset; //@line 54 "heap.c"
 var $inc=((($4)+(1))|0); //@line 54 "heap.c"
 $AlignOffset=$inc; //@line 54 "heap.c"
 label=2;break; //@line 54 "heap.c"
 case 4: 
 var $5=$AlignOffset; //@line 56 "heap.c"
 var $6=HEAP32[((18480)>>2)]; //@line 56 "heap.c"
 var $arrayidx1=(($6+$5)|0); //@line 56 "heap.c"
 HEAP32[((17976)>>2)]=$arrayidx1; //@line 56 "heap.c"
 var $7=$AlignOffset; //@line 57 "heap.c"
 var $8=HEAP32[((18480)>>2)]; //@line 57 "heap.c"
 var $arrayidx2=(($8+$7)|0); //@line 57 "heap.c"
 HEAP32[((18472)>>2)]=$arrayidx2; //@line 57 "heap.c"
 var $9=HEAP32[((17976)>>2)]; //@line 58 "heap.c"
 var $10=$9; //@line 58 "heap.c"
 HEAP32[(($10)>>2)]=0; //@line 58 "heap.c"
 var $11=$StackOrHeapSize_addr; //@line 59 "heap.c"
 var $sub=((($11)-(4))|0); //@line 59 "heap.c"
 var $12=$AlignOffset; //@line 59 "heap.c"
 var $add=((($sub)+($12))|0); //@line 59 "heap.c"
 var $13=HEAP32[((18480)>>2)]; //@line 59 "heap.c"
 var $arrayidx3=(($13+$add)|0); //@line 59 "heap.c"
 HEAP32[((18488)>>2)]=$arrayidx3; //@line 59 "heap.c"
 HEAP32[((19024)>>2)]=0; //@line 60 "heap.c"
 $Count=0; //@line 61 "heap.c"
 label=5;break; //@line 61 "heap.c"
 case 5: 
 var $14=$Count; //@line 61 "heap.c"
 var $cmp4=($14|0)<8; //@line 61 "heap.c"
 if($cmp4){label=6;break;}else{label=8;break;} //@line 61 "heap.c"
 case 6: 
 var $15=$Count; //@line 62 "heap.c"
 var $arrayidx5=((18992+($15<<2))|0); //@line 62 "heap.c"
 HEAP32[(($arrayidx5)>>2)]=0; //@line 62 "heap.c"
 label=7;break; //@line 62 "heap.c"
 case 7: 
 var $16=$Count; //@line 61 "heap.c"
 var $inc6=((($16)+(1))|0); //@line 61 "heap.c"
 $Count=$inc6; //@line 61 "heap.c"
 label=5;break; //@line 61 "heap.c"
 case 8: 
 return; //@line 63 "heap.c"
  default: assert(0, "bad label: " + label);
 }
}
function _HeapAllocStack($Size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Size_addr;
 var $NewMem;
 var $NewTop;
 $Size_addr=$Size;
 var $0=HEAP32[((18472)>>2)]; //@line 76 "heap.c"
 $NewMem=$0; //@line 76 "heap.c"
 var $1=HEAP32[((18472)>>2)]; //@line 77 "heap.c"
 var $2=$Size_addr; //@line 77 "heap.c"
 var $add=((($2)+(4))|0); //@line 77 "heap.c"
 var $sub=((($add)-(1))|0); //@line 77 "heap.c"
 var $and=$sub&-4; //@line 77 "heap.c"
 var $add_ptr=(($1+$and)|0); //@line 77 "heap.c"
 $NewTop=$add_ptr; //@line 77 "heap.c"
 var $3=$NewTop; //@line 81 "heap.c"
 var $4=HEAP32[((18488)>>2)]; //@line 81 "heap.c"
 var $cmp=($3>>>0)>($4>>>0); //@line 81 "heap.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 81 "heap.c"
 case 2: 
 $retval=0; //@line 82 "heap.c"
 label=4;break; //@line 82 "heap.c"
 case 3: 
 var $5=$NewTop; //@line 84 "heap.c"
 HEAP32[((18472)>>2)]=$5; //@line 84 "heap.c"
 var $6=$NewMem; //@line 85 "heap.c"
 var $7=$Size_addr; //@line 85 "heap.c"
 _memset($6, 0, $7); //@line 85 "heap.c"
 var $8=$NewMem; //@line 86 "heap.c"
 $retval=$8; //@line 86 "heap.c"
 label=4;break; //@line 86 "heap.c"
 case 4: 
 var $9=$retval; //@line 87 "heap.c"
 return $9; //@line 87 "heap.c"
  default: assert(0, "bad label: " + label);
 }
}
function _HeapUnpopStack($Size){
 var label=0;
 var $Size_addr;
 $Size_addr=$Size;
 var $0=HEAP32[((18472)>>2)]; //@line 95 "heap.c"
 var $1=$Size_addr; //@line 95 "heap.c"
 var $add=((($1)+(4))|0); //@line 95 "heap.c"
 var $sub=((($add)-(1))|0); //@line 95 "heap.c"
 var $and=$sub&-4; //@line 95 "heap.c"
 var $add_ptr=(($0+$and)|0); //@line 95 "heap.c"
 HEAP32[((18472)>>2)]=$add_ptr; //@line 95 "heap.c"
 return; //@line 96 "heap.c"
}
function _HeapPopStack($Addr,$Size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Addr_addr;
 var $Size_addr;
 var $ToLose;
 $Addr_addr=$Addr;
 $Size_addr=$Size;
 var $0=$Size_addr; //@line 101 "heap.c"
 var $add=((($0)+(4))|0); //@line 101 "heap.c"
 var $sub=((($add)-(1))|0); //@line 101 "heap.c"
 var $and=$sub&-4; //@line 101 "heap.c"
 $ToLose=$and; //@line 101 "heap.c"
 var $1=$ToLose; //@line 102 "heap.c"
 var $2=HEAP32[((18472)>>2)]; //@line 102 "heap.c"
 var $3=HEAP32[((18480)>>2)]; //@line 102 "heap.c"
 var $arrayidx=(($3)|0); //@line 102 "heap.c"
 var $sub_ptr_lhs_cast=$2; //@line 102 "heap.c"
 var $sub_ptr_rhs_cast=$arrayidx; //@line 102 "heap.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 102 "heap.c"
 var $cmp=($1|0)>($sub_ptr_sub|0); //@line 102 "heap.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 102 "heap.c"
 case 2: 
 $retval=0; //@line 103 "heap.c"
 label=7;break; //@line 103 "heap.c"
 case 3: 
 var $4=HEAP32[((18472)>>2)]; //@line 108 "heap.c"
 var $5=$ToLose; //@line 108 "heap.c"
 var $idx_neg=(((-$5))|0); //@line 108 "heap.c"
 var $add_ptr=(($4+$idx_neg)|0); //@line 108 "heap.c"
 HEAP32[((18472)>>2)]=$add_ptr; //@line 108 "heap.c"
 var $6=$Addr_addr; //@line 109 "heap.c"
 var $cmp1=($6|0)==0; //@line 109 "heap.c"
 if($cmp1){var $10=1;label=6;break;}else{label=4;break;} //@line 109 "heap.c"
 case 4: 
 var $7=HEAP32[((18472)>>2)]; //@line 109 "heap.c"
 var $8=$Addr_addr; //@line 109 "heap.c"
 var $cmp2=($7|0)==($8|0); //@line 109 "heap.c"
 if($cmp2){var $10=1;label=6;break;}else{label=5;break;} //@line 109 "heap.c"
 case 5: 
 ___assert_fail(10200,11520,109,12424); //@line 109 "heap.c"
 throw "Reached an unreachable!"; //@line 109 "heap.c"
 label=6;break; //@line 109 "heap.c"
 case 6: 
 var $10;
 var $lor_ext=($10&1); //@line 109 "heap.c"
 $retval=1; //@line 111 "heap.c"
 label=7;break; //@line 111 "heap.c"
 case 7: 
 var $11=$retval; //@line 112 "heap.c"
 return $11; //@line 112 "heap.c"
  default: assert(0, "bad label: " + label);
 }
}
function _HeapPushStackFrame(){
 var label=0;
 var $0=HEAP32[((17976)>>2)]; //@line 120 "heap.c"
 var $1=HEAP32[((18472)>>2)]; //@line 120 "heap.c"
 var $2=$1; //@line 120 "heap.c"
 HEAP32[(($2)>>2)]=$0; //@line 120 "heap.c"
 var $3=HEAP32[((18472)>>2)]; //@line 121 "heap.c"
 HEAP32[((17976)>>2)]=$3; //@line 121 "heap.c"
 var $4=HEAP32[((18472)>>2)]; //@line 122 "heap.c"
 var $add_ptr=(($4+4)|0); //@line 122 "heap.c"
 HEAP32[((18472)>>2)]=$add_ptr; //@line 122 "heap.c"
 return; //@line 123 "heap.c"
}
function _HeapPopStackFrame(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $0=HEAP32[((17976)>>2)]; //@line 128 "heap.c"
 var $1=$0; //@line 128 "heap.c"
 var $2=HEAP32[(($1)>>2)]; //@line 128 "heap.c"
 var $cmp=($2|0)!=0; //@line 128 "heap.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 128 "heap.c"
 case 2: 
 var $3=HEAP32[((17976)>>2)]; //@line 130 "heap.c"
 HEAP32[((18472)>>2)]=$3; //@line 130 "heap.c"
 var $4=HEAP32[((17976)>>2)]; //@line 131 "heap.c"
 var $5=$4; //@line 131 "heap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 131 "heap.c"
 HEAP32[((17976)>>2)]=$6; //@line 131 "heap.c"
 $retval=1; //@line 135 "heap.c"
 label=4;break; //@line 135 "heap.c"
 case 3: 
 $retval=0; //@line 138 "heap.c"
 label=4;break; //@line 138 "heap.c"
 case 4: 
 var $7=$retval; //@line 139 "heap.c"
 return $7; //@line 139 "heap.c"
  default: assert(0, "bad label: " + label);
 }
}
function _HeapAllocMem($Size){
 var label=0;
 var $Size_addr;
 $Size_addr=$Size;
 var $0=$Size_addr; //@line 145 "heap.c"
 var $call=_calloc($0,1); //@line 145 "heap.c"
 return $call; //@line 145 "heap.c"
}
function _HeapFreeMem($Mem){
 var label=0;
 var $Mem_addr;
 $Mem_addr=$Mem;
 var $0=$Mem_addr; //@line 236 "heap.c"
 _free($0); //@line 236 "heap.c"
 return; //@line 284 "heap.c"
}
function _TypeAdd($Parser,$ParentType,$Base,$ArraySize,$Identifier,$Sizeof,$AlignBytes){
 var label=0;
 var $Parser_addr;
 var $ParentType_addr;
 var $Base_addr;
 var $ArraySize_addr;
 var $Identifier_addr;
 var $Sizeof_addr;
 var $AlignBytes_addr;
 var $NewType;
 $Parser_addr=$Parser;
 $ParentType_addr=$ParentType;
 $Base_addr=$Base;
 $ArraySize_addr=$ArraySize;
 $Identifier_addr=$Identifier;
 $Sizeof_addr=$Sizeof;
 $AlignBytes_addr=$AlignBytes;
 var $0=$Parser_addr; //@line 33 "type.c"
 var $call=_VariableAlloc($0,44,1); //@line 33 "type.c"
 var $1=$call; //@line 33 "type.c"
 $NewType=$1; //@line 33 "type.c"
 var $2=$Base_addr; //@line 34 "type.c"
 var $3=$NewType; //@line 34 "type.c"
 var $Base1=(($3)|0); //@line 34 "type.c"
 HEAP32[(($Base1)>>2)]=$2; //@line 34 "type.c"
 var $4=$ArraySize_addr; //@line 35 "type.c"
 var $5=$NewType; //@line 35 "type.c"
 var $ArraySize2=(($5+4)|0); //@line 35 "type.c"
 HEAP32[(($ArraySize2)>>2)]=$4; //@line 35 "type.c"
 var $6=$Sizeof_addr; //@line 36 "type.c"
 var $7=$NewType; //@line 36 "type.c"
 var $Sizeof3=(($7+8)|0); //@line 36 "type.c"
 HEAP32[(($Sizeof3)>>2)]=$6; //@line 36 "type.c"
 var $8=$AlignBytes_addr; //@line 37 "type.c"
 var $9=$NewType; //@line 37 "type.c"
 var $AlignBytes4=(($9+12)|0); //@line 37 "type.c"
 HEAP32[(($AlignBytes4)>>2)]=$8; //@line 37 "type.c"
 var $10=$Identifier_addr; //@line 38 "type.c"
 var $11=$NewType; //@line 38 "type.c"
 var $Identifier5=(($11+16)|0); //@line 38 "type.c"
 HEAP32[(($Identifier5)>>2)]=$10; //@line 38 "type.c"
 var $12=$NewType; //@line 39 "type.c"
 var $Members=(($12+32)|0); //@line 39 "type.c"
 HEAP32[(($Members)>>2)]=0; //@line 39 "type.c"
 var $13=$ParentType_addr; //@line 40 "type.c"
 var $14=$NewType; //@line 40 "type.c"
 var $FromType=(($14+20)|0); //@line 40 "type.c"
 HEAP32[(($FromType)>>2)]=$13; //@line 40 "type.c"
 var $15=$NewType; //@line 41 "type.c"
 var $DerivedTypeList=(($15+24)|0); //@line 41 "type.c"
 HEAP32[(($DerivedTypeList)>>2)]=0; //@line 41 "type.c"
 var $16=$NewType; //@line 42 "type.c"
 var $OnHeap=(($16+36)|0); //@line 42 "type.c"
 HEAP32[(($OnHeap)>>2)]=1; //@line 42 "type.c"
 var $17=$ParentType_addr; //@line 43 "type.c"
 var $DerivedTypeList6=(($17+24)|0); //@line 43 "type.c"
 var $18=HEAP32[(($DerivedTypeList6)>>2)]; //@line 43 "type.c"
 var $19=$NewType; //@line 43 "type.c"
 var $Next=(($19+28)|0); //@line 43 "type.c"
 HEAP32[(($Next)>>2)]=$18; //@line 43 "type.c"
 var $20=$NewType; //@line 44 "type.c"
 var $21=$ParentType_addr; //@line 44 "type.c"
 var $DerivedTypeList7=(($21+24)|0); //@line 44 "type.c"
 HEAP32[(($DerivedTypeList7)>>2)]=$20; //@line 44 "type.c"
 var $22=$NewType; //@line 46 "type.c"
 return $22; //@line 46 "type.c"
}
function _TypeGetMatching($Parser,$ParentType,$Base,$ArraySize,$Identifier,$AllowDuplicates){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $ParentType_addr;
 var $Base_addr;
 var $ArraySize_addr;
 var $Identifier_addr;
 var $AllowDuplicates_addr;
 var $Sizeof;
 var $AlignBytes;
 var $ThisType;
 $Parser_addr=$Parser;
 $ParentType_addr=$ParentType;
 $Base_addr=$Base;
 $ArraySize_addr=$ArraySize;
 $Identifier_addr=$Identifier;
 $AllowDuplicates_addr=$AllowDuplicates;
 var $0=$ParentType_addr; //@line 55 "type.c"
 var $DerivedTypeList=(($0+24)|0); //@line 55 "type.c"
 var $1=HEAP32[(($DerivedTypeList)>>2)]; //@line 55 "type.c"
 $ThisType=$1; //@line 55 "type.c"
 label=2;break; //@line 56 "type.c"
 case 2: 
 var $2=$ThisType; //@line 56 "type.c"
 var $cmp=($2|0)!=0; //@line 56 "type.c"
 if($cmp){label=3;break;}else{var $13=0;label=7;break;} //@line 56 "type.c"
 case 3: 
 var $3=$ThisType; //@line 56 "type.c"
 var $Base1=(($3)|0); //@line 56 "type.c"
 var $4=HEAP32[(($Base1)>>2)]; //@line 56 "type.c"
 var $5=$Base_addr; //@line 56 "type.c"
 var $cmp2=($4|0)!=($5|0); //@line 56 "type.c"
 if($cmp2){var $12=1;label=6;break;}else{label=4;break;} //@line 56 "type.c"
 case 4: 
 var $6=$ThisType; //@line 56 "type.c"
 var $ArraySize3=(($6+4)|0); //@line 56 "type.c"
 var $7=HEAP32[(($ArraySize3)>>2)]; //@line 56 "type.c"
 var $8=$ArraySize_addr; //@line 56 "type.c"
 var $cmp4=($7|0)!=($8|0); //@line 56 "type.c"
 if($cmp4){var $12=1;label=6;break;}else{label=5;break;} //@line 56 "type.c"
 case 5: 
 var $9=$ThisType; //@line 56 "type.c"
 var $Identifier5=(($9+16)|0); //@line 56 "type.c"
 var $10=HEAP32[(($Identifier5)>>2)]; //@line 56 "type.c"
 var $11=$Identifier_addr; //@line 56 "type.c"
 var $cmp6=($10|0)!=($11|0); //@line 56 "type.c"
 var $12=$cmp6;label=6;break; //@line 56 "type.c"
 case 6: 
 var $12;
 var $13=$12;label=7;break;
 case 7: 
 var $13;
 if($13){label=8;break;}else{label=9;break;}
 case 8: 
 var $14=$ThisType; //@line 57 "type.c"
 var $Next=(($14+28)|0); //@line 57 "type.c"
 var $15=HEAP32[(($Next)>>2)]; //@line 57 "type.c"
 $ThisType=$15; //@line 57 "type.c"
 label=2;break; //@line 57 "type.c"
 case 9: 
 var $16=$ThisType; //@line 59 "type.c"
 var $cmp7=($16|0)!=0; //@line 59 "type.c"
 if($cmp7){label=10;break;}else{label=14;break;} //@line 59 "type.c"
 case 10: 
 var $17=$AllowDuplicates_addr; //@line 61 "type.c"
 var $tobool=($17|0)!=0; //@line 61 "type.c"
 if($tobool){label=11;break;}else{label=12;break;} //@line 61 "type.c"
 case 11: 
 var $18=$ThisType; //@line 62 "type.c"
 $retval=$18; //@line 62 "type.c"
 label=20;break; //@line 62 "type.c"
 case 12: 
 var $19=$Parser_addr; //@line 64 "type.c"
 var $20=$Identifier_addr; //@line 64 "type.c"
 _ProgramFail($19,9592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs; //@line 64 "type.c"
 label=13;break;
 case 13: 
 label=14;break; //@line 65 "type.c"
 case 14: 
 var $21=$Base_addr; //@line 67 "type.c"
 if(($21|0)==11){ label=15;break;}else if(($21|0)==12){ label=16;break;}else if(($21|0)==15){ label=17;break;}else{label=18;break;}
 case 15: 
 $Sizeof=4; //@line 69 "type.c"
 var $22=HEAP32[((18040)>>2)]; //@line 69 "type.c"
 $AlignBytes=$22; //@line 69 "type.c"
 label=19;break; //@line 69 "type.c"
 case 16: 
 var $23=$ArraySize_addr; //@line 70 "type.c"
 var $24=$ParentType_addr; //@line 70 "type.c"
 var $Sizeof11=(($24+8)|0); //@line 70 "type.c"
 var $25=HEAP32[(($Sizeof11)>>2)]; //@line 70 "type.c"
 var $mul=(Math_imul($23,$25)|0); //@line 70 "type.c"
 $Sizeof=$mul; //@line 70 "type.c"
 var $26=$ParentType_addr; //@line 70 "type.c"
 var $AlignBytes12=(($26+12)|0); //@line 70 "type.c"
 var $27=HEAP32[(($AlignBytes12)>>2)]; //@line 70 "type.c"
 $AlignBytes=$27; //@line 70 "type.c"
 label=19;break; //@line 70 "type.c"
 case 17: 
 $Sizeof=4; //@line 71 "type.c"
 var $28=HEAP32[((18456)>>2)]; //@line 71 "type.c"
 $AlignBytes=$28; //@line 71 "type.c"
 label=19;break; //@line 71 "type.c"
 case 18: 
 $Sizeof=0; //@line 72 "type.c"
 $AlignBytes=0; //@line 72 "type.c"
 label=19;break; //@line 72 "type.c"
 case 19: 
 var $29=$Parser_addr; //@line 75 "type.c"
 var $30=$ParentType_addr; //@line 75 "type.c"
 var $31=$Base_addr; //@line 75 "type.c"
 var $32=$ArraySize_addr; //@line 75 "type.c"
 var $33=$Identifier_addr; //@line 75 "type.c"
 var $34=$Sizeof; //@line 75 "type.c"
 var $35=$AlignBytes; //@line 75 "type.c"
 var $call=_TypeAdd($29,$30,$31,$32,$33,$34,$35); //@line 75 "type.c"
 $retval=$call; //@line 75 "type.c"
 label=20;break; //@line 75 "type.c"
 case 20: 
 var $36=$retval; //@line 76 "type.c"
 STACKTOP=sp;return $36; //@line 76 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeStackSizeValue($Val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Val_addr;
 $Val_addr=$Val;
 var $0=$Val_addr; //@line 81 "type.c"
 var $cmp=($0|0)!=0; //@line 81 "type.c"
 if($cmp){label=2;break;}else{label=4;break;} //@line 81 "type.c"
 case 2: 
 var $1=$Val_addr; //@line 81 "type.c"
 var $ValOnStack=(($1+13)|0); //@line 81 "type.c"
 var $2=HEAP8[($ValOnStack)]; //@line 81 "type.c"
 var $conv=(($2<<24)>>24); //@line 81 "type.c"
 var $tobool=($conv|0)!=0; //@line 81 "type.c"
 if($tobool){label=3;break;}else{label=4;break;} //@line 81 "type.c"
 case 3: 
 var $3=$Val_addr; //@line 82 "type.c"
 var $call=_TypeSizeValue($3,0); //@line 82 "type.c"
 $retval=$call; //@line 82 "type.c"
 label=5;break; //@line 82 "type.c"
 case 4: 
 $retval=0; //@line 84 "type.c"
 label=5;break; //@line 84 "type.c"
 case 5: 
 var $4=$retval; //@line 85 "type.c"
 return $4; //@line 85 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeSizeValue($Val,$Compact){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Val_addr;
 var $Compact_addr;
 $Val_addr=$Val;
 $Compact_addr=$Compact;
 var $0=$Val_addr; //@line 90 "type.c"
 var $Typ=(($0)|0); //@line 90 "type.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 90 "type.c"
 var $Base=(($1)|0); //@line 90 "type.c"
 var $2=HEAP32[(($Base)>>2)]; //@line 90 "type.c"
 var $cmp=($2>>>0)>=1; //@line 90 "type.c"
 if($cmp){label=2;break;}else{label=5;break;} //@line 90 "type.c"
 case 2: 
 var $3=$Val_addr; //@line 90 "type.c"
 var $Typ1=(($3)|0); //@line 90 "type.c"
 var $4=HEAP32[(($Typ1)>>2)]; //@line 90 "type.c"
 var $Base2=(($4)|0); //@line 90 "type.c"
 var $5=HEAP32[(($Base2)>>2)]; //@line 90 "type.c"
 var $cmp3=($5>>>0)<=7; //@line 90 "type.c"
 if($cmp3){label=3;break;}else{label=5;break;} //@line 90 "type.c"
 case 3: 
 var $6=$Compact_addr; //@line 90 "type.c"
 var $tobool=($6|0)!=0; //@line 90 "type.c"
 if($tobool){label=5;break;}else{label=4;break;} //@line 90 "type.c"
 case 4: 
 $retval=4; //@line 91 "type.c"
 label=8;break; //@line 91 "type.c"
 case 5: 
 var $7=$Val_addr; //@line 92 "type.c"
 var $Typ5=(($7)|0); //@line 92 "type.c"
 var $8=HEAP32[(($Typ5)>>2)]; //@line 92 "type.c"
 var $Base6=(($8)|0); //@line 92 "type.c"
 var $9=HEAP32[(($Base6)>>2)]; //@line 92 "type.c"
 var $cmp7=($9|0)!=12; //@line 92 "type.c"
 if($cmp7){label=6;break;}else{label=7;break;} //@line 92 "type.c"
 case 6: 
 var $10=$Val_addr; //@line 93 "type.c"
 var $Typ9=(($10)|0); //@line 93 "type.c"
 var $11=HEAP32[(($Typ9)>>2)]; //@line 93 "type.c"
 var $Sizeof=(($11+8)|0); //@line 93 "type.c"
 var $12=HEAP32[(($Sizeof)>>2)]; //@line 93 "type.c"
 $retval=$12; //@line 93 "type.c"
 label=8;break; //@line 93 "type.c"
 case 7: 
 var $13=$Val_addr; //@line 95 "type.c"
 var $Typ11=(($13)|0); //@line 95 "type.c"
 var $14=HEAP32[(($Typ11)>>2)]; //@line 95 "type.c"
 var $FromType=(($14+20)|0); //@line 95 "type.c"
 var $15=HEAP32[(($FromType)>>2)]; //@line 95 "type.c"
 var $Sizeof12=(($15+8)|0); //@line 95 "type.c"
 var $16=HEAP32[(($Sizeof12)>>2)]; //@line 95 "type.c"
 var $17=$Val_addr; //@line 95 "type.c"
 var $Typ13=(($17)|0); //@line 95 "type.c"
 var $18=HEAP32[(($Typ13)>>2)]; //@line 95 "type.c"
 var $ArraySize=(($18+4)|0); //@line 95 "type.c"
 var $19=HEAP32[(($ArraySize)>>2)]; //@line 95 "type.c"
 var $mul=(Math_imul($16,$19)|0); //@line 95 "type.c"
 $retval=$mul; //@line 95 "type.c"
 label=8;break; //@line 95 "type.c"
 case 8: 
 var $20=$retval; //@line 96 "type.c"
 return $20; //@line 96 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeSize($Typ,$ArraySize,$Compact){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Typ_addr;
 var $ArraySize_addr;
 var $Compact_addr;
 $Typ_addr=$Typ;
 $ArraySize_addr=$ArraySize;
 $Compact_addr=$Compact;
 var $0=$Typ_addr; //@line 101 "type.c"
 var $Base=(($0)|0); //@line 101 "type.c"
 var $1=HEAP32[(($Base)>>2)]; //@line 101 "type.c"
 var $cmp=($1>>>0)>=1; //@line 101 "type.c"
 if($cmp){label=2;break;}else{label=5;break;} //@line 101 "type.c"
 case 2: 
 var $2=$Typ_addr; //@line 101 "type.c"
 var $Base1=(($2)|0); //@line 101 "type.c"
 var $3=HEAP32[(($Base1)>>2)]; //@line 101 "type.c"
 var $cmp2=($3>>>0)<=7; //@line 101 "type.c"
 if($cmp2){label=3;break;}else{label=5;break;} //@line 101 "type.c"
 case 3: 
 var $4=$Compact_addr; //@line 101 "type.c"
 var $tobool=($4|0)!=0; //@line 101 "type.c"
 if($tobool){label=5;break;}else{label=4;break;} //@line 101 "type.c"
 case 4: 
 $retval=4; //@line 102 "type.c"
 label=8;break; //@line 102 "type.c"
 case 5: 
 var $5=$Typ_addr; //@line 103 "type.c"
 var $Base4=(($5)|0); //@line 103 "type.c"
 var $6=HEAP32[(($Base4)>>2)]; //@line 103 "type.c"
 var $cmp5=($6|0)!=12; //@line 103 "type.c"
 if($cmp5){label=6;break;}else{label=7;break;} //@line 103 "type.c"
 case 6: 
 var $7=$Typ_addr; //@line 104 "type.c"
 var $Sizeof=(($7+8)|0); //@line 104 "type.c"
 var $8=HEAP32[(($Sizeof)>>2)]; //@line 104 "type.c"
 $retval=$8; //@line 104 "type.c"
 label=8;break; //@line 104 "type.c"
 case 7: 
 var $9=$Typ_addr; //@line 106 "type.c"
 var $FromType=(($9+20)|0); //@line 106 "type.c"
 var $10=HEAP32[(($FromType)>>2)]; //@line 106 "type.c"
 var $Sizeof8=(($10+8)|0); //@line 106 "type.c"
 var $11=HEAP32[(($Sizeof8)>>2)]; //@line 106 "type.c"
 var $12=$ArraySize_addr; //@line 106 "type.c"
 var $mul=(Math_imul($11,$12)|0); //@line 106 "type.c"
 $retval=$mul; //@line 106 "type.c"
 label=8;break; //@line 106 "type.c"
 case 8: 
 var $13=$retval; //@line 107 "type.c"
 return $13; //@line 107 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeAddBaseType($TypeNode,$Base,$Sizeof,$AlignBytes){
 var label=0;
 var $TypeNode_addr;
 var $Base_addr;
 var $Sizeof_addr;
 var $AlignBytes_addr;
 $TypeNode_addr=$TypeNode;
 $Base_addr=$Base;
 $Sizeof_addr=$Sizeof;
 $AlignBytes_addr=$AlignBytes;
 var $0=$Base_addr; //@line 112 "type.c"
 var $1=$TypeNode_addr; //@line 112 "type.c"
 var $Base1=(($1)|0); //@line 112 "type.c"
 HEAP32[(($Base1)>>2)]=$0; //@line 112 "type.c"
 var $2=$TypeNode_addr; //@line 113 "type.c"
 var $ArraySize=(($2+4)|0); //@line 113 "type.c"
 HEAP32[(($ArraySize)>>2)]=0; //@line 113 "type.c"
 var $3=$Sizeof_addr; //@line 114 "type.c"
 var $4=$TypeNode_addr; //@line 114 "type.c"
 var $Sizeof2=(($4+8)|0); //@line 114 "type.c"
 HEAP32[(($Sizeof2)>>2)]=$3; //@line 114 "type.c"
 var $5=$AlignBytes_addr; //@line 115 "type.c"
 var $6=$TypeNode_addr; //@line 115 "type.c"
 var $AlignBytes3=(($6+12)|0); //@line 115 "type.c"
 HEAP32[(($AlignBytes3)>>2)]=$5; //@line 115 "type.c"
 var $7=HEAP32[((17968)>>2)]; //@line 116 "type.c"
 var $8=$TypeNode_addr; //@line 116 "type.c"
 var $Identifier=(($8+16)|0); //@line 116 "type.c"
 HEAP32[(($Identifier)>>2)]=$7; //@line 116 "type.c"
 var $9=$TypeNode_addr; //@line 117 "type.c"
 var $Members=(($9+32)|0); //@line 117 "type.c"
 HEAP32[(($Members)>>2)]=0; //@line 117 "type.c"
 var $10=$TypeNode_addr; //@line 118 "type.c"
 var $FromType=(($10+20)|0); //@line 118 "type.c"
 HEAP32[(($FromType)>>2)]=0; //@line 118 "type.c"
 var $11=$TypeNode_addr; //@line 119 "type.c"
 var $DerivedTypeList=(($11+24)|0); //@line 119 "type.c"
 HEAP32[(($DerivedTypeList)>>2)]=0; //@line 119 "type.c"
 var $12=$TypeNode_addr; //@line 120 "type.c"
 var $OnHeap=(($12+36)|0); //@line 120 "type.c"
 HEAP32[(($OnHeap)>>2)]=0; //@line 120 "type.c"
 var $13=HEAP32[((17088)>>2)]; //@line 121 "type.c"
 var $14=$TypeNode_addr; //@line 121 "type.c"
 var $Next=(($14+28)|0); //@line 121 "type.c"
 HEAP32[(($Next)>>2)]=$13; //@line 121 "type.c"
 var $15=$TypeNode_addr; //@line 122 "type.c"
 HEAP32[((17088)>>2)]=$15; //@line 122 "type.c"
 return; //@line 123 "type.c"
}
function _TypeInit(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ia=sp;
 var $sa=(sp)+(8);
 var $ca=(sp)+(16);
 var $la=(sp)+(24);
 var $da=(sp)+(32);
 var $pa=(sp)+(48);
 var $y=(($ia+4)|0); //@line 137 "type.c"
 var $0=$y; //@line 137 "type.c"
 var $x=(($ia)|0); //@line 137 "type.c"
 var $sub_ptr_lhs_cast=$0; //@line 137 "type.c"
 var $sub_ptr_rhs_cast=$x; //@line 137 "type.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 137 "type.c"
 HEAP32[((18456)>>2)]=$sub_ptr_sub; //@line 137 "type.c"
 var $y1=(($pa+4)|0); //@line 138 "type.c"
 var $1=$y1; //@line 138 "type.c"
 var $x2=(($pa)|0); //@line 138 "type.c"
 var $sub_ptr_lhs_cast3=$1; //@line 138 "type.c"
 var $sub_ptr_rhs_cast4=$x2; //@line 138 "type.c"
 var $sub_ptr_sub5=((($sub_ptr_lhs_cast3)-($sub_ptr_rhs_cast4))|0); //@line 138 "type.c"
 HEAP32[((18040)>>2)]=$sub_ptr_sub5; //@line 138 "type.c"
 HEAP32[((17088)>>2)]=0; //@line 140 "type.c"
 var $2=HEAP32[((18456)>>2)]; //@line 141 "type.c"
 _TypeAddBaseType(18408,1,4,$2); //@line 141 "type.c"
 var $y6=(($sa+2)|0); //@line 142 "type.c"
 var $3=$y6; //@line 142 "type.c"
 var $x7=(($sa)|0); //@line 142 "type.c"
 var $sub_ptr_lhs_cast8=$3; //@line 142 "type.c"
 var $sub_ptr_rhs_cast9=$x7; //@line 142 "type.c"
 var $sub_ptr_sub10=((($sub_ptr_lhs_cast8)-($sub_ptr_rhs_cast9))|0); //@line 142 "type.c"
 _TypeAddBaseType(17984,2,2,$sub_ptr_sub10); //@line 142 "type.c"
 var $y11=(($ca+1)|0); //@line 143 "type.c"
 var $x12=(($ca)|0); //@line 143 "type.c"
 var $sub_ptr_lhs_cast13=$y11; //@line 143 "type.c"
 var $sub_ptr_rhs_cast14=$x12; //@line 143 "type.c"
 var $sub_ptr_sub15=((($sub_ptr_lhs_cast13)-($sub_ptr_rhs_cast14))|0); //@line 143 "type.c"
 _TypeAddBaseType(19088,3,1,$sub_ptr_sub15); //@line 143 "type.c"
 var $y16=(($la+4)|0); //@line 144 "type.c"
 var $4=$y16; //@line 144 "type.c"
 var $x17=(($la)|0); //@line 144 "type.c"
 var $sub_ptr_lhs_cast18=$4; //@line 144 "type.c"
 var $sub_ptr_rhs_cast19=$x17; //@line 144 "type.c"
 var $sub_ptr_sub20=((($sub_ptr_lhs_cast18)-($sub_ptr_rhs_cast19))|0); //@line 144 "type.c"
 _TypeAddBaseType(18264,4,4,$sub_ptr_sub20); //@line 144 "type.c"
 var $5=HEAP32[((18456)>>2)]; //@line 145 "type.c"
 _TypeAddBaseType(17016,5,4,$5); //@line 145 "type.c"
 var $y21=(($sa+2)|0); //@line 146 "type.c"
 var $6=$y21; //@line 146 "type.c"
 var $x22=(($sa)|0); //@line 146 "type.c"
 var $sub_ptr_lhs_cast23=$6; //@line 146 "type.c"
 var $sub_ptr_rhs_cast24=$x22; //@line 146 "type.c"
 var $sub_ptr_sub25=((($sub_ptr_lhs_cast23)-($sub_ptr_rhs_cast24))|0); //@line 146 "type.c"
 _TypeAddBaseType(16920,6,2,$sub_ptr_sub25); //@line 146 "type.c"
 var $y26=(($la+4)|0); //@line 147 "type.c"
 var $7=$y26; //@line 147 "type.c"
 var $x27=(($la)|0); //@line 147 "type.c"
 var $sub_ptr_lhs_cast28=$7; //@line 147 "type.c"
 var $sub_ptr_rhs_cast29=$x27; //@line 147 "type.c"
 var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0); //@line 147 "type.c"
 _TypeAddBaseType(16968,7,4,$sub_ptr_sub30); //@line 147 "type.c"
 _TypeAddBaseType(16856,0,0,1); //@line 148 "type.c"
 var $8=HEAP32[((18456)>>2)]; //@line 149 "type.c"
 _TypeAddBaseType(18944,9,4,$8); //@line 149 "type.c"
 var $9=HEAP32[((18456)>>2)]; //@line 150 "type.c"
 _TypeAddBaseType(18216,10,4,$9); //@line 150 "type.c"
 _TypeAddBaseType(18496,16,0,1); //@line 151 "type.c"
 var $y31=(($da+8)|0); //@line 153 "type.c"
 var $10=$y31; //@line 153 "type.c"
 var $x32=(($da)|0); //@line 153 "type.c"
 var $sub_ptr_lhs_cast33=$10; //@line 153 "type.c"
 var $sub_ptr_rhs_cast34=$x32; //@line 153 "type.c"
 var $sub_ptr_sub35=((($sub_ptr_lhs_cast33)-($sub_ptr_rhs_cast34))|0); //@line 153 "type.c"
 _TypeAddBaseType(19032,8,8,$sub_ptr_sub35); //@line 153 "type.c"
 var $y36=(($da+8)|0); //@line 154 "type.c"
 var $11=$y36; //@line 154 "type.c"
 var $x37=(($da)|0); //@line 154 "type.c"
 var $sub_ptr_lhs_cast38=$11; //@line 154 "type.c"
 var $sub_ptr_rhs_cast39=$x37; //@line 154 "type.c"
 var $sub_ptr_sub40=((($sub_ptr_lhs_cast38)-($sub_ptr_rhs_cast39))|0); //@line 154 "type.c"
 _TypeAddBaseType(17112,17,8,$sub_ptr_sub40); //@line 154 "type.c"
 var $12=HEAP32[((17968)>>2)]; //@line 158 "type.c"
 var $y41=(($ca+1)|0); //@line 158 "type.c"
 var $x42=(($ca)|0); //@line 158 "type.c"
 var $sub_ptr_lhs_cast43=$y41; //@line 158 "type.c"
 var $sub_ptr_rhs_cast44=$x42; //@line 158 "type.c"
 var $sub_ptr_sub45=((($sub_ptr_lhs_cast43)-($sub_ptr_rhs_cast44))|0); //@line 158 "type.c"
 var $call=_TypeAdd(0,19088,12,0,$12,1,$sub_ptr_sub45); //@line 158 "type.c"
 HEAP32[((19152)>>2)]=$call; //@line 158 "type.c"
 var $13=HEAP32[((17968)>>2)]; //@line 159 "type.c"
 var $14=HEAP32[((18040)>>2)]; //@line 159 "type.c"
 var $call46=_TypeAdd(0,19088,11,0,$13,4,$14); //@line 159 "type.c"
 HEAP32[((19136)>>2)]=$call46; //@line 159 "type.c"
 var $15=HEAP32[((19136)>>2)]; //@line 160 "type.c"
 var $16=HEAP32[((17968)>>2)]; //@line 160 "type.c"
 var $17=HEAP32[((18040)>>2)]; //@line 160 "type.c"
 var $call47=_TypeAdd(0,$15,11,0,$16,4,$17); //@line 160 "type.c"
 HEAP32[((19144)>>2)]=$call47; //@line 160 "type.c"
 var $18=HEAP32[((17968)>>2)]; //@line 161 "type.c"
 var $19=HEAP32[((18040)>>2)]; //@line 161 "type.c"
 var $call48=_TypeAdd(0,16856,11,0,$18,4,$19); //@line 161 "type.c"
 HEAP32[((16904)>>2)]=$call48; //@line 161 "type.c"
 STACKTOP=sp;return; //@line 162 "type.c"
}
function _TypeParseStruct($Parser,$Typ,$IsStruct){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Typ_addr;
 var $IsStruct_addr;
 var $LexValue=sp;
 var $MemberType=(sp)+(8);
 var $MemberIdentifier=(sp)+(16);
 var $StructIdentifier;
 var $MemberValue;
 var $Token;
 var $AlignBoundary;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 $IsStruct_addr=$IsStruct;
 var $0=$Parser_addr; //@line 206 "type.c"
 var $call=_LexGetToken($0,$LexValue,0); //@line 206 "type.c"
 $Token=$call; //@line 206 "type.c"
 var $1=$Token; //@line 207 "type.c"
 var $cmp=($1|0)==45; //@line 207 "type.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 207 "type.c"
 case 2: 
 var $2=$Parser_addr; //@line 209 "type.c"
 var $call1=_LexGetToken($2,$LexValue,1); //@line 209 "type.c"
 var $3=HEAP32[(($LexValue)>>2)]; //@line 210 "type.c"
 var $Val=(($3+4)|0); //@line 210 "type.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 210 "type.c"
 var $Identifier=$4; //@line 210 "type.c"
 var $5=HEAP32[(($Identifier)>>2)]; //@line 210 "type.c"
 $StructIdentifier=$5; //@line 210 "type.c"
 var $6=$Parser_addr; //@line 211 "type.c"
 var $call2=_LexGetToken($6,0,0); //@line 211 "type.c"
 $Token=$call2; //@line 211 "type.c"
 label=4;break; //@line 212 "type.c"
 case 3: 
 var $call3=_PlatformMakeTempName(13192); //@line 216 "type.c"
 $StructIdentifier=$call3; //@line 216 "type.c"
 label=4;break;
 case 4: 
 var $7=$Parser_addr; //@line 219 "type.c"
 var $8=$IsStruct_addr; //@line 219 "type.c"
 var $tobool=($8|0)!=0; //@line 219 "type.c"
 var $cond=$tobool?13:14; //@line 219 "type.c"
 var $9=$StructIdentifier; //@line 219 "type.c"
 var $10=$Token; //@line 219 "type.c"
 var $cmp4=($10|0)!=52; //@line 219 "type.c"
 var $conv=($cmp4&1); //@line 219 "type.c"
 var $call5=_TypeGetMatching($7,17064,$cond,0,$9,$conv); //@line 219 "type.c"
 var $11=$Typ_addr; //@line 219 "type.c"
 HEAP32[(($11)>>2)]=$call5; //@line 219 "type.c"
 var $12=$Parser_addr; //@line 221 "type.c"
 var $call6=_LexGetToken($12,0,0); //@line 221 "type.c"
 $Token=$call6; //@line 221 "type.c"
 var $13=$Token; //@line 222 "type.c"
 var $cmp7=($13|0)!=52; //@line 222 "type.c"
 if($cmp7){label=5;break;}else{label=8;break;} //@line 222 "type.c"
 case 5: 
 var $14=$Typ_addr; //@line 225 "type.c"
 var $15=HEAP32[(($14)>>2)]; //@line 225 "type.c"
 var $Members=(($15+32)|0); //@line 225 "type.c"
 var $16=HEAP32[(($Members)>>2)]; //@line 225 "type.c"
 var $cmp10=($16|0)==0; //@line 225 "type.c"
 if($cmp10){label=6;break;}else{label=7;break;} //@line 225 "type.c"
 case 6: 
 var $17=$Parser_addr; //@line 226 "type.c"
 var $18=HEAP32[(($LexValue)>>2)]; //@line 226 "type.c"
 var $Val13=(($18+4)|0); //@line 226 "type.c"
 var $19=HEAP32[(($Val13)>>2)]; //@line 226 "type.c"
 var $Identifier14=$19; //@line 226 "type.c"
 var $20=HEAP32[(($Identifier14)>>2)]; //@line 226 "type.c"
 _ProgramFail($17,11368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs; //@line 226 "type.c"
 label=7;break; //@line 226 "type.c"
 case 7: 
 label=32;break; //@line 228 "type.c"
 case 8: 
 var $21=HEAP32[((17160)>>2)]; //@line 231 "type.c"
 var $cmp17=($21|0)!=0; //@line 231 "type.c"
 if($cmp17){label=9;break;}else{label=10;break;} //@line 231 "type.c"
 case 9: 
 var $22=$Parser_addr; //@line 232 "type.c"
 _ProgramFail($22,8520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 232 "type.c"
 label=10;break; //@line 232 "type.c"
 case 10: 
 var $23=$Parser_addr; //@line 234 "type.c"
 var $call21=_LexGetToken($23,0,1); //@line 234 "type.c"
 var $24=$Parser_addr; //@line 235 "type.c"
 var $call22=_VariableAlloc($24,228,1); //@line 235 "type.c"
 var $25=$call22; //@line 235 "type.c"
 var $26=$Typ_addr; //@line 235 "type.c"
 var $27=HEAP32[(($26)>>2)]; //@line 235 "type.c"
 var $Members23=(($27+32)|0); //@line 235 "type.c"
 HEAP32[(($Members23)>>2)]=$25; //@line 235 "type.c"
 var $28=$Typ_addr; //@line 236 "type.c"
 var $29=HEAP32[(($28)>>2)]; //@line 236 "type.c"
 var $Members24=(($29+32)|0); //@line 236 "type.c"
 var $30=HEAP32[(($Members24)>>2)]; //@line 236 "type.c"
 var $31=$30; //@line 236 "type.c"
 var $add_ptr=(($31+8)|0); //@line 236 "type.c"
 var $32=$add_ptr; //@line 236 "type.c"
 var $33=$Typ_addr; //@line 236 "type.c"
 var $34=HEAP32[(($33)>>2)]; //@line 236 "type.c"
 var $Members25=(($34+32)|0); //@line 236 "type.c"
 var $35=HEAP32[(($Members25)>>2)]; //@line 236 "type.c"
 var $HashTable=(($35+4)|0); //@line 236 "type.c"
 HEAP32[(($HashTable)>>2)]=$32; //@line 236 "type.c"
 var $36=$Typ_addr; //@line 237 "type.c"
 var $37=HEAP32[(($36)>>2)]; //@line 237 "type.c"
 var $Members26=(($37+32)|0); //@line 237 "type.c"
 var $38=HEAP32[(($Members26)>>2)]; //@line 237 "type.c"
 var $39=$Typ_addr; //@line 237 "type.c"
 var $40=HEAP32[(($39)>>2)]; //@line 237 "type.c"
 var $Members27=(($40+32)|0); //@line 237 "type.c"
 var $41=HEAP32[(($Members27)>>2)]; //@line 237 "type.c"
 var $42=$41; //@line 237 "type.c"
 var $add_ptr28=(($42+8)|0); //@line 237 "type.c"
 var $43=$add_ptr28; //@line 237 "type.c"
 _TableInitTable($38,$43,11,1); //@line 237 "type.c"
 label=11;break; //@line 239 "type.c"
 case 11: 
 var $44=$Parser_addr; //@line 240 "type.c"
 _TypeParse($44,$MemberType,$MemberIdentifier,0); //@line 240 "type.c"
 var $45=HEAP32[(($MemberType)>>2)]; //@line 241 "type.c"
 var $cmp29=($45|0)==0; //@line 241 "type.c"
 if($cmp29){label=13;break;}else{label=12;break;} //@line 241 "type.c"
 case 12: 
 var $46=HEAP32[(($MemberIdentifier)>>2)]; //@line 241 "type.c"
 var $cmp31=($46|0)==0; //@line 241 "type.c"
 if($cmp31){label=13;break;}else{label=14;break;} //@line 241 "type.c"
 case 13: 
 var $47=$Parser_addr; //@line 242 "type.c"
 _ProgramFail($47,6664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 242 "type.c"
 label=14;break; //@line 242 "type.c"
 case 14: 
 var $48=$Parser_addr; //@line 244 "type.c"
 var $call35=_VariableAllocValueAndData($48,4,0,0,1); //@line 244 "type.c"
 $MemberValue=$call35; //@line 244 "type.c"
 var $49=HEAP32[(($MemberType)>>2)]; //@line 245 "type.c"
 var $50=$MemberValue; //@line 245 "type.c"
 var $Typ36=(($50)|0); //@line 245 "type.c"
 HEAP32[(($Typ36)>>2)]=$49; //@line 245 "type.c"
 var $51=$IsStruct_addr; //@line 246 "type.c"
 var $tobool37=($51|0)!=0; //@line 246 "type.c"
 if($tobool37){label=15;break;}else{label=18;break;} //@line 246 "type.c"
 case 15: 
 var $52=$MemberValue; //@line 249 "type.c"
 var $Typ39=(($52)|0); //@line 249 "type.c"
 var $53=HEAP32[(($Typ39)>>2)]; //@line 249 "type.c"
 var $AlignBytes=(($53+12)|0); //@line 249 "type.c"
 var $54=HEAP32[(($AlignBytes)>>2)]; //@line 249 "type.c"
 $AlignBoundary=$54; //@line 249 "type.c"
 var $55=$Typ_addr; //@line 250 "type.c"
 var $56=HEAP32[(($55)>>2)]; //@line 250 "type.c"
 var $Sizeof=(($56+8)|0); //@line 250 "type.c"
 var $57=HEAP32[(($Sizeof)>>2)]; //@line 250 "type.c"
 var $58=$AlignBoundary; //@line 250 "type.c"
 var $sub=((($58)-(1))|0); //@line 250 "type.c"
 var $and=$57&$sub; //@line 250 "type.c"
 var $cmp40=($and|0)!=0; //@line 250 "type.c"
 if($cmp40){label=16;break;}else{label=17;break;} //@line 250 "type.c"
 case 16: 
 var $59=$AlignBoundary; //@line 251 "type.c"
 var $60=$Typ_addr; //@line 251 "type.c"
 var $61=HEAP32[(($60)>>2)]; //@line 251 "type.c"
 var $Sizeof43=(($61+8)|0); //@line 251 "type.c"
 var $62=HEAP32[(($Sizeof43)>>2)]; //@line 251 "type.c"
 var $63=$AlignBoundary; //@line 251 "type.c"
 var $sub44=((($63)-(1))|0); //@line 251 "type.c"
 var $and45=$62&$sub44; //@line 251 "type.c"
 var $sub46=((($59)-($and45))|0); //@line 251 "type.c"
 var $64=$Typ_addr; //@line 251 "type.c"
 var $65=HEAP32[(($64)>>2)]; //@line 251 "type.c"
 var $Sizeof47=(($65+8)|0); //@line 251 "type.c"
 var $66=HEAP32[(($Sizeof47)>>2)]; //@line 251 "type.c"
 var $add=((($66)+($sub46))|0); //@line 251 "type.c"
 HEAP32[(($Sizeof47)>>2)]=$add; //@line 251 "type.c"
 label=17;break; //@line 251 "type.c"
 case 17: 
 var $67=$Typ_addr; //@line 253 "type.c"
 var $68=HEAP32[(($67)>>2)]; //@line 253 "type.c"
 var $Sizeof49=(($68+8)|0); //@line 253 "type.c"
 var $69=HEAP32[(($Sizeof49)>>2)]; //@line 253 "type.c"
 var $70=$MemberValue; //@line 253 "type.c"
 var $Val50=(($70+4)|0); //@line 253 "type.c"
 var $71=HEAP32[(($Val50)>>2)]; //@line 253 "type.c"
 var $Integer=$71; //@line 253 "type.c"
 HEAP32[(($Integer)>>2)]=$69; //@line 253 "type.c"
 var $72=$MemberValue; //@line 254 "type.c"
 var $call51=_TypeSizeValue($72,1); //@line 254 "type.c"
 var $73=$Typ_addr; //@line 254 "type.c"
 var $74=HEAP32[(($73)>>2)]; //@line 254 "type.c"
 var $Sizeof52=(($74+8)|0); //@line 254 "type.c"
 var $75=HEAP32[(($Sizeof52)>>2)]; //@line 254 "type.c"
 var $add53=((($75)+($call51))|0); //@line 254 "type.c"
 HEAP32[(($Sizeof52)>>2)]=$add53; //@line 254 "type.c"
 label=21;break; //@line 255 "type.c"
 case 18: 
 var $76=$MemberValue; //@line 259 "type.c"
 var $Val55=(($76+4)|0); //@line 259 "type.c"
 var $77=HEAP32[(($Val55)>>2)]; //@line 259 "type.c"
 var $Integer56=$77; //@line 259 "type.c"
 HEAP32[(($Integer56)>>2)]=0; //@line 259 "type.c"
 var $78=$MemberValue; //@line 260 "type.c"
 var $Typ57=(($78)|0); //@line 260 "type.c"
 var $79=HEAP32[(($Typ57)>>2)]; //@line 260 "type.c"
 var $Sizeof58=(($79+8)|0); //@line 260 "type.c"
 var $80=HEAP32[(($Sizeof58)>>2)]; //@line 260 "type.c"
 var $81=$Typ_addr; //@line 260 "type.c"
 var $82=HEAP32[(($81)>>2)]; //@line 260 "type.c"
 var $Sizeof59=(($82+8)|0); //@line 260 "type.c"
 var $83=HEAP32[(($Sizeof59)>>2)]; //@line 260 "type.c"
 var $cmp60=($80|0)>($83|0); //@line 260 "type.c"
 if($cmp60){label=19;break;}else{label=20;break;} //@line 260 "type.c"
 case 19: 
 var $84=$MemberValue; //@line 261 "type.c"
 var $call63=_TypeSizeValue($84,1); //@line 261 "type.c"
 var $85=$Typ_addr; //@line 261 "type.c"
 var $86=HEAP32[(($85)>>2)]; //@line 261 "type.c"
 var $Sizeof64=(($86+8)|0); //@line 261 "type.c"
 HEAP32[(($Sizeof64)>>2)]=$call63; //@line 261 "type.c"
 label=20;break; //@line 261 "type.c"
 case 20: 
 label=21;break;
 case 21: 
 var $87=$Typ_addr; //@line 265 "type.c"
 var $88=HEAP32[(($87)>>2)]; //@line 265 "type.c"
 var $AlignBytes67=(($88+12)|0); //@line 265 "type.c"
 var $89=HEAP32[(($AlignBytes67)>>2)]; //@line 265 "type.c"
 var $90=$MemberValue; //@line 265 "type.c"
 var $Typ68=(($90)|0); //@line 265 "type.c"
 var $91=HEAP32[(($Typ68)>>2)]; //@line 265 "type.c"
 var $AlignBytes69=(($91+12)|0); //@line 265 "type.c"
 var $92=HEAP32[(($AlignBytes69)>>2)]; //@line 265 "type.c"
 var $cmp70=($89|0)<($92|0); //@line 265 "type.c"
 if($cmp70){label=22;break;}else{label=23;break;} //@line 265 "type.c"
 case 22: 
 var $93=$MemberValue; //@line 266 "type.c"
 var $Typ73=(($93)|0); //@line 266 "type.c"
 var $94=HEAP32[(($Typ73)>>2)]; //@line 266 "type.c"
 var $AlignBytes74=(($94+12)|0); //@line 266 "type.c"
 var $95=HEAP32[(($AlignBytes74)>>2)]; //@line 266 "type.c"
 var $96=$Typ_addr; //@line 266 "type.c"
 var $97=HEAP32[(($96)>>2)]; //@line 266 "type.c"
 var $AlignBytes75=(($97+12)|0); //@line 266 "type.c"
 HEAP32[(($AlignBytes75)>>2)]=$95; //@line 266 "type.c"
 label=23;break; //@line 266 "type.c"
 case 23: 
 var $98=$Typ_addr; //@line 269 "type.c"
 var $99=HEAP32[(($98)>>2)]; //@line 269 "type.c"
 var $Members77=(($99+32)|0); //@line 269 "type.c"
 var $100=HEAP32[(($Members77)>>2)]; //@line 269 "type.c"
 var $101=HEAP32[(($MemberIdentifier)>>2)]; //@line 269 "type.c"
 var $102=$MemberValue; //@line 269 "type.c"
 var $103=$Parser_addr; //@line 269 "type.c"
 var $FileName=(($103+4)|0); //@line 269 "type.c"
 var $104=HEAP32[(($FileName)>>2)]; //@line 269 "type.c"
 var $105=$Parser_addr; //@line 269 "type.c"
 var $Line=(($105+8)|0); //@line 269 "type.c"
 var $106=HEAP16[(($Line)>>1)]; //@line 269 "type.c"
 var $conv78=(($106<<16)>>16); //@line 269 "type.c"
 var $107=$Parser_addr; //@line 269 "type.c"
 var $CharacterPos=(($107+10)|0); //@line 269 "type.c"
 var $108=HEAP16[(($CharacterPos)>>1)]; //@line 269 "type.c"
 var $conv79=(($108<<16)>>16); //@line 269 "type.c"
 var $call80=_TableSet($100,$101,$102,$104,$conv78,$conv79); //@line 269 "type.c"
 var $tobool81=($call80|0)!=0; //@line 269 "type.c"
 if($tobool81){label=25;break;}else{label=24;break;} //@line 269 "type.c"
 case 24: 
 var $109=$Parser_addr; //@line 270 "type.c"
 _ProgramFail($109,5056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$MemberIdentifier,tempVarArgs)); STACKTOP=tempVarArgs; //@line 270 "type.c"
 label=25;break; //@line 270 "type.c"
 case 25: 
 var $110=$Parser_addr; //@line 272 "type.c"
 var $call84=_LexGetToken($110,0,1); //@line 272 "type.c"
 var $cmp85=($call84|0)!=50; //@line 272 "type.c"
 if($cmp85){label=26;break;}else{label=27;break;} //@line 272 "type.c"
 case 26: 
 var $111=$Parser_addr; //@line 273 "type.c"
 _ProgramFail($111,3456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 273 "type.c"
 label=27;break; //@line 273 "type.c"
 case 27: 
 label=28;break; //@line 275 "type.c"
 case 28: 
 var $112=$Parser_addr; //@line 275 "type.c"
 var $call89=_LexGetToken($112,0,0); //@line 275 "type.c"
 var $cmp90=($call89|0)!=53; //@line 275 "type.c"
 if($cmp90){label=11;break;}else{label=29;break;} //@line 275 "type.c"
 case 29: 
 var $113=$Typ_addr; //@line 278 "type.c"
 var $114=HEAP32[(($113)>>2)]; //@line 278 "type.c"
 var $AlignBytes92=(($114+12)|0); //@line 278 "type.c"
 var $115=HEAP32[(($AlignBytes92)>>2)]; //@line 278 "type.c"
 $AlignBoundary=$115; //@line 278 "type.c"
 var $116=$Typ_addr; //@line 279 "type.c"
 var $117=HEAP32[(($116)>>2)]; //@line 279 "type.c"
 var $Sizeof93=(($117+8)|0); //@line 279 "type.c"
 var $118=HEAP32[(($Sizeof93)>>2)]; //@line 279 "type.c"
 var $119=$AlignBoundary; //@line 279 "type.c"
 var $sub94=((($119)-(1))|0); //@line 279 "type.c"
 var $and95=$118&$sub94; //@line 279 "type.c"
 var $cmp96=($and95|0)!=0; //@line 279 "type.c"
 if($cmp96){label=30;break;}else{label=31;break;} //@line 279 "type.c"
 case 30: 
 var $120=$AlignBoundary; //@line 280 "type.c"
 var $121=$Typ_addr; //@line 280 "type.c"
 var $122=HEAP32[(($121)>>2)]; //@line 280 "type.c"
 var $Sizeof99=(($122+8)|0); //@line 280 "type.c"
 var $123=HEAP32[(($Sizeof99)>>2)]; //@line 280 "type.c"
 var $124=$AlignBoundary; //@line 280 "type.c"
 var $sub100=((($124)-(1))|0); //@line 280 "type.c"
 var $and101=$123&$sub100; //@line 280 "type.c"
 var $sub102=((($120)-($and101))|0); //@line 280 "type.c"
 var $125=$Typ_addr; //@line 280 "type.c"
 var $126=HEAP32[(($125)>>2)]; //@line 280 "type.c"
 var $Sizeof103=(($126+8)|0); //@line 280 "type.c"
 var $127=HEAP32[(($Sizeof103)>>2)]; //@line 280 "type.c"
 var $add104=((($127)+($sub102))|0); //@line 280 "type.c"
 HEAP32[(($Sizeof103)>>2)]=$add104; //@line 280 "type.c"
 label=31;break; //@line 280 "type.c"
 case 31: 
 var $128=$Parser_addr; //@line 282 "type.c"
 var $call106=_LexGetToken($128,0,1); //@line 282 "type.c"
 label=32;break; //@line 283 "type.c"
 case 32: 
 STACKTOP=sp;return; //@line 283 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeParse($Parser,$Typ,$Identifier,$IsStatic){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $Typ_addr;
 var $Identifier_addr;
 var $IsStatic_addr;
 var $BasicType=sp;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 $Identifier_addr=$Identifier;
 $IsStatic_addr=$IsStatic;
 var $0=$Parser_addr; //@line 533 "type.c"
 var $1=$IsStatic_addr; //@line 533 "type.c"
 var $call=_TypeParseFront($0,$BasicType,$1); //@line 533 "type.c"
 var $2=$Parser_addr; //@line 534 "type.c"
 var $3=HEAP32[(($BasicType)>>2)]; //@line 534 "type.c"
 var $4=$Typ_addr; //@line 534 "type.c"
 var $5=$Identifier_addr; //@line 534 "type.c"
 _TypeParseIdentPart($2,$3,$4,$5); //@line 534 "type.c"
 STACKTOP=sp;return; //@line 535 "type.c"
}
function _TypeCreateOpaqueStruct($Parser,$StructName,$Size){
 var label=0;
 var $Parser_addr;
 var $StructName_addr;
 var $Size_addr;
 var $Typ;
 $Parser_addr=$Parser;
 $StructName_addr=$StructName;
 $Size_addr=$Size;
 var $0=$Parser_addr; //@line 288 "type.c"
 var $1=$StructName_addr; //@line 288 "type.c"
 var $call=_TypeGetMatching($0,17064,13,0,$1,0); //@line 288 "type.c"
 $Typ=$call; //@line 288 "type.c"
 var $2=$Parser_addr; //@line 291 "type.c"
 var $call1=_VariableAlloc($2,228,1); //@line 291 "type.c"
 var $3=$call1; //@line 291 "type.c"
 var $4=$Typ; //@line 291 "type.c"
 var $Members=(($4+32)|0); //@line 291 "type.c"
 HEAP32[(($Members)>>2)]=$3; //@line 291 "type.c"
 var $5=$Typ; //@line 292 "type.c"
 var $Members2=(($5+32)|0); //@line 292 "type.c"
 var $6=HEAP32[(($Members2)>>2)]; //@line 292 "type.c"
 var $7=$6; //@line 292 "type.c"
 var $add_ptr=(($7+8)|0); //@line 292 "type.c"
 var $8=$add_ptr; //@line 292 "type.c"
 var $9=$Typ; //@line 292 "type.c"
 var $Members3=(($9+32)|0); //@line 292 "type.c"
 var $10=HEAP32[(($Members3)>>2)]; //@line 292 "type.c"
 var $HashTable=(($10+4)|0); //@line 292 "type.c"
 HEAP32[(($HashTable)>>2)]=$8; //@line 292 "type.c"
 var $11=$Typ; //@line 293 "type.c"
 var $Members4=(($11+32)|0); //@line 293 "type.c"
 var $12=HEAP32[(($Members4)>>2)]; //@line 293 "type.c"
 var $13=$Typ; //@line 293 "type.c"
 var $Members5=(($13+32)|0); //@line 293 "type.c"
 var $14=HEAP32[(($Members5)>>2)]; //@line 293 "type.c"
 var $15=$14; //@line 293 "type.c"
 var $add_ptr6=(($15+8)|0); //@line 293 "type.c"
 var $16=$add_ptr6; //@line 293 "type.c"
 _TableInitTable($12,$16,11,1); //@line 293 "type.c"
 var $17=$Size_addr; //@line 294 "type.c"
 var $18=$Typ; //@line 294 "type.c"
 var $Sizeof=(($18+8)|0); //@line 294 "type.c"
 HEAP32[(($Sizeof)>>2)]=$17; //@line 294 "type.c"
 var $19=$Typ; //@line 296 "type.c"
 return $19; //@line 296 "type.c"
}
function _TypeParseEnum($Parser,$Typ){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Typ_addr;
 var $LexValue=sp;
 var $InitValue=(sp)+(8);
 var $Token;
 var $EnumType;
 var $EnumValue=(sp)+(24);
 var $EnumIdentifier;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 HEAP32[(($EnumValue)>>2)]=0; //@line 306 "type.c"
 var $0=$Parser_addr; //@line 309 "type.c"
 var $call=_LexGetToken($0,$LexValue,0); //@line 309 "type.c"
 $Token=$call; //@line 309 "type.c"
 var $1=$Token; //@line 310 "type.c"
 var $cmp=($1|0)==45; //@line 310 "type.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 310 "type.c"
 case 2: 
 var $2=$Parser_addr; //@line 312 "type.c"
 var $call1=_LexGetToken($2,$LexValue,1); //@line 312 "type.c"
 var $3=HEAP32[(($LexValue)>>2)]; //@line 313 "type.c"
 var $Val=(($3+4)|0); //@line 313 "type.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 313 "type.c"
 var $Identifier=$4; //@line 313 "type.c"
 var $5=HEAP32[(($Identifier)>>2)]; //@line 313 "type.c"
 $EnumIdentifier=$5; //@line 313 "type.c"
 var $6=$Parser_addr; //@line 314 "type.c"
 var $call2=_LexGetToken($6,0,0); //@line 314 "type.c"
 $Token=$call2; //@line 314 "type.c"
 label=4;break; //@line 315 "type.c"
 case 3: 
 var $call3=_PlatformMakeTempName(13200); //@line 319 "type.c"
 $EnumIdentifier=$call3; //@line 319 "type.c"
 label=4;break;
 case 4: 
 var $7=$Parser_addr; //@line 322 "type.c"
 var $8=$EnumIdentifier; //@line 322 "type.c"
 var $9=$Token; //@line 322 "type.c"
 var $cmp4=($9|0)!=52; //@line 322 "type.c"
 var $conv=($cmp4&1); //@line 322 "type.c"
 var $call5=_TypeGetMatching($7,17064,15,0,$8,$conv); //@line 322 "type.c"
 $EnumType=$call5; //@line 322 "type.c"
 var $10=$Typ_addr; //@line 323 "type.c"
 HEAP32[(($10)>>2)]=18408; //@line 323 "type.c"
 var $11=$Token; //@line 324 "type.c"
 var $cmp6=($11|0)!=52; //@line 324 "type.c"
 if($cmp6){label=5;break;}else{label=8;break;} //@line 324 "type.c"
 case 5: 
 var $12=$Typ_addr; //@line 327 "type.c"
 var $13=HEAP32[(($12)>>2)]; //@line 327 "type.c"
 var $Members=(($13+32)|0); //@line 327 "type.c"
 var $14=HEAP32[(($Members)>>2)]; //@line 327 "type.c"
 var $cmp9=($14|0)==0; //@line 327 "type.c"
 if($cmp9){label=6;break;}else{label=7;break;} //@line 327 "type.c"
 case 6: 
 var $15=$Parser_addr; //@line 328 "type.c"
 var $16=$EnumIdentifier; //@line 328 "type.c"
 _ProgramFail($15,2328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs; //@line 328 "type.c"
 label=7;break; //@line 328 "type.c"
 case 7: 
 label=20;break; //@line 330 "type.c"
 case 8: 
 var $17=HEAP32[((17160)>>2)]; //@line 333 "type.c"
 var $cmp14=($17|0)!=0; //@line 333 "type.c"
 if($cmp14){label=9;break;}else{label=10;break;} //@line 333 "type.c"
 case 9: 
 var $18=$Parser_addr; //@line 334 "type.c"
 _ProgramFail($18,1408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 334 "type.c"
 label=10;break; //@line 334 "type.c"
 case 10: 
 var $19=$Parser_addr; //@line 336 "type.c"
 var $call18=_LexGetToken($19,0,1); //@line 336 "type.c"
 var $20=$Typ_addr; //@line 337 "type.c"
 var $21=HEAP32[(($20)>>2)]; //@line 337 "type.c"
 var $Members19=(($21+32)|0); //@line 337 "type.c"
 HEAP32[(($Members19)>>2)]=18544; //@line 337 "type.c"
 var $22=$InitValue; //@line 338 "type.c"
 _memset($22, 0, 16); //@line 338 "type.c"
 var $Typ20=(($InitValue)|0); //@line 339 "type.c"
 HEAP32[(($Typ20)>>2)]=18408; //@line 339 "type.c"
 var $23=$EnumValue; //@line 340 "type.c"
 var $Val21=(($InitValue+4)|0); //@line 340 "type.c"
 HEAP32[(($Val21)>>2)]=$23; //@line 340 "type.c"
 label=11;break; //@line 341 "type.c"
 case 11: 
 var $24=$Parser_addr; //@line 342 "type.c"
 var $call22=_LexGetToken($24,$LexValue,1); //@line 342 "type.c"
 var $cmp23=($call22|0)!=45; //@line 342 "type.c"
 if($cmp23){label=12;break;}else{label=13;break;} //@line 342 "type.c"
 case 12: 
 var $25=$Parser_addr; //@line 343 "type.c"
 _ProgramFail($25,872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 343 "type.c"
 label=13;break; //@line 343 "type.c"
 case 13: 
 var $26=HEAP32[(($LexValue)>>2)]; //@line 345 "type.c"
 var $Val27=(($26+4)|0); //@line 345 "type.c"
 var $27=HEAP32[(($Val27)>>2)]; //@line 345 "type.c"
 var $Identifier28=$27; //@line 345 "type.c"
 var $28=HEAP32[(($Identifier28)>>2)]; //@line 345 "type.c"
 $EnumIdentifier=$28; //@line 345 "type.c"
 var $29=$Parser_addr; //@line 346 "type.c"
 var $call29=_LexGetToken($29,0,0); //@line 346 "type.c"
 var $cmp30=($call29|0)==2; //@line 346 "type.c"
 if($cmp30){label=14;break;}else{label=15;break;} //@line 346 "type.c"
 case 14: 
 var $30=$Parser_addr; //@line 348 "type.c"
 var $call33=_LexGetToken($30,0,1); //@line 348 "type.c"
 var $31=$Parser_addr; //@line 349 "type.c"
 var $call34=_ExpressionParseInt($31); //@line 349 "type.c"
 HEAP32[(($EnumValue)>>2)]=$call34; //@line 349 "type.c"
 label=15;break; //@line 350 "type.c"
 case 15: 
 var $32=$Parser_addr; //@line 352 "type.c"
 var $33=$EnumIdentifier; //@line 352 "type.c"
 var $call36=_VariableDefine($32,$33,$InitValue,0,0); //@line 352 "type.c"
 var $34=$Parser_addr; //@line 354 "type.c"
 var $call37=_LexGetToken($34,0,1); //@line 354 "type.c"
 $Token=$call37; //@line 354 "type.c"
 var $35=$Token; //@line 355 "type.c"
 var $cmp38=($35|0)!=1; //@line 355 "type.c"
 if($cmp38){label=16;break;}else{label=18;break;} //@line 355 "type.c"
 case 16: 
 var $36=$Token; //@line 355 "type.c"
 var $cmp40=($36|0)!=53; //@line 355 "type.c"
 if($cmp40){label=17;break;}else{label=18;break;} //@line 355 "type.c"
 case 17: 
 var $37=$Parser_addr; //@line 356 "type.c"
 _ProgramFail($37,424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 356 "type.c"
 label=18;break; //@line 356 "type.c"
 case 18: 
 var $38=HEAP32[(($EnumValue)>>2)]; //@line 358 "type.c"
 var $inc=((($38)+(1))|0); //@line 358 "type.c"
 HEAP32[(($EnumValue)>>2)]=$inc; //@line 358 "type.c"
 label=19;break; //@line 360 "type.c"
 case 19: 
 var $39=$Token; //@line 360 "type.c"
 var $cmp44=($39|0)==1; //@line 360 "type.c"
 if($cmp44){label=11;break;}else{label=20;break;} //@line 360 "type.c"
 case 20: 
 STACKTOP=sp;return; //@line 361 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeParseFront($Parser,$Typ,$IsStatic){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Typ_addr;
 var $IsStatic_addr;
 var $Before=sp;
 var $LexerValue=(sp)+(32);
 var $Token;
 var $Unsigned;
 var $VarValue=(sp)+(40);
 var $StaticQualifier;
 var $FollowToken;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 $IsStatic_addr=$IsStatic;
 $Unsigned=0; //@line 369 "type.c"
 $StaticQualifier=0; //@line 371 "type.c"
 var $0=$Typ_addr; //@line 372 "type.c"
 HEAP32[(($0)>>2)]=0; //@line 372 "type.c"
 var $1=$Parser_addr; //@line 375 "type.c"
 _ParserCopy($Before,$1); //@line 375 "type.c"
 var $2=$Parser_addr; //@line 376 "type.c"
 var $call=_LexGetToken($2,$LexerValue,1); //@line 376 "type.c"
 $Token=$call; //@line 376 "type.c"
 label=2;break; //@line 377 "type.c"
 case 2: 
 var $3=$Token; //@line 377 "type.c"
 var $cmp=($3|0)==63; //@line 377 "type.c"
 if($cmp){var $7=1;label=6;break;}else{label=3;break;} //@line 377 "type.c"
 case 3: 
 var $4=$Token; //@line 377 "type.c"
 var $cmp1=($4|0)==64; //@line 377 "type.c"
 if($cmp1){var $7=1;label=6;break;}else{label=4;break;} //@line 377 "type.c"
 case 4: 
 var $5=$Token; //@line 377 "type.c"
 var $cmp3=($5|0)==65; //@line 377 "type.c"
 if($cmp3){var $7=1;label=6;break;}else{label=5;break;} //@line 377 "type.c"
 case 5: 
 var $6=$Token; //@line 377 "type.c"
 var $cmp4=($6|0)==66; //@line 377 "type.c"
 var $7=$cmp4;label=6;break; //@line 377 "type.c"
 case 6: 
 var $7;
 if($7){label=7;break;}else{label=10;break;} //@line 377 "type.c"
 case 7: 
 var $8=$Token; //@line 379 "type.c"
 var $cmp5=($8|0)==63; //@line 379 "type.c"
 if($cmp5){label=8;break;}else{label=9;break;} //@line 379 "type.c"
 case 8: 
 $StaticQualifier=1; //@line 380 "type.c"
 label=9;break; //@line 380 "type.c"
 case 9: 
 var $9=$Parser_addr; //@line 382 "type.c"
 var $call6=_LexGetToken($9,$LexerValue,1); //@line 382 "type.c"
 $Token=$call6; //@line 382 "type.c"
 label=2;break; //@line 383 "type.c"
 case 10: 
 var $10=$IsStatic_addr; //@line 385 "type.c"
 var $cmp7=($10|0)!=0; //@line 385 "type.c"
 if($cmp7){label=11;break;}else{label=12;break;} //@line 385 "type.c"
 case 11: 
 var $11=$StaticQualifier; //@line 386 "type.c"
 var $12=$IsStatic_addr; //@line 386 "type.c"
 HEAP32[(($12)>>2)]=$11; //@line 386 "type.c"
 label=12;break; //@line 386 "type.c"
 case 12: 
 var $13=$Token; //@line 389 "type.c"
 var $cmp10=($13|0)==61; //@line 389 "type.c"
 if($cmp10){label=14;break;}else{label=13;break;} //@line 389 "type.c"
 case 13: 
 var $14=$Token; //@line 389 "type.c"
 var $cmp12=($14|0)==69; //@line 389 "type.c"
 if($cmp12){label=14;break;}else{label=23;break;} //@line 389 "type.c"
 case 14: 
 var $15=$Parser_addr; //@line 391 "type.c"
 var $call14=_LexGetToken($15,$LexerValue,0); //@line 391 "type.c"
 $FollowToken=$call14; //@line 391 "type.c"
 var $16=$Token; //@line 392 "type.c"
 var $cmp15=($16|0)==69; //@line 392 "type.c"
 var $conv=($cmp15&1); //@line 392 "type.c"
 $Unsigned=$conv; //@line 392 "type.c"
 var $17=$FollowToken; //@line 394 "type.c"
 var $cmp16=($17|0)!=54; //@line 394 "type.c"
 if($cmp16){label=15;break;}else{label=22;break;} //@line 394 "type.c"
 case 15: 
 var $18=$FollowToken; //@line 394 "type.c"
 var $cmp18=($18|0)!=60; //@line 394 "type.c"
 if($cmp18){label=16;break;}else{label=22;break;} //@line 394 "type.c"
 case 16: 
 var $19=$FollowToken; //@line 394 "type.c"
 var $cmp21=($19|0)!=62; //@line 394 "type.c"
 if($cmp21){label=17;break;}else{label=22;break;} //@line 394 "type.c"
 case 17: 
 var $20=$FollowToken; //@line 394 "type.c"
 var $cmp24=($20|0)!=55; //@line 394 "type.c"
 if($cmp24){label=18;break;}else{label=22;break;} //@line 394 "type.c"
 case 18: 
 var $21=$Token; //@line 396 "type.c"
 var $cmp27=($21|0)==69; //@line 396 "type.c"
 if($cmp27){label=19;break;}else{label=20;break;} //@line 396 "type.c"
 case 19: 
 var $22=$Typ_addr; //@line 397 "type.c"
 HEAP32[(($22)>>2)]=17016; //@line 397 "type.c"
 label=21;break; //@line 397 "type.c"
 case 20: 
 var $23=$Typ_addr; //@line 399 "type.c"
 HEAP32[(($23)>>2)]=18408; //@line 399 "type.c"
 label=21;break;
 case 21: 
 $retval=1; //@line 401 "type.c"
 label=39;break; //@line 401 "type.c"
 case 22: 
 var $24=$Parser_addr; //@line 404 "type.c"
 var $call32=_LexGetToken($24,$LexerValue,1); //@line 404 "type.c"
 $Token=$call32; //@line 404 "type.c"
 label=23;break; //@line 405 "type.c"
 case 23: 
 var $25=$Token; //@line 407 "type.c"
 switch(($25|0)){case 54:{ label=24;break;}case 62:{ label=25;break;}case 55:{ label=26;break;}case 60:{ label=27;break;}case 56:case 57:{ label=28;break;}case 58:{ label=29;break;}case 67:case 68:{ label=30;break;}case 59:{ label=33;break;}case 45:{ label=36;break;}default:{label=37;break;}}break;
 case 24: 
 var $26=$Unsigned; //@line 409 "type.c"
 var $tobool=($26|0)!=0; //@line 409 "type.c"
 var $cond=$tobool?17016:18408; //@line 409 "type.c"
 var $27=$Typ_addr; //@line 409 "type.c"
 HEAP32[(($27)>>2)]=$cond; //@line 409 "type.c"
 label=38;break; //@line 409 "type.c"
 case 25: 
 var $28=$Unsigned; //@line 410 "type.c"
 var $tobool35=($28|0)!=0; //@line 410 "type.c"
 var $cond36=$tobool35?16920:17984; //@line 410 "type.c"
 var $29=$Typ_addr; //@line 410 "type.c"
 HEAP32[(($29)>>2)]=$cond36; //@line 410 "type.c"
 label=38;break; //@line 410 "type.c"
 case 26: 
 var $30=$Typ_addr; //@line 411 "type.c"
 HEAP32[(($30)>>2)]=19088; //@line 411 "type.c"
 label=38;break; //@line 411 "type.c"
 case 27: 
 var $31=$Unsigned; //@line 412 "type.c"
 var $tobool39=($31|0)!=0; //@line 412 "type.c"
 var $cond40=$tobool39?16968:18264; //@line 412 "type.c"
 var $32=$Typ_addr; //@line 412 "type.c"
 HEAP32[(($32)>>2)]=$cond40; //@line 412 "type.c"
 label=38;break; //@line 412 "type.c"
 case 28: 
 var $33=$Typ_addr; //@line 414 "type.c"
 HEAP32[(($33)>>2)]=19032; //@line 414 "type.c"
 label=38;break; //@line 414 "type.c"
 case 29: 
 var $34=$Typ_addr; //@line 416 "type.c"
 HEAP32[(($34)>>2)]=16856; //@line 416 "type.c"
 label=38;break; //@line 416 "type.c"
 case 30: 
 var $35=$Typ_addr; //@line 419 "type.c"
 var $36=HEAP32[(($35)>>2)]; //@line 419 "type.c"
 var $cmp44=($36|0)!=0; //@line 419 "type.c"
 if($cmp44){label=31;break;}else{label=32;break;} //@line 419 "type.c"
 case 31: 
 var $37=$Parser_addr; //@line 420 "type.c"
 _ProgramFail($37,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 420 "type.c"
 label=32;break; //@line 420 "type.c"
 case 32: 
 var $38=$Parser_addr; //@line 422 "type.c"
 var $39=$Typ_addr; //@line 422 "type.c"
 var $40=$Token; //@line 422 "type.c"
 var $cmp48=($40|0)==67; //@line 422 "type.c"
 var $conv49=($cmp48&1); //@line 422 "type.c"
 _TypeParseStruct($38,$39,$conv49); //@line 422 "type.c"
 label=38;break; //@line 423 "type.c"
 case 33: 
 var $41=$Typ_addr; //@line 426 "type.c"
 var $42=HEAP32[(($41)>>2)]; //@line 426 "type.c"
 var $cmp51=($42|0)!=0; //@line 426 "type.c"
 if($cmp51){label=34;break;}else{label=35;break;} //@line 426 "type.c"
 case 34: 
 var $43=$Parser_addr; //@line 427 "type.c"
 _ProgramFail($43,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 427 "type.c"
 label=35;break; //@line 427 "type.c"
 case 35: 
 var $44=$Parser_addr; //@line 429 "type.c"
 var $45=$Typ_addr; //@line 429 "type.c"
 _TypeParseEnum($44,$45); //@line 429 "type.c"
 label=38;break; //@line 430 "type.c"
 case 36: 
 var $46=$Parser_addr; //@line 434 "type.c"
 var $47=HEAP32[(($LexerValue)>>2)]; //@line 434 "type.c"
 var $Val=(($47+4)|0); //@line 434 "type.c"
 var $48=HEAP32[(($Val)>>2)]; //@line 434 "type.c"
 var $Identifier=$48; //@line 434 "type.c"
 var $49=HEAP32[(($Identifier)>>2)]; //@line 434 "type.c"
 _VariableGet($46,$49,$VarValue); //@line 434 "type.c"
 var $50=HEAP32[(($VarValue)>>2)]; //@line 435 "type.c"
 var $Val56=(($50+4)|0); //@line 435 "type.c"
 var $51=HEAP32[(($Val56)>>2)]; //@line 435 "type.c"
 var $Typ57=$51; //@line 435 "type.c"
 var $52=HEAP32[(($Typ57)>>2)]; //@line 435 "type.c"
 var $53=$Typ_addr; //@line 435 "type.c"
 HEAP32[(($53)>>2)]=$52; //@line 435 "type.c"
 label=38;break; //@line 436 "type.c"
 case 37: 
 var $54=$Parser_addr; //@line 438 "type.c"
 _ParserCopy($54,$Before); //@line 438 "type.c"
 $retval=0; //@line 438 "type.c"
 label=39;break; //@line 438 "type.c"
 case 38: 
 $retval=1; //@line 441 "type.c"
 label=39;break; //@line 441 "type.c"
 case 39: 
 var $55=$retval; //@line 442 "type.c"
 STACKTOP=sp;return $55; //@line 442 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeParseBack($Parser,$FromType){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $FromType_addr;
 var $Token;
 var $Before=sp;
 var $OldMode;
 var $ArraySize;
 $Parser_addr=$Parser;
 $FromType_addr=$FromType;
 var $0=$Parser_addr; //@line 450 "type.c"
 _ParserCopy($Before,$0); //@line 450 "type.c"
 var $1=$Parser_addr; //@line 451 "type.c"
 var $call=_LexGetToken($1,0,1); //@line 451 "type.c"
 $Token=$call; //@line 451 "type.c"
 var $2=$Token; //@line 452 "type.c"
 var $cmp=($2|0)==39; //@line 452 "type.c"
 if($cmp){label=2;break;}else{label=5;break;} //@line 452 "type.c"
 case 2: 
 var $3=$Parser_addr; //@line 455 "type.c"
 var $Mode=(($3+12)|0); //@line 455 "type.c"
 var $4=HEAP32[(($Mode)>>2)]; //@line 455 "type.c"
 $OldMode=$4; //@line 455 "type.c"
 var $5=$Parser_addr; //@line 457 "type.c"
 var $Mode1=(($5+12)|0); //@line 457 "type.c"
 HEAP32[(($Mode1)>>2)]=0; //@line 457 "type.c"
 var $6=$Parser_addr; //@line 458 "type.c"
 var $call2=_ExpressionParseInt($6); //@line 458 "type.c"
 $ArraySize=$call2; //@line 458 "type.c"
 var $7=$OldMode; //@line 459 "type.c"
 var $8=$Parser_addr; //@line 459 "type.c"
 var $Mode3=(($8+12)|0); //@line 459 "type.c"
 HEAP32[(($Mode3)>>2)]=$7; //@line 459 "type.c"
 var $9=$Parser_addr; //@line 461 "type.c"
 var $call4=_LexGetToken($9,0,1); //@line 461 "type.c"
 var $cmp5=($call4|0)!=40; //@line 461 "type.c"
 if($cmp5){label=3;break;}else{label=4;break;} //@line 461 "type.c"
 case 3: 
 var $10=$Parser_addr; //@line 462 "type.c"
 _ProgramFail($10,11664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 462 "type.c"
 label=4;break; //@line 462 "type.c"
 case 4: 
 var $11=$Parser_addr; //@line 464 "type.c"
 var $12=$Parser_addr; //@line 464 "type.c"
 var $13=$FromType_addr; //@line 464 "type.c"
 var $call7=_TypeParseBack($12,$13); //@line 464 "type.c"
 var $14=$ArraySize; //@line 464 "type.c"
 var $15=HEAP32[((17968)>>2)]; //@line 464 "type.c"
 var $call8=_TypeGetMatching($11,$call7,12,$14,$15,1); //@line 464 "type.c"
 $retval=$call8; //@line 464 "type.c"
 label=6;break; //@line 464 "type.c"
 case 5: 
 var $16=$Parser_addr; //@line 469 "type.c"
 _ParserCopy($16,$Before); //@line 469 "type.c"
 var $17=$FromType_addr; //@line 470 "type.c"
 $retval=$17; //@line 470 "type.c"
 label=6;break; //@line 470 "type.c"
 case 6: 
 var $18=$retval; //@line 472 "type.c"
 STACKTOP=sp;return $18; //@line 472 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _TypeParseIdentPart($Parser,$BasicTyp,$Typ,$Identifier){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $BasicTyp_addr;
 var $Typ_addr;
 var $Identifier_addr;
 var $Before=sp;
 var $Token;
 var $LexValue=(sp)+(32);
 var $Done;
 $Parser_addr=$Parser;
 $BasicTyp_addr=$BasicTyp;
 $Typ_addr=$Typ;
 $Identifier_addr=$Identifier;
 $Done=0; //@line 480 "type.c"
 var $0=$BasicTyp_addr; //@line 481 "type.c"
 var $1=$Typ_addr; //@line 481 "type.c"
 HEAP32[(($1)>>2)]=$0; //@line 481 "type.c"
 var $2=HEAP32[((17968)>>2)]; //@line 482 "type.c"
 var $3=$Identifier_addr; //@line 482 "type.c"
 HEAP32[(($3)>>2)]=$2; //@line 482 "type.c"
 label=2;break; //@line 484 "type.c"
 case 2: 
 var $4=$Done; //@line 484 "type.c"
 var $tobool=($4|0)!=0; //@line 484 "type.c"
 var $lnot=$tobool^1; //@line 484 "type.c"
 if($lnot){label=3;break;}else{label=18;break;} //@line 484 "type.c"
 case 3: 
 var $5=$Parser_addr; //@line 486 "type.c"
 _ParserCopy($Before,$5); //@line 486 "type.c"
 var $6=$Parser_addr; //@line 487 "type.c"
 var $call=_LexGetToken($6,$LexValue,1); //@line 487 "type.c"
 $Token=$call; //@line 487 "type.c"
 var $7=$Token; //@line 488 "type.c"
 if(($7|0)==45){ label=12;break;}else if(($7|0)==43){ label=4;break;}else if(($7|0)==30){ label=9;break;}else{label=16;break;}
 case 4: 
 var $8=$Typ_addr; //@line 491 "type.c"
 var $9=HEAP32[(($8)>>2)]; //@line 491 "type.c"
 var $cmp=($9|0)!=0; //@line 491 "type.c"
 if($cmp){label=5;break;}else{label=6;break;} //@line 491 "type.c"
 case 5: 
 var $10=$Parser_addr; //@line 492 "type.c"
 _ProgramFail($10,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 492 "type.c"
 label=6;break; //@line 492 "type.c"
 case 6: 
 var $11=$Parser_addr; //@line 494 "type.c"
 var $12=$Typ_addr; //@line 494 "type.c"
 var $13=$Identifier_addr; //@line 494 "type.c"
 _TypeParse($11,$12,$13,0); //@line 494 "type.c"
 var $14=$Parser_addr; //@line 495 "type.c"
 var $call1=_LexGetToken($14,0,1); //@line 495 "type.c"
 var $cmp2=($call1|0)!=44; //@line 495 "type.c"
 if($cmp2){label=7;break;}else{label=8;break;} //@line 495 "type.c"
 case 7: 
 var $15=$Parser_addr; //@line 496 "type.c"
 _ProgramFail($15,11288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 496 "type.c"
 label=8;break; //@line 496 "type.c"
 case 8: 
 label=17;break; //@line 497 "type.c"
 case 9: 
 var $16=$Typ_addr; //@line 500 "type.c"
 var $17=HEAP32[(($16)>>2)]; //@line 500 "type.c"
 var $cmp6=($17|0)==0; //@line 500 "type.c"
 if($cmp6){label=10;break;}else{label=11;break;} //@line 500 "type.c"
 case 10: 
 var $18=$Parser_addr; //@line 501 "type.c"
 _ProgramFail($18,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 501 "type.c"
 label=11;break; //@line 501 "type.c"
 case 11: 
 var $19=$Parser_addr; //@line 503 "type.c"
 var $20=$Typ_addr; //@line 503 "type.c"
 var $21=HEAP32[(($20)>>2)]; //@line 503 "type.c"
 var $22=HEAP32[((17968)>>2)]; //@line 503 "type.c"
 var $call9=_TypeGetMatching($19,$21,11,0,$22,1); //@line 503 "type.c"
 var $23=$Typ_addr; //@line 503 "type.c"
 HEAP32[(($23)>>2)]=$call9; //@line 503 "type.c"
 label=17;break; //@line 504 "type.c"
 case 12: 
 var $24=$Typ_addr; //@line 507 "type.c"
 var $25=HEAP32[(($24)>>2)]; //@line 507 "type.c"
 var $cmp11=($25|0)==0; //@line 507 "type.c"
 if($cmp11){label=14;break;}else{label=13;break;} //@line 507 "type.c"
 case 13: 
 var $26=$Identifier_addr; //@line 507 "type.c"
 var $27=HEAP32[(($26)>>2)]; //@line 507 "type.c"
 var $28=HEAP32[((17968)>>2)]; //@line 507 "type.c"
 var $cmp12=($27|0)!=($28|0); //@line 507 "type.c"
 if($cmp12){label=14;break;}else{label=15;break;} //@line 507 "type.c"
 case 14: 
 var $29=$Parser_addr; //@line 508 "type.c"
 _ProgramFail($29,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 508 "type.c"
 label=15;break; //@line 508 "type.c"
 case 15: 
 var $30=HEAP32[(($LexValue)>>2)]; //@line 510 "type.c"
 var $Val=(($30+4)|0); //@line 510 "type.c"
 var $31=HEAP32[(($Val)>>2)]; //@line 510 "type.c"
 var $Identifier15=$31; //@line 510 "type.c"
 var $32=HEAP32[(($Identifier15)>>2)]; //@line 510 "type.c"
 var $33=$Identifier_addr; //@line 510 "type.c"
 HEAP32[(($33)>>2)]=$32; //@line 510 "type.c"
 $Done=1; //@line 511 "type.c"
 label=17;break; //@line 512 "type.c"
 case 16: 
 var $34=$Parser_addr; //@line 514 "type.c"
 _ParserCopy($34,$Before); //@line 514 "type.c"
 $Done=1; //@line 514 "type.c"
 label=17;break; //@line 514 "type.c"
 case 17: 
 label=2;break; //@line 516 "type.c"
 case 18: 
 var $35=$Typ_addr; //@line 518 "type.c"
 var $36=HEAP32[(($35)>>2)]; //@line 518 "type.c"
 var $cmp16=($36|0)==0; //@line 518 "type.c"
 if($cmp16){label=19;break;}else{label=20;break;} //@line 518 "type.c"
 case 19: 
 var $37=$Parser_addr; //@line 519 "type.c"
 _ProgramFail($37,12040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 519 "type.c"
 label=20;break; //@line 519 "type.c"
 case 20: 
 var $38=$Identifier_addr; //@line 521 "type.c"
 var $39=HEAP32[(($38)>>2)]; //@line 521 "type.c"
 var $40=HEAP32[((17968)>>2)]; //@line 521 "type.c"
 var $cmp19=($39|0)!=($40|0); //@line 521 "type.c"
 if($cmp19){label=21;break;}else{label=22;break;} //@line 521 "type.c"
 case 21: 
 var $41=$Parser_addr; //@line 524 "type.c"
 var $42=$Typ_addr; //@line 524 "type.c"
 var $43=HEAP32[(($42)>>2)]; //@line 524 "type.c"
 var $call21=_TypeParseBack($41,$43); //@line 524 "type.c"
 var $44=$Typ_addr; //@line 524 "type.c"
 HEAP32[(($44)>>2)]=$call21; //@line 524 "type.c"
 label=22;break; //@line 525 "type.c"
 case 22: 
 STACKTOP=sp;return; //@line 526 "type.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableInit(){
 var label=0;
 _TableInitTable(18544,18552,97,1); //@line 21 "variable.c"
 _TableInitTable(17176,17184,97,1); //@line 22 "variable.c"
 HEAP32[((17160)>>2)]=0; //@line 23 "variable.c"
 return; //@line 24 "variable.c"
}
function _VariableFree($Val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Val_addr;
 $Val_addr=$Val;
 var $0=$Val_addr; //@line 29 "variable.c"
 var $ValOnHeap=(($0+12)|0); //@line 29 "variable.c"
 var $1=HEAP8[($ValOnHeap)]; //@line 29 "variable.c"
 var $tobool=(($1<<24)>>24)!=0; //@line 29 "variable.c"
 if($tobool){label=2;break;}else{label=9;break;} //@line 29 "variable.c"
 case 2: 
 var $2=$Val_addr; //@line 32 "variable.c"
 var $Typ=(($2)|0); //@line 32 "variable.c"
 var $3=HEAP32[(($Typ)>>2)]; //@line 32 "variable.c"
 var $cmp=($3|0)==18944; //@line 32 "variable.c"
 if($cmp){label=3;break;}else{label=6;break;} //@line 32 "variable.c"
 case 3: 
 var $4=$Val_addr; //@line 32 "variable.c"
 var $Val1=(($4+4)|0); //@line 32 "variable.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 32 "variable.c"
 var $FuncDef=$5; //@line 32 "variable.c"
 var $Intrinsic=(($FuncDef+20)|0); //@line 32 "variable.c"
 var $6=HEAP32[(($Intrinsic)>>2)]; //@line 32 "variable.c"
 var $cmp2=($6|0)==0; //@line 32 "variable.c"
 if($cmp2){label=4;break;}else{label=6;break;} //@line 32 "variable.c"
 case 4: 
 var $7=$Val_addr; //@line 32 "variable.c"
 var $Val4=(($7+4)|0); //@line 32 "variable.c"
 var $8=HEAP32[(($Val4)>>2)]; //@line 32 "variable.c"
 var $FuncDef5=$8; //@line 32 "variable.c"
 var $Body=(($FuncDef5+24)|0); //@line 32 "variable.c"
 var $Pos=(($Body)|0); //@line 32 "variable.c"
 var $9=HEAP32[(($Pos)>>2)]; //@line 32 "variable.c"
 var $cmp6=($9|0)!=0; //@line 32 "variable.c"
 if($cmp6){label=5;break;}else{label=6;break;} //@line 32 "variable.c"
 case 5: 
 var $10=$Val_addr; //@line 33 "variable.c"
 var $Val8=(($10+4)|0); //@line 33 "variable.c"
 var $11=HEAP32[(($Val8)>>2)]; //@line 33 "variable.c"
 var $FuncDef9=$11; //@line 33 "variable.c"
 var $Body10=(($FuncDef9+24)|0); //@line 33 "variable.c"
 var $Pos11=(($Body10)|0); //@line 33 "variable.c"
 var $12=HEAP32[(($Pos11)>>2)]; //@line 33 "variable.c"
 _HeapFreeMem($12); //@line 33 "variable.c"
 label=6;break; //@line 33 "variable.c"
 case 6: 
 var $13=$Val_addr; //@line 36 "variable.c"
 var $Typ12=(($13)|0); //@line 36 "variable.c"
 var $14=HEAP32[(($Typ12)>>2)]; //@line 36 "variable.c"
 var $cmp13=($14|0)==18216; //@line 36 "variable.c"
 if($cmp13){label=7;break;}else{label=8;break;} //@line 36 "variable.c"
 case 7: 
 var $15=$Val_addr; //@line 37 "variable.c"
 var $Val15=(($15+4)|0); //@line 37 "variable.c"
 var $16=HEAP32[(($Val15)>>2)]; //@line 37 "variable.c"
 var $MacroDef=$16; //@line 37 "variable.c"
 var $Body16=(($MacroDef+8)|0); //@line 37 "variable.c"
 var $Pos17=(($Body16)|0); //@line 37 "variable.c"
 var $17=HEAP32[(($Pos17)>>2)]; //@line 37 "variable.c"
 _HeapFreeMem($17); //@line 37 "variable.c"
 label=8;break; //@line 37 "variable.c"
 case 8: 
 var $18=$Val_addr; //@line 40 "variable.c"
 var $19=$18; //@line 40 "variable.c"
 _HeapFreeMem($19); //@line 40 "variable.c"
 label=9;break; //@line 41 "variable.c"
 case 9: 
 return; //@line 42 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableAlloc($Parser,$Size,$OnHeap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Size_addr;
 var $OnHeap_addr;
 var $NewValue;
 $Parser_addr=$Parser;
 $Size_addr=$Size;
 $OnHeap_addr=$OnHeap;
 var $0=$OnHeap_addr; //@line 75 "variable.c"
 var $tobool=($0|0)!=0; //@line 75 "variable.c"
 if($tobool){label=2;break;}else{label=3;break;} //@line 75 "variable.c"
 case 2: 
 var $1=$Size_addr; //@line 76 "variable.c"
 var $call=_HeapAllocMem($1); //@line 76 "variable.c"
 $NewValue=$call; //@line 76 "variable.c"
 label=4;break; //@line 76 "variable.c"
 case 3: 
 var $2=$Size_addr; //@line 78 "variable.c"
 var $call1=_HeapAllocStack($2); //@line 78 "variable.c"
 $NewValue=$call1; //@line 78 "variable.c"
 label=4;break;
 case 4: 
 var $3=$NewValue; //@line 80 "variable.c"
 var $cmp=($3|0)==0; //@line 80 "variable.c"
 if($cmp){label=5;break;}else{label=6;break;} //@line 80 "variable.c"
 case 5: 
 var $4=$Parser_addr; //@line 81 "variable.c"
 _ProgramFail($4,8568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 81 "variable.c"
 label=6;break; //@line 81 "variable.c"
 case 6: 
 var $5=$NewValue; //@line 88 "variable.c"
 STACKTOP=sp;return $5; //@line 88 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableAllocValueAndData($Parser,$DataSize,$IsLValue,$LValueFrom,$OnHeap){
 var label=0;
 var $Parser_addr;
 var $DataSize_addr;
 var $IsLValue_addr;
 var $LValueFrom_addr;
 var $OnHeap_addr;
 var $NewValue;
 $Parser_addr=$Parser;
 $DataSize_addr=$DataSize;
 $IsLValue_addr=$IsLValue;
 $LValueFrom_addr=$LValueFrom;
 $OnHeap_addr=$OnHeap;
 var $0=$Parser_addr; //@line 94 "variable.c"
 var $1=$DataSize_addr; //@line 94 "variable.c"
 var $add=((($1)+(16))|0); //@line 94 "variable.c"
 var $2=$OnHeap_addr; //@line 94 "variable.c"
 var $call=_VariableAlloc($0,$add,$2); //@line 94 "variable.c"
 var $3=$call; //@line 94 "variable.c"
 $NewValue=$3; //@line 94 "variable.c"
 var $4=$NewValue; //@line 95 "variable.c"
 var $5=$4; //@line 95 "variable.c"
 var $add_ptr=(($5+16)|0); //@line 95 "variable.c"
 var $6=$add_ptr; //@line 95 "variable.c"
 var $7=$NewValue; //@line 95 "variable.c"
 var $Val=(($7+4)|0); //@line 95 "variable.c"
 HEAP32[(($Val)>>2)]=$6; //@line 95 "variable.c"
 var $8=$OnHeap_addr; //@line 96 "variable.c"
 var $conv=(($8)&255); //@line 96 "variable.c"
 var $9=$NewValue; //@line 96 "variable.c"
 var $ValOnHeap=(($9+12)|0); //@line 96 "variable.c"
 HEAP8[($ValOnHeap)]=$conv; //@line 96 "variable.c"
 var $10=$OnHeap_addr; //@line 97 "variable.c"
 var $tobool=($10|0)!=0; //@line 97 "variable.c"
 var $lnot=$tobool^1; //@line 97 "variable.c"
 var $lnot_ext=($lnot&1); //@line 97 "variable.c"
 var $conv1=(($lnot_ext)&255); //@line 97 "variable.c"
 var $11=$NewValue; //@line 97 "variable.c"
 var $ValOnStack=(($11+13)|0); //@line 97 "variable.c"
 HEAP8[($ValOnStack)]=$conv1; //@line 97 "variable.c"
 var $12=$IsLValue_addr; //@line 98 "variable.c"
 var $conv2=(($12)&255); //@line 98 "variable.c"
 var $13=$NewValue; //@line 98 "variable.c"
 var $IsLValue3=(($13+14)|0); //@line 98 "variable.c"
 HEAP8[($IsLValue3)]=$conv2; //@line 98 "variable.c"
 var $14=$LValueFrom_addr; //@line 99 "variable.c"
 var $15=$NewValue; //@line 99 "variable.c"
 var $LValueFrom4=(($15+8)|0); //@line 99 "variable.c"
 HEAP32[(($LValueFrom4)>>2)]=$14; //@line 99 "variable.c"
 var $16=$NewValue; //@line 101 "variable.c"
 return $16; //@line 101 "variable.c"
}
function _VariableAllocValueFromType($Parser,$Typ,$IsLValue,$LValueFrom,$OnHeap){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Typ_addr;
 var $IsLValue_addr;
 var $LValueFrom_addr;
 var $OnHeap_addr;
 var $Size;
 var $NewValue;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 $IsLValue_addr=$IsLValue;
 $LValueFrom_addr=$LValueFrom;
 $OnHeap_addr=$OnHeap;
 var $0=$Typ_addr; //@line 107 "variable.c"
 var $1=$Typ_addr; //@line 107 "variable.c"
 var $ArraySize=(($1+4)|0); //@line 107 "variable.c"
 var $2=HEAP32[(($ArraySize)>>2)]; //@line 107 "variable.c"
 var $call=_TypeSize($0,$2,0); //@line 107 "variable.c"
 $Size=$call; //@line 107 "variable.c"
 var $3=$Parser_addr; //@line 108 "variable.c"
 var $4=$Size; //@line 108 "variable.c"
 var $5=$IsLValue_addr; //@line 108 "variable.c"
 var $6=$LValueFrom_addr; //@line 108 "variable.c"
 var $7=$OnHeap_addr; //@line 108 "variable.c"
 var $call1=_VariableAllocValueAndData($3,$4,$5,$6,$7); //@line 108 "variable.c"
 $NewValue=$call1; //@line 108 "variable.c"
 var $8=$Size; //@line 109 "variable.c"
 var $cmp=($8|0)>0; //@line 109 "variable.c"
 if($cmp){var $11=0;label=4;break;}else{label=2;break;} //@line 109 "variable.c"
 case 2: 
 var $9=$Typ_addr; //@line 109 "variable.c"
 var $cmp2=($9|0)==16856; //@line 109 "variable.c"
 if($cmp2){var $11=1;label=4;break;}else{label=3;break;} //@line 109 "variable.c"
 case 3: 
 ___assert_fail(11304,8472,109,12312); //@line 109 "variable.c"
 throw "Reached an unreachable!"; //@line 109 "variable.c"
 label=4;break; //@line 109 "variable.c"
 case 4: 
 var $11;
 var $lor_ext=($11&1); //@line 109 "variable.c"
 var $12=$Typ_addr; //@line 110 "variable.c"
 var $13=$NewValue; //@line 110 "variable.c"
 var $Typ3=(($13)|0); //@line 110 "variable.c"
 HEAP32[(($Typ3)>>2)]=$12; //@line 110 "variable.c"
 var $14=$NewValue; //@line 112 "variable.c"
 return $14; //@line 112 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableAllocValueAndCopy($Parser,$FromValue,$OnHeap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $FromValue_addr;
 var $OnHeap_addr;
 var $DType;
 var $NewValue;
 var $TmpBuf=sp;
 var $CopySize;
 $Parser_addr=$Parser;
 $FromValue_addr=$FromValue;
 $OnHeap_addr=$OnHeap;
 var $0=$FromValue_addr; //@line 118 "variable.c"
 var $Typ=(($0)|0); //@line 118 "variable.c"
 var $1=HEAP32[(($Typ)>>2)]; //@line 118 "variable.c"
 $DType=$1; //@line 118 "variable.c"
 var $2=$FromValue_addr; //@line 121 "variable.c"
 var $call=_TypeSizeValue($2,1); //@line 121 "variable.c"
 $CopySize=$call; //@line 121 "variable.c"
 var $3=$CopySize; //@line 123 "variable.c"
 var $cmp=($3|0)<=256; //@line 123 "variable.c"
 if($cmp){var $5=0;label=3;break;}else{label=2;break;} //@line 123 "variable.c"
 case 2: 
 ___assert_fail(6600,8472,123,12344); //@line 123 "variable.c"
 throw "Reached an unreachable!"; //@line 123 "variable.c"
 label=3;break; //@line 123 "variable.c"
 case 3: 
 var $5;
 var $lor_ext=($5&1); //@line 123 "variable.c"
 var $arrayidx=(($TmpBuf)|0); //@line 124 "variable.c"
 var $6=$FromValue_addr; //@line 124 "variable.c"
 var $Val=(($6+4)|0); //@line 124 "variable.c"
 var $7=HEAP32[(($Val)>>2)]; //@line 124 "variable.c"
 var $8=$7; //@line 124 "variable.c"
 var $9=$CopySize; //@line 124 "variable.c"
 assert($9 % 1 === 0);(_memcpy($arrayidx, $8, $9)|0); //@line 124 "variable.c"
 var $10=$Parser_addr; //@line 125 "variable.c"
 var $11=$CopySize; //@line 125 "variable.c"
 var $12=$FromValue_addr; //@line 125 "variable.c"
 var $IsLValue=(($12+14)|0); //@line 125 "variable.c"
 var $13=HEAP8[($IsLValue)]; //@line 125 "variable.c"
 var $conv=(($13<<24)>>24); //@line 125 "variable.c"
 var $14=$FromValue_addr; //@line 125 "variable.c"
 var $LValueFrom=(($14+8)|0); //@line 125 "variable.c"
 var $15=HEAP32[(($LValueFrom)>>2)]; //@line 125 "variable.c"
 var $16=$OnHeap_addr; //@line 125 "variable.c"
 var $call1=_VariableAllocValueAndData($10,$11,$conv,$15,$16); //@line 125 "variable.c"
 $NewValue=$call1; //@line 125 "variable.c"
 var $17=$DType; //@line 126 "variable.c"
 var $18=$NewValue; //@line 126 "variable.c"
 var $Typ2=(($18)|0); //@line 126 "variable.c"
 HEAP32[(($Typ2)>>2)]=$17; //@line 126 "variable.c"
 var $19=$NewValue; //@line 127 "variable.c"
 var $Val3=(($19+4)|0); //@line 127 "variable.c"
 var $20=HEAP32[(($Val3)>>2)]; //@line 127 "variable.c"
 var $21=$20; //@line 127 "variable.c"
 var $arrayidx4=(($TmpBuf)|0); //@line 127 "variable.c"
 var $22=$CopySize; //@line 127 "variable.c"
 assert($22 % 1 === 0);(_memcpy($21, $arrayidx4, $22)|0); //@line 127 "variable.c"
 var $23=$NewValue; //@line 129 "variable.c"
 STACKTOP=sp;return $23; //@line 129 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableAllocValueFromExistingData($Parser,$Typ,$FromValue,$IsLValue,$LValueFrom){
 var label=0;
 var $Parser_addr;
 var $Typ_addr;
 var $FromValue_addr;
 var $IsLValue_addr;
 var $LValueFrom_addr;
 var $NewValue;
 $Parser_addr=$Parser;
 $Typ_addr=$Typ;
 $FromValue_addr=$FromValue;
 $IsLValue_addr=$IsLValue;
 $LValueFrom_addr=$LValueFrom;
 var $0=$Parser_addr; //@line 135 "variable.c"
 var $call=_VariableAlloc($0,16,0); //@line 135 "variable.c"
 var $1=$call; //@line 135 "variable.c"
 $NewValue=$1; //@line 135 "variable.c"
 var $2=$Typ_addr; //@line 136 "variable.c"
 var $3=$NewValue; //@line 136 "variable.c"
 var $Typ1=(($3)|0); //@line 136 "variable.c"
 HEAP32[(($Typ1)>>2)]=$2; //@line 136 "variable.c"
 var $4=$FromValue_addr; //@line 137 "variable.c"
 var $5=$NewValue; //@line 137 "variable.c"
 var $Val=(($5+4)|0); //@line 137 "variable.c"
 HEAP32[(($Val)>>2)]=$4; //@line 137 "variable.c"
 var $6=$NewValue; //@line 138 "variable.c"
 var $ValOnHeap=(($6+12)|0); //@line 138 "variable.c"
 HEAP8[($ValOnHeap)]=0; //@line 138 "variable.c"
 var $7=$NewValue; //@line 139 "variable.c"
 var $ValOnStack=(($7+13)|0); //@line 139 "variable.c"
 HEAP8[($ValOnStack)]=0; //@line 139 "variable.c"
 var $8=$IsLValue_addr; //@line 140 "variable.c"
 var $conv=(($8)&255); //@line 140 "variable.c"
 var $9=$NewValue; //@line 140 "variable.c"
 var $IsLValue2=(($9+14)|0); //@line 140 "variable.c"
 HEAP8[($IsLValue2)]=$conv; //@line 140 "variable.c"
 var $10=$LValueFrom_addr; //@line 141 "variable.c"
 var $11=$NewValue; //@line 141 "variable.c"
 var $LValueFrom3=(($11+8)|0); //@line 141 "variable.c"
 HEAP32[(($LValueFrom3)>>2)]=$10; //@line 141 "variable.c"
 var $12=$NewValue; //@line 143 "variable.c"
 return $12; //@line 143 "variable.c"
}
function _VariableAllocValueShared($Parser,$FromValue){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $FromValue_addr;
 $Parser_addr=$Parser;
 $FromValue_addr=$FromValue;
 var $0=$Parser_addr; //@line 149 "variable.c"
 var $1=$FromValue_addr; //@line 149 "variable.c"
 var $Typ=(($1)|0); //@line 149 "variable.c"
 var $2=HEAP32[(($Typ)>>2)]; //@line 149 "variable.c"
 var $3=$FromValue_addr; //@line 149 "variable.c"
 var $Val=(($3+4)|0); //@line 149 "variable.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 149 "variable.c"
 var $5=$FromValue_addr; //@line 149 "variable.c"
 var $IsLValue=(($5+14)|0); //@line 149 "variable.c"
 var $6=HEAP8[($IsLValue)]; //@line 149 "variable.c"
 var $conv=(($6<<24)>>24); //@line 149 "variable.c"
 var $7=$FromValue_addr; //@line 149 "variable.c"
 var $IsLValue1=(($7+14)|0); //@line 149 "variable.c"
 var $8=HEAP8[($IsLValue1)]; //@line 149 "variable.c"
 var $conv2=(($8<<24)>>24); //@line 149 "variable.c"
 var $tobool=($conv2|0)!=0; //@line 149 "variable.c"
 if($tobool){label=2;break;}else{label=3;break;} //@line 149 "variable.c"
 case 2: 
 var $9=$FromValue_addr; //@line 149 "variable.c"
 var $cond=$9;label=4;break; //@line 149 "variable.c"
 case 3: 
 var $cond=0;label=4;break; //@line 149 "variable.c"
 case 4: 
 var $cond; //@line 149 "variable.c"
 var $call=_VariableAllocValueFromExistingData($0,$2,$4,$conv,$cond); //@line 149 "variable.c"
 return $call; //@line 149 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableDefine($Parser,$Ident,$InitValue,$Typ,$MakeWritable){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Ident_addr;
 var $InitValue_addr;
 var $Typ_addr;
 var $MakeWritable_addr;
 var $AssignValue;
 $Parser_addr=$Parser;
 $Ident_addr=$Ident;
 $InitValue_addr=$InitValue;
 $Typ_addr=$Typ;
 $MakeWritable_addr=$MakeWritable;
 var $0=$InitValue_addr; //@line 157 "variable.c"
 var $cmp=($0|0)!=0; //@line 157 "variable.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 157 "variable.c"
 case 2: 
 var $1=$Parser_addr; //@line 158 "variable.c"
 var $2=$InitValue_addr; //@line 158 "variable.c"
 var $3=HEAP32[((17160)>>2)]; //@line 158 "variable.c"
 var $cmp1=($3|0)==0; //@line 158 "variable.c"
 var $conv=($cmp1&1); //@line 158 "variable.c"
 var $call=_VariableAllocValueAndCopy($1,$2,$conv); //@line 158 "variable.c"
 $AssignValue=$call; //@line 158 "variable.c"
 label=4;break; //@line 158 "variable.c"
 case 3: 
 var $4=$Parser_addr; //@line 160 "variable.c"
 var $5=$Typ_addr; //@line 160 "variable.c"
 var $6=$MakeWritable_addr; //@line 160 "variable.c"
 var $7=HEAP32[((17160)>>2)]; //@line 160 "variable.c"
 var $cmp2=($7|0)==0; //@line 160 "variable.c"
 var $conv3=($cmp2&1); //@line 160 "variable.c"
 var $call4=_VariableAllocValueFromType($4,$5,$6,0,$conv3); //@line 160 "variable.c"
 $AssignValue=$call4; //@line 160 "variable.c"
 label=4;break;
 case 4: 
 var $8=$MakeWritable_addr; //@line 162 "variable.c"
 var $conv5=(($8)&255); //@line 162 "variable.c"
 var $9=$AssignValue; //@line 162 "variable.c"
 var $IsLValue=(($9+14)|0); //@line 162 "variable.c"
 HEAP8[($IsLValue)]=$conv5; //@line 162 "variable.c"
 var $10=HEAP32[((17160)>>2)]; //@line 164 "variable.c"
 var $cmp6=($10|0)==0; //@line 164 "variable.c"
 if($cmp6){label=5;break;}else{label=6;break;} //@line 164 "variable.c"
 case 5: 
 var $cond=18544;label=7;break; //@line 164 "variable.c"
 case 6: 
 var $11=HEAP32[((17160)>>2)]; //@line 164 "variable.c"
 var $LocalTable=(($11+48)|0); //@line 164 "variable.c"
 var $cond=$LocalTable;label=7;break; //@line 164 "variable.c"
 case 7: 
 var $cond; //@line 164 "variable.c"
 var $12=$Ident_addr; //@line 164 "variable.c"
 var $13=$AssignValue; //@line 164 "variable.c"
 var $14=$Parser_addr; //@line 164 "variable.c"
 var $tobool=($14|0)!=0; //@line 164 "variable.c"
 if($tobool){label=8;break;}else{label=9;break;} //@line 164 "variable.c"
 case 8: 
 var $15=$Parser_addr; //@line 164 "variable.c"
 var $FileName=(($15+4)|0); //@line 164 "variable.c"
 var $16=HEAP32[(($FileName)>>2)]; //@line 164 "variable.c"
 var $cond11=$16;label=10;break; //@line 164 "variable.c"
 case 9: 
 var $cond11=0;label=10;break; //@line 164 "variable.c"
 case 10: 
 var $cond11; //@line 164 "variable.c"
 var $17=$Parser_addr; //@line 164 "variable.c"
 var $tobool12=($17|0)!=0; //@line 164 "variable.c"
 if($tobool12){label=11;break;}else{label=12;break;} //@line 164 "variable.c"
 case 11: 
 var $18=$Parser_addr; //@line 164 "variable.c"
 var $Line=(($18+8)|0); //@line 164 "variable.c"
 var $19=HEAP16[(($Line)>>1)]; //@line 164 "variable.c"
 var $conv14=(($19<<16)>>16); //@line 164 "variable.c"
 var $cond17=$conv14;label=13;break; //@line 164 "variable.c"
 case 12: 
 var $cond17=0;label=13;break; //@line 164 "variable.c"
 case 13: 
 var $cond17; //@line 164 "variable.c"
 var $20=$Parser_addr; //@line 164 "variable.c"
 var $tobool18=($20|0)!=0; //@line 164 "variable.c"
 if($tobool18){label=14;break;}else{label=15;break;} //@line 164 "variable.c"
 case 14: 
 var $21=$Parser_addr; //@line 164 "variable.c"
 var $CharacterPos=(($21+10)|0); //@line 164 "variable.c"
 var $22=HEAP16[(($CharacterPos)>>1)]; //@line 164 "variable.c"
 var $conv20=(($22<<16)>>16); //@line 164 "variable.c"
 var $cond23=$conv20;label=16;break; //@line 164 "variable.c"
 case 15: 
 var $cond23=0;label=16;break; //@line 164 "variable.c"
 case 16: 
 var $cond23; //@line 164 "variable.c"
 var $call24=_TableSet($cond,$12,$13,$cond11,$cond17,$cond23); //@line 164 "variable.c"
 var $tobool25=($call24|0)!=0; //@line 164 "variable.c"
 if($tobool25){label=18;break;}else{label=17;break;} //@line 164 "variable.c"
 case 17: 
 var $23=$Parser_addr; //@line 165 "variable.c"
 var $24=$Ident_addr; //@line 165 "variable.c"
 _ProgramFail($23,5000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs; //@line 165 "variable.c"
 label=18;break; //@line 165 "variable.c"
 case 18: 
 var $25=$AssignValue; //@line 167 "variable.c"
 STACKTOP=sp;return $25; //@line 167 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableDefineButIgnoreIdentical($Parser,$Ident,$Typ,$IsStatic,$FirstVisit){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Ident_addr;
 var $Typ_addr;
 var $IsStatic_addr;
 var $FirstVisit_addr;
 var $ExistingValue=sp;
 var $DeclFileName=(sp)+(8);
 var $DeclLine=(sp)+(16);
 var $DeclColumn=(sp)+(24);
 var $MangledName=(sp)+(32);
 var $MNPos;
 var $MNEnd;
 var $RegisteredMangledName;
 $Parser_addr=$Parser;
 $Ident_addr=$Ident;
 $Typ_addr=$Typ;
 $IsStatic_addr=$IsStatic;
 $FirstVisit_addr=$FirstVisit;
 var $0=$IsStatic_addr; //@line 178 "variable.c"
 var $tobool=($0|0)!=0; //@line 178 "variable.c"
 if($tobool){label=2;break;}else{label=11;break;} //@line 178 "variable.c"
 case 2: 
 var $arrayidx=(($MangledName)|0); //@line 181 "variable.c"
 $MNPos=$arrayidx; //@line 181 "variable.c"
 var $arrayidx1=(($MangledName+255)|0); //@line 182 "variable.c"
 $MNEnd=$arrayidx1; //@line 182 "variable.c"
 var $1=$MangledName; //@line 186 "variable.c"
 _memset($1, 0, 256); //@line 186 "variable.c"
 var $2=$MNPos; //@line 187 "variable.c"
 var $incdec_ptr=(($2+1)|0); //@line 187 "variable.c"
 $MNPos=$incdec_ptr; //@line 187 "variable.c"
 HEAP8[($2)]=47; //@line 187 "variable.c"
 var $3=$MNPos; //@line 188 "variable.c"
 var $4=$Parser_addr; //@line 188 "variable.c"
 var $FileName=(($4+4)|0); //@line 188 "variable.c"
 var $5=HEAP32[(($FileName)>>2)]; //@line 188 "variable.c"
 var $6=$MNEnd; //@line 188 "variable.c"
 var $7=$MNPos; //@line 188 "variable.c"
 var $sub_ptr_lhs_cast=$6; //@line 188 "variable.c"
 var $sub_ptr_rhs_cast=$7; //@line 188 "variable.c"
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 188 "variable.c"
 var $call=_strncpy($3,$5,$sub_ptr_sub); //@line 188 "variable.c"
 var $8=$MNPos; //@line 189 "variable.c"
 var $call2=_strlen($8); //@line 189 "variable.c"
 var $9=$MNPos; //@line 189 "variable.c"
 var $add_ptr=(($9+$call2)|0); //@line 189 "variable.c"
 $MNPos=$add_ptr; //@line 189 "variable.c"
 var $10=HEAP32[((17160)>>2)]; //@line 191 "variable.c"
 var $cmp=($10|0)!=0; //@line 191 "variable.c"
 if($cmp){label=3;break;}else{label=6;break;} //@line 191 "variable.c"
 case 3: 
 var $11=$MNEnd; //@line 194 "variable.c"
 var $12=$MNPos; //@line 194 "variable.c"
 var $sub_ptr_lhs_cast4=$11; //@line 194 "variable.c"
 var $sub_ptr_rhs_cast5=$12; //@line 194 "variable.c"
 var $sub_ptr_sub6=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast5))|0); //@line 194 "variable.c"
 var $cmp7=($sub_ptr_sub6|0)>0; //@line 194 "variable.c"
 if($cmp7){label=4;break;}else{label=5;break;} //@line 194 "variable.c"
 case 4: 
 var $13=$MNPos; //@line 194 "variable.c"
 var $incdec_ptr9=(($13+1)|0); //@line 194 "variable.c"
 $MNPos=$incdec_ptr9; //@line 194 "variable.c"
 HEAP8[($13)]=47; //@line 194 "variable.c"
 label=5;break; //@line 194 "variable.c"
 case 5: 
 var $14=$MNPos; //@line 195 "variable.c"
 var $15=HEAP32[((17160)>>2)]; //@line 195 "variable.c"
 var $FuncName=(($15+32)|0); //@line 195 "variable.c"
 var $16=HEAP32[(($FuncName)>>2)]; //@line 195 "variable.c"
 var $17=$MNEnd; //@line 195 "variable.c"
 var $18=$MNPos; //@line 195 "variable.c"
 var $sub_ptr_lhs_cast10=$17; //@line 195 "variable.c"
 var $sub_ptr_rhs_cast11=$18; //@line 195 "variable.c"
 var $sub_ptr_sub12=((($sub_ptr_lhs_cast10)-($sub_ptr_rhs_cast11))|0); //@line 195 "variable.c"
 var $call13=_strncpy($14,$16,$sub_ptr_sub12); //@line 195 "variable.c"
 var $19=$MNPos; //@line 196 "variable.c"
 var $call14=_strlen($19); //@line 196 "variable.c"
 var $20=$MNPos; //@line 196 "variable.c"
 var $add_ptr15=(($20+$call14)|0); //@line 196 "variable.c"
 $MNPos=$add_ptr15; //@line 196 "variable.c"
 label=6;break; //@line 197 "variable.c"
 case 6: 
 var $21=$MNEnd; //@line 199 "variable.c"
 var $22=$MNPos; //@line 199 "variable.c"
 var $sub_ptr_lhs_cast17=$21; //@line 199 "variable.c"
 var $sub_ptr_rhs_cast18=$22; //@line 199 "variable.c"
 var $sub_ptr_sub19=((($sub_ptr_lhs_cast17)-($sub_ptr_rhs_cast18))|0); //@line 199 "variable.c"
 var $cmp20=($sub_ptr_sub19|0)>0; //@line 199 "variable.c"
 if($cmp20){label=7;break;}else{label=8;break;} //@line 199 "variable.c"
 case 7: 
 var $23=$MNPos; //@line 199 "variable.c"
 var $incdec_ptr22=(($23+1)|0); //@line 199 "variable.c"
 $MNPos=$incdec_ptr22; //@line 199 "variable.c"
 HEAP8[($23)]=47; //@line 199 "variable.c"
 label=8;break; //@line 199 "variable.c"
 case 8: 
 var $24=$MNPos; //@line 200 "variable.c"
 var $25=$Ident_addr; //@line 200 "variable.c"
 var $26=$MNEnd; //@line 200 "variable.c"
 var $27=$MNPos; //@line 200 "variable.c"
 var $sub_ptr_lhs_cast24=$26; //@line 200 "variable.c"
 var $sub_ptr_rhs_cast25=$27; //@line 200 "variable.c"
 var $sub_ptr_sub26=((($sub_ptr_lhs_cast24)-($sub_ptr_rhs_cast25))|0); //@line 200 "variable.c"
 var $call27=_strncpy($24,$25,$sub_ptr_sub26); //@line 200 "variable.c"
 var $arraydecay=(($MangledName)|0); //@line 201 "variable.c"
 var $call28=_TableStrRegister($arraydecay); //@line 201 "variable.c"
 $RegisteredMangledName=$call28; //@line 201 "variable.c"
 var $28=$RegisteredMangledName; //@line 204 "variable.c"
 var $call29=_TableGet(18544,$28,$ExistingValue,$DeclFileName,$DeclLine,$DeclColumn); //@line 204 "variable.c"
 var $tobool30=($call29|0)!=0; //@line 204 "variable.c"
 if($tobool30){label=10;break;}else{label=9;break;} //@line 204 "variable.c"
 case 9: 
 var $29=$Parser_addr; //@line 207 "variable.c"
 var $30=$Typ_addr; //@line 207 "variable.c"
 var $call32=_VariableAllocValueFromType($29,$30,1,0,1); //@line 207 "variable.c"
 HEAP32[(($ExistingValue)>>2)]=$call32; //@line 207 "variable.c"
 var $31=$RegisteredMangledName; //@line 208 "variable.c"
 var $32=HEAP32[(($ExistingValue)>>2)]; //@line 208 "variable.c"
 var $33=$Parser_addr; //@line 208 "variable.c"
 var $FileName33=(($33+4)|0); //@line 208 "variable.c"
 var $34=HEAP32[(($FileName33)>>2)]; //@line 208 "variable.c"
 var $35=$Parser_addr; //@line 208 "variable.c"
 var $Line=(($35+8)|0); //@line 208 "variable.c"
 var $36=HEAP16[(($Line)>>1)]; //@line 208 "variable.c"
 var $conv=(($36<<16)>>16); //@line 208 "variable.c"
 var $37=$Parser_addr; //@line 208 "variable.c"
 var $CharacterPos=(($37+10)|0); //@line 208 "variable.c"
 var $38=HEAP16[(($CharacterPos)>>1)]; //@line 208 "variable.c"
 var $conv34=(($38<<16)>>16); //@line 208 "variable.c"
 var $call35=_TableSet(18544,$31,$32,$34,$conv,$conv34); //@line 208 "variable.c"
 var $39=$FirstVisit_addr; //@line 209 "variable.c"
 HEAP32[(($39)>>2)]=1; //@line 209 "variable.c"
 label=10;break; //@line 210 "variable.c"
 case 10: 
 var $40=$Parser_addr; //@line 213 "variable.c"
 var $41=$Ident_addr; //@line 213 "variable.c"
 var $42=HEAP32[(($ExistingValue)>>2)]; //@line 213 "variable.c"
 var $Typ37=(($42)|0); //@line 213 "variable.c"
 var $43=HEAP32[(($Typ37)>>2)]; //@line 213 "variable.c"
 var $44=HEAP32[(($ExistingValue)>>2)]; //@line 213 "variable.c"
 var $Val=(($44+4)|0); //@line 213 "variable.c"
 var $45=HEAP32[(($Val)>>2)]; //@line 213 "variable.c"
 _VariableDefinePlatformVar($40,$41,$43,$45,1); //@line 213 "variable.c"
 var $46=HEAP32[(($ExistingValue)>>2)]; //@line 214 "variable.c"
 $retval=$46; //@line 214 "variable.c"
 label=21;break; //@line 214 "variable.c"
 case 11: 
 var $47=$Parser_addr; //@line 218 "variable.c"
 var $Line38=(($47+8)|0); //@line 218 "variable.c"
 var $48=HEAP16[(($Line38)>>1)]; //@line 218 "variable.c"
 var $conv39=(($48<<16)>>16); //@line 218 "variable.c"
 var $cmp40=($conv39|0)!=0; //@line 218 "variable.c"
 if($cmp40){label=12;break;}else{label=20;break;} //@line 218 "variable.c"
 case 12: 
 var $49=HEAP32[((17160)>>2)]; //@line 218 "variable.c"
 var $cmp42=($49|0)==0; //@line 218 "variable.c"
 if($cmp42){label=13;break;}else{label=14;break;} //@line 218 "variable.c"
 case 13: 
 var $cond=18544;label=15;break; //@line 218 "variable.c"
 case 14: 
 var $50=HEAP32[((17160)>>2)]; //@line 218 "variable.c"
 var $LocalTable=(($50+48)|0); //@line 218 "variable.c"
 var $cond=$LocalTable;label=15;break; //@line 218 "variable.c"
 case 15: 
 var $cond; //@line 218 "variable.c"
 var $51=$Ident_addr; //@line 218 "variable.c"
 var $call44=_TableGet($cond,$51,$ExistingValue,$DeclFileName,$DeclLine,$DeclColumn); //@line 218 "variable.c"
 var $tobool45=($call44|0)!=0; //@line 218 "variable.c"
 if($tobool45){label=16;break;}else{label=20;break;} //@line 218 "variable.c"
 case 16: 
 var $52=HEAP32[(($DeclFileName)>>2)]; //@line 218 "variable.c"
 var $53=$Parser_addr; //@line 218 "variable.c"
 var $FileName47=(($53+4)|0); //@line 218 "variable.c"
 var $54=HEAP32[(($FileName47)>>2)]; //@line 218 "variable.c"
 var $cmp48=($52|0)==($54|0); //@line 218 "variable.c"
 if($cmp48){label=17;break;}else{label=20;break;} //@line 218 "variable.c"
 case 17: 
 var $55=HEAP32[(($DeclLine)>>2)]; //@line 218 "variable.c"
 var $56=$Parser_addr; //@line 218 "variable.c"
 var $Line51=(($56+8)|0); //@line 218 "variable.c"
 var $57=HEAP16[(($Line51)>>1)]; //@line 218 "variable.c"
 var $conv52=(($57<<16)>>16); //@line 218 "variable.c"
 var $cmp53=($55|0)==($conv52|0); //@line 218 "variable.c"
 if($cmp53){label=18;break;}else{label=20;break;} //@line 218 "variable.c"
 case 18: 
 var $58=HEAP32[(($DeclColumn)>>2)]; //@line 218 "variable.c"
 var $59=$Parser_addr; //@line 218 "variable.c"
 var $CharacterPos56=(($59+10)|0); //@line 218 "variable.c"
 var $60=HEAP16[(($CharacterPos56)>>1)]; //@line 218 "variable.c"
 var $conv57=(($60<<16)>>16); //@line 218 "variable.c"
 var $cmp58=($58|0)==($conv57|0); //@line 218 "variable.c"
 if($cmp58){label=19;break;}else{label=20;break;} //@line 218 "variable.c"
 case 19: 
 var $61=HEAP32[(($ExistingValue)>>2)]; //@line 220 "variable.c"
 $retval=$61; //@line 220 "variable.c"
 label=21;break; //@line 220 "variable.c"
 case 20: 
 var $62=$Parser_addr; //@line 222 "variable.c"
 var $63=$Ident_addr; //@line 222 "variable.c"
 var $64=$Typ_addr; //@line 222 "variable.c"
 var $call62=_VariableDefine($62,$63,0,$64,1); //@line 222 "variable.c"
 $retval=$call62; //@line 222 "variable.c"
 label=21;break; //@line 222 "variable.c"
 case 21: 
 var $65=$retval; //@line 224 "variable.c"
 STACKTOP=sp;return $65; //@line 224 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableDefinePlatformVar($Parser,$Ident,$Typ,$FromValue,$IsWritable){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Ident_addr;
 var $Typ_addr;
 var $FromValue_addr;
 var $IsWritable_addr;
 var $SomeValue;
 $Parser_addr=$Parser;
 $Ident_addr=$Ident;
 $Typ_addr=$Typ;
 $FromValue_addr=$FromValue;
 $IsWritable_addr=$IsWritable;
 var $0=$IsWritable_addr; //@line 253 "variable.c"
 var $call=_VariableAllocValueAndData(0,0,$0,0,1); //@line 253 "variable.c"
 $SomeValue=$call; //@line 253 "variable.c"
 var $1=$Typ_addr; //@line 254 "variable.c"
 var $2=$SomeValue; //@line 254 "variable.c"
 var $Typ1=(($2)|0); //@line 254 "variable.c"
 HEAP32[(($Typ1)>>2)]=$1; //@line 254 "variable.c"
 var $3=$FromValue_addr; //@line 255 "variable.c"
 var $4=$SomeValue; //@line 255 "variable.c"
 var $Val=(($4+4)|0); //@line 255 "variable.c"
 HEAP32[(($Val)>>2)]=$3; //@line 255 "variable.c"
 var $5=HEAP32[((17160)>>2)]; //@line 257 "variable.c"
 var $cmp=($5|0)==0; //@line 257 "variable.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 257 "variable.c"
 case 2: 
 var $cond=18544;label=4;break; //@line 257 "variable.c"
 case 3: 
 var $6=HEAP32[((17160)>>2)]; //@line 257 "variable.c"
 var $LocalTable=(($6+48)|0); //@line 257 "variable.c"
 var $cond=$LocalTable;label=4;break; //@line 257 "variable.c"
 case 4: 
 var $cond; //@line 257 "variable.c"
 var $7=$Ident_addr; //@line 257 "variable.c"
 var $call2=_TableStrRegister($7); //@line 257 "variable.c"
 var $8=$SomeValue; //@line 257 "variable.c"
 var $9=$Parser_addr; //@line 257 "variable.c"
 var $tobool=($9|0)!=0; //@line 257 "variable.c"
 if($tobool){label=5;break;}else{label=6;break;} //@line 257 "variable.c"
 case 5: 
 var $10=$Parser_addr; //@line 257 "variable.c"
 var $FileName=(($10+4)|0); //@line 257 "variable.c"
 var $11=HEAP32[(($FileName)>>2)]; //@line 257 "variable.c"
 var $cond6=$11;label=7;break; //@line 257 "variable.c"
 case 6: 
 var $cond6=0;label=7;break; //@line 257 "variable.c"
 case 7: 
 var $cond6; //@line 257 "variable.c"
 var $12=$Parser_addr; //@line 257 "variable.c"
 var $tobool7=($12|0)!=0; //@line 257 "variable.c"
 if($tobool7){label=8;break;}else{label=9;break;} //@line 257 "variable.c"
 case 8: 
 var $13=$Parser_addr; //@line 257 "variable.c"
 var $Line=(($13+8)|0); //@line 257 "variable.c"
 var $14=HEAP16[(($Line)>>1)]; //@line 257 "variable.c"
 var $conv=(($14<<16)>>16); //@line 257 "variable.c"
 var $cond11=$conv;label=10;break; //@line 257 "variable.c"
 case 9: 
 var $cond11=0;label=10;break; //@line 257 "variable.c"
 case 10: 
 var $cond11; //@line 257 "variable.c"
 var $15=$Parser_addr; //@line 257 "variable.c"
 var $tobool12=($15|0)!=0; //@line 257 "variable.c"
 if($tobool12){label=11;break;}else{label=12;break;} //@line 257 "variable.c"
 case 11: 
 var $16=$Parser_addr; //@line 257 "variable.c"
 var $CharacterPos=(($16+10)|0); //@line 257 "variable.c"
 var $17=HEAP16[(($CharacterPos)>>1)]; //@line 257 "variable.c"
 var $conv14=(($17<<16)>>16); //@line 257 "variable.c"
 var $cond17=$conv14;label=13;break; //@line 257 "variable.c"
 case 12: 
 var $cond17=0;label=13;break; //@line 257 "variable.c"
 case 13: 
 var $cond17; //@line 257 "variable.c"
 var $call18=_TableSet($cond,$call2,$8,$cond6,$cond11,$cond17); //@line 257 "variable.c"
 var $tobool19=($call18|0)!=0; //@line 257 "variable.c"
 if($tobool19){label=15;break;}else{label=14;break;} //@line 257 "variable.c"
 case 14: 
 var $18=$Parser_addr; //@line 258 "variable.c"
 var $19=$Ident_addr; //@line 258 "variable.c"
 _ProgramFail($18,5000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs; //@line 258 "variable.c"
 label=15;break; //@line 258 "variable.c"
 case 15: 
 STACKTOP=sp;return; //@line 259 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableDefined($Ident){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Ident_addr;
 var $FoundValue=sp;
 $Ident_addr=$Ident;
 var $0=HEAP32[((17160)>>2)]; //@line 231 "variable.c"
 var $cmp=($0|0)==0; //@line 231 "variable.c"
 if($cmp){label=3;break;}else{label=2;break;} //@line 231 "variable.c"
 case 2: 
 var $1=HEAP32[((17160)>>2)]; //@line 231 "variable.c"
 var $LocalTable=(($1+48)|0); //@line 231 "variable.c"
 var $2=$Ident_addr; //@line 231 "variable.c"
 var $call=_TableGet($LocalTable,$2,$FoundValue,0,0,0); //@line 231 "variable.c"
 var $tobool=($call|0)!=0; //@line 231 "variable.c"
 if($tobool){label=6;break;}else{label=3;break;} //@line 231 "variable.c"
 case 3: 
 var $3=$Ident_addr; //@line 233 "variable.c"
 var $call1=_TableGet(18544,$3,$FoundValue,0,0,0); //@line 233 "variable.c"
 var $tobool2=($call1|0)!=0; //@line 233 "variable.c"
 if($tobool2){label=5;break;}else{label=4;break;} //@line 233 "variable.c"
 case 4: 
 $retval=0; //@line 234 "variable.c"
 label=7;break; //@line 234 "variable.c"
 case 5: 
 label=6;break; //@line 235 "variable.c"
 case 6: 
 $retval=1; //@line 237 "variable.c"
 label=7;break; //@line 237 "variable.c"
 case 7: 
 var $4=$retval; //@line 238 "variable.c"
 STACKTOP=sp;return $4; //@line 238 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableGet($Parser,$Ident,$LVal){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Ident_addr;
 var $LVal_addr;
 $Parser_addr=$Parser;
 $Ident_addr=$Ident;
 $LVal_addr=$LVal;
 var $0=HEAP32[((17160)>>2)]; //@line 243 "variable.c"
 var $cmp=($0|0)==0; //@line 243 "variable.c"
 if($cmp){label=3;break;}else{label=2;break;} //@line 243 "variable.c"
 case 2: 
 var $1=HEAP32[((17160)>>2)]; //@line 243 "variable.c"
 var $LocalTable=(($1+48)|0); //@line 243 "variable.c"
 var $2=$Ident_addr; //@line 243 "variable.c"
 var $3=$LVal_addr; //@line 243 "variable.c"
 var $call=_TableGet($LocalTable,$2,$3,0,0,0); //@line 243 "variable.c"
 var $tobool=($call|0)!=0; //@line 243 "variable.c"
 if($tobool){label=6;break;}else{label=3;break;} //@line 243 "variable.c"
 case 3: 
 var $4=$Ident_addr; //@line 245 "variable.c"
 var $5=$LVal_addr; //@line 245 "variable.c"
 var $call1=_TableGet(18544,$4,$5,0,0,0); //@line 245 "variable.c"
 var $tobool2=($call1|0)!=0; //@line 245 "variable.c"
 if($tobool2){label=5;break;}else{label=4;break;} //@line 245 "variable.c"
 case 4: 
 var $6=$Parser_addr; //@line 246 "variable.c"
 var $7=$Ident_addr; //@line 246 "variable.c"
 _ProgramFail($6,3408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs; //@line 246 "variable.c"
 label=5;break; //@line 246 "variable.c"
 case 5: 
 label=6;break; //@line 247 "variable.c"
 case 6: 
 STACKTOP=sp;return; //@line 248 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableStackPop($Parser,$Var){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Var_addr;
 var $Success;
 $Parser_addr=$Parser;
 $Var_addr=$Var;
 var $0=$Var_addr; //@line 271 "variable.c"
 var $ValOnHeap=(($0+12)|0); //@line 271 "variable.c"
 var $1=HEAP8[($ValOnHeap)]; //@line 271 "variable.c"
 var $tobool=(($1<<24)>>24)!=0; //@line 271 "variable.c"
 if($tobool){label=2;break;}else{label=5;break;} //@line 271 "variable.c"
 case 2: 
 var $2=$Var_addr; //@line 273 "variable.c"
 var $Val=(($2+4)|0); //@line 273 "variable.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 273 "variable.c"
 var $cmp=($3|0)!=0; //@line 273 "variable.c"
 if($cmp){label=3;break;}else{label=4;break;} //@line 273 "variable.c"
 case 3: 
 var $4=$Var_addr; //@line 274 "variable.c"
 var $Val2=(($4+4)|0); //@line 274 "variable.c"
 var $5=HEAP32[(($Val2)>>2)]; //@line 274 "variable.c"
 var $6=$5; //@line 274 "variable.c"
 _HeapFreeMem($6); //@line 274 "variable.c"
 label=4;break; //@line 274 "variable.c"
 case 4: 
 var $7=$Var_addr; //@line 276 "variable.c"
 var $8=$7; //@line 276 "variable.c"
 var $call=_HeapPopStack($8,16); //@line 276 "variable.c"
 $Success=$call; //@line 276 "variable.c"
 label=9;break; //@line 277 "variable.c"
 case 5: 
 var $9=$Var_addr; //@line 278 "variable.c"
 var $ValOnStack=(($9+13)|0); //@line 278 "variable.c"
 var $10=HEAP8[($ValOnStack)]; //@line 278 "variable.c"
 var $tobool3=(($10<<24)>>24)!=0; //@line 278 "variable.c"
 if($tobool3){label=6;break;}else{label=7;break;} //@line 278 "variable.c"
 case 6: 
 var $11=$Var_addr; //@line 279 "variable.c"
 var $12=$11; //@line 279 "variable.c"
 var $13=$Var_addr; //@line 279 "variable.c"
 var $call5=_TypeSizeValue($13,0); //@line 279 "variable.c"
 var $add=((($call5)+(16))|0); //@line 279 "variable.c"
 var $call6=_HeapPopStack($12,$add); //@line 279 "variable.c"
 $Success=$call6; //@line 279 "variable.c"
 label=8;break; //@line 279 "variable.c"
 case 7: 
 var $14=$Var_addr; //@line 281 "variable.c"
 var $15=$14; //@line 281 "variable.c"
 var $call8=_HeapPopStack($15,16); //@line 281 "variable.c"
 $Success=$call8; //@line 281 "variable.c"
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $16=$Success; //@line 283 "variable.c"
 var $tobool11=($16|0)!=0; //@line 283 "variable.c"
 if($tobool11){label=11;break;}else{label=10;break;} //@line 283 "variable.c"
 case 10: 
 var $17=$Parser_addr; //@line 284 "variable.c"
 _ProgramFail($17,2304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 284 "variable.c"
 label=11;break; //@line 284 "variable.c"
 case 11: 
 STACKTOP=sp;return; //@line 285 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableStackFrameAdd($Parser,$FuncName,$NumParams){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $FuncName_addr;
 var $NumParams_addr;
 var $NewFrame;
 $Parser_addr=$Parser;
 $FuncName_addr=$FuncName;
 $NumParams_addr=$NumParams;
 _HeapPushStackFrame(); //@line 292 "variable.c"
 var $0=$NumParams_addr; //@line 293 "variable.c"
 var $mul=($0<<2); //@line 293 "variable.c"
 var $add=((($mul)+(104))|0); //@line 293 "variable.c"
 var $call=_HeapAllocStack($add); //@line 293 "variable.c"
 var $1=$call; //@line 293 "variable.c"
 $NewFrame=$1; //@line 293 "variable.c"
 var $2=$NewFrame; //@line 294 "variable.c"
 var $cmp=($2|0)==0; //@line 294 "variable.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 294 "variable.c"
 case 2: 
 var $3=$Parser_addr; //@line 295 "variable.c"
 _ProgramFail($3,8568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 295 "variable.c"
 label=3;break; //@line 295 "variable.c"
 case 3: 
 var $4=$NewFrame; //@line 297 "variable.c"
 var $ReturnParser=(($4)|0); //@line 297 "variable.c"
 var $5=$Parser_addr; //@line 297 "variable.c"
 _ParserCopy($ReturnParser,$5); //@line 297 "variable.c"
 var $6=$FuncName_addr; //@line 298 "variable.c"
 var $7=$NewFrame; //@line 298 "variable.c"
 var $FuncName1=(($7+32)|0); //@line 298 "variable.c"
 HEAP32[(($FuncName1)>>2)]=$6; //@line 298 "variable.c"
 var $8=$NumParams_addr; //@line 299 "variable.c"
 var $cmp2=($8|0)>0; //@line 299 "variable.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 299 "variable.c"
 case 4: 
 var $9=$NewFrame; //@line 299 "variable.c"
 var $10=$9; //@line 299 "variable.c"
 var $add_ptr=(($10+104)|0); //@line 299 "variable.c"
 var $cond=$add_ptr;label=6;break; //@line 299 "variable.c"
 case 5: 
 var $cond=0;label=6;break; //@line 299 "variable.c"
 case 6: 
 var $cond; //@line 299 "variable.c"
 var $11=$cond; //@line 299 "variable.c"
 var $12=$NewFrame; //@line 299 "variable.c"
 var $Parameter=(($12+40)|0); //@line 299 "variable.c"
 HEAP32[(($Parameter)>>2)]=$11; //@line 299 "variable.c"
 var $13=$NewFrame; //@line 300 "variable.c"
 var $LocalTable=(($13+48)|0); //@line 300 "variable.c"
 var $14=$NewFrame; //@line 300 "variable.c"
 var $LocalHashTable=(($14+56)|0); //@line 300 "variable.c"
 var $arrayidx=(($LocalHashTable)|0); //@line 300 "variable.c"
 _TableInitTable($LocalTable,$arrayidx,11,0); //@line 300 "variable.c"
 var $15=HEAP32[((17160)>>2)]; //@line 301 "variable.c"
 var $16=$NewFrame; //@line 301 "variable.c"
 var $PreviousStackFrame=(($16+100)|0); //@line 301 "variable.c"
 HEAP32[(($PreviousStackFrame)>>2)]=$15; //@line 301 "variable.c"
 var $17=$NewFrame; //@line 302 "variable.c"
 HEAP32[((17160)>>2)]=$17; //@line 302 "variable.c"
 STACKTOP=sp;return; //@line 303 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableStackFramePop($Parser){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 $Parser_addr=$Parser;
 var $0=HEAP32[((17160)>>2)]; //@line 308 "variable.c"
 var $cmp=($0|0)==0; //@line 308 "variable.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 308 "variable.c"
 case 2: 
 var $1=$Parser_addr; //@line 309 "variable.c"
 _ProgramFail($1,1368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 309 "variable.c"
 label=3;break; //@line 309 "variable.c"
 case 3: 
 var $2=$Parser_addr; //@line 311 "variable.c"
 var $3=HEAP32[((17160)>>2)]; //@line 311 "variable.c"
 var $ReturnParser=(($3)|0); //@line 311 "variable.c"
 _ParserCopy($2,$ReturnParser); //@line 311 "variable.c"
 var $4=HEAP32[((17160)>>2)]; //@line 312 "variable.c"
 var $PreviousStackFrame=(($4+100)|0); //@line 312 "variable.c"
 var $5=HEAP32[(($PreviousStackFrame)>>2)]; //@line 312 "variable.c"
 HEAP32[((17160)>>2)]=$5; //@line 312 "variable.c"
 var $call=_HeapPopStackFrame(); //@line 313 "variable.c"
 STACKTOP=sp;return; //@line 314 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableStringLiteralGet($Ident){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Ident_addr;
 var $LVal=sp;
 $Ident_addr=$Ident;
 HEAP32[(($LVal)>>2)]=0; //@line 319 "variable.c"
 var $0=$Ident_addr; //@line 321 "variable.c"
 var $call=_TableGet(17176,$0,$LVal,0,0,0); //@line 321 "variable.c"
 var $tobool=($call|0)!=0; //@line 321 "variable.c"
 if($tobool){label=2;break;}else{label=3;break;} //@line 321 "variable.c"
 case 2: 
 var $1=HEAP32[(($LVal)>>2)]; //@line 322 "variable.c"
 $retval=$1; //@line 322 "variable.c"
 label=4;break; //@line 322 "variable.c"
 case 3: 
 $retval=0; //@line 324 "variable.c"
 label=4;break; //@line 324 "variable.c"
 case 4: 
 var $2=$retval; //@line 325 "variable.c"
 STACKTOP=sp;return $2; //@line 325 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _VariableStringLiteralDefine($Ident,$Val){
 var label=0;
 var $Ident_addr;
 var $Val_addr;
 $Ident_addr=$Ident;
 $Val_addr=$Val;
 var $0=$Ident_addr; //@line 330 "variable.c"
 var $1=$Val_addr; //@line 330 "variable.c"
 var $call=_TableSet(17176,$0,$1,0,0,0); //@line 330 "variable.c"
 return; //@line 331 "variable.c"
}
function _VariableDereferencePointer($Parser,$PointerValue,$DerefVal,$DerefOffset,$DerefType,$DerefIsLValue){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $PointerValue_addr;
 var $DerefVal_addr;
 var $DerefOffset_addr;
 var $DerefType_addr;
 var $DerefIsLValue_addr;
 $Parser_addr=$Parser;
 $PointerValue_addr=$PointerValue;
 $DerefVal_addr=$DerefVal;
 $DerefOffset_addr=$DerefOffset;
 $DerefType_addr=$DerefType;
 $DerefIsLValue_addr=$DerefIsLValue;
 var $0=$DerefVal_addr; //@line 336 "variable.c"
 var $cmp=($0|0)!=0; //@line 336 "variable.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 336 "variable.c"
 case 2: 
 var $1=$DerefVal_addr; //@line 337 "variable.c"
 HEAP32[(($1)>>2)]=0; //@line 337 "variable.c"
 label=3;break; //@line 337 "variable.c"
 case 3: 
 var $2=$DerefType_addr; //@line 339 "variable.c"
 var $cmp1=($2|0)!=0; //@line 339 "variable.c"
 if($cmp1){label=4;break;}else{label=5;break;} //@line 339 "variable.c"
 case 4: 
 var $3=$PointerValue_addr; //@line 340 "variable.c"
 var $Typ=(($3)|0); //@line 340 "variable.c"
 var $4=HEAP32[(($Typ)>>2)]; //@line 340 "variable.c"
 var $FromType=(($4+20)|0); //@line 340 "variable.c"
 var $5=HEAP32[(($FromType)>>2)]; //@line 340 "variable.c"
 var $6=$DerefType_addr; //@line 340 "variable.c"
 HEAP32[(($6)>>2)]=$5; //@line 340 "variable.c"
 label=5;break; //@line 340 "variable.c"
 case 5: 
 var $7=$DerefOffset_addr; //@line 342 "variable.c"
 var $cmp4=($7|0)!=0; //@line 342 "variable.c"
 if($cmp4){label=6;break;}else{label=7;break;} //@line 342 "variable.c"
 case 6: 
 var $8=$DerefOffset_addr; //@line 343 "variable.c"
 HEAP32[(($8)>>2)]=0; //@line 343 "variable.c"
 label=7;break; //@line 343 "variable.c"
 case 7: 
 var $9=$DerefIsLValue_addr; //@line 345 "variable.c"
 var $cmp7=($9|0)!=0; //@line 345 "variable.c"
 if($cmp7){label=8;break;}else{label=9;break;} //@line 345 "variable.c"
 case 8: 
 var $10=$DerefIsLValue_addr; //@line 346 "variable.c"
 HEAP32[(($10)>>2)]=1; //@line 346 "variable.c"
 label=9;break; //@line 346 "variable.c"
 case 9: 
 var $11=$PointerValue_addr; //@line 348 "variable.c"
 var $Val=(($11+4)|0); //@line 348 "variable.c"
 var $12=HEAP32[(($Val)>>2)]; //@line 348 "variable.c"
 var $Pointer=$12; //@line 348 "variable.c"
 var $13=HEAP32[(($Pointer)>>2)]; //@line 348 "variable.c"
 return $13; //@line 348 "variable.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LibraryInit(){
 var label=0;
 var $call=_TableStrRegister(7464); //@line 18 "clibrary.c"
 HEAP32[((16912)>>2)]=$call; //@line 18 "clibrary.c"
 var $0=HEAP32[((19136)>>2)]; //@line 19 "clibrary.c"
 _VariableDefinePlatformVar(0,11104,$0,16912,0); //@line 19 "clibrary.c"
 var $1=HEAP8[(12464)]; //@line 22 "clibrary.c"
 var $conv=(($1<<24)>>24); //@line 22 "clibrary.c"
 var $cmp=($conv|0)==0; //@line 22 "clibrary.c"
 var $conv1=($cmp&1); //@line 22 "clibrary.c"
 HEAP32[((19168)>>2)]=$conv1; //@line 22 "clibrary.c"
 var $2=HEAP8[(12464)]; //@line 23 "clibrary.c"
 var $conv2=(($2<<24)>>24); //@line 23 "clibrary.c"
 var $cmp3=($conv2|0)==1; //@line 23 "clibrary.c"
 var $conv4=($cmp3&1); //@line 23 "clibrary.c"
 HEAP32[((18312)>>2)]=$conv4; //@line 23 "clibrary.c"
 _VariableDefinePlatformVar(0,8360,18408,19168,0); //@line 25 "clibrary.c"
 _VariableDefinePlatformVar(0,6536,18408,18312,0); //@line 26 "clibrary.c"
 return; //@line 27 "clibrary.c"
}
function _LibraryAdd($GlobalTable,$LibraryName,$FuncList){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $GlobalTable_addr;
 var $LibraryName_addr;
 var $FuncList_addr;
 var $Parser=sp;
 var $Count;
 var $Identifier=(sp)+(32);
 var $ReturnType=(sp)+(40);
 var $NewValue;
 var $Tokens;
 var $IntrinsicName;
 $GlobalTable_addr=$GlobalTable;
 $LibraryName_addr=$LibraryName;
 $FuncList_addr=$FuncList;
 var $call=_TableStrRegister(4936); //@line 38 "clibrary.c"
 $IntrinsicName=$call; //@line 38 "clibrary.c"
 $Count=0; //@line 41 "clibrary.c"
 label=2;break; //@line 41 "clibrary.c"
 case 2: 
 var $0=$Count; //@line 41 "clibrary.c"
 var $1=$FuncList_addr; //@line 41 "clibrary.c"
 var $arrayidx=(($1+($0<<3))|0); //@line 41 "clibrary.c"
 var $Prototype=(($arrayidx+4)|0); //@line 41 "clibrary.c"
 var $2=HEAP32[(($Prototype)>>2)]; //@line 41 "clibrary.c"
 var $cmp=($2|0)!=0; //@line 41 "clibrary.c"
 if($cmp){label=3;break;}else{label=5;break;} //@line 41 "clibrary.c"
 case 3: 
 var $3=$IntrinsicName; //@line 43 "clibrary.c"
 var $4=$Count; //@line 43 "clibrary.c"
 var $5=$FuncList_addr; //@line 43 "clibrary.c"
 var $arrayidx1=(($5+($4<<3))|0); //@line 43 "clibrary.c"
 var $Prototype2=(($arrayidx1+4)|0); //@line 43 "clibrary.c"
 var $6=HEAP32[(($Prototype2)>>2)]; //@line 43 "clibrary.c"
 var $7=$Count; //@line 43 "clibrary.c"
 var $8=$FuncList_addr; //@line 43 "clibrary.c"
 var $arrayidx3=(($8+($7<<3))|0); //@line 43 "clibrary.c"
 var $Prototype4=(($arrayidx3+4)|0); //@line 43 "clibrary.c"
 var $9=HEAP32[(($Prototype4)>>2)]; //@line 43 "clibrary.c"
 var $call5=_strlen($9); //@line 43 "clibrary.c"
 var $call6=_LexAnalyse($3,$6,$call5,0); //@line 43 "clibrary.c"
 $Tokens=$call6; //@line 43 "clibrary.c"
 var $10=$Count; //@line 44 "clibrary.c"
 var $11=$FuncList_addr; //@line 44 "clibrary.c"
 var $arrayidx7=(($11+($10<<3))|0); //@line 44 "clibrary.c"
 var $Prototype8=(($arrayidx7+4)|0); //@line 44 "clibrary.c"
 var $12=HEAP32[(($Prototype8)>>2)]; //@line 44 "clibrary.c"
 var $13=$Tokens; //@line 44 "clibrary.c"
 var $14=$IntrinsicName; //@line 44 "clibrary.c"
 _LexInitParser($Parser,$12,$13,$14,1); //@line 44 "clibrary.c"
 _TypeParse($Parser,$ReturnType,$Identifier,0); //@line 45 "clibrary.c"
 var $15=HEAP32[(($ReturnType)>>2)]; //@line 46 "clibrary.c"
 var $16=HEAP32[(($Identifier)>>2)]; //@line 46 "clibrary.c"
 var $call9=_ParseFunctionDefinition($Parser,$15,$16); //@line 46 "clibrary.c"
 $NewValue=$call9; //@line 46 "clibrary.c"
 var $17=$Count; //@line 47 "clibrary.c"
 var $18=$FuncList_addr; //@line 47 "clibrary.c"
 var $arrayidx10=(($18+($17<<3))|0); //@line 47 "clibrary.c"
 var $Func=(($arrayidx10)|0); //@line 47 "clibrary.c"
 var $19=HEAP32[(($Func)>>2)]; //@line 47 "clibrary.c"
 var $20=$19; //@line 47 "clibrary.c"
 var $21=$NewValue; //@line 47 "clibrary.c"
 var $Val=(($21+4)|0); //@line 47 "clibrary.c"
 var $22=HEAP32[(($Val)>>2)]; //@line 47 "clibrary.c"
 var $FuncDef=$22; //@line 47 "clibrary.c"
 var $Intrinsic=(($FuncDef+20)|0); //@line 47 "clibrary.c"
 HEAP32[(($Intrinsic)>>2)]=$20; //@line 47 "clibrary.c"
 var $23=$Tokens; //@line 48 "clibrary.c"
 _HeapFreeMem($23); //@line 48 "clibrary.c"
 label=4;break; //@line 49 "clibrary.c"
 case 4: 
 var $24=$Count; //@line 41 "clibrary.c"
 var $inc=((($24)+(1))|0); //@line 41 "clibrary.c"
 $Count=$inc; //@line 41 "clibrary.c"
 label=2;break; //@line 41 "clibrary.c"
 case 5: 
 STACKTOP=sp;return; //@line 50 "clibrary.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PrintType($Typ,$Stream){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Typ_addr;
 var $Stream_addr;
 $Typ_addr=$Typ;
 $Stream_addr=$Stream;
 var $0=$Typ_addr; //@line 55 "clibrary.c"
 var $Base=(($0)|0); //@line 55 "clibrary.c"
 var $1=HEAP32[(($Base)>>2)]; //@line 55 "clibrary.c"
 switch(($1|0)){case 8:{ label=10;break;}case 9:{ label=11;break;}case 10:{ label=12;break;}case 11:{ label=13;break;}case 12:{ label=16;break;}case 13:{ label=19;break;}case 0:{ label=2;break;}case 14:{ label=20;break;}case 15:{ label=21;break;}case 16:{ label=22;break;}case 17:{ label=23;break;}case 1:{ label=3;break;}case 2:{ label=4;break;}case 3:{ label=5;break;}case 4:{ label=6;break;}case 5:{ label=7;break;}case 6:{ label=8;break;}case 7:{ label=9;break;}default:{label=24;break;}}break;
 case 2: 
 var $2=$Stream_addr; //@line 57 "clibrary.c"
 _PrintStr(3384,$2); //@line 57 "clibrary.c"
 label=24;break; //@line 57 "clibrary.c"
 case 3: 
 var $3=$Stream_addr; //@line 58 "clibrary.c"
 _PrintStr(2264,$3); //@line 58 "clibrary.c"
 label=24;break; //@line 58 "clibrary.c"
 case 4: 
 var $4=$Stream_addr; //@line 59 "clibrary.c"
 _PrintStr(1352,$4); //@line 59 "clibrary.c"
 label=24;break; //@line 59 "clibrary.c"
 case 5: 
 var $5=$Stream_addr; //@line 60 "clibrary.c"
 _PrintStr(856,$5); //@line 60 "clibrary.c"
 label=24;break; //@line 60 "clibrary.c"
 case 6: 
 var $6=$Stream_addr; //@line 61 "clibrary.c"
 _PrintStr(408,$6); //@line 61 "clibrary.c"
 label=24;break; //@line 61 "clibrary.c"
 case 7: 
 var $7=$Stream_addr; //@line 62 "clibrary.c"
 _PrintStr(12024,$7); //@line 62 "clibrary.c"
 label=24;break; //@line 62 "clibrary.c"
 case 8: 
 var $8=$Stream_addr; //@line 63 "clibrary.c"
 _PrintStr(11648,$8); //@line 63 "clibrary.c"
 label=24;break; //@line 63 "clibrary.c"
 case 9: 
 var $9=$Stream_addr; //@line 64 "clibrary.c"
 _PrintStr(11272,$9); //@line 64 "clibrary.c"
 label=24;break; //@line 64 "clibrary.c"
 case 10: 
 var $10=$Stream_addr; //@line 66 "clibrary.c"
 _PrintStr(10960,$10); //@line 66 "clibrary.c"
 label=24;break; //@line 66 "clibrary.c"
 case 11: 
 var $11=$Stream_addr; //@line 68 "clibrary.c"
 _PrintStr(10576,$11); //@line 68 "clibrary.c"
 label=24;break; //@line 68 "clibrary.c"
 case 12: 
 var $12=$Stream_addr; //@line 69 "clibrary.c"
 _PrintStr(10192,$12); //@line 69 "clibrary.c"
 label=24;break; //@line 69 "clibrary.c"
 case 13: 
 var $13=$Typ_addr; //@line 70 "clibrary.c"
 var $FromType=(($13+20)|0); //@line 70 "clibrary.c"
 var $14=HEAP32[(($FromType)>>2)]; //@line 70 "clibrary.c"
 var $tobool=($14|0)!=0; //@line 70 "clibrary.c"
 if($tobool){label=14;break;}else{label=15;break;} //@line 70 "clibrary.c"
 case 14: 
 var $15=$Typ_addr; //@line 70 "clibrary.c"
 var $FromType12=(($15+20)|0); //@line 70 "clibrary.c"
 var $16=HEAP32[(($FromType12)>>2)]; //@line 70 "clibrary.c"
 var $17=$Stream_addr; //@line 70 "clibrary.c"
 _PrintType($16,$17); //@line 70 "clibrary.c"
 label=15;break; //@line 70 "clibrary.c"
 case 15: 
 var $18=$Stream_addr; //@line 70 "clibrary.c"
 _PrintCh(42,$18); //@line 70 "clibrary.c"
 label=24;break; //@line 70 "clibrary.c"
 case 16: 
 var $19=$Typ_addr; //@line 71 "clibrary.c"
 var $FromType14=(($19+20)|0); //@line 71 "clibrary.c"
 var $20=HEAP32[(($FromType14)>>2)]; //@line 71 "clibrary.c"
 var $21=$Stream_addr; //@line 71 "clibrary.c"
 _PrintType($20,$21); //@line 71 "clibrary.c"
 var $22=$Stream_addr; //@line 71 "clibrary.c"
 _PrintCh(91,$22); //@line 71 "clibrary.c"
 var $23=$Typ_addr; //@line 71 "clibrary.c"
 var $ArraySize=(($23+4)|0); //@line 71 "clibrary.c"
 var $24=HEAP32[(($ArraySize)>>2)]; //@line 71 "clibrary.c"
 var $cmp=($24|0)!=0; //@line 71 "clibrary.c"
 if($cmp){label=17;break;}else{label=18;break;} //@line 71 "clibrary.c"
 case 17: 
 var $25=$Typ_addr; //@line 71 "clibrary.c"
 var $ArraySize16=(($25+4)|0); //@line 71 "clibrary.c"
 var $26=HEAP32[(($ArraySize16)>>2)]; //@line 71 "clibrary.c"
 var $27=$Stream_addr; //@line 71 "clibrary.c"
 _PrintSimpleInt($26,$27); //@line 71 "clibrary.c"
 label=18;break; //@line 71 "clibrary.c"
 case 18: 
 var $28=$Stream_addr; //@line 71 "clibrary.c"
 _PrintCh(93,$28); //@line 71 "clibrary.c"
 label=24;break; //@line 71 "clibrary.c"
 case 19: 
 var $29=$Stream_addr; //@line 72 "clibrary.c"
 _PrintStr(9880,$29); //@line 72 "clibrary.c"
 var $30=$Typ_addr; //@line 72 "clibrary.c"
 var $Identifier=(($30+16)|0); //@line 72 "clibrary.c"
 var $31=HEAP32[(($Identifier)>>2)]; //@line 72 "clibrary.c"
 var $32=$Stream_addr; //@line 72 "clibrary.c"
 _PrintStr($31,$32); //@line 72 "clibrary.c"
 label=24;break; //@line 72 "clibrary.c"
 case 20: 
 var $33=$Stream_addr; //@line 73 "clibrary.c"
 _PrintStr(9528,$33); //@line 73 "clibrary.c"
 var $34=$Typ_addr; //@line 73 "clibrary.c"
 var $Identifier20=(($34+16)|0); //@line 73 "clibrary.c"
 var $35=HEAP32[(($Identifier20)>>2)]; //@line 73 "clibrary.c"
 var $36=$Stream_addr; //@line 73 "clibrary.c"
 _PrintStr($35,$36); //@line 73 "clibrary.c"
 label=24;break; //@line 73 "clibrary.c"
 case 21: 
 var $37=$Stream_addr; //@line 74 "clibrary.c"
 _PrintStr(9344,$37); //@line 74 "clibrary.c"
 var $38=$Typ_addr; //@line 74 "clibrary.c"
 var $Identifier22=(($38+16)|0); //@line 74 "clibrary.c"
 var $39=HEAP32[(($Identifier22)>>2)]; //@line 74 "clibrary.c"
 var $40=$Stream_addr; //@line 74 "clibrary.c"
 _PrintStr($39,$40); //@line 74 "clibrary.c"
 label=24;break; //@line 74 "clibrary.c"
 case 22: 
 var $41=$Stream_addr; //@line 75 "clibrary.c"
 _PrintStr(9112,$41); //@line 75 "clibrary.c"
 label=24;break; //@line 75 "clibrary.c"
 case 23: 
 var $42=$Stream_addr; //@line 76 "clibrary.c"
 _PrintStr(8912,$42); //@line 76 "clibrary.c"
 label=24;break; //@line 76 "clibrary.c"
 case 24: 
 return; //@line 78 "clibrary.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PicocInitialise($StackSize){
 var label=0;
 var $StackSize_addr;
 $StackSize_addr=$StackSize;
 _BasicIOInit(); //@line 10 "platform.c"
 var $0=$StackSize_addr; //@line 11 "platform.c"
 _HeapInit($0); //@line 11 "platform.c"
 _TableInit(); //@line 12 "platform.c"
 _VariableInit(); //@line 13 "platform.c"
 _LexInit(); //@line 14 "platform.c"
 _TypeInit(); //@line 15 "platform.c"
 _IncludeInit(); //@line 17 "platform.c"
 _LibraryInit(); //@line 19 "platform.c"
 _PlatformLibraryInit(); //@line 24 "platform.c"
 return; //@line 25 "platform.c"
}
function _ProgramFail($Parser,$Message,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $Message_addr;
 var $Args=sp;
 $Parser_addr=$Parser;
 $Message_addr=$Message;
 var $0=$Parser_addr; //@line 140 "platform.c"
 _PlatformErrorPrefix($0); //@line 140 "platform.c"
 var $arraydecay=(($Args)|0); //@line 141 "platform.c"
 var $arraydecay1=$arraydecay; //@line 141 "platform.c"
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0; //@line 141 "platform.c"
 var $1=$Message_addr; //@line 142 "platform.c"
 var $arraydecay2=(($Args)|0); //@line 142 "platform.c"
 _PlatformVPrintf($1,$arraydecay2); //@line 142 "platform.c"
 var $arraydecay3=(($Args)|0); //@line 143 "platform.c"
 var $arraydecay34=$arraydecay3; //@line 143 "platform.c"
 //@line 143 "platform.c"
 _PlatformPrintf(11264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 144 "platform.c"
 _PlatformExit(1); //@line 145 "platform.c"
 STACKTOP=sp;return; //@line 146 "platform.c"
}
function _PrintSourceTextErrorLine($FileName,$SourceText,$Line,$CharacterPos){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $FileName_addr;
 var $SourceText_addr;
 var $Line_addr;
 var $CharacterPos_addr;
 var $LineCount;
 var $LinePos;
 var $CPos;
 var $CCount;
 $FileName_addr=$FileName;
 $SourceText_addr=$SourceText;
 $Line_addr=$Line;
 $CharacterPos_addr=$CharacterPos;
 var $0=$SourceText_addr; //@line 95 "platform.c"
 var $cmp=($0|0)!=0; //@line 95 "platform.c"
 if($cmp){label=2;break;}else{label=29;break;} //@line 95 "platform.c"
 case 2: 
 var $1=$SourceText_addr; //@line 98 "platform.c"
 $LinePos=$1; //@line 98 "platform.c"
 $LineCount=1; //@line 98 "platform.c"
 label=3;break; //@line 98 "platform.c"
 case 3: 
 var $2=$LinePos; //@line 98 "platform.c"
 var $3=HEAP8[($2)]; //@line 98 "platform.c"
 var $conv=(($3<<24)>>24); //@line 98 "platform.c"
 var $cmp1=($conv|0)!=0; //@line 98 "platform.c"
 if($cmp1){label=4;break;}else{var $6=0;label=5;break;} //@line 98 "platform.c"
 case 4: 
 var $4=$LineCount; //@line 98 "platform.c"
 var $5=$Line_addr; //@line 98 "platform.c"
 var $cmp3=($4|0)<($5|0); //@line 98 "platform.c"
 var $6=$cmp3;label=5;break;
 case 5: 
 var $6;
 if($6){label=6;break;}else{label=10;break;}
 case 6: 
 var $7=$LinePos; //@line 100 "platform.c"
 var $8=HEAP8[($7)]; //@line 100 "platform.c"
 var $conv5=(($8<<24)>>24); //@line 100 "platform.c"
 var $cmp6=($conv5|0)==10; //@line 100 "platform.c"
 if($cmp6){label=7;break;}else{label=8;break;} //@line 100 "platform.c"
 case 7: 
 var $9=$LineCount; //@line 101 "platform.c"
 var $inc=((($9)+(1))|0); //@line 101 "platform.c"
 $LineCount=$inc; //@line 101 "platform.c"
 label=8;break; //@line 101 "platform.c"
 case 8: 
 label=9;break; //@line 102 "platform.c"
 case 9: 
 var $10=$LinePos; //@line 98 "platform.c"
 var $incdec_ptr=(($10+1)|0); //@line 98 "platform.c"
 $LinePos=$incdec_ptr; //@line 98 "platform.c"
 label=3;break; //@line 98 "platform.c"
 case 10: 
 var $11=$LinePos; //@line 105 "platform.c"
 $CPos=$11; //@line 105 "platform.c"
 label=11;break; //@line 105 "platform.c"
 case 11: 
 var $12=$CPos; //@line 105 "platform.c"
 var $13=HEAP8[($12)]; //@line 105 "platform.c"
 var $conv10=(($13<<24)>>24); //@line 105 "platform.c"
 var $cmp11=($conv10|0)!=10; //@line 105 "platform.c"
 if($cmp11){label=12;break;}else{var $16=0;label=13;break;} //@line 105 "platform.c"
 case 12: 
 var $14=$CPos; //@line 105 "platform.c"
 var $15=HEAP8[($14)]; //@line 105 "platform.c"
 var $conv14=(($15<<24)>>24); //@line 105 "platform.c"
 var $cmp15=($conv14|0)!=0; //@line 105 "platform.c"
 var $16=$cmp15;label=13;break;
 case 13: 
 var $16;
 if($16){label=14;break;}else{label=16;break;}
 case 14: 
 var $17=$CPos; //@line 106 "platform.c"
 var $18=HEAP8[($17)]; //@line 106 "platform.c"
 var $19=HEAP32[((19160)>>2)]; //@line 106 "platform.c"
 _PrintCh($18,$19); //@line 106 "platform.c"
 label=15;break; //@line 106 "platform.c"
 case 15: 
 var $20=$CPos; //@line 105 "platform.c"
 var $incdec_ptr20=(($20+1)|0); //@line 105 "platform.c"
 $CPos=$incdec_ptr20; //@line 105 "platform.c"
 label=11;break; //@line 105 "platform.c"
 case 16: 
 var $21=HEAP32[((19160)>>2)]; //@line 107 "platform.c"
 _PrintCh(10,$21); //@line 107 "platform.c"
 var $22=$LinePos; //@line 110 "platform.c"
 $CPos=$22; //@line 110 "platform.c"
 $CCount=0; //@line 110 "platform.c"
 label=17;break; //@line 110 "platform.c"
 case 17: 
 var $23=$CPos; //@line 110 "platform.c"
 var $24=HEAP8[($23)]; //@line 110 "platform.c"
 var $conv23=(($24<<24)>>24); //@line 110 "platform.c"
 var $cmp24=($conv23|0)!=10; //@line 110 "platform.c"
 if($cmp24){label=18;break;}else{var $32=0;label=22;break;} //@line 110 "platform.c"
 case 18: 
 var $25=$CPos; //@line 110 "platform.c"
 var $26=HEAP8[($25)]; //@line 110 "platform.c"
 var $conv26=(($26<<24)>>24); //@line 110 "platform.c"
 var $cmp27=($conv26|0)!=0; //@line 110 "platform.c"
 if($cmp27){label=19;break;}else{var $32=0;label=22;break;} //@line 110 "platform.c"
 case 19: 
 var $27=$CCount; //@line 110 "platform.c"
 var $28=$CharacterPos_addr; //@line 110 "platform.c"
 var $cmp30=($27|0)<($28|0); //@line 110 "platform.c"
 if($cmp30){var $31=1;label=21;break;}else{label=20;break;} //@line 110 "platform.c"
 case 20: 
 var $29=$CPos; //@line 110 "platform.c"
 var $30=HEAP8[($29)]; //@line 110 "platform.c"
 var $conv32=(($30<<24)>>24); //@line 110 "platform.c"
 var $cmp33=($conv32|0)==32; //@line 110 "platform.c"
 var $31=$cmp33;label=21;break; //@line 110 "platform.c"
 case 21: 
 var $31;
 var $32=$31;label=22;break;
 case 22: 
 var $32;
 if($32){label=23;break;}else{label=28;break;}
 case 23: 
 var $33=$CPos; //@line 112 "platform.c"
 var $34=HEAP8[($33)]; //@line 112 "platform.c"
 var $conv37=(($34<<24)>>24); //@line 112 "platform.c"
 var $cmp38=($conv37|0)==9; //@line 112 "platform.c"
 if($cmp38){label=24;break;}else{label=25;break;} //@line 112 "platform.c"
 case 24: 
 var $35=HEAP32[((19160)>>2)]; //@line 113 "platform.c"
 _PrintCh(9,$35); //@line 113 "platform.c"
 label=26;break; //@line 113 "platform.c"
 case 25: 
 var $36=HEAP32[((19160)>>2)]; //@line 115 "platform.c"
 _PrintCh(32,$36); //@line 115 "platform.c"
 label=26;break;
 case 26: 
 label=27;break; //@line 116 "platform.c"
 case 27: 
 var $37=$CPos; //@line 110 "platform.c"
 var $incdec_ptr43=(($37+1)|0); //@line 110 "platform.c"
 $CPos=$incdec_ptr43; //@line 110 "platform.c"
 var $38=$CCount; //@line 110 "platform.c"
 var $inc44=((($38)+(1))|0); //@line 110 "platform.c"
 $CCount=$inc44; //@line 110 "platform.c"
 label=17;break; //@line 110 "platform.c"
 case 28: 
 label=34;break; //@line 117 "platform.c"
 case 29: 
 $CCount=0; //@line 121 "platform.c"
 label=30;break; //@line 121 "platform.c"
 case 30: 
 var $39=$CCount; //@line 121 "platform.c"
 var $40=$CharacterPos_addr; //@line 121 "platform.c"
 var $add=((($40)+(7))|0); //@line 121 "platform.c"
 var $cmp48=($39>>>0)<($add>>>0); //@line 121 "platform.c"
 if($cmp48){label=31;break;}else{label=33;break;} //@line 121 "platform.c"
 case 31: 
 var $41=HEAP32[((19160)>>2)]; //@line 122 "platform.c"
 _PrintCh(32,$41); //@line 122 "platform.c"
 label=32;break; //@line 122 "platform.c"
 case 32: 
 var $42=$CCount; //@line 121 "platform.c"
 var $inc52=((($42)+(1))|0); //@line 121 "platform.c"
 $CCount=$inc52; //@line 121 "platform.c"
 label=30;break; //@line 121 "platform.c"
 case 33: 
 label=34;break;
 case 34: 
 var $43=$FileName_addr; //@line 124 "platform.c"
 var $44=$Line_addr; //@line 124 "platform.c"
 var $45=$CharacterPos_addr; //@line 124 "platform.c"
 _PlatformPrintf(11632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$43,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,HEAP32[(((tempVarArgs)+(16))>>2)]=$45,tempVarArgs)); STACKTOP=tempVarArgs; //@line 124 "platform.c"
 STACKTOP=sp;return; //@line 126 "platform.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PlatformPrintf($Format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Format_addr;
 var $Args=sp;
 $Format_addr=$Format;
 var $arraydecay=(($Args)|0); //@line 183 "platform.c"
 var $arraydecay1=$arraydecay; //@line 183 "platform.c"
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0; //@line 183 "platform.c"
 var $0=$Format_addr; //@line 184 "platform.c"
 var $arraydecay2=(($Args)|0); //@line 184 "platform.c"
 _PlatformVPrintf($0,$arraydecay2); //@line 184 "platform.c"
 var $arraydecay3=(($Args)|0); //@line 185 "platform.c"
 var $arraydecay34=$arraydecay3; //@line 185 "platform.c"
 //@line 185 "platform.c"
 STACKTOP=sp;return; //@line 186 "platform.c"
}
function _PlatformErrorPrefix($Parser){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 $Parser_addr=$Parser;
 var $0=$Parser_addr; //@line 131 "platform.c"
 var $cmp=($0|0)!=0; //@line 131 "platform.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 131 "platform.c"
 case 2: 
 var $1=$Parser_addr; //@line 132 "platform.c"
 var $FileName=(($1+4)|0); //@line 132 "platform.c"
 var $2=HEAP32[(($FileName)>>2)]; //@line 132 "platform.c"
 var $3=$Parser_addr; //@line 132 "platform.c"
 var $SourceText=(($3+28)|0); //@line 132 "platform.c"
 var $4=HEAP32[(($SourceText)>>2)]; //@line 132 "platform.c"
 var $5=$Parser_addr; //@line 132 "platform.c"
 var $Line=(($5+8)|0); //@line 132 "platform.c"
 var $6=HEAP16[(($Line)>>1)]; //@line 132 "platform.c"
 var $conv=(($6<<16)>>16); //@line 132 "platform.c"
 var $7=$Parser_addr; //@line 132 "platform.c"
 var $CharacterPos=(($7+10)|0); //@line 132 "platform.c"
 var $8=HEAP16[(($CharacterPos)>>1)]; //@line 132 "platform.c"
 var $conv1=(($8<<16)>>16); //@line 132 "platform.c"
 _PrintSourceTextErrorLine($2,$4,$conv,$conv1); //@line 132 "platform.c"
 label=3;break; //@line 132 "platform.c"
 case 3: 
 return; //@line 133 "platform.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PlatformVPrintf($Format,$Args){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Format_addr;
 var $Args_addr;
 var $FPos;
 $Format_addr=$Format;
 $Args_addr=$Args;
 var $0=$Format_addr; //@line 192 "platform.c"
 $FPos=$0; //@line 192 "platform.c"
 label=2;break; //@line 192 "platform.c"
 case 2: 
 var $1=$FPos; //@line 192 "platform.c"
 var $2=HEAP8[($1)]; //@line 192 "platform.c"
 var $conv=(($2<<24)>>24); //@line 192 "platform.c"
 var $cmp=($conv|0)!=0; //@line 192 "platform.c"
 if($cmp){label=3;break;}else{label=16;break;} //@line 192 "platform.c"
 case 3: 
 var $3=$FPos; //@line 194 "platform.c"
 var $4=HEAP8[($3)]; //@line 194 "platform.c"
 var $conv2=(($4<<24)>>24); //@line 194 "platform.c"
 var $cmp3=($conv2|0)==37; //@line 194 "platform.c"
 if($cmp3){label=4;break;}else{label=13;break;} //@line 194 "platform.c"
 case 4: 
 var $5=$FPos; //@line 196 "platform.c"
 var $incdec_ptr=(($5+1)|0); //@line 196 "platform.c"
 $FPos=$incdec_ptr; //@line 196 "platform.c"
 var $6=$FPos; //@line 197 "platform.c"
 var $7=HEAP8[($6)]; //@line 197 "platform.c"
 var $conv5=(($7<<24)>>24); //@line 197 "platform.c"
 switch(($conv5|0)){case 37:{ label=10;break;}case 0:{ label=11;break;}case 115:{ label=5;break;}case 100:{ label=6;break;}case 99:{ label=7;break;}case 116:{ label=8;break;}case 102:{ label=9;break;}default:{label=12;break;}}break;
 case 5: 
 var $8=$Args_addr; //@line 199 "platform.c"
 var $9=(tempInt=HEAP32[((($8)+(4))>>2)],HEAP32[((($8)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($8)>>2)])+(tempInt))>>2)]); //@line 199 "platform.c"
 var $10=HEAP32[((19160)>>2)]; //@line 199 "platform.c"
 _PrintStr($9,$10); //@line 199 "platform.c"
 label=12;break; //@line 199 "platform.c"
 case 6: 
 var $11=$Args_addr; //@line 200 "platform.c"
 var $12=(tempInt=HEAP32[((($11)+(4))>>2)],HEAP32[((($11)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($11)>>2)])+(tempInt))>>2)]); //@line 200 "platform.c"
 var $13=HEAP32[((19160)>>2)]; //@line 200 "platform.c"
 _PrintSimpleInt($12,$13); //@line 200 "platform.c"
 label=12;break; //@line 200 "platform.c"
 case 7: 
 var $14=$Args_addr; //@line 201 "platform.c"
 var $15=(tempInt=HEAP32[((($14)+(4))>>2)],HEAP32[((($14)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($14)>>2)])+(tempInt))>>2)]); //@line 201 "platform.c"
 var $conv8=(($15)&255); //@line 201 "platform.c"
 var $16=HEAP32[((19160)>>2)]; //@line 201 "platform.c"
 _PrintCh($conv8,$16); //@line 201 "platform.c"
 label=12;break; //@line 201 "platform.c"
 case 8: 
 var $17=$Args_addr; //@line 202 "platform.c"
 var $18=(tempInt=HEAP32[((($17)+(4))>>2)],HEAP32[((($17)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($17)>>2)])+(tempInt))>>2)]); //@line 202 "platform.c"
 var $19=HEAP32[((19160)>>2)]; //@line 202 "platform.c"
 _PrintType($18,$19); //@line 202 "platform.c"
 label=12;break; //@line 202 "platform.c"
 case 9: 
 var $20=$Args_addr; //@line 204 "platform.c"
 var $21=(tempInt=HEAP32[((($20)+(4))>>2)],HEAP32[((($20)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($20)>>2)])+(tempInt))>>3)]); //@line 204 "platform.c"
 var $22=HEAP32[((19160)>>2)]; //@line 204 "platform.c"
 _PrintFP($21,$22); //@line 204 "platform.c"
 label=12;break; //@line 204 "platform.c"
 case 10: 
 var $23=HEAP32[((19160)>>2)]; //@line 206 "platform.c"
 _PrintCh(37,$23); //@line 206 "platform.c"
 label=12;break; //@line 206 "platform.c"
 case 11: 
 var $24=$FPos; //@line 207 "platform.c"
 var $incdec_ptr13=((($24)-(1))|0); //@line 207 "platform.c"
 $FPos=$incdec_ptr13; //@line 207 "platform.c"
 label=12;break; //@line 207 "platform.c"
 case 12: 
 label=14;break; //@line 209 "platform.c"
 case 13: 
 var $25=$FPos; //@line 211 "platform.c"
 var $26=HEAP8[($25)]; //@line 211 "platform.c"
 var $27=HEAP32[((19160)>>2)]; //@line 211 "platform.c"
 _PrintCh($26,$27); //@line 211 "platform.c"
 label=14;break;
 case 14: 
 label=15;break; //@line 212 "platform.c"
 case 15: 
 var $28=$FPos; //@line 192 "platform.c"
 var $incdec_ptr14=(($28+1)|0); //@line 192 "platform.c"
 $FPos=$incdec_ptr14; //@line 192 "platform.c"
 label=2;break; //@line 192 "platform.c"
 case 16: 
 return; //@line 213 "platform.c"
  default: assert(0, "bad label: " + label);
 }
}
function _AssignFail($Parser,$Format,$Type1,$Type2,$Num1,$Num2,$FuncName,$ParamNo){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Format_addr;
 var $Type1_addr;
 var $Type2_addr;
 var $Num1_addr;
 var $Num2_addr;
 var $FuncName_addr;
 var $ParamNo_addr;
 $Parser_addr=$Parser;
 $Format_addr=$Format;
 $Type1_addr=$Type1;
 $Type2_addr=$Type2;
 $Num1_addr=$Num1;
 $Num2_addr=$Num2;
 $FuncName_addr=$FuncName;
 $ParamNo_addr=$ParamNo;
 var $0=$Parser_addr; //@line 151 "platform.c"
 _PlatformErrorPrefix($0); //@line 151 "platform.c"
 var $1=$FuncName_addr; //@line 152 "platform.c"
 var $cmp=($1|0)==0; //@line 152 "platform.c"
 var $cond=$cmp?10568:10184; //@line 152 "platform.c"
 _PlatformPrintf(10944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$cond,tempVarArgs)); STACKTOP=tempVarArgs; //@line 152 "platform.c"
 var $2=$Type1_addr; //@line 154 "platform.c"
 var $cmp1=($2|0)!=0; //@line 154 "platform.c"
 if($cmp1){label=2;break;}else{label=3;break;} //@line 154 "platform.c"
 case 2: 
 var $3=$Format_addr; //@line 155 "platform.c"
 var $4=$Type1_addr; //@line 155 "platform.c"
 var $5=$Type2_addr; //@line 155 "platform.c"
 _PlatformPrintf($3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs; //@line 155 "platform.c"
 label=4;break; //@line 155 "platform.c"
 case 3: 
 var $6=$Format_addr; //@line 157 "platform.c"
 var $7=$Num1_addr; //@line 157 "platform.c"
 var $8=$Num2_addr; //@line 157 "platform.c"
 _PlatformPrintf($6,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs; //@line 157 "platform.c"
 label=4;break;
 case 4: 
 var $9=$FuncName_addr; //@line 159 "platform.c"
 var $cmp2=($9|0)!=0; //@line 159 "platform.c"
 if($cmp2){label=5;break;}else{label=6;break;} //@line 159 "platform.c"
 case 5: 
 var $10=$ParamNo_addr; //@line 160 "platform.c"
 var $11=$FuncName_addr; //@line 160 "platform.c"
 _PlatformPrintf(9848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10,HEAP32[(((tempVarArgs)+(8))>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs; //@line 160 "platform.c"
 label=6;break; //@line 160 "platform.c"
 case 6: 
 _ProgramFail(0,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 162 "platform.c"
 STACKTOP=sp;return; //@line 163 "platform.c"
  default: assert(0, "bad label: " + label);
 }
}
function _LexFail($Lexer,$Message,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Lexer_addr;
 var $Message_addr;
 var $Args=sp;
 $Lexer_addr=$Lexer;
 $Message_addr=$Message;
 var $0=$Lexer_addr; //@line 170 "platform.c"
 var $FileName=(($0+8)|0); //@line 170 "platform.c"
 var $1=HEAP32[(($FileName)>>2)]; //@line 170 "platform.c"
 var $2=$Lexer_addr; //@line 170 "platform.c"
 var $SourceText=(($2+20)|0); //@line 170 "platform.c"
 var $3=HEAP32[(($SourceText)>>2)]; //@line 170 "platform.c"
 var $4=$Lexer_addr; //@line 170 "platform.c"
 var $Line=(($4+12)|0); //@line 170 "platform.c"
 var $5=HEAP32[(($Line)>>2)]; //@line 170 "platform.c"
 var $6=$Lexer_addr; //@line 170 "platform.c"
 var $CharacterPos=(($6+16)|0); //@line 170 "platform.c"
 var $7=HEAP32[(($CharacterPos)>>2)]; //@line 170 "platform.c"
 _PrintSourceTextErrorLine($1,$3,$5,$7); //@line 170 "platform.c"
 var $arraydecay=(($Args)|0); //@line 171 "platform.c"
 var $arraydecay1=$arraydecay; //@line 171 "platform.c"
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0; //@line 171 "platform.c"
 var $8=$Message_addr; //@line 172 "platform.c"
 var $arraydecay2=(($Args)|0); //@line 172 "platform.c"
 _PlatformVPrintf($8,$arraydecay2); //@line 172 "platform.c"
 var $arraydecay3=(($Args)|0); //@line 173 "platform.c"
 var $arraydecay34=$arraydecay3; //@line 173 "platform.c"
 //@line 173 "platform.c"
 _PlatformPrintf(11264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 174 "platform.c"
 _PlatformExit(1); //@line 175 "platform.c"
 STACKTOP=sp;return; //@line 176 "platform.c"
}
function _PlatformMakeTempName($TempNameBuffer){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $TempNameBuffer_addr;
 var $CPos;
 $TempNameBuffer_addr=$TempNameBuffer;
 $CPos=5; //@line 219 "platform.c"
 label=2;break; //@line 221 "platform.c"
 case 2: 
 var $0=$CPos; //@line 221 "platform.c"
 var $cmp=($0|0)>1; //@line 221 "platform.c"
 if($cmp){label=3;break;}else{label=7;break;} //@line 221 "platform.c"
 case 3: 
 var $1=$CPos; //@line 223 "platform.c"
 var $2=$TempNameBuffer_addr; //@line 223 "platform.c"
 var $arrayidx=(($2+$1)|0); //@line 223 "platform.c"
 var $3=HEAP8[($arrayidx)]; //@line 223 "platform.c"
 var $conv=(($3<<24)>>24); //@line 223 "platform.c"
 var $cmp1=($conv|0)<57; //@line 223 "platform.c"
 if($cmp1){label=4;break;}else{label=5;break;} //@line 223 "platform.c"
 case 4: 
 var $4=$CPos; //@line 225 "platform.c"
 var $5=$TempNameBuffer_addr; //@line 225 "platform.c"
 var $arrayidx3=(($5+$4)|0); //@line 225 "platform.c"
 var $6=HEAP8[($arrayidx3)]; //@line 225 "platform.c"
 var $inc=((($6)+(1))&255); //@line 225 "platform.c"
 HEAP8[($arrayidx3)]=$inc; //@line 225 "platform.c"
 var $7=$TempNameBuffer_addr; //@line 226 "platform.c"
 var $call=_TableStrRegister($7); //@line 226 "platform.c"
 $retval=$call; //@line 226 "platform.c"
 label=8;break; //@line 226 "platform.c"
 case 5: 
 var $8=$CPos; //@line 230 "platform.c"
 var $9=$TempNameBuffer_addr; //@line 230 "platform.c"
 var $arrayidx4=(($9+$8)|0); //@line 230 "platform.c"
 HEAP8[($arrayidx4)]=48; //@line 230 "platform.c"
 var $10=$CPos; //@line 231 "platform.c"
 var $dec=((($10)-(1))|0); //@line 231 "platform.c"
 $CPos=$dec; //@line 231 "platform.c"
 label=6;break;
 case 6: 
 label=2;break; //@line 233 "platform.c"
 case 7: 
 var $11=$TempNameBuffer_addr; //@line 235 "platform.c"
 var $call5=_TableStrRegister($11); //@line 235 "platform.c"
 $retval=$call5; //@line 235 "platform.c"
 label=8;break; //@line 235 "platform.c"
 case 8: 
 var $12=$retval; //@line 236 "platform.c"
 return $12; //@line 236 "platform.c"
  default: assert(0, "bad label: " + label);
 }
}
function _IncludeInit(){
 var label=0;
 _IncludeRegister(6728,0,14216,0); //@line 23 "include.c"
 _IncludeRegister(10968,156,0,0); //@line 24 "include.c"
 _IncludeRegister(8264,56,15208,0); //@line 26 "include.c"
 _IncludeRegister(6448,52,0,14040); //@line 28 "include.c"
 _IncludeRegister(4848,414,13576,13960); //@line 29 "include.c"
 _IncludeRegister(3312,192,13424,0); //@line 30 "include.c"
 _IncludeRegister(2216,254,13208,0); //@line 31 "include.c"
 _IncludeRegister(1336,382,14064,14168); //@line 32 "include.c"
 _IncludeRegister(832,428,12488,13024); //@line 33 "include.c"
 return; //@line 35 "include.c"
}
function _IncludeRegister($IncludeName,$SetupFunction,$FuncList,$SetupCSource){
 var label=0;
 var $IncludeName_addr;
 var $SetupFunction_addr;
 var $FuncList_addr;
 var $SetupCSource_addr;
 var $NewLib;
 $IncludeName_addr=$IncludeName;
 $SetupFunction_addr=$SetupFunction;
 $FuncList_addr=$FuncList;
 $SetupCSource_addr=$SetupCSource;
 var $call=_HeapAllocMem(20); //@line 56 "include.c"
 var $0=$call; //@line 56 "include.c"
 $NewLib=$0; //@line 56 "include.c"
 var $1=$IncludeName_addr; //@line 57 "include.c"
 var $call1=_TableStrRegister($1); //@line 57 "include.c"
 var $2=$NewLib; //@line 57 "include.c"
 var $IncludeName2=(($2)|0); //@line 57 "include.c"
 HEAP32[(($IncludeName2)>>2)]=$call1; //@line 57 "include.c"
 var $3=$SetupFunction_addr; //@line 58 "include.c"
 var $4=$NewLib; //@line 58 "include.c"
 var $SetupFunction3=(($4+4)|0); //@line 58 "include.c"
 HEAP32[(($SetupFunction3)>>2)]=$3; //@line 58 "include.c"
 var $5=$FuncList_addr; //@line 59 "include.c"
 var $6=$NewLib; //@line 59 "include.c"
 var $FuncList4=(($6+8)|0); //@line 59 "include.c"
 HEAP32[(($FuncList4)>>2)]=$5; //@line 59 "include.c"
 var $7=$SetupCSource_addr; //@line 60 "include.c"
 var $8=$NewLib; //@line 60 "include.c"
 var $SetupCSource5=(($8+12)|0); //@line 60 "include.c"
 HEAP32[(($SetupCSource5)>>2)]=$7; //@line 60 "include.c"
 var $9=HEAP32[((18464)>>2)]; //@line 61 "include.c"
 var $10=$NewLib; //@line 61 "include.c"
 var $NextLib=(($10+16)|0); //@line 61 "include.c"
 HEAP32[(($NextLib)>>2)]=$9; //@line 61 "include.c"
 var $11=$NewLib; //@line 62 "include.c"
 HEAP32[((18464)>>2)]=$11; //@line 62 "include.c"
 return; //@line 63 "include.c"
}
function _IncludeFile($FileName){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $FileName_addr;
 var $LInclude;
 $FileName_addr=$FileName;
 var $0=HEAP32[((18464)>>2)]; //@line 80 "include.c"
 $LInclude=$0; //@line 80 "include.c"
 label=2;break; //@line 80 "include.c"
 case 2: 
 var $1=$LInclude; //@line 80 "include.c"
 var $cmp=($1|0)!=0; //@line 80 "include.c"
 if($cmp){label=3;break;}else{label=15;break;} //@line 80 "include.c"
 case 3: 
 var $2=$LInclude; //@line 82 "include.c"
 var $IncludeName=(($2)|0); //@line 82 "include.c"
 var $3=HEAP32[(($IncludeName)>>2)]; //@line 82 "include.c"
 var $4=$FileName_addr; //@line 82 "include.c"
 var $call=_strcmp($3,$4); //@line 82 "include.c"
 var $cmp1=($call|0)==0; //@line 82 "include.c"
 if($cmp1){label=4;break;}else{label=13;break;} //@line 82 "include.c"
 case 4: 
 var $5=$FileName_addr; //@line 85 "include.c"
 var $call2=_VariableDefined($5); //@line 85 "include.c"
 var $tobool=($call2|0)!=0; //@line 85 "include.c"
 if($tobool){label=12;break;}else{label=5;break;} //@line 85 "include.c"
 case 5: 
 var $6=$FileName_addr; //@line 87 "include.c"
 var $call4=_VariableDefine(0,$6,0,16856,0); //@line 87 "include.c"
 var $7=$LInclude; //@line 90 "include.c"
 var $SetupFunction=(($7+4)|0); //@line 90 "include.c"
 var $8=HEAP32[(($SetupFunction)>>2)]; //@line 90 "include.c"
 var $cmp5=($8|0)!=0; //@line 90 "include.c"
 if($cmp5){label=6;break;}else{label=7;break;} //@line 90 "include.c"
 case 6: 
 var $9=$LInclude; //@line 91 "include.c"
 var $SetupFunction7=(($9+4)|0); //@line 91 "include.c"
 var $10=HEAP32[(($SetupFunction7)>>2)]; //@line 91 "include.c"
 FUNCTION_TABLE[$10](); //@line 91 "include.c"
 label=7;break; //@line 91 "include.c"
 case 7: 
 var $11=$LInclude; //@line 94 "include.c"
 var $SetupCSource=(($11+12)|0); //@line 94 "include.c"
 var $12=HEAP32[(($SetupCSource)>>2)]; //@line 94 "include.c"
 var $cmp8=($12|0)!=0; //@line 94 "include.c"
 if($cmp8){label=8;break;}else{label=9;break;} //@line 94 "include.c"
 case 8: 
 var $13=$FileName_addr; //@line 95 "include.c"
 var $14=$LInclude; //@line 95 "include.c"
 var $SetupCSource10=(($14+12)|0); //@line 95 "include.c"
 var $15=HEAP32[(($SetupCSource10)>>2)]; //@line 95 "include.c"
 var $16=$LInclude; //@line 95 "include.c"
 var $SetupCSource11=(($16+12)|0); //@line 95 "include.c"
 var $17=HEAP32[(($SetupCSource11)>>2)]; //@line 95 "include.c"
 var $call12=_strlen($17); //@line 95 "include.c"
 _PicocParse($13,$15,$call12,1,1,0); //@line 95 "include.c"
 label=9;break; //@line 95 "include.c"
 case 9: 
 var $18=$LInclude; //@line 98 "include.c"
 var $FuncList=(($18+8)|0); //@line 98 "include.c"
 var $19=HEAP32[(($FuncList)>>2)]; //@line 98 "include.c"
 var $cmp14=($19|0)!=0; //@line 98 "include.c"
 if($cmp14){label=10;break;}else{label=11;break;} //@line 98 "include.c"
 case 10: 
 var $20=$FileName_addr; //@line 99 "include.c"
 var $21=$LInclude; //@line 99 "include.c"
 var $FuncList16=(($21+8)|0); //@line 99 "include.c"
 var $22=HEAP32[(($FuncList16)>>2)]; //@line 99 "include.c"
 _LibraryAdd(18544,$20,$22); //@line 99 "include.c"
 label=11;break; //@line 99 "include.c"
 case 11: 
 label=12;break; //@line 100 "include.c"
 case 12: 
 label=16;break; //@line 102 "include.c"
 case 13: 
 label=14;break; //@line 104 "include.c"
 case 14: 
 var $23=$LInclude; //@line 80 "include.c"
 var $NextLib=(($23+16)|0); //@line 80 "include.c"
 var $24=HEAP32[(($NextLib)>>2)]; //@line 80 "include.c"
 $LInclude=$24; //@line 80 "include.c"
 label=2;break; //@line 80 "include.c"
 case 15: 
 var $25=$FileName_addr; //@line 107 "include.c"
 _PicocPlatformScanFile($25); //@line 107 "include.c"
 label=16;break; //@line 108 "include.c"
 case 16: 
 return; //@line 108 "include.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PlatformGetLine($Buf,$MaxLen,$Prompt){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Buf_addr;
 var $MaxLen_addr;
 var $Prompt_addr;
 $Buf_addr=$Buf;
 $MaxLen_addr=$MaxLen;
 $Prompt_addr=$Prompt;
 var $0=$Prompt_addr; //@line 41 "platform/platform_unix.c"
 var $cmp=($0|0)!=0; //@line 41 "platform/platform_unix.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 41 "platform/platform_unix.c"
 case 2: 
 var $1=$Prompt_addr; //@line 42 "platform/platform_unix.c"
 var $call=_printf(6504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs; //@line 42 "platform/platform_unix.c"
 label=3;break; //@line 42 "platform/platform_unix.c"
 case 3: 
 var $2=HEAP32[((_stdout)>>2)]; //@line 44 "platform/platform_unix.c"
 var $call1=_fflush($2); //@line 44 "platform/platform_unix.c"
 var $3=$Buf_addr; //@line 45 "platform/platform_unix.c"
 var $4=$MaxLen_addr; //@line 45 "platform/platform_unix.c"
 var $5=HEAP32[((_stdin)>>2)]; //@line 45 "platform/platform_unix.c"
 var $call2=_fgets($3,$4,$5); //@line 45 "platform/platform_unix.c"
 STACKTOP=sp;return $call2; //@line 45 "platform/platform_unix.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PlatformReadFile($FileName){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $FileName_addr;
 var $FileInfo=sp;
 var $ReadText;
 var $InFile;
 var $BytesRead;
 $FileName_addr=$FileName;
 var $0=$FileName_addr; //@line 69 "platform/platform_unix.c"
 var $call=_stat($0,$FileInfo); //@line 69 "platform/platform_unix.c"
 var $tobool=($call|0)!=0; //@line 69 "platform/platform_unix.c"
 if($tobool){label=2;break;}else{label=3;break;} //@line 69 "platform/platform_unix.c"
 case 2: 
 var $1=$FileName_addr; //@line 70 "platform/platform_unix.c"
 _ProgramFail(0,10920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs; //@line 70 "platform/platform_unix.c"
 label=3;break; //@line 70 "platform/platform_unix.c"
 case 3: 
 var $st_size=(($FileInfo+36)|0); //@line 72 "platform/platform_unix.c"
 var $2=HEAP32[(($st_size)>>2)]; //@line 72 "platform/platform_unix.c"
 var $add=((($2)+(1))|0); //@line 72 "platform/platform_unix.c"
 var $call1=_malloc($add); //@line 72 "platform/platform_unix.c"
 $ReadText=$call1; //@line 72 "platform/platform_unix.c"
 var $3=$ReadText; //@line 73 "platform/platform_unix.c"
 var $cmp=($3|0)==0; //@line 73 "platform/platform_unix.c"
 if($cmp){label=4;break;}else{label=5;break;} //@line 73 "platform/platform_unix.c"
 case 4: 
 _ProgramFail(0,8248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 74 "platform/platform_unix.c"
 label=5;break; //@line 74 "platform/platform_unix.c"
 case 5: 
 var $4=$FileName_addr; //@line 76 "platform/platform_unix.c"
 var $call4=_fopen($4,6440); //@line 76 "platform/platform_unix.c"
 $InFile=$call4; //@line 76 "platform/platform_unix.c"
 var $5=$InFile; //@line 77 "platform/platform_unix.c"
 var $cmp5=($5|0)==0; //@line 77 "platform/platform_unix.c"
 if($cmp5){label=6;break;}else{label=7;break;} //@line 77 "platform/platform_unix.c"
 case 6: 
 var $6=$FileName_addr; //@line 78 "platform/platform_unix.c"
 _ProgramFail(0,10920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs; //@line 78 "platform/platform_unix.c"
 label=7;break; //@line 78 "platform/platform_unix.c"
 case 7: 
 var $7=$ReadText; //@line 80 "platform/platform_unix.c"
 var $st_size8=(($FileInfo+36)|0); //@line 80 "platform/platform_unix.c"
 var $8=HEAP32[(($st_size8)>>2)]; //@line 80 "platform/platform_unix.c"
 var $9=$InFile; //@line 80 "platform/platform_unix.c"
 var $call9=_fread($7,1,$8,$9); //@line 80 "platform/platform_unix.c"
 $BytesRead=$call9; //@line 80 "platform/platform_unix.c"
 var $10=$BytesRead; //@line 81 "platform/platform_unix.c"
 var $cmp10=($10|0)==0; //@line 81 "platform/platform_unix.c"
 if($cmp10){label=8;break;}else{label=9;break;} //@line 81 "platform/platform_unix.c"
 case 8: 
 var $11=$FileName_addr; //@line 82 "platform/platform_unix.c"
 _ProgramFail(0,10920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs; //@line 82 "platform/platform_unix.c"
 label=9;break; //@line 82 "platform/platform_unix.c"
 case 9: 
 var $12=$BytesRead; //@line 84 "platform/platform_unix.c"
 var $13=$ReadText; //@line 84 "platform/platform_unix.c"
 var $arrayidx=(($13+$12)|0); //@line 84 "platform/platform_unix.c"
 HEAP8[($arrayidx)]=0; //@line 84 "platform/platform_unix.c"
 var $14=$InFile; //@line 85 "platform/platform_unix.c"
 var $call13=_fclose($14); //@line 85 "platform/platform_unix.c"
 var $15=$ReadText; //@line 87 "platform/platform_unix.c"
 STACKTOP=sp;return $15; //@line 87 "platform/platform_unix.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PicocPlatformScanFile($FileName){
 var label=0;
 var $FileName_addr;
 var $SourceStr;
 $FileName_addr=$FileName;
 var $0=$FileName_addr; //@line 93 "platform/platform_unix.c"
 var $call=_PlatformReadFile($0); //@line 93 "platform/platform_unix.c"
 $SourceStr=$call; //@line 93 "platform/platform_unix.c"
 var $1=$FileName_addr; //@line 95 "platform/platform_unix.c"
 var $2=$SourceStr; //@line 95 "platform/platform_unix.c"
 var $3=$SourceStr; //@line 95 "platform/platform_unix.c"
 var $call1=_strlen($3); //@line 95 "platform/platform_unix.c"
 _PicocParse($1,$2,$call1,1,0,1); //@line 95 "platform/platform_unix.c"
 return; //@line 96 "platform/platform_unix.c"
}
function _PlatformExit($RetVal){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $RetVal_addr;
 $RetVal_addr=$RetVal;
 var $0=$RetVal_addr; //@line 101 "platform/platform_unix.c"
 HEAP32[((18048)>>2)]=$0; //@line 101 "platform/platform_unix.c"
 _longjmp(18056,1); //@line 102 "platform/platform_unix.c"
 throw "Reached an unreachable!"; //@line 102 "platform/platform_unix.c"
 case 2: 
 return; //@line 103 "platform/platform_unix.c"
  default: assert(0, "bad label: " + label);
 }
}
function _EmSetupFunc(){
 var label=0;
 return; //@line 9 "platform/library_emduino.c"
}
function _EmPinMode($Parser,$ReturnValue,$Param,$numArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $numArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $numArgs_addr=$numArgs;
 return; //@line 13 "platform/library_emduino.c"
}
function _EmAnalogWrite($Parser,$ReturnValue,$Param,$numArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $numArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $numArgs_addr=$numArgs;
 var $0=$Param_addr; //@line 16 "platform/library_emduino.c"
 var $arrayidx=(($0)|0); //@line 16 "platform/library_emduino.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 16 "platform/library_emduino.c"
 var $Val=(($1+4)|0); //@line 16 "platform/library_emduino.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 16 "platform/library_emduino.c"
 var $Integer=$2; //@line 16 "platform/library_emduino.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 16 "platform/library_emduino.c"
 var $4=$Param_addr; //@line 16 "platform/library_emduino.c"
 var $arrayidx1=(($4+4)|0); //@line 16 "platform/library_emduino.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 16 "platform/library_emduino.c"
 var $Val2=(($5+4)|0); //@line 16 "platform/library_emduino.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 16 "platform/library_emduino.c"
 var $Integer3=$6; //@line 16 "platform/library_emduino.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 16 "platform/library_emduino.c"
 _analogWrite($3,$7); //@line 16 "platform/library_emduino.c"
 return; //@line 17 "platform/library_emduino.c"
}
function _EmDigitalWrite($Parser,$ReturnValue,$Param,$numArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $numArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $numArgs_addr=$numArgs;
 var $0=$Param_addr; //@line 20 "platform/library_emduino.c"
 var $arrayidx=(($0)|0); //@line 20 "platform/library_emduino.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 20 "platform/library_emduino.c"
 var $Val=(($1+4)|0); //@line 20 "platform/library_emduino.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 20 "platform/library_emduino.c"
 var $Integer=$2; //@line 20 "platform/library_emduino.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 20 "platform/library_emduino.c"
 var $4=$Param_addr; //@line 20 "platform/library_emduino.c"
 var $arrayidx1=(($4+4)|0); //@line 20 "platform/library_emduino.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 20 "platform/library_emduino.c"
 var $Val2=(($5+4)|0); //@line 20 "platform/library_emduino.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 20 "platform/library_emduino.c"
 var $Integer3=$6; //@line 20 "platform/library_emduino.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 20 "platform/library_emduino.c"
 _digitalWrite($3,$7); //@line 20 "platform/library_emduino.c"
 return; //@line 21 "platform/library_emduino.c"
}
function _EmDelay($Parser,$ReturnValue,$Param,$numArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $numArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $numArgs_addr=$numArgs;
 var $0=$Param_addr; //@line 24 "platform/library_emduino.c"
 var $arrayidx=(($0)|0); //@line 24 "platform/library_emduino.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 24 "platform/library_emduino.c"
 var $Val=(($1+4)|0); //@line 24 "platform/library_emduino.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 24 "platform/library_emduino.c"
 var $Integer=$2; //@line 24 "platform/library_emduino.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 24 "platform/library_emduino.c"
 var $mul=((($3)*(1000))&-1); //@line 24 "platform/library_emduino.c"
 var $call=_usleep($mul); //@line 24 "platform/library_emduino.c"
 return; //@line 25 "platform/library_emduino.c"
}
function _PlatformLibraryInit(){
 var label=0;
 _IncludeRegister(3280,216,15544,0); //@line 42 "platform/library_emduino.c"
 var $0=HEAP32[((16232)>>2)]; //@line 43 "platform/library_emduino.c"
 var $1=HEAP32[((16232)>>2)]; //@line 43 "platform/library_emduino.c"
 var $call=_strlen($1); //@line 43 "platform/library_emduino.c"
 _PicocParse(3280,$0,$call,1,1,0); //@line 43 "platform/library_emduino.c"
 return; //@line 44 "platform/library_emduino.c"
}
function _BasicIOInit(){
 var label=0;
 var $0=HEAP32[((_stdout)>>2)]; //@line 52 "cstdlib/stdio.c"
 HEAP32[((19160)>>2)]=$0; //@line 52 "cstdlib/stdio.c"
 var $1=HEAP32[((_stdin)>>2)]; //@line 53 "cstdlib/stdio.c"
 HEAP32[((16264)>>2)]=$1; //@line 53 "cstdlib/stdio.c"
 var $2=HEAP32[((_stdout)>>2)]; //@line 54 "cstdlib/stdio.c"
 HEAP32[((16256)>>2)]=$2; //@line 54 "cstdlib/stdio.c"
 var $3=HEAP32[((_stderr)>>2)]; //@line 55 "cstdlib/stdio.c"
 HEAP32[((16272)>>2)]=$3; //@line 55 "cstdlib/stdio.c"
 return; //@line 56 "cstdlib/stdio.c"
}
function _StdioOutPutc($OutCh,$Stream){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $OutCh_addr;
 var $Stream_addr;
 $OutCh_addr=$OutCh;
 $Stream_addr=$Stream;
 var $0=$Stream_addr; //@line 61 "cstdlib/stdio.c"
 var $FilePtr=(($0)|0); //@line 61 "cstdlib/stdio.c"
 var $1=HEAP32[(($FilePtr)>>2)]; //@line 61 "cstdlib/stdio.c"
 var $cmp=($1|0)!=0; //@line 61 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 61 "cstdlib/stdio.c"
 case 2: 
 var $2=$OutCh_addr; //@line 64 "cstdlib/stdio.c"
 var $3=$Stream_addr; //@line 64 "cstdlib/stdio.c"
 var $FilePtr1=(($3)|0); //@line 64 "cstdlib/stdio.c"
 var $4=HEAP32[(($FilePtr1)>>2)]; //@line 64 "cstdlib/stdio.c"
 var $call=_fputc($2,$4); //@line 64 "cstdlib/stdio.c"
 var $5=$Stream_addr; //@line 65 "cstdlib/stdio.c"
 var $CharCount=(($5+12)|0); //@line 65 "cstdlib/stdio.c"
 var $6=HEAP32[(($CharCount)>>2)]; //@line 65 "cstdlib/stdio.c"
 var $inc=((($6)+(1))|0); //@line 65 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=$inc; //@line 65 "cstdlib/stdio.c"
 label=9;break; //@line 66 "cstdlib/stdio.c"
 case 3: 
 var $7=$Stream_addr; //@line 67 "cstdlib/stdio.c"
 var $StrOutLen=(($7+8)|0); //@line 67 "cstdlib/stdio.c"
 var $8=HEAP32[(($StrOutLen)>>2)]; //@line 67 "cstdlib/stdio.c"
 var $cmp2=($8|0)<0; //@line 67 "cstdlib/stdio.c"
 if($cmp2){label=5;break;}else{label=4;break;} //@line 67 "cstdlib/stdio.c"
 case 4: 
 var $9=$Stream_addr; //@line 67 "cstdlib/stdio.c"
 var $StrOutLen3=(($9+8)|0); //@line 67 "cstdlib/stdio.c"
 var $10=HEAP32[(($StrOutLen3)>>2)]; //@line 67 "cstdlib/stdio.c"
 var $cmp4=($10|0)>1; //@line 67 "cstdlib/stdio.c"
 if($cmp4){label=5;break;}else{label=8;break;} //@line 67 "cstdlib/stdio.c"
 case 5: 
 var $11=$OutCh_addr; //@line 70 "cstdlib/stdio.c"
 var $conv=(($11)&255); //@line 70 "cstdlib/stdio.c"
 var $12=$Stream_addr; //@line 70 "cstdlib/stdio.c"
 var $StrOutPtr=(($12+4)|0); //@line 70 "cstdlib/stdio.c"
 var $13=HEAP32[(($StrOutPtr)>>2)]; //@line 70 "cstdlib/stdio.c"
 HEAP8[($13)]=$conv; //@line 70 "cstdlib/stdio.c"
 var $14=$Stream_addr; //@line 71 "cstdlib/stdio.c"
 var $StrOutPtr6=(($14+4)|0); //@line 71 "cstdlib/stdio.c"
 var $15=HEAP32[(($StrOutPtr6)>>2)]; //@line 71 "cstdlib/stdio.c"
 var $incdec_ptr=(($15+1)|0); //@line 71 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr6)>>2)]=$incdec_ptr; //@line 71 "cstdlib/stdio.c"
 var $16=$Stream_addr; //@line 73 "cstdlib/stdio.c"
 var $StrOutLen7=(($16+8)|0); //@line 73 "cstdlib/stdio.c"
 var $17=HEAP32[(($StrOutLen7)>>2)]; //@line 73 "cstdlib/stdio.c"
 var $cmp8=($17|0)>1; //@line 73 "cstdlib/stdio.c"
 if($cmp8){label=6;break;}else{label=7;break;} //@line 73 "cstdlib/stdio.c"
 case 6: 
 var $18=$Stream_addr; //@line 74 "cstdlib/stdio.c"
 var $StrOutLen11=(($18+8)|0); //@line 74 "cstdlib/stdio.c"
 var $19=HEAP32[(($StrOutLen11)>>2)]; //@line 74 "cstdlib/stdio.c"
 var $dec=((($19)-(1))|0); //@line 74 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen11)>>2)]=$dec; //@line 74 "cstdlib/stdio.c"
 label=7;break; //@line 74 "cstdlib/stdio.c"
 case 7: 
 var $20=$Stream_addr; //@line 76 "cstdlib/stdio.c"
 var $CharCount12=(($20+12)|0); //@line 76 "cstdlib/stdio.c"
 var $21=HEAP32[(($CharCount12)>>2)]; //@line 76 "cstdlib/stdio.c"
 var $inc13=((($21)+(1))|0); //@line 76 "cstdlib/stdio.c"
 HEAP32[(($CharCount12)>>2)]=$inc13; //@line 76 "cstdlib/stdio.c"
 label=8;break; //@line 77 "cstdlib/stdio.c"
 case 8: 
 label=9;break;
 case 9: 
 return; //@line 78 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioOutPuts($Str,$Stream){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Str_addr;
 var $Stream_addr;
 $Str_addr=$Str;
 $Stream_addr=$Stream;
 var $0=$Stream_addr; //@line 83 "cstdlib/stdio.c"
 var $FilePtr=(($0)|0); //@line 83 "cstdlib/stdio.c"
 var $1=HEAP32[(($FilePtr)>>2)]; //@line 83 "cstdlib/stdio.c"
 var $cmp=($1|0)!=0; //@line 83 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 83 "cstdlib/stdio.c"
 case 2: 
 var $2=$Str_addr; //@line 86 "cstdlib/stdio.c"
 var $3=$Stream_addr; //@line 86 "cstdlib/stdio.c"
 var $FilePtr1=(($3)|0); //@line 86 "cstdlib/stdio.c"
 var $4=HEAP32[(($FilePtr1)>>2)]; //@line 86 "cstdlib/stdio.c"
 var $call=_fputs($2,$4); //@line 86 "cstdlib/stdio.c"
 label=12;break; //@line 87 "cstdlib/stdio.c"
 case 3: 
 label=4;break; //@line 91 "cstdlib/stdio.c"
 case 4: 
 var $5=$Str_addr; //@line 91 "cstdlib/stdio.c"
 var $6=HEAP8[($5)]; //@line 91 "cstdlib/stdio.c"
 var $conv=(($6<<24)>>24); //@line 91 "cstdlib/stdio.c"
 var $cmp2=($conv|0)!=0; //@line 91 "cstdlib/stdio.c"
 if($cmp2){label=5;break;}else{label=11;break;} //@line 91 "cstdlib/stdio.c"
 case 5: 
 var $7=$Stream_addr; //@line 93 "cstdlib/stdio.c"
 var $StrOutLen=(($7+8)|0); //@line 93 "cstdlib/stdio.c"
 var $8=HEAP32[(($StrOutLen)>>2)]; //@line 93 "cstdlib/stdio.c"
 var $cmp4=($8|0)<0; //@line 93 "cstdlib/stdio.c"
 if($cmp4){label=7;break;}else{label=6;break;} //@line 93 "cstdlib/stdio.c"
 case 6: 
 var $9=$Stream_addr; //@line 93 "cstdlib/stdio.c"
 var $StrOutLen6=(($9+8)|0); //@line 93 "cstdlib/stdio.c"
 var $10=HEAP32[(($StrOutLen6)>>2)]; //@line 93 "cstdlib/stdio.c"
 var $cmp7=($10|0)>1; //@line 93 "cstdlib/stdio.c"
 if($cmp7){label=7;break;}else{label=10;break;} //@line 93 "cstdlib/stdio.c"
 case 7: 
 var $11=$Str_addr; //@line 96 "cstdlib/stdio.c"
 var $12=HEAP8[($11)]; //@line 96 "cstdlib/stdio.c"
 var $13=$Stream_addr; //@line 96 "cstdlib/stdio.c"
 var $StrOutPtr=(($13+4)|0); //@line 96 "cstdlib/stdio.c"
 var $14=HEAP32[(($StrOutPtr)>>2)]; //@line 96 "cstdlib/stdio.c"
 HEAP8[($14)]=$12; //@line 96 "cstdlib/stdio.c"
 var $15=$Str_addr; //@line 97 "cstdlib/stdio.c"
 var $incdec_ptr=(($15+1)|0); //@line 97 "cstdlib/stdio.c"
 $Str_addr=$incdec_ptr; //@line 97 "cstdlib/stdio.c"
 var $16=$Stream_addr; //@line 98 "cstdlib/stdio.c"
 var $StrOutPtr10=(($16+4)|0); //@line 98 "cstdlib/stdio.c"
 var $17=HEAP32[(($StrOutPtr10)>>2)]; //@line 98 "cstdlib/stdio.c"
 var $incdec_ptr11=(($17+1)|0); //@line 98 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr10)>>2)]=$incdec_ptr11; //@line 98 "cstdlib/stdio.c"
 var $18=$Stream_addr; //@line 100 "cstdlib/stdio.c"
 var $StrOutLen12=(($18+8)|0); //@line 100 "cstdlib/stdio.c"
 var $19=HEAP32[(($StrOutLen12)>>2)]; //@line 100 "cstdlib/stdio.c"
 var $cmp13=($19|0)>1; //@line 100 "cstdlib/stdio.c"
 if($cmp13){label=8;break;}else{label=9;break;} //@line 100 "cstdlib/stdio.c"
 case 8: 
 var $20=$Stream_addr; //@line 101 "cstdlib/stdio.c"
 var $StrOutLen16=(($20+8)|0); //@line 101 "cstdlib/stdio.c"
 var $21=HEAP32[(($StrOutLen16)>>2)]; //@line 101 "cstdlib/stdio.c"
 var $dec=((($21)-(1))|0); //@line 101 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen16)>>2)]=$dec; //@line 101 "cstdlib/stdio.c"
 label=9;break; //@line 101 "cstdlib/stdio.c"
 case 9: 
 var $22=$Stream_addr; //@line 103 "cstdlib/stdio.c"
 var $CharCount=(($22+12)|0); //@line 103 "cstdlib/stdio.c"
 var $23=HEAP32[(($CharCount)>>2)]; //@line 103 "cstdlib/stdio.c"
 var $inc=((($23)+(1))|0); //@line 103 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=$inc; //@line 103 "cstdlib/stdio.c"
 label=10;break; //@line 104 "cstdlib/stdio.c"
 case 10: 
 label=4;break; //@line 105 "cstdlib/stdio.c"
 case 11: 
 label=12;break;
 case 12: 
 return; //@line 107 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioFprintfWord($Stream,$Format,$Value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Stream_addr;
 var $Format_addr;
 var $Value_addr;
 var $CCount;
 var $CCount11;
 $Stream_addr=$Stream;
 $Format_addr=$Format;
 $Value_addr=$Value;
 var $0=$Stream_addr; //@line 112 "cstdlib/stdio.c"
 var $FilePtr=(($0)|0); //@line 112 "cstdlib/stdio.c"
 var $1=HEAP32[(($FilePtr)>>2)]; //@line 112 "cstdlib/stdio.c"
 var $cmp=($1|0)!=0; //@line 112 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 112 "cstdlib/stdio.c"
 case 2: 
 var $2=$Stream_addr; //@line 113 "cstdlib/stdio.c"
 var $FilePtr1=(($2)|0); //@line 113 "cstdlib/stdio.c"
 var $3=HEAP32[(($FilePtr1)>>2)]; //@line 113 "cstdlib/stdio.c"
 var $4=$Format_addr; //@line 113 "cstdlib/stdio.c"
 var $5=$Value_addr; //@line 113 "cstdlib/stdio.c"
 var $call=_fprintf($3,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs; //@line 113 "cstdlib/stdio.c"
 var $6=$Stream_addr; //@line 113 "cstdlib/stdio.c"
 var $CharCount=(($6+12)|0); //@line 113 "cstdlib/stdio.c"
 var $7=HEAP32[(($CharCount)>>2)]; //@line 113 "cstdlib/stdio.c"
 var $add=((($7)+($call))|0); //@line 113 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=$add; //@line 113 "cstdlib/stdio.c"
 label=7;break; //@line 113 "cstdlib/stdio.c"
 case 3: 
 var $8=$Stream_addr; //@line 115 "cstdlib/stdio.c"
 var $StrOutLen=(($8+8)|0); //@line 115 "cstdlib/stdio.c"
 var $9=HEAP32[(($StrOutLen)>>2)]; //@line 115 "cstdlib/stdio.c"
 var $cmp2=($9|0)>=0; //@line 115 "cstdlib/stdio.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 115 "cstdlib/stdio.c"
 case 4: 
 var $10=$Stream_addr; //@line 117 "cstdlib/stdio.c"
 var $StrOutPtr=(($10+4)|0); //@line 117 "cstdlib/stdio.c"
 var $11=HEAP32[(($StrOutPtr)>>2)]; //@line 117 "cstdlib/stdio.c"
 var $12=$Stream_addr; //@line 117 "cstdlib/stdio.c"
 var $StrOutLen4=(($12+8)|0); //@line 117 "cstdlib/stdio.c"
 var $13=HEAP32[(($StrOutLen4)>>2)]; //@line 117 "cstdlib/stdio.c"
 var $14=$Format_addr; //@line 117 "cstdlib/stdio.c"
 var $15=$Value_addr; //@line 117 "cstdlib/stdio.c"
 var $call5=_snprintf($11,$13,$14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs; //@line 117 "cstdlib/stdio.c"
 $CCount=$call5; //@line 117 "cstdlib/stdio.c"
 var $16=$CCount; //@line 118 "cstdlib/stdio.c"
 var $17=$Stream_addr; //@line 118 "cstdlib/stdio.c"
 var $StrOutPtr6=(($17+4)|0); //@line 118 "cstdlib/stdio.c"
 var $18=HEAP32[(($StrOutPtr6)>>2)]; //@line 118 "cstdlib/stdio.c"
 var $add_ptr=(($18+$16)|0); //@line 118 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr6)>>2)]=$add_ptr; //@line 118 "cstdlib/stdio.c"
 var $19=$CCount; //@line 119 "cstdlib/stdio.c"
 var $20=$Stream_addr; //@line 119 "cstdlib/stdio.c"
 var $StrOutLen7=(($20+8)|0); //@line 119 "cstdlib/stdio.c"
 var $21=HEAP32[(($StrOutLen7)>>2)]; //@line 119 "cstdlib/stdio.c"
 var $sub=((($21)-($19))|0); //@line 119 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen7)>>2)]=$sub; //@line 119 "cstdlib/stdio.c"
 var $22=$CCount; //@line 120 "cstdlib/stdio.c"
 var $23=$Stream_addr; //@line 120 "cstdlib/stdio.c"
 var $CharCount8=(($23+12)|0); //@line 120 "cstdlib/stdio.c"
 var $24=HEAP32[(($CharCount8)>>2)]; //@line 120 "cstdlib/stdio.c"
 var $add9=((($24)+($22))|0); //@line 120 "cstdlib/stdio.c"
 HEAP32[(($CharCount8)>>2)]=$add9; //@line 120 "cstdlib/stdio.c"
 label=6;break; //@line 121 "cstdlib/stdio.c"
 case 5: 
 var $25=$Stream_addr; //@line 124 "cstdlib/stdio.c"
 var $StrOutPtr12=(($25+4)|0); //@line 124 "cstdlib/stdio.c"
 var $26=HEAP32[(($StrOutPtr12)>>2)]; //@line 124 "cstdlib/stdio.c"
 var $27=$Format_addr; //@line 124 "cstdlib/stdio.c"
 var $28=$Value_addr; //@line 124 "cstdlib/stdio.c"
 var $call13=_sprintf($26,$27,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs; //@line 124 "cstdlib/stdio.c"
 $CCount11=$call13; //@line 124 "cstdlib/stdio.c"
 var $29=$CCount11; //@line 125 "cstdlib/stdio.c"
 var $30=$Stream_addr; //@line 125 "cstdlib/stdio.c"
 var $CharCount14=(($30+12)|0); //@line 125 "cstdlib/stdio.c"
 var $31=HEAP32[(($CharCount14)>>2)]; //@line 125 "cstdlib/stdio.c"
 var $add15=((($31)+($29))|0); //@line 125 "cstdlib/stdio.c"
 HEAP32[(($CharCount14)>>2)]=$add15; //@line 125 "cstdlib/stdio.c"
 var $32=$CCount11; //@line 126 "cstdlib/stdio.c"
 var $33=$Stream_addr; //@line 126 "cstdlib/stdio.c"
 var $StrOutPtr16=(($33+4)|0); //@line 126 "cstdlib/stdio.c"
 var $34=HEAP32[(($StrOutPtr16)>>2)]; //@line 126 "cstdlib/stdio.c"
 var $add_ptr17=(($34+$32)|0); //@line 126 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr16)>>2)]=$add_ptr17; //@line 126 "cstdlib/stdio.c"
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return; //@line 128 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioFprintfFP($Stream,$Format,$Value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Stream_addr;
 var $Format_addr;
 var $Value_addr;
 var $CCount;
 var $CCount11;
 $Stream_addr=$Stream;
 $Format_addr=$Format;
 $Value_addr=$Value;
 var $0=$Stream_addr; //@line 133 "cstdlib/stdio.c"
 var $FilePtr=(($0)|0); //@line 133 "cstdlib/stdio.c"
 var $1=HEAP32[(($FilePtr)>>2)]; //@line 133 "cstdlib/stdio.c"
 var $cmp=($1|0)!=0; //@line 133 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 133 "cstdlib/stdio.c"
 case 2: 
 var $2=$Stream_addr; //@line 134 "cstdlib/stdio.c"
 var $FilePtr1=(($2)|0); //@line 134 "cstdlib/stdio.c"
 var $3=HEAP32[(($FilePtr1)>>2)]; //@line 134 "cstdlib/stdio.c"
 var $4=$Format_addr; //@line 134 "cstdlib/stdio.c"
 var $5=$Value_addr; //@line 134 "cstdlib/stdio.c"
 var $call=_fprintf($3,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$5,tempVarArgs)); STACKTOP=tempVarArgs; //@line 134 "cstdlib/stdio.c"
 var $6=$Stream_addr; //@line 134 "cstdlib/stdio.c"
 var $CharCount=(($6+12)|0); //@line 134 "cstdlib/stdio.c"
 var $7=HEAP32[(($CharCount)>>2)]; //@line 134 "cstdlib/stdio.c"
 var $add=((($7)+($call))|0); //@line 134 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=$add; //@line 134 "cstdlib/stdio.c"
 label=7;break; //@line 134 "cstdlib/stdio.c"
 case 3: 
 var $8=$Stream_addr; //@line 136 "cstdlib/stdio.c"
 var $StrOutLen=(($8+8)|0); //@line 136 "cstdlib/stdio.c"
 var $9=HEAP32[(($StrOutLen)>>2)]; //@line 136 "cstdlib/stdio.c"
 var $cmp2=($9|0)>=0; //@line 136 "cstdlib/stdio.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 136 "cstdlib/stdio.c"
 case 4: 
 var $10=$Stream_addr; //@line 138 "cstdlib/stdio.c"
 var $StrOutPtr=(($10+4)|0); //@line 138 "cstdlib/stdio.c"
 var $11=HEAP32[(($StrOutPtr)>>2)]; //@line 138 "cstdlib/stdio.c"
 var $12=$Stream_addr; //@line 138 "cstdlib/stdio.c"
 var $StrOutLen4=(($12+8)|0); //@line 138 "cstdlib/stdio.c"
 var $13=HEAP32[(($StrOutLen4)>>2)]; //@line 138 "cstdlib/stdio.c"
 var $14=$Format_addr; //@line 138 "cstdlib/stdio.c"
 var $15=$Value_addr; //@line 138 "cstdlib/stdio.c"
 var $call5=_snprintf($11,$13,$14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$15,tempVarArgs)); STACKTOP=tempVarArgs; //@line 138 "cstdlib/stdio.c"
 $CCount=$call5; //@line 138 "cstdlib/stdio.c"
 var $16=$CCount; //@line 139 "cstdlib/stdio.c"
 var $17=$Stream_addr; //@line 139 "cstdlib/stdio.c"
 var $StrOutPtr6=(($17+4)|0); //@line 139 "cstdlib/stdio.c"
 var $18=HEAP32[(($StrOutPtr6)>>2)]; //@line 139 "cstdlib/stdio.c"
 var $add_ptr=(($18+$16)|0); //@line 139 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr6)>>2)]=$add_ptr; //@line 139 "cstdlib/stdio.c"
 var $19=$CCount; //@line 140 "cstdlib/stdio.c"
 var $20=$Stream_addr; //@line 140 "cstdlib/stdio.c"
 var $StrOutLen7=(($20+8)|0); //@line 140 "cstdlib/stdio.c"
 var $21=HEAP32[(($StrOutLen7)>>2)]; //@line 140 "cstdlib/stdio.c"
 var $sub=((($21)-($19))|0); //@line 140 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen7)>>2)]=$sub; //@line 140 "cstdlib/stdio.c"
 var $22=$CCount; //@line 141 "cstdlib/stdio.c"
 var $23=$Stream_addr; //@line 141 "cstdlib/stdio.c"
 var $CharCount8=(($23+12)|0); //@line 141 "cstdlib/stdio.c"
 var $24=HEAP32[(($CharCount8)>>2)]; //@line 141 "cstdlib/stdio.c"
 var $add9=((($24)+($22))|0); //@line 141 "cstdlib/stdio.c"
 HEAP32[(($CharCount8)>>2)]=$add9; //@line 141 "cstdlib/stdio.c"
 label=6;break; //@line 142 "cstdlib/stdio.c"
 case 5: 
 var $25=$Stream_addr; //@line 145 "cstdlib/stdio.c"
 var $StrOutPtr12=(($25+4)|0); //@line 145 "cstdlib/stdio.c"
 var $26=HEAP32[(($StrOutPtr12)>>2)]; //@line 145 "cstdlib/stdio.c"
 var $27=$Format_addr; //@line 145 "cstdlib/stdio.c"
 var $28=$Value_addr; //@line 145 "cstdlib/stdio.c"
 var $call13=_sprintf($26,$27,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$28,tempVarArgs)); STACKTOP=tempVarArgs; //@line 145 "cstdlib/stdio.c"
 $CCount11=$call13; //@line 145 "cstdlib/stdio.c"
 var $29=$CCount11; //@line 146 "cstdlib/stdio.c"
 var $30=$Stream_addr; //@line 146 "cstdlib/stdio.c"
 var $CharCount14=(($30+12)|0); //@line 146 "cstdlib/stdio.c"
 var $31=HEAP32[(($CharCount14)>>2)]; //@line 146 "cstdlib/stdio.c"
 var $add15=((($31)+($29))|0); //@line 146 "cstdlib/stdio.c"
 HEAP32[(($CharCount14)>>2)]=$add15; //@line 146 "cstdlib/stdio.c"
 var $32=$CCount11; //@line 147 "cstdlib/stdio.c"
 var $33=$Stream_addr; //@line 147 "cstdlib/stdio.c"
 var $StrOutPtr16=(($33+4)|0); //@line 147 "cstdlib/stdio.c"
 var $34=HEAP32[(($StrOutPtr16)>>2)]; //@line 147 "cstdlib/stdio.c"
 var $add_ptr17=(($34+$32)|0); //@line 147 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr16)>>2)]=$add_ptr17; //@line 147 "cstdlib/stdio.c"
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return; //@line 149 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioFprintfPointer($Stream,$Format,$Value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Stream_addr;
 var $Format_addr;
 var $Value_addr;
 var $CCount;
 var $CCount11;
 $Stream_addr=$Stream;
 $Format_addr=$Format;
 $Value_addr=$Value;
 var $0=$Stream_addr; //@line 154 "cstdlib/stdio.c"
 var $FilePtr=(($0)|0); //@line 154 "cstdlib/stdio.c"
 var $1=HEAP32[(($FilePtr)>>2)]; //@line 154 "cstdlib/stdio.c"
 var $cmp=($1|0)!=0; //@line 154 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 154 "cstdlib/stdio.c"
 case 2: 
 var $2=$Stream_addr; //@line 155 "cstdlib/stdio.c"
 var $FilePtr1=(($2)|0); //@line 155 "cstdlib/stdio.c"
 var $3=HEAP32[(($FilePtr1)>>2)]; //@line 155 "cstdlib/stdio.c"
 var $4=$Format_addr; //@line 155 "cstdlib/stdio.c"
 var $5=$Value_addr; //@line 155 "cstdlib/stdio.c"
 var $call=_fprintf($3,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs; //@line 155 "cstdlib/stdio.c"
 var $6=$Stream_addr; //@line 155 "cstdlib/stdio.c"
 var $CharCount=(($6+12)|0); //@line 155 "cstdlib/stdio.c"
 var $7=HEAP32[(($CharCount)>>2)]; //@line 155 "cstdlib/stdio.c"
 var $add=((($7)+($call))|0); //@line 155 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=$add; //@line 155 "cstdlib/stdio.c"
 label=7;break; //@line 155 "cstdlib/stdio.c"
 case 3: 
 var $8=$Stream_addr; //@line 157 "cstdlib/stdio.c"
 var $StrOutLen=(($8+8)|0); //@line 157 "cstdlib/stdio.c"
 var $9=HEAP32[(($StrOutLen)>>2)]; //@line 157 "cstdlib/stdio.c"
 var $cmp2=($9|0)>=0; //@line 157 "cstdlib/stdio.c"
 if($cmp2){label=4;break;}else{label=5;break;} //@line 157 "cstdlib/stdio.c"
 case 4: 
 var $10=$Stream_addr; //@line 159 "cstdlib/stdio.c"
 var $StrOutPtr=(($10+4)|0); //@line 159 "cstdlib/stdio.c"
 var $11=HEAP32[(($StrOutPtr)>>2)]; //@line 159 "cstdlib/stdio.c"
 var $12=$Stream_addr; //@line 159 "cstdlib/stdio.c"
 var $StrOutLen4=(($12+8)|0); //@line 159 "cstdlib/stdio.c"
 var $13=HEAP32[(($StrOutLen4)>>2)]; //@line 159 "cstdlib/stdio.c"
 var $14=$Format_addr; //@line 159 "cstdlib/stdio.c"
 var $15=$Value_addr; //@line 159 "cstdlib/stdio.c"
 var $call5=_snprintf($11,$13,$14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs; //@line 159 "cstdlib/stdio.c"
 $CCount=$call5; //@line 159 "cstdlib/stdio.c"
 var $16=$CCount; //@line 160 "cstdlib/stdio.c"
 var $17=$Stream_addr; //@line 160 "cstdlib/stdio.c"
 var $StrOutPtr6=(($17+4)|0); //@line 160 "cstdlib/stdio.c"
 var $18=HEAP32[(($StrOutPtr6)>>2)]; //@line 160 "cstdlib/stdio.c"
 var $add_ptr=(($18+$16)|0); //@line 160 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr6)>>2)]=$add_ptr; //@line 160 "cstdlib/stdio.c"
 var $19=$CCount; //@line 161 "cstdlib/stdio.c"
 var $20=$Stream_addr; //@line 161 "cstdlib/stdio.c"
 var $StrOutLen7=(($20+8)|0); //@line 161 "cstdlib/stdio.c"
 var $21=HEAP32[(($StrOutLen7)>>2)]; //@line 161 "cstdlib/stdio.c"
 var $sub=((($21)-($19))|0); //@line 161 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen7)>>2)]=$sub; //@line 161 "cstdlib/stdio.c"
 var $22=$CCount; //@line 162 "cstdlib/stdio.c"
 var $23=$Stream_addr; //@line 162 "cstdlib/stdio.c"
 var $CharCount8=(($23+12)|0); //@line 162 "cstdlib/stdio.c"
 var $24=HEAP32[(($CharCount8)>>2)]; //@line 162 "cstdlib/stdio.c"
 var $add9=((($24)+($22))|0); //@line 162 "cstdlib/stdio.c"
 HEAP32[(($CharCount8)>>2)]=$add9; //@line 162 "cstdlib/stdio.c"
 label=6;break; //@line 163 "cstdlib/stdio.c"
 case 5: 
 var $25=$Stream_addr; //@line 166 "cstdlib/stdio.c"
 var $StrOutPtr12=(($25+4)|0); //@line 166 "cstdlib/stdio.c"
 var $26=HEAP32[(($StrOutPtr12)>>2)]; //@line 166 "cstdlib/stdio.c"
 var $27=$Format_addr; //@line 166 "cstdlib/stdio.c"
 var $28=$Value_addr; //@line 166 "cstdlib/stdio.c"
 var $call13=_sprintf($26,$27,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs; //@line 166 "cstdlib/stdio.c"
 $CCount11=$call13; //@line 166 "cstdlib/stdio.c"
 var $29=$CCount11; //@line 167 "cstdlib/stdio.c"
 var $30=$Stream_addr; //@line 167 "cstdlib/stdio.c"
 var $CharCount14=(($30+12)|0); //@line 167 "cstdlib/stdio.c"
 var $31=HEAP32[(($CharCount14)>>2)]; //@line 167 "cstdlib/stdio.c"
 var $add15=((($31)+($29))|0); //@line 167 "cstdlib/stdio.c"
 HEAP32[(($CharCount14)>>2)]=$add15; //@line 167 "cstdlib/stdio.c"
 var $32=$CCount11; //@line 168 "cstdlib/stdio.c"
 var $33=$Stream_addr; //@line 168 "cstdlib/stdio.c"
 var $StrOutPtr16=(($33+4)|0); //@line 168 "cstdlib/stdio.c"
 var $34=HEAP32[(($StrOutPtr16)>>2)]; //@line 168 "cstdlib/stdio.c"
 var $add_ptr17=(($34+$32)|0); //@line 168 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr16)>>2)]=$add_ptr17; //@line 168 "cstdlib/stdio.c"
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return; //@line 170 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioBasePrintf($Parser,$Stream,$StrOut,$StrOutLen,$Format,$Args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $Stream_addr;
 var $StrOut_addr;
 var $StrOutLen_addr;
 var $Format_addr;
 var $Args_addr;
 var $ThisArg;
 var $ArgCount;
 var $FPos;
 var $OneFormatBuf=sp;
 var $OneFormatCount;
 var $ShowType;
 var $SOStream=(sp)+(88);
 $Parser_addr=$Parser;
 $Stream_addr=$Stream;
 $StrOut_addr=$StrOut;
 $StrOutLen_addr=$StrOutLen;
 $Format_addr=$Format;
 $Args_addr=$Args;
 var $0=$Args_addr; //@line 175 "cstdlib/stdio.c"
 var $Param=(($0)|0); //@line 175 "cstdlib/stdio.c"
 var $1=HEAP32[(($Param)>>2)]; //@line 175 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 175 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 175 "cstdlib/stdio.c"
 $ThisArg=$2; //@line 175 "cstdlib/stdio.c"
 $ArgCount=0; //@line 176 "cstdlib/stdio.c"
 var $3=$Format_addr; //@line 177 "cstdlib/stdio.c"
 $FPos=$3; //@line 177 "cstdlib/stdio.c"
 var $4=$Stream_addr; //@line 183 "cstdlib/stdio.c"
 var $FilePtr=(($SOStream)|0); //@line 183 "cstdlib/stdio.c"
 HEAP32[(($FilePtr)>>2)]=$4; //@line 183 "cstdlib/stdio.c"
 var $5=$StrOut_addr; //@line 184 "cstdlib/stdio.c"
 var $StrOutPtr=(($SOStream+4)|0); //@line 184 "cstdlib/stdio.c"
 HEAP32[(($StrOutPtr)>>2)]=$5; //@line 184 "cstdlib/stdio.c"
 var $6=$StrOutLen_addr; //@line 185 "cstdlib/stdio.c"
 var $StrOutLen1=(($SOStream+8)|0); //@line 185 "cstdlib/stdio.c"
 HEAP32[(($StrOutLen1)>>2)]=$6; //@line 185 "cstdlib/stdio.c"
 var $CharCount=(($SOStream+12)|0); //@line 186 "cstdlib/stdio.c"
 HEAP32[(($CharCount)>>2)]=0; //@line 186 "cstdlib/stdio.c"
 label=2;break; //@line 188 "cstdlib/stdio.c"
 case 2: 
 var $7=$FPos; //@line 188 "cstdlib/stdio.c"
 var $8=HEAP8[($7)]; //@line 188 "cstdlib/stdio.c"
 var $conv=(($8<<24)>>24); //@line 188 "cstdlib/stdio.c"
 var $cmp=($conv|0)!=0; //@line 188 "cstdlib/stdio.c"
 if($cmp){label=3;break;}else{label=75;break;} //@line 188 "cstdlib/stdio.c"
 case 3: 
 var $9=$FPos; //@line 190 "cstdlib/stdio.c"
 var $10=HEAP8[($9)]; //@line 190 "cstdlib/stdio.c"
 var $conv3=(($10<<24)>>24); //@line 190 "cstdlib/stdio.c"
 var $cmp4=($conv3|0)==37; //@line 190 "cstdlib/stdio.c"
 if($cmp4){label=4;break;}else{label=73;break;} //@line 190 "cstdlib/stdio.c"
 case 4: 
 var $11=$FPos; //@line 193 "cstdlib/stdio.c"
 var $incdec_ptr=(($11+1)|0); //@line 193 "cstdlib/stdio.c"
 $FPos=$incdec_ptr; //@line 193 "cstdlib/stdio.c"
 $ShowType=0; //@line 194 "cstdlib/stdio.c"
 var $arrayidx6=(($OneFormatBuf)|0); //@line 195 "cstdlib/stdio.c"
 HEAP8[($arrayidx6)]=37; //@line 195 "cstdlib/stdio.c"
 $OneFormatCount=1; //@line 196 "cstdlib/stdio.c"
 label=5;break; //@line 198 "cstdlib/stdio.c"
 case 5: 
 var $12=$FPos; //@line 200 "cstdlib/stdio.c"
 var $13=HEAP8[($12)]; //@line 200 "cstdlib/stdio.c"
 var $conv7=(($13<<24)>>24); //@line 200 "cstdlib/stdio.c"
 switch(($conv7|0)){case 103:case 71:{ label=10;break;}case 97:case 65:{ label=11;break;}case 99:{ label=12;break;}case 115:{ label=13;break;}case 112:{ label=14;break;}case 110:{ label=15;break;}case 109:{ label=16;break;}case 37:{ label=17;break;}case 0:{ label=18;break;}case 100:case 105:{ label=6;break;}case 111:case 117:case 120:case 88:{ label=7;break;}case 101:case 69:{ label=8;break;}case 102:case 70:{ label=9;break;}default:{label=19;break;}}break;
 case 6: 
 $ShowType=18408; //@line 202 "cstdlib/stdio.c"
 label=19;break; //@line 202 "cstdlib/stdio.c"
 case 7: 
 $ShowType=18408; //@line 203 "cstdlib/stdio.c"
 label=19;break; //@line 203 "cstdlib/stdio.c"
 case 8: 
 $ShowType=19032; //@line 205 "cstdlib/stdio.c"
 label=19;break; //@line 205 "cstdlib/stdio.c"
 case 9: 
 $ShowType=19032; //@line 206 "cstdlib/stdio.c"
 label=19;break; //@line 206 "cstdlib/stdio.c"
 case 10: 
 $ShowType=19032; //@line 207 "cstdlib/stdio.c"
 label=19;break; //@line 207 "cstdlib/stdio.c"
 case 11: 
 $ShowType=18408; //@line 209 "cstdlib/stdio.c"
 label=19;break; //@line 209 "cstdlib/stdio.c"
 case 12: 
 $ShowType=18408; //@line 210 "cstdlib/stdio.c"
 label=19;break; //@line 210 "cstdlib/stdio.c"
 case 13: 
 var $14=HEAP32[((19136)>>2)]; //@line 211 "cstdlib/stdio.c"
 $ShowType=$14; //@line 211 "cstdlib/stdio.c"
 label=19;break; //@line 211 "cstdlib/stdio.c"
 case 14: 
 var $15=HEAP32[((16904)>>2)]; //@line 212 "cstdlib/stdio.c"
 $ShowType=$15; //@line 212 "cstdlib/stdio.c"
 label=19;break; //@line 212 "cstdlib/stdio.c"
 case 15: 
 $ShowType=16856; //@line 213 "cstdlib/stdio.c"
 label=19;break; //@line 213 "cstdlib/stdio.c"
 case 16: 
 $ShowType=16856; //@line 214 "cstdlib/stdio.c"
 label=19;break; //@line 214 "cstdlib/stdio.c"
 case 17: 
 $ShowType=16856; //@line 215 "cstdlib/stdio.c"
 label=19;break; //@line 215 "cstdlib/stdio.c"
 case 18: 
 $ShowType=16856; //@line 216 "cstdlib/stdio.c"
 label=19;break; //@line 216 "cstdlib/stdio.c"
 case 19: 
 var $16=$FPos; //@line 220 "cstdlib/stdio.c"
 var $17=HEAP8[($16)]; //@line 220 "cstdlib/stdio.c"
 var $18=$OneFormatCount; //@line 220 "cstdlib/stdio.c"
 var $arrayidx20=(($OneFormatBuf+$18)|0); //@line 220 "cstdlib/stdio.c"
 HEAP8[($arrayidx20)]=$17; //@line 220 "cstdlib/stdio.c"
 var $19=$OneFormatCount; //@line 221 "cstdlib/stdio.c"
 var $inc=((($19)+(1))|0); //@line 221 "cstdlib/stdio.c"
 $OneFormatCount=$inc; //@line 221 "cstdlib/stdio.c"
 var $20=$ShowType; //@line 224 "cstdlib/stdio.c"
 var $cmp21=($20|0)==16856; //@line 224 "cstdlib/stdio.c"
 if($cmp21){label=20;break;}else{label=29;break;} //@line 224 "cstdlib/stdio.c"
 case 20: 
 var $21=$FPos; //@line 226 "cstdlib/stdio.c"
 var $22=HEAP8[($21)]; //@line 226 "cstdlib/stdio.c"
 var $conv24=(($22<<24)>>24); //@line 226 "cstdlib/stdio.c"
 if(($conv24|0)==109){ label=21;break;}else if(($conv24|0)==37){ label=22;break;}else if(($conv24|0)==0){ label=23;break;}else if(($conv24|0)==110){ label=24;break;}else{label=28;break;}
 case 21: 
 var $call=___errno_location(); //@line 228 "cstdlib/stdio.c"
 var $23=HEAP32[(($call)>>2)]; //@line 228 "cstdlib/stdio.c"
 var $call26=_strerror($23); //@line 228 "cstdlib/stdio.c"
 _StdioOutPuts($call26,$SOStream); //@line 228 "cstdlib/stdio.c"
 label=28;break; //@line 228 "cstdlib/stdio.c"
 case 22: 
 var $24=$FPos; //@line 229 "cstdlib/stdio.c"
 var $25=HEAP8[($24)]; //@line 229 "cstdlib/stdio.c"
 var $conv28=(($25<<24)>>24); //@line 229 "cstdlib/stdio.c"
 _StdioOutPutc($conv28,$SOStream); //@line 229 "cstdlib/stdio.c"
 label=28;break; //@line 229 "cstdlib/stdio.c"
 case 23: 
 var $26=$OneFormatCount; //@line 230 "cstdlib/stdio.c"
 var $arrayidx30=(($OneFormatBuf+$26)|0); //@line 230 "cstdlib/stdio.c"
 HEAP8[($arrayidx30)]=0; //@line 230 "cstdlib/stdio.c"
 var $27=$FPos; //@line 230 "cstdlib/stdio.c"
 var $28=HEAP8[($27)]; //@line 230 "cstdlib/stdio.c"
 var $conv31=(($28<<24)>>24); //@line 230 "cstdlib/stdio.c"
 _StdioOutPutc($conv31,$SOStream); //@line 230 "cstdlib/stdio.c"
 label=28;break; //@line 230 "cstdlib/stdio.c"
 case 24: 
 var $29=$ThisArg; //@line 232 "cstdlib/stdio.c"
 var $30=$29; //@line 232 "cstdlib/stdio.c"
 var $31=$ThisArg; //@line 232 "cstdlib/stdio.c"
 var $call33=_TypeStackSizeValue($31); //@line 232 "cstdlib/stdio.c"
 var $add=((($call33)+(16))|0); //@line 232 "cstdlib/stdio.c"
 var $add34=((($add)+(4))|0); //@line 232 "cstdlib/stdio.c"
 var $sub=((($add34)-(1))|0); //@line 232 "cstdlib/stdio.c"
 var $and=$sub&-4; //@line 232 "cstdlib/stdio.c"
 var $add_ptr=(($30+$and)|0); //@line 232 "cstdlib/stdio.c"
 var $32=$add_ptr; //@line 232 "cstdlib/stdio.c"
 $ThisArg=$32; //@line 232 "cstdlib/stdio.c"
 var $33=$ThisArg; //@line 233 "cstdlib/stdio.c"
 var $Typ=(($33)|0); //@line 233 "cstdlib/stdio.c"
 var $34=HEAP32[(($Typ)>>2)]; //@line 233 "cstdlib/stdio.c"
 var $Base=(($34)|0); //@line 233 "cstdlib/stdio.c"
 var $35=HEAP32[(($Base)>>2)]; //@line 233 "cstdlib/stdio.c"
 var $cmp35=($35|0)==12; //@line 233 "cstdlib/stdio.c"
 if($cmp35){label=25;break;}else{label=27;break;} //@line 233 "cstdlib/stdio.c"
 case 25: 
 var $36=$ThisArg; //@line 233 "cstdlib/stdio.c"
 var $Typ37=(($36)|0); //@line 233 "cstdlib/stdio.c"
 var $37=HEAP32[(($Typ37)>>2)]; //@line 233 "cstdlib/stdio.c"
 var $FromType=(($37+20)|0); //@line 233 "cstdlib/stdio.c"
 var $38=HEAP32[(($FromType)>>2)]; //@line 233 "cstdlib/stdio.c"
 var $Base38=(($38)|0); //@line 233 "cstdlib/stdio.c"
 var $39=HEAP32[(($Base38)>>2)]; //@line 233 "cstdlib/stdio.c"
 var $cmp39=($39|0)==1; //@line 233 "cstdlib/stdio.c"
 if($cmp39){label=26;break;}else{label=27;break;} //@line 233 "cstdlib/stdio.c"
 case 26: 
 var $CharCount42=(($SOStream+12)|0); //@line 234 "cstdlib/stdio.c"
 var $40=HEAP32[(($CharCount42)>>2)]; //@line 234 "cstdlib/stdio.c"
 var $41=$ThisArg; //@line 234 "cstdlib/stdio.c"
 var $Val=(($41+4)|0); //@line 234 "cstdlib/stdio.c"
 var $42=HEAP32[(($Val)>>2)]; //@line 234 "cstdlib/stdio.c"
 var $Pointer=$42; //@line 234 "cstdlib/stdio.c"
 var $43=HEAP32[(($Pointer)>>2)]; //@line 234 "cstdlib/stdio.c"
 var $44=$43; //@line 234 "cstdlib/stdio.c"
 HEAP32[(($44)>>2)]=$40; //@line 234 "cstdlib/stdio.c"
 label=27;break; //@line 234 "cstdlib/stdio.c"
 case 27: 
 label=28;break; //@line 235 "cstdlib/stdio.c"
 case 28: 
 label=29;break; //@line 237 "cstdlib/stdio.c"
 case 29: 
 var $45=$FPos; //@line 239 "cstdlib/stdio.c"
 var $incdec_ptr45=(($45+1)|0); //@line 239 "cstdlib/stdio.c"
 $FPos=$incdec_ptr45; //@line 239 "cstdlib/stdio.c"
 label=30;break; //@line 241 "cstdlib/stdio.c"
 case 30: 
 var $46=$ShowType; //@line 241 "cstdlib/stdio.c"
 var $cmp46=($46|0)==0; //@line 241 "cstdlib/stdio.c"
 if($cmp46){label=31;break;}else{var $48=0;label=32;break;} //@line 241 "cstdlib/stdio.c"
 case 31: 
 var $47=$OneFormatCount; //@line 241 "cstdlib/stdio.c"
 var $cmp48=($47|0)<80; //@line 241 "cstdlib/stdio.c"
 var $48=$cmp48;label=32;break;
 case 32: 
 var $48;
 if($48){label=5;break;}else{label=33;break;}
 case 33: 
 var $49=$ShowType; //@line 243 "cstdlib/stdio.c"
 var $cmp50=($49|0)!=16856; //@line 243 "cstdlib/stdio.c"
 if($cmp50){label=34;break;}else{label=72;break;} //@line 243 "cstdlib/stdio.c"
 case 34: 
 var $50=$ArgCount; //@line 245 "cstdlib/stdio.c"
 var $51=$Args_addr; //@line 245 "cstdlib/stdio.c"
 var $NumArgs=(($51+4)|0); //@line 245 "cstdlib/stdio.c"
 var $52=HEAP32[(($NumArgs)>>2)]; //@line 245 "cstdlib/stdio.c"
 var $cmp53=($50|0)>=($52|0); //@line 245 "cstdlib/stdio.c"
 if($cmp53){label=35;break;}else{label=36;break;} //@line 245 "cstdlib/stdio.c"
 case 35: 
 _StdioOutPuts(6008,$SOStream); //@line 246 "cstdlib/stdio.c"
 label=71;break; //@line 246 "cstdlib/stdio.c"
 case 36: 
 var $53=$OneFormatCount; //@line 250 "cstdlib/stdio.c"
 var $arrayidx56=(($OneFormatBuf+$53)|0); //@line 250 "cstdlib/stdio.c"
 HEAP8[($arrayidx56)]=0; //@line 250 "cstdlib/stdio.c"
 var $54=$ThisArg; //@line 253 "cstdlib/stdio.c"
 var $55=$54; //@line 253 "cstdlib/stdio.c"
 var $56=$ThisArg; //@line 253 "cstdlib/stdio.c"
 var $call57=_TypeStackSizeValue($56); //@line 253 "cstdlib/stdio.c"
 var $add58=((($call57)+(16))|0); //@line 253 "cstdlib/stdio.c"
 var $add59=((($add58)+(4))|0); //@line 253 "cstdlib/stdio.c"
 var $sub60=((($add59)-(1))|0); //@line 253 "cstdlib/stdio.c"
 var $and61=$sub60&-4; //@line 253 "cstdlib/stdio.c"
 var $add_ptr62=(($55+$and61)|0); //@line 253 "cstdlib/stdio.c"
 var $57=$add_ptr62; //@line 253 "cstdlib/stdio.c"
 $ThisArg=$57; //@line 253 "cstdlib/stdio.c"
 var $58=$ShowType; //@line 254 "cstdlib/stdio.c"
 var $cmp63=($58|0)==18408; //@line 254 "cstdlib/stdio.c"
 if($cmp63){label=37;break;}else{label=43;break;} //@line 254 "cstdlib/stdio.c"
 case 37: 
 var $59=$ThisArg; //@line 257 "cstdlib/stdio.c"
 var $Typ66=(($59)|0); //@line 257 "cstdlib/stdio.c"
 var $60=HEAP32[(($Typ66)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $Base67=(($60)|0); //@line 257 "cstdlib/stdio.c"
 var $61=HEAP32[(($Base67)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $cmp68=($61>>>0)>=1; //@line 257 "cstdlib/stdio.c"
 if($cmp68){label=38;break;}else{label=39;break;} //@line 257 "cstdlib/stdio.c"
 case 38: 
 var $62=$ThisArg; //@line 257 "cstdlib/stdio.c"
 var $Typ71=(($62)|0); //@line 257 "cstdlib/stdio.c"
 var $63=HEAP32[(($Typ71)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $Base72=(($63)|0); //@line 257 "cstdlib/stdio.c"
 var $64=HEAP32[(($Base72)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $cmp73=($64>>>0)<=7; //@line 257 "cstdlib/stdio.c"
 if($cmp73){label=40;break;}else{label=39;break;} //@line 257 "cstdlib/stdio.c"
 case 39: 
 var $65=$ThisArg; //@line 257 "cstdlib/stdio.c"
 var $Typ75=(($65)|0); //@line 257 "cstdlib/stdio.c"
 var $66=HEAP32[(($Typ75)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $Base76=(($66)|0); //@line 257 "cstdlib/stdio.c"
 var $67=HEAP32[(($Base76)>>2)]; //@line 257 "cstdlib/stdio.c"
 var $cmp77=($67|0)==8; //@line 257 "cstdlib/stdio.c"
 if($cmp77){label=40;break;}else{label=41;break;} //@line 257 "cstdlib/stdio.c"
 case 40: 
 var $arraydecay=(($OneFormatBuf)|0); //@line 258 "cstdlib/stdio.c"
 var $68=$ThisArg; //@line 258 "cstdlib/stdio.c"
 var $call80=_ExpressionCoerceUnsignedInteger($68); //@line 258 "cstdlib/stdio.c"
 _StdioFprintfWord($SOStream,$arraydecay,$call80); //@line 258 "cstdlib/stdio.c"
 label=42;break; //@line 258 "cstdlib/stdio.c"
 case 41: 
 _StdioOutPuts(6008,$SOStream); //@line 260 "cstdlib/stdio.c"
 label=42;break;
 case 42: 
 label=70;break; //@line 261 "cstdlib/stdio.c"
 case 43: 
 var $69=$ShowType; //@line 263 "cstdlib/stdio.c"
 var $cmp84=($69|0)==19032; //@line 263 "cstdlib/stdio.c"
 if($cmp84){label=44;break;}else{label=50;break;} //@line 263 "cstdlib/stdio.c"
 case 44: 
 var $70=$ThisArg; //@line 266 "cstdlib/stdio.c"
 var $Typ87=(($70)|0); //@line 266 "cstdlib/stdio.c"
 var $71=HEAP32[(($Typ87)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $Base88=(($71)|0); //@line 266 "cstdlib/stdio.c"
 var $72=HEAP32[(($Base88)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $cmp89=($72>>>0)>=1; //@line 266 "cstdlib/stdio.c"
 if($cmp89){label=45;break;}else{label=46;break;} //@line 266 "cstdlib/stdio.c"
 case 45: 
 var $73=$ThisArg; //@line 266 "cstdlib/stdio.c"
 var $Typ92=(($73)|0); //@line 266 "cstdlib/stdio.c"
 var $74=HEAP32[(($Typ92)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $Base93=(($74)|0); //@line 266 "cstdlib/stdio.c"
 var $75=HEAP32[(($Base93)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $cmp94=($75>>>0)<=7; //@line 266 "cstdlib/stdio.c"
 if($cmp94){label=47;break;}else{label=46;break;} //@line 266 "cstdlib/stdio.c"
 case 46: 
 var $76=$ThisArg; //@line 266 "cstdlib/stdio.c"
 var $Typ97=(($76)|0); //@line 266 "cstdlib/stdio.c"
 var $77=HEAP32[(($Typ97)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $Base98=(($77)|0); //@line 266 "cstdlib/stdio.c"
 var $78=HEAP32[(($Base98)>>2)]; //@line 266 "cstdlib/stdio.c"
 var $cmp99=($78|0)==8; //@line 266 "cstdlib/stdio.c"
 if($cmp99){label=47;break;}else{label=48;break;} //@line 266 "cstdlib/stdio.c"
 case 47: 
 var $arraydecay102=(($OneFormatBuf)|0); //@line 267 "cstdlib/stdio.c"
 var $79=$ThisArg; //@line 267 "cstdlib/stdio.c"
 var $call103=_ExpressionCoerceFP($79); //@line 267 "cstdlib/stdio.c"
 _StdioFprintfFP($SOStream,$arraydecay102,$call103); //@line 267 "cstdlib/stdio.c"
 label=49;break; //@line 267 "cstdlib/stdio.c"
 case 48: 
 _StdioOutPuts(6008,$SOStream); //@line 269 "cstdlib/stdio.c"
 label=49;break;
 case 49: 
 label=69;break; //@line 270 "cstdlib/stdio.c"
 case 50: 
 var $80=$ShowType; //@line 272 "cstdlib/stdio.c"
 var $81=HEAP32[((19136)>>2)]; //@line 272 "cstdlib/stdio.c"
 var $cmp107=($80|0)==($81|0); //@line 272 "cstdlib/stdio.c"
 if($cmp107){label=51;break;}else{label=59;break;} //@line 272 "cstdlib/stdio.c"
 case 51: 
 var $82=$ThisArg; //@line 274 "cstdlib/stdio.c"
 var $Typ110=(($82)|0); //@line 274 "cstdlib/stdio.c"
 var $83=HEAP32[(($Typ110)>>2)]; //@line 274 "cstdlib/stdio.c"
 var $Base111=(($83)|0); //@line 274 "cstdlib/stdio.c"
 var $84=HEAP32[(($Base111)>>2)]; //@line 274 "cstdlib/stdio.c"
 var $cmp112=($84|0)==11; //@line 274 "cstdlib/stdio.c"
 if($cmp112){label=52;break;}else{label=53;break;} //@line 274 "cstdlib/stdio.c"
 case 52: 
 var $arraydecay115=(($OneFormatBuf)|0); //@line 275 "cstdlib/stdio.c"
 var $85=$ThisArg; //@line 275 "cstdlib/stdio.c"
 var $Val116=(($85+4)|0); //@line 275 "cstdlib/stdio.c"
 var $86=HEAP32[(($Val116)>>2)]; //@line 275 "cstdlib/stdio.c"
 var $Pointer117=$86; //@line 275 "cstdlib/stdio.c"
 var $87=HEAP32[(($Pointer117)>>2)]; //@line 275 "cstdlib/stdio.c"
 _StdioFprintfPointer($SOStream,$arraydecay115,$87); //@line 275 "cstdlib/stdio.c"
 label=58;break; //@line 275 "cstdlib/stdio.c"
 case 53: 
 var $88=$ThisArg; //@line 277 "cstdlib/stdio.c"
 var $Typ119=(($88)|0); //@line 277 "cstdlib/stdio.c"
 var $89=HEAP32[(($Typ119)>>2)]; //@line 277 "cstdlib/stdio.c"
 var $Base120=(($89)|0); //@line 277 "cstdlib/stdio.c"
 var $90=HEAP32[(($Base120)>>2)]; //@line 277 "cstdlib/stdio.c"
 var $cmp121=($90|0)==12; //@line 277 "cstdlib/stdio.c"
 if($cmp121){label=54;break;}else{label=56;break;} //@line 277 "cstdlib/stdio.c"
 case 54: 
 var $91=$ThisArg; //@line 277 "cstdlib/stdio.c"
 var $Typ124=(($91)|0); //@line 277 "cstdlib/stdio.c"
 var $92=HEAP32[(($Typ124)>>2)]; //@line 277 "cstdlib/stdio.c"
 var $FromType125=(($92+20)|0); //@line 277 "cstdlib/stdio.c"
 var $93=HEAP32[(($FromType125)>>2)]; //@line 277 "cstdlib/stdio.c"
 var $Base126=(($93)|0); //@line 277 "cstdlib/stdio.c"
 var $94=HEAP32[(($Base126)>>2)]; //@line 277 "cstdlib/stdio.c"
 var $cmp127=($94|0)==3; //@line 277 "cstdlib/stdio.c"
 if($cmp127){label=55;break;}else{label=56;break;} //@line 277 "cstdlib/stdio.c"
 case 55: 
 var $arraydecay130=(($OneFormatBuf)|0); //@line 278 "cstdlib/stdio.c"
 var $95=$ThisArg; //@line 278 "cstdlib/stdio.c"
 var $Val131=(($95+4)|0); //@line 278 "cstdlib/stdio.c"
 var $96=HEAP32[(($Val131)>>2)]; //@line 278 "cstdlib/stdio.c"
 var $ArrayMem=$96; //@line 278 "cstdlib/stdio.c"
 var $arrayidx132=(($ArrayMem)|0); //@line 278 "cstdlib/stdio.c"
 _StdioFprintfPointer($SOStream,$arraydecay130,$arrayidx132); //@line 278 "cstdlib/stdio.c"
 label=57;break; //@line 278 "cstdlib/stdio.c"
 case 56: 
 _StdioOutPuts(6008,$SOStream); //@line 281 "cstdlib/stdio.c"
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=68;break; //@line 282 "cstdlib/stdio.c"
 case 59: 
 var $97=$ShowType; //@line 283 "cstdlib/stdio.c"
 var $98=HEAP32[((16904)>>2)]; //@line 283 "cstdlib/stdio.c"
 var $cmp137=($97|0)==($98|0); //@line 283 "cstdlib/stdio.c"
 if($cmp137){label=60;break;}else{label=67;break;} //@line 283 "cstdlib/stdio.c"
 case 60: 
 var $99=$ThisArg; //@line 285 "cstdlib/stdio.c"
 var $Typ140=(($99)|0); //@line 285 "cstdlib/stdio.c"
 var $100=HEAP32[(($Typ140)>>2)]; //@line 285 "cstdlib/stdio.c"
 var $Base141=(($100)|0); //@line 285 "cstdlib/stdio.c"
 var $101=HEAP32[(($Base141)>>2)]; //@line 285 "cstdlib/stdio.c"
 var $cmp142=($101|0)==11; //@line 285 "cstdlib/stdio.c"
 if($cmp142){label=61;break;}else{label=62;break;} //@line 285 "cstdlib/stdio.c"
 case 61: 
 var $arraydecay145=(($OneFormatBuf)|0); //@line 286 "cstdlib/stdio.c"
 var $102=$ThisArg; //@line 286 "cstdlib/stdio.c"
 var $Val146=(($102+4)|0); //@line 286 "cstdlib/stdio.c"
 var $103=HEAP32[(($Val146)>>2)]; //@line 286 "cstdlib/stdio.c"
 var $Pointer147=$103; //@line 286 "cstdlib/stdio.c"
 var $104=HEAP32[(($Pointer147)>>2)]; //@line 286 "cstdlib/stdio.c"
 _StdioFprintfPointer($SOStream,$arraydecay145,$104); //@line 286 "cstdlib/stdio.c"
 label=66;break; //@line 286 "cstdlib/stdio.c"
 case 62: 
 var $105=$ThisArg; //@line 288 "cstdlib/stdio.c"
 var $Typ149=(($105)|0); //@line 288 "cstdlib/stdio.c"
 var $106=HEAP32[(($Typ149)>>2)]; //@line 288 "cstdlib/stdio.c"
 var $Base150=(($106)|0); //@line 288 "cstdlib/stdio.c"
 var $107=HEAP32[(($Base150)>>2)]; //@line 288 "cstdlib/stdio.c"
 var $cmp151=($107|0)==12; //@line 288 "cstdlib/stdio.c"
 if($cmp151){label=63;break;}else{label=64;break;} //@line 288 "cstdlib/stdio.c"
 case 63: 
 var $arraydecay154=(($OneFormatBuf)|0); //@line 289 "cstdlib/stdio.c"
 var $108=$ThisArg; //@line 289 "cstdlib/stdio.c"
 var $Val155=(($108+4)|0); //@line 289 "cstdlib/stdio.c"
 var $109=HEAP32[(($Val155)>>2)]; //@line 289 "cstdlib/stdio.c"
 var $ArrayMem156=$109; //@line 289 "cstdlib/stdio.c"
 var $arrayidx157=(($ArrayMem156)|0); //@line 289 "cstdlib/stdio.c"
 _StdioFprintfPointer($SOStream,$arraydecay154,$arrayidx157); //@line 289 "cstdlib/stdio.c"
 label=65;break; //@line 289 "cstdlib/stdio.c"
 case 64: 
 _StdioOutPuts(6008,$SOStream); //@line 292 "cstdlib/stdio.c"
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break; //@line 293 "cstdlib/stdio.c"
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 var $110=$ArgCount; //@line 295 "cstdlib/stdio.c"
 var $inc165=((($110)+(1))|0); //@line 295 "cstdlib/stdio.c"
 $ArgCount=$inc165; //@line 295 "cstdlib/stdio.c"
 label=71;break;
 case 71: 
 label=72;break; //@line 297 "cstdlib/stdio.c"
 case 72: 
 label=74;break; //@line 298 "cstdlib/stdio.c"
 case 73: 
 var $111=$FPos; //@line 302 "cstdlib/stdio.c"
 var $112=HEAP8[($111)]; //@line 302 "cstdlib/stdio.c"
 var $conv169=(($112<<24)>>24); //@line 302 "cstdlib/stdio.c"
 _StdioOutPutc($conv169,$SOStream); //@line 302 "cstdlib/stdio.c"
 var $113=$FPos; //@line 303 "cstdlib/stdio.c"
 var $incdec_ptr170=(($113+1)|0); //@line 303 "cstdlib/stdio.c"
 $FPos=$incdec_ptr170; //@line 303 "cstdlib/stdio.c"
 label=74;break;
 case 74: 
 label=2;break; //@line 305 "cstdlib/stdio.c"
 case 75: 
 var $StrOutPtr172=(($SOStream+4)|0); //@line 308 "cstdlib/stdio.c"
 var $114=HEAP32[(($StrOutPtr172)>>2)]; //@line 308 "cstdlib/stdio.c"
 var $cmp173=($114|0)!=0; //@line 308 "cstdlib/stdio.c"
 if($cmp173){label=76;break;}else{label=78;break;} //@line 308 "cstdlib/stdio.c"
 case 76: 
 var $StrOutLen176=(($SOStream+8)|0); //@line 308 "cstdlib/stdio.c"
 var $115=HEAP32[(($StrOutLen176)>>2)]; //@line 308 "cstdlib/stdio.c"
 var $cmp177=($115|0)>0; //@line 308 "cstdlib/stdio.c"
 if($cmp177){label=77;break;}else{label=78;break;} //@line 308 "cstdlib/stdio.c"
 case 77: 
 var $StrOutPtr180=(($SOStream+4)|0); //@line 309 "cstdlib/stdio.c"
 var $116=HEAP32[(($StrOutPtr180)>>2)]; //@line 309 "cstdlib/stdio.c"
 HEAP8[($116)]=0; //@line 309 "cstdlib/stdio.c"
 label=78;break; //@line 309 "cstdlib/stdio.c"
 case 78: 
 var $CharCount182=(($SOStream+12)|0); //@line 311 "cstdlib/stdio.c"
 var $117=HEAP32[(($CharCount182)>>2)]; //@line 311 "cstdlib/stdio.c"
 STACKTOP=sp;return $117; //@line 311 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioBaseScanf($Parser,$Stream,$StrIn,$Format,$Args){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $retval;
 var $Parser_addr;
 var $Stream_addr;
 var $StrIn_addr;
 var $Format_addr;
 var $Args_addr;
 var $ThisArg;
 var $ArgCount;
 var $ScanfArg=sp;
 $Parser_addr=$Parser;
 $Stream_addr=$Stream;
 $StrIn_addr=$StrIn;
 $Format_addr=$Format;
 $Args_addr=$Args;
 var $0=$Args_addr; //@line 317 "cstdlib/stdio.c"
 var $Param=(($0)|0); //@line 317 "cstdlib/stdio.c"
 var $1=HEAP32[(($Param)>>2)]; //@line 317 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 317 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 317 "cstdlib/stdio.c"
 $ThisArg=$2; //@line 317 "cstdlib/stdio.c"
 $ArgCount=0; //@line 318 "cstdlib/stdio.c"
 var $3=$Args_addr; //@line 321 "cstdlib/stdio.c"
 var $NumArgs=(($3+4)|0); //@line 321 "cstdlib/stdio.c"
 var $4=HEAP32[(($NumArgs)>>2)]; //@line 321 "cstdlib/stdio.c"
 var $cmp=($4|0)>10; //@line 321 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=3;break;} //@line 321 "cstdlib/stdio.c"
 case 2: 
 var $5=$Parser_addr; //@line 322 "cstdlib/stdio.c"
 _ProgramFail($5,10752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=10,tempVarArgs)); STACKTOP=tempVarArgs; //@line 322 "cstdlib/stdio.c"
 label=3;break; //@line 322 "cstdlib/stdio.c"
 case 3: 
 $ArgCount=0; //@line 324 "cstdlib/stdio.c"
 label=4;break; //@line 324 "cstdlib/stdio.c"
 case 4: 
 var $6=$ArgCount; //@line 324 "cstdlib/stdio.c"
 var $7=$Args_addr; //@line 324 "cstdlib/stdio.c"
 var $NumArgs1=(($7+4)|0); //@line 324 "cstdlib/stdio.c"
 var $8=HEAP32[(($NumArgs1)>>2)]; //@line 324 "cstdlib/stdio.c"
 var $cmp2=($6|0)<($8|0); //@line 324 "cstdlib/stdio.c"
 if($cmp2){label=5;break;}else{label=13;break;} //@line 324 "cstdlib/stdio.c"
 case 5: 
 var $9=$ThisArg; //@line 326 "cstdlib/stdio.c"
 var $10=$9; //@line 326 "cstdlib/stdio.c"
 var $11=$ThisArg; //@line 326 "cstdlib/stdio.c"
 var $call=_TypeStackSizeValue($11); //@line 326 "cstdlib/stdio.c"
 var $add=((($call)+(16))|0); //@line 326 "cstdlib/stdio.c"
 var $add3=((($add)+(4))|0); //@line 326 "cstdlib/stdio.c"
 var $sub=((($add3)-(1))|0); //@line 326 "cstdlib/stdio.c"
 var $and=$sub&-4; //@line 326 "cstdlib/stdio.c"
 var $add_ptr=(($10+$and)|0); //@line 326 "cstdlib/stdio.c"
 var $12=$add_ptr; //@line 326 "cstdlib/stdio.c"
 $ThisArg=$12; //@line 326 "cstdlib/stdio.c"
 var $13=$ThisArg; //@line 328 "cstdlib/stdio.c"
 var $Typ=(($13)|0); //@line 328 "cstdlib/stdio.c"
 var $14=HEAP32[(($Typ)>>2)]; //@line 328 "cstdlib/stdio.c"
 var $Base=(($14)|0); //@line 328 "cstdlib/stdio.c"
 var $15=HEAP32[(($Base)>>2)]; //@line 328 "cstdlib/stdio.c"
 var $cmp4=($15|0)==11; //@line 328 "cstdlib/stdio.c"
 if($cmp4){label=6;break;}else{label=7;break;} //@line 328 "cstdlib/stdio.c"
 case 6: 
 var $16=$ThisArg; //@line 329 "cstdlib/stdio.c"
 var $Val=(($16+4)|0); //@line 329 "cstdlib/stdio.c"
 var $17=HEAP32[(($Val)>>2)]; //@line 329 "cstdlib/stdio.c"
 var $Pointer=$17; //@line 329 "cstdlib/stdio.c"
 var $18=HEAP32[(($Pointer)>>2)]; //@line 329 "cstdlib/stdio.c"
 var $19=$ArgCount; //@line 329 "cstdlib/stdio.c"
 var $arrayidx6=(($ScanfArg+($19<<2))|0); //@line 329 "cstdlib/stdio.c"
 HEAP32[(($arrayidx6)>>2)]=$18; //@line 329 "cstdlib/stdio.c"
 label=11;break; //@line 329 "cstdlib/stdio.c"
 case 7: 
 var $20=$ThisArg; //@line 331 "cstdlib/stdio.c"
 var $Typ7=(($20)|0); //@line 331 "cstdlib/stdio.c"
 var $21=HEAP32[(($Typ7)>>2)]; //@line 331 "cstdlib/stdio.c"
 var $Base8=(($21)|0); //@line 331 "cstdlib/stdio.c"
 var $22=HEAP32[(($Base8)>>2)]; //@line 331 "cstdlib/stdio.c"
 var $cmp9=($22|0)==12; //@line 331 "cstdlib/stdio.c"
 if($cmp9){label=8;break;}else{label=9;break;} //@line 331 "cstdlib/stdio.c"
 case 8: 
 var $23=$ThisArg; //@line 332 "cstdlib/stdio.c"
 var $Val11=(($23+4)|0); //@line 332 "cstdlib/stdio.c"
 var $24=HEAP32[(($Val11)>>2)]; //@line 332 "cstdlib/stdio.c"
 var $ArrayMem=$24; //@line 332 "cstdlib/stdio.c"
 var $arrayidx12=(($ArrayMem)|0); //@line 332 "cstdlib/stdio.c"
 var $25=$ArgCount; //@line 332 "cstdlib/stdio.c"
 var $arrayidx13=(($ScanfArg+($25<<2))|0); //@line 332 "cstdlib/stdio.c"
 HEAP32[(($arrayidx13)>>2)]=$arrayidx12; //@line 332 "cstdlib/stdio.c"
 label=10;break; //@line 332 "cstdlib/stdio.c"
 case 9: 
 var $26=$Parser_addr; //@line 335 "cstdlib/stdio.c"
 var $27=$ArgCount; //@line 335 "cstdlib/stdio.c"
 var $add15=((($27)+(1))|0); //@line 335 "cstdlib/stdio.c"
 _ProgramFail($26,8088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$add15,tempVarArgs)); STACKTOP=tempVarArgs; //@line 335 "cstdlib/stdio.c"
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break; //@line 336 "cstdlib/stdio.c"
 case 12: 
 var $28=$ArgCount; //@line 324 "cstdlib/stdio.c"
 var $inc=((($28)+(1))|0); //@line 324 "cstdlib/stdio.c"
 $ArgCount=$inc; //@line 324 "cstdlib/stdio.c"
 label=4;break; //@line 324 "cstdlib/stdio.c"
 case 13: 
 var $29=$Stream_addr; //@line 338 "cstdlib/stdio.c"
 var $cmp18=($29|0)!=0; //@line 338 "cstdlib/stdio.c"
 if($cmp18){label=14;break;}else{label=15;break;} //@line 338 "cstdlib/stdio.c"
 case 14: 
 var $30=$Stream_addr; //@line 339 "cstdlib/stdio.c"
 var $31=$Format_addr; //@line 339 "cstdlib/stdio.c"
 var $arrayidx20=(($ScanfArg)|0); //@line 339 "cstdlib/stdio.c"
 var $32=HEAP32[(($arrayidx20)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx21=(($ScanfArg+4)|0); //@line 339 "cstdlib/stdio.c"
 var $33=HEAP32[(($arrayidx21)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx22=(($ScanfArg+8)|0); //@line 339 "cstdlib/stdio.c"
 var $34=HEAP32[(($arrayidx22)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx23=(($ScanfArg+12)|0); //@line 339 "cstdlib/stdio.c"
 var $35=HEAP32[(($arrayidx23)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx24=(($ScanfArg+16)|0); //@line 339 "cstdlib/stdio.c"
 var $36=HEAP32[(($arrayidx24)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx25=(($ScanfArg+20)|0); //@line 339 "cstdlib/stdio.c"
 var $37=HEAP32[(($arrayidx25)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx26=(($ScanfArg+24)|0); //@line 339 "cstdlib/stdio.c"
 var $38=HEAP32[(($arrayidx26)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx27=(($ScanfArg+28)|0); //@line 339 "cstdlib/stdio.c"
 var $39=HEAP32[(($arrayidx27)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx28=(($ScanfArg+32)|0); //@line 339 "cstdlib/stdio.c"
 var $40=HEAP32[(($arrayidx28)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $arrayidx29=(($ScanfArg+36)|0); //@line 339 "cstdlib/stdio.c"
 var $41=HEAP32[(($arrayidx29)>>2)]; //@line 339 "cstdlib/stdio.c"
 var $call30=_fscanf($30,$31,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 80)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAP32[(((tempVarArgs)+(8))>>2)]=$33,HEAP32[(((tempVarArgs)+(16))>>2)]=$34,HEAP32[(((tempVarArgs)+(24))>>2)]=$35,HEAP32[(((tempVarArgs)+(32))>>2)]=$36,HEAP32[(((tempVarArgs)+(40))>>2)]=$37,HEAP32[(((tempVarArgs)+(48))>>2)]=$38,HEAP32[(((tempVarArgs)+(56))>>2)]=$39,HEAP32[(((tempVarArgs)+(64))>>2)]=$40,HEAP32[(((tempVarArgs)+(72))>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs; //@line 339 "cstdlib/stdio.c"
 $retval=$call30; //@line 339 "cstdlib/stdio.c"
 label=16;break; //@line 339 "cstdlib/stdio.c"
 case 15: 
 var $42=$StrIn_addr; //@line 341 "cstdlib/stdio.c"
 var $43=$Format_addr; //@line 341 "cstdlib/stdio.c"
 var $arrayidx32=(($ScanfArg)|0); //@line 341 "cstdlib/stdio.c"
 var $44=HEAP32[(($arrayidx32)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx33=(($ScanfArg+4)|0); //@line 341 "cstdlib/stdio.c"
 var $45=HEAP32[(($arrayidx33)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx34=(($ScanfArg+8)|0); //@line 341 "cstdlib/stdio.c"
 var $46=HEAP32[(($arrayidx34)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx35=(($ScanfArg+12)|0); //@line 341 "cstdlib/stdio.c"
 var $47=HEAP32[(($arrayidx35)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx36=(($ScanfArg+16)|0); //@line 341 "cstdlib/stdio.c"
 var $48=HEAP32[(($arrayidx36)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx37=(($ScanfArg+20)|0); //@line 341 "cstdlib/stdio.c"
 var $49=HEAP32[(($arrayidx37)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx38=(($ScanfArg+24)|0); //@line 341 "cstdlib/stdio.c"
 var $50=HEAP32[(($arrayidx38)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx39=(($ScanfArg+28)|0); //@line 341 "cstdlib/stdio.c"
 var $51=HEAP32[(($arrayidx39)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx40=(($ScanfArg+32)|0); //@line 341 "cstdlib/stdio.c"
 var $52=HEAP32[(($arrayidx40)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $arrayidx41=(($ScanfArg+36)|0); //@line 341 "cstdlib/stdio.c"
 var $53=HEAP32[(($arrayidx41)>>2)]; //@line 341 "cstdlib/stdio.c"
 var $call42=_sscanf($42,$43,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 80)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$44,HEAP32[(((tempVarArgs)+(8))>>2)]=$45,HEAP32[(((tempVarArgs)+(16))>>2)]=$46,HEAP32[(((tempVarArgs)+(24))>>2)]=$47,HEAP32[(((tempVarArgs)+(32))>>2)]=$48,HEAP32[(((tempVarArgs)+(40))>>2)]=$49,HEAP32[(((tempVarArgs)+(48))>>2)]=$50,HEAP32[(((tempVarArgs)+(56))>>2)]=$51,HEAP32[(((tempVarArgs)+(64))>>2)]=$52,HEAP32[(((tempVarArgs)+(72))>>2)]=$53,tempVarArgs)); STACKTOP=tempVarArgs; //@line 341 "cstdlib/stdio.c"
 $retval=$call42; //@line 341 "cstdlib/stdio.c"
 label=16;break; //@line 341 "cstdlib/stdio.c"
 case 16: 
 var $54=$retval; //@line 342 "cstdlib/stdio.c"
 STACKTOP=sp;return $54; //@line 342 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioFopen($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 347 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 347 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 347 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 347 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 347 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 347 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 347 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $Pointer3=$6; //@line 347 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $call=_fopen($3,$7); //@line 347 "cstdlib/stdio.c"
 var $8=$call; //@line 347 "cstdlib/stdio.c"
 var $9=$ReturnValue_addr; //@line 347 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 347 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 347 "cstdlib/stdio.c"
 var $Pointer5=$10; //@line 347 "cstdlib/stdio.c"
 HEAP32[(($Pointer5)>>2)]=$8; //@line 347 "cstdlib/stdio.c"
 return; //@line 348 "cstdlib/stdio.c"
}
function _StdioFreopen($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 352 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 352 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 352 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 352 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 352 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 352 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 352 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Pointer3=$6; //@line 352 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 352 "cstdlib/stdio.c"
 var $arrayidx4=(($8+8)|0); //@line 352 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Val5=(($9+4)|0); //@line 352 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Pointer6=$10; //@line 352 "cstdlib/stdio.c"
 var $11=HEAP32[(($Pointer6)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $12=$11; //@line 352 "cstdlib/stdio.c"
 var $call=_freopen($3,$7,$12); //@line 352 "cstdlib/stdio.c"
 var $13=$call; //@line 352 "cstdlib/stdio.c"
 var $14=$ReturnValue_addr; //@line 352 "cstdlib/stdio.c"
 var $Val7=(($14+4)|0); //@line 352 "cstdlib/stdio.c"
 var $15=HEAP32[(($Val7)>>2)]; //@line 352 "cstdlib/stdio.c"
 var $Pointer8=$15; //@line 352 "cstdlib/stdio.c"
 HEAP32[(($Pointer8)>>2)]=$13; //@line 352 "cstdlib/stdio.c"
 return; //@line 353 "cstdlib/stdio.c"
}
function _StdioFclose($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 357 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 357 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 357 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 357 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 357 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 357 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 357 "cstdlib/stdio.c"
 var $4=$3; //@line 357 "cstdlib/stdio.c"
 var $call=_fclose($4); //@line 357 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 357 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 357 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 357 "cstdlib/stdio.c"
 var $Integer=$6; //@line 357 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 357 "cstdlib/stdio.c"
 return; //@line 358 "cstdlib/stdio.c"
}
function _StdioFread($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 362 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 362 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 362 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 362 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 362 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 362 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 362 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Integer=$6; //@line 362 "cstdlib/stdio.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 362 "cstdlib/stdio.c"
 var $arrayidx3=(($8+8)|0); //@line 362 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 362 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Integer5=$10; //@line 362 "cstdlib/stdio.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $12=$Param_addr; //@line 362 "cstdlib/stdio.c"
 var $arrayidx6=(($12+12)|0); //@line 362 "cstdlib/stdio.c"
 var $13=HEAP32[(($arrayidx6)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Val7=(($13+4)|0); //@line 362 "cstdlib/stdio.c"
 var $14=HEAP32[(($Val7)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Pointer8=$14; //@line 362 "cstdlib/stdio.c"
 var $15=HEAP32[(($Pointer8)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $16=$15; //@line 362 "cstdlib/stdio.c"
 var $call=_fread($3,$7,$11,$16); //@line 362 "cstdlib/stdio.c"
 var $17=$ReturnValue_addr; //@line 362 "cstdlib/stdio.c"
 var $Val9=(($17+4)|0); //@line 362 "cstdlib/stdio.c"
 var $18=HEAP32[(($Val9)>>2)]; //@line 362 "cstdlib/stdio.c"
 var $Integer10=$18; //@line 362 "cstdlib/stdio.c"
 HEAP32[(($Integer10)>>2)]=$call; //@line 362 "cstdlib/stdio.c"
 return; //@line 363 "cstdlib/stdio.c"
}
function _StdioFwrite($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 367 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 367 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 367 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 367 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 367 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 367 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 367 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Integer=$6; //@line 367 "cstdlib/stdio.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 367 "cstdlib/stdio.c"
 var $arrayidx3=(($8+8)|0); //@line 367 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 367 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Integer5=$10; //@line 367 "cstdlib/stdio.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $12=$Param_addr; //@line 367 "cstdlib/stdio.c"
 var $arrayidx6=(($12+12)|0); //@line 367 "cstdlib/stdio.c"
 var $13=HEAP32[(($arrayidx6)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Val7=(($13+4)|0); //@line 367 "cstdlib/stdio.c"
 var $14=HEAP32[(($Val7)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Pointer8=$14; //@line 367 "cstdlib/stdio.c"
 var $15=HEAP32[(($Pointer8)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $16=$15; //@line 367 "cstdlib/stdio.c"
 var $call=_fwrite($3,$7,$11,$16); //@line 367 "cstdlib/stdio.c"
 var $17=$ReturnValue_addr; //@line 367 "cstdlib/stdio.c"
 var $Val9=(($17+4)|0); //@line 367 "cstdlib/stdio.c"
 var $18=HEAP32[(($Val9)>>2)]; //@line 367 "cstdlib/stdio.c"
 var $Integer10=$18; //@line 367 "cstdlib/stdio.c"
 HEAP32[(($Integer10)>>2)]=$call; //@line 367 "cstdlib/stdio.c"
 return; //@line 368 "cstdlib/stdio.c"
}
function _StdioFgetc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 372 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 372 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 372 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 372 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 372 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 372 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 372 "cstdlib/stdio.c"
 var $4=$3; //@line 372 "cstdlib/stdio.c"
 var $call=_fgetc($4); //@line 372 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 372 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 372 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 372 "cstdlib/stdio.c"
 var $Integer=$6; //@line 372 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 372 "cstdlib/stdio.c"
 return; //@line 373 "cstdlib/stdio.c"
}
function _StdioFgets($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 377 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 377 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 377 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 377 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 377 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 377 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 377 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Integer=$6; //@line 377 "cstdlib/stdio.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 377 "cstdlib/stdio.c"
 var $arrayidx3=(($8+8)|0); //@line 377 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 377 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Pointer5=$10; //@line 377 "cstdlib/stdio.c"
 var $11=HEAP32[(($Pointer5)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $12=$11; //@line 377 "cstdlib/stdio.c"
 var $call=_fgets($3,$7,$12); //@line 377 "cstdlib/stdio.c"
 var $13=$ReturnValue_addr; //@line 377 "cstdlib/stdio.c"
 var $Val6=(($13+4)|0); //@line 377 "cstdlib/stdio.c"
 var $14=HEAP32[(($Val6)>>2)]; //@line 377 "cstdlib/stdio.c"
 var $Pointer7=$14; //@line 377 "cstdlib/stdio.c"
 HEAP32[(($Pointer7)>>2)]=$call; //@line 377 "cstdlib/stdio.c"
 return; //@line 378 "cstdlib/stdio.c"
}
function _StdioRemove($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 382 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 382 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 382 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 382 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 382 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 382 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 382 "cstdlib/stdio.c"
 var $call=_remove($3); //@line 382 "cstdlib/stdio.c"
 var $4=$ReturnValue_addr; //@line 382 "cstdlib/stdio.c"
 var $Val1=(($4+4)|0); //@line 382 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 382 "cstdlib/stdio.c"
 var $Integer=$5; //@line 382 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 382 "cstdlib/stdio.c"
 return; //@line 383 "cstdlib/stdio.c"
}
function _StdioRename($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 387 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 387 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 387 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 387 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 387 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 387 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 387 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $Pointer3=$6; //@line 387 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $call=_rename($3,$7); //@line 387 "cstdlib/stdio.c"
 var $8=$ReturnValue_addr; //@line 387 "cstdlib/stdio.c"
 var $Val4=(($8+4)|0); //@line 387 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 387 "cstdlib/stdio.c"
 var $Integer=$9; //@line 387 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 387 "cstdlib/stdio.c"
 return; //@line 388 "cstdlib/stdio.c"
}
function _StdioRewind($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 392 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 392 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 392 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 392 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 392 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 392 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 392 "cstdlib/stdio.c"
 var $4=$3; //@line 392 "cstdlib/stdio.c"
 _rewind($4); //@line 392 "cstdlib/stdio.c"
 return; //@line 393 "cstdlib/stdio.c"
}
function _StdioTmpfile($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_tmpfile(); //@line 397 "cstdlib/stdio.c"
 var $0=$call; //@line 397 "cstdlib/stdio.c"
 var $1=$ReturnValue_addr; //@line 397 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 397 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 397 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 397 "cstdlib/stdio.c"
 HEAP32[(($Pointer)>>2)]=$0; //@line 397 "cstdlib/stdio.c"
 return; //@line 398 "cstdlib/stdio.c"
}
function _StdioClearerr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 402 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 402 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 402 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 402 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 402 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 402 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 402 "cstdlib/stdio.c"
 var $4=$3; //@line 402 "cstdlib/stdio.c"
 _clearerr($4); //@line 402 "cstdlib/stdio.c"
 return; //@line 403 "cstdlib/stdio.c"
}
function _StdioFeof($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 407 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 407 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 407 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 407 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 407 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 407 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 407 "cstdlib/stdio.c"
 var $4=$3; //@line 407 "cstdlib/stdio.c"
 var $call=_feof($4); //@line 407 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 407 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 407 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 407 "cstdlib/stdio.c"
 var $Integer=$6; //@line 407 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 407 "cstdlib/stdio.c"
 return; //@line 408 "cstdlib/stdio.c"
}
function _StdioFerror($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 412 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 412 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 412 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 412 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 412 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 412 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 412 "cstdlib/stdio.c"
 var $4=$3; //@line 412 "cstdlib/stdio.c"
 var $call=_ferror($4); //@line 412 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 412 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 412 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 412 "cstdlib/stdio.c"
 var $Integer=$6; //@line 412 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 412 "cstdlib/stdio.c"
 return; //@line 413 "cstdlib/stdio.c"
}
function _StdioFileno($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 417 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 417 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 417 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 417 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 417 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 417 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 417 "cstdlib/stdio.c"
 var $4=$3; //@line 417 "cstdlib/stdio.c"
 var $call=_fileno($4); //@line 417 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 417 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 417 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 417 "cstdlib/stdio.c"
 var $Integer=$6; //@line 417 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 417 "cstdlib/stdio.c"
 return; //@line 418 "cstdlib/stdio.c"
}
function _StdioFflush($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 422 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 422 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 422 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 422 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 422 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 422 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 422 "cstdlib/stdio.c"
 var $4=$3; //@line 422 "cstdlib/stdio.c"
 var $call=_fflush($4); //@line 422 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 422 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 422 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 422 "cstdlib/stdio.c"
 var $Integer=$6; //@line 422 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 422 "cstdlib/stdio.c"
 return; //@line 423 "cstdlib/stdio.c"
}
function _StdioFgetpos($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 427 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 427 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 427 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 427 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $4=$3; //@line 427 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 427 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 427 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 427 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 427 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $9=$8; //@line 427 "cstdlib/stdio.c"
 var $call=_fgetpos($4,$9); //@line 427 "cstdlib/stdio.c"
 var $10=$ReturnValue_addr; //@line 427 "cstdlib/stdio.c"
 var $Val4=(($10+4)|0); //@line 427 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val4)>>2)]; //@line 427 "cstdlib/stdio.c"
 var $Integer=$11; //@line 427 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 427 "cstdlib/stdio.c"
 return; //@line 428 "cstdlib/stdio.c"
}
function _StdioFsetpos($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 432 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 432 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 432 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 432 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $4=$3; //@line 432 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 432 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 432 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 432 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 432 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $9=$8; //@line 432 "cstdlib/stdio.c"
 var $call=_fsetpos($4,$9); //@line 432 "cstdlib/stdio.c"
 var $10=$ReturnValue_addr; //@line 432 "cstdlib/stdio.c"
 var $Val4=(($10+4)|0); //@line 432 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val4)>>2)]; //@line 432 "cstdlib/stdio.c"
 var $Integer=$11; //@line 432 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 432 "cstdlib/stdio.c"
 return; //@line 433 "cstdlib/stdio.c"
}
function _StdioFputc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 437 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 437 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 437 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $Integer=$2; //@line 437 "cstdlib/stdio.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 437 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 437 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 437 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $Pointer=$6; //@line 437 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $8=$7; //@line 437 "cstdlib/stdio.c"
 var $call=_fputc($3,$8); //@line 437 "cstdlib/stdio.c"
 var $9=$ReturnValue_addr; //@line 437 "cstdlib/stdio.c"
 var $Val3=(($9+4)|0); //@line 437 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val3)>>2)]; //@line 437 "cstdlib/stdio.c"
 var $Integer4=$10; //@line 437 "cstdlib/stdio.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 437 "cstdlib/stdio.c"
 return; //@line 438 "cstdlib/stdio.c"
}
function _StdioFputs($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 442 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 442 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 442 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 442 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 442 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 442 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 442 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $Pointer3=$6; //@line 442 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $8=$7; //@line 442 "cstdlib/stdio.c"
 var $call=_fputs($3,$8); //@line 442 "cstdlib/stdio.c"
 var $9=$ReturnValue_addr; //@line 442 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 442 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 442 "cstdlib/stdio.c"
 var $Integer=$10; //@line 442 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 442 "cstdlib/stdio.c"
 return; //@line 443 "cstdlib/stdio.c"
}
function _StdioFtell($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 447 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 447 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 447 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 447 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 447 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 447 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 447 "cstdlib/stdio.c"
 var $4=$3; //@line 447 "cstdlib/stdio.c"
 var $call=_ftell($4); //@line 447 "cstdlib/stdio.c"
 var $5=$ReturnValue_addr; //@line 447 "cstdlib/stdio.c"
 var $Val1=(($5+4)|0); //@line 447 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 447 "cstdlib/stdio.c"
 var $Integer=$6; //@line 447 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 447 "cstdlib/stdio.c"
 return; //@line 448 "cstdlib/stdio.c"
}
function _StdioFseek($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 452 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 452 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 452 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 452 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $4=$3; //@line 452 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 452 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 452 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 452 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Integer=$7; //@line 452 "cstdlib/stdio.c"
 var $8=HEAP32[(($Integer)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $9=$Param_addr; //@line 452 "cstdlib/stdio.c"
 var $arrayidx3=(($9+8)|0); //@line 452 "cstdlib/stdio.c"
 var $10=HEAP32[(($arrayidx3)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Val4=(($10+4)|0); //@line 452 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val4)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Integer5=$11; //@line 452 "cstdlib/stdio.c"
 var $12=HEAP32[(($Integer5)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $call=_fseek($4,$8,$12); //@line 452 "cstdlib/stdio.c"
 var $13=$ReturnValue_addr; //@line 452 "cstdlib/stdio.c"
 var $Val6=(($13+4)|0); //@line 452 "cstdlib/stdio.c"
 var $14=HEAP32[(($Val6)>>2)]; //@line 452 "cstdlib/stdio.c"
 var $Integer7=$14; //@line 452 "cstdlib/stdio.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 452 "cstdlib/stdio.c"
 return; //@line 453 "cstdlib/stdio.c"
}
function _StdioPerror($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 457 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 457 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 457 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 457 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 457 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 457 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 457 "cstdlib/stdio.c"
 _perror($3); //@line 457 "cstdlib/stdio.c"
 return; //@line 458 "cstdlib/stdio.c"
}
function _StdioPutc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 462 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 462 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 462 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $Integer=$2; //@line 462 "cstdlib/stdio.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 462 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 462 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 462 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $Pointer=$6; //@line 462 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $8=$7; //@line 462 "cstdlib/stdio.c"
 var $call=_fputc($3,$8); //@line 462 "cstdlib/stdio.c"
 var $9=$ReturnValue_addr; //@line 462 "cstdlib/stdio.c"
 var $Val3=(($9+4)|0); //@line 462 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val3)>>2)]; //@line 462 "cstdlib/stdio.c"
 var $Integer4=$10; //@line 462 "cstdlib/stdio.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 462 "cstdlib/stdio.c"
 return; //@line 463 "cstdlib/stdio.c"
}
function _StdioPutchar($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 467 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 467 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 467 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 467 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 467 "cstdlib/stdio.c"
 var $Integer=$2; //@line 467 "cstdlib/stdio.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 467 "cstdlib/stdio.c"
 var $call=_putchar($3); //@line 467 "cstdlib/stdio.c"
 var $4=$ReturnValue_addr; //@line 467 "cstdlib/stdio.c"
 var $Val1=(($4+4)|0); //@line 467 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 467 "cstdlib/stdio.c"
 var $Integer2=$5; //@line 467 "cstdlib/stdio.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 467 "cstdlib/stdio.c"
 return; //@line 468 "cstdlib/stdio.c"
}
function _StdioSetbuf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 472 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 472 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 472 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 472 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 472 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 472 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 472 "cstdlib/stdio.c"
 var $4=$3; //@line 472 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 472 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 472 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 472 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 472 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 472 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 472 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 472 "cstdlib/stdio.c"
 _setbuf($4,$8); //@line 472 "cstdlib/stdio.c"
 return; //@line 473 "cstdlib/stdio.c"
}
function _StdioSetvbuf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 477 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 477 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 477 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 477 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $4=$3; //@line 477 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 477 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 477 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 477 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 477 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $9=$Param_addr; //@line 477 "cstdlib/stdio.c"
 var $arrayidx4=(($9+8)|0); //@line 477 "cstdlib/stdio.c"
 var $10=HEAP32[(($arrayidx4)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Val5=(($10+4)|0); //@line 477 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val5)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Integer=$11; //@line 477 "cstdlib/stdio.c"
 var $12=HEAP32[(($Integer)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $13=$Param_addr; //@line 477 "cstdlib/stdio.c"
 var $arrayidx6=(($13+12)|0); //@line 477 "cstdlib/stdio.c"
 var $14=HEAP32[(($arrayidx6)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Val7=(($14+4)|0); //@line 477 "cstdlib/stdio.c"
 var $15=HEAP32[(($Val7)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $Integer8=$15; //@line 477 "cstdlib/stdio.c"
 var $16=HEAP32[(($Integer8)>>2)]; //@line 477 "cstdlib/stdio.c"
 var $call=_setvbuf($4,$8,$12,$16); //@line 477 "cstdlib/stdio.c"
 return; //@line 478 "cstdlib/stdio.c"
}
function _StdioUngetc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 482 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 482 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 482 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $Integer=$2; //@line 482 "cstdlib/stdio.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 482 "cstdlib/stdio.c"
 var $arrayidx1=(($4+4)|0); //@line 482 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $Val2=(($5+4)|0); //@line 482 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $Pointer=$6; //@line 482 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $8=$7; //@line 482 "cstdlib/stdio.c"
 var $call=_ungetc($3,$8); //@line 482 "cstdlib/stdio.c"
 var $9=$ReturnValue_addr; //@line 482 "cstdlib/stdio.c"
 var $Val3=(($9+4)|0); //@line 482 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val3)>>2)]; //@line 482 "cstdlib/stdio.c"
 var $Integer4=$10; //@line 482 "cstdlib/stdio.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 482 "cstdlib/stdio.c"
 return; //@line 483 "cstdlib/stdio.c"
}
function _StdioPuts($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 487 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 487 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 487 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 487 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 487 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 487 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 487 "cstdlib/stdio.c"
 var $call=_puts($3); //@line 487 "cstdlib/stdio.c"
 var $4=$ReturnValue_addr; //@line 487 "cstdlib/stdio.c"
 var $Val1=(($4+4)|0); //@line 487 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 487 "cstdlib/stdio.c"
 var $Integer=$5; //@line 487 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 487 "cstdlib/stdio.c"
 return; //@line 488 "cstdlib/stdio.c"
}
function _StdioGets($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $EOLPos;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 492 "cstdlib/stdio.c"
 var $arrayidx=(($0)|0); //@line 492 "cstdlib/stdio.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $Val=(($1+4)|0); //@line 492 "cstdlib/stdio.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $Pointer=$2; //@line 492 "cstdlib/stdio.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $4=HEAP32[((15528)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $5=HEAP32[((_stdin)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $call=_fgets($3,$4,$5); //@line 492 "cstdlib/stdio.c"
 var $6=$ReturnValue_addr; //@line 492 "cstdlib/stdio.c"
 var $Val1=(($6+4)|0); //@line 492 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val1)>>2)]; //@line 492 "cstdlib/stdio.c"
 var $Pointer2=$7; //@line 492 "cstdlib/stdio.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 492 "cstdlib/stdio.c"
 var $8=$ReturnValue_addr; //@line 493 "cstdlib/stdio.c"
 var $Val3=(($8+4)|0); //@line 493 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 493 "cstdlib/stdio.c"
 var $Pointer4=$9; //@line 493 "cstdlib/stdio.c"
 var $10=HEAP32[(($Pointer4)>>2)]; //@line 493 "cstdlib/stdio.c"
 var $cmp=($10|0)!=0; //@line 493 "cstdlib/stdio.c"
 if($cmp){label=2;break;}else{label=5;break;} //@line 493 "cstdlib/stdio.c"
 case 2: 
 var $11=$Param_addr; //@line 495 "cstdlib/stdio.c"
 var $arrayidx5=(($11)|0); //@line 495 "cstdlib/stdio.c"
 var $12=HEAP32[(($arrayidx5)>>2)]; //@line 495 "cstdlib/stdio.c"
 var $Val6=(($12+4)|0); //@line 495 "cstdlib/stdio.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 495 "cstdlib/stdio.c"
 var $Pointer7=$13; //@line 495 "cstdlib/stdio.c"
 var $14=HEAP32[(($Pointer7)>>2)]; //@line 495 "cstdlib/stdio.c"
 var $call8=_strchr($14,10); //@line 495 "cstdlib/stdio.c"
 $EOLPos=$call8; //@line 495 "cstdlib/stdio.c"
 var $15=$EOLPos; //@line 496 "cstdlib/stdio.c"
 var $cmp9=($15|0)!=0; //@line 496 "cstdlib/stdio.c"
 if($cmp9){label=3;break;}else{label=4;break;} //@line 496 "cstdlib/stdio.c"
 case 3: 
 var $16=$EOLPos; //@line 497 "cstdlib/stdio.c"
 HEAP8[($16)]=0; //@line 497 "cstdlib/stdio.c"
 label=4;break; //@line 497 "cstdlib/stdio.c"
 case 4: 
 label=5;break; //@line 498 "cstdlib/stdio.c"
 case 5: 
 return; //@line 499 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdioGetchar($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getchar(); //@line 503 "cstdlib/stdio.c"
 var $0=$ReturnValue_addr; //@line 503 "cstdlib/stdio.c"
 var $Val=(($0+4)|0); //@line 503 "cstdlib/stdio.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 503 "cstdlib/stdio.c"
 var $Integer=$1; //@line 503 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 503 "cstdlib/stdio.c"
 return; //@line 504 "cstdlib/stdio.c"
}
function _StdioPrintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $PrintfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 510 "cstdlib/stdio.c"
 var $Param1=(($PrintfArgs)|0); //@line 510 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$0; //@line 510 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 511 "cstdlib/stdio.c"
 var $sub=((($1)-(1))|0); //@line 511 "cstdlib/stdio.c"
 var $NumArgs2=(($PrintfArgs+4)|0); //@line 511 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 511 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 512 "cstdlib/stdio.c"
 var $3=HEAP32[((_stdout)>>2)]; //@line 512 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 512 "cstdlib/stdio.c"
 var $arrayidx=(($4)|0); //@line 512 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx)>>2)]; //@line 512 "cstdlib/stdio.c"
 var $Val=(($5+4)|0); //@line 512 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val)>>2)]; //@line 512 "cstdlib/stdio.c"
 var $Pointer=$6; //@line 512 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 512 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($2,$3,0,0,$7,$PrintfArgs); //@line 512 "cstdlib/stdio.c"
 var $8=$ReturnValue_addr; //@line 512 "cstdlib/stdio.c"
 var $Val3=(($8+4)|0); //@line 512 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 512 "cstdlib/stdio.c"
 var $Integer=$9; //@line 512 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 512 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 513 "cstdlib/stdio.c"
}
function _StdioVprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 517 "cstdlib/stdio.c"
 var $1=HEAP32[((_stdout)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $2=$Param_addr; //@line 517 "cstdlib/stdio.c"
 var $arrayidx=(($2)|0); //@line 517 "cstdlib/stdio.c"
 var $3=HEAP32[(($arrayidx)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $Val=(($3+4)|0); //@line 517 "cstdlib/stdio.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $Pointer=$4; //@line 517 "cstdlib/stdio.c"
 var $5=HEAP32[(($Pointer)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $6=$Param_addr; //@line 517 "cstdlib/stdio.c"
 var $arrayidx1=(($6+4)|0); //@line 517 "cstdlib/stdio.c"
 var $7=HEAP32[(($arrayidx1)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $Val2=(($7+4)|0); //@line 517 "cstdlib/stdio.c"
 var $8=HEAP32[(($Val2)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $Pointer3=$8; //@line 517 "cstdlib/stdio.c"
 var $9=HEAP32[(($Pointer3)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $10=$9; //@line 517 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($0,$1,0,0,$5,$10); //@line 517 "cstdlib/stdio.c"
 var $11=$ReturnValue_addr; //@line 517 "cstdlib/stdio.c"
 var $Val4=(($11+4)|0); //@line 517 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val4)>>2)]; //@line 517 "cstdlib/stdio.c"
 var $Integer=$12; //@line 517 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 517 "cstdlib/stdio.c"
 return; //@line 518 "cstdlib/stdio.c"
}
function _StdioFprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $PrintfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 524 "cstdlib/stdio.c"
 var $add_ptr=(($0+4)|0); //@line 524 "cstdlib/stdio.c"
 var $Param1=(($PrintfArgs)|0); //@line 524 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$add_ptr; //@line 524 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 525 "cstdlib/stdio.c"
 var $sub=((($1)-(2))|0); //@line 525 "cstdlib/stdio.c"
 var $NumArgs2=(($PrintfArgs+4)|0); //@line 525 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 525 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 526 "cstdlib/stdio.c"
 var $3=$Param_addr; //@line 526 "cstdlib/stdio.c"
 var $arrayidx=(($3)|0); //@line 526 "cstdlib/stdio.c"
 var $4=HEAP32[(($arrayidx)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $Val=(($4+4)|0); //@line 526 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $Pointer=$5; //@line 526 "cstdlib/stdio.c"
 var $6=HEAP32[(($Pointer)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $7=$6; //@line 526 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 526 "cstdlib/stdio.c"
 var $arrayidx3=(($8+4)|0); //@line 526 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 526 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $Pointer5=$10; //@line 526 "cstdlib/stdio.c"
 var $11=HEAP32[(($Pointer5)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($2,$7,0,0,$11,$PrintfArgs); //@line 526 "cstdlib/stdio.c"
 var $12=$ReturnValue_addr; //@line 526 "cstdlib/stdio.c"
 var $Val6=(($12+4)|0); //@line 526 "cstdlib/stdio.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 526 "cstdlib/stdio.c"
 var $Integer=$13; //@line 526 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 526 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 527 "cstdlib/stdio.c"
}
function _StdioVfprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 531 "cstdlib/stdio.c"
 var $1=$Param_addr; //@line 531 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 531 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Val=(($2+4)|0); //@line 531 "cstdlib/stdio.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Pointer=$3; //@line 531 "cstdlib/stdio.c"
 var $4=HEAP32[(($Pointer)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $5=$4; //@line 531 "cstdlib/stdio.c"
 var $6=$Param_addr; //@line 531 "cstdlib/stdio.c"
 var $arrayidx1=(($6+4)|0); //@line 531 "cstdlib/stdio.c"
 var $7=HEAP32[(($arrayidx1)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Val2=(($7+4)|0); //@line 531 "cstdlib/stdio.c"
 var $8=HEAP32[(($Val2)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Pointer3=$8; //@line 531 "cstdlib/stdio.c"
 var $9=HEAP32[(($Pointer3)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $10=$Param_addr; //@line 531 "cstdlib/stdio.c"
 var $arrayidx4=(($10+8)|0); //@line 531 "cstdlib/stdio.c"
 var $11=HEAP32[(($arrayidx4)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Val5=(($11+4)|0); //@line 531 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val5)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Pointer6=$12; //@line 531 "cstdlib/stdio.c"
 var $13=HEAP32[(($Pointer6)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $14=$13; //@line 531 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($0,$5,0,0,$9,$14); //@line 531 "cstdlib/stdio.c"
 var $15=$ReturnValue_addr; //@line 531 "cstdlib/stdio.c"
 var $Val7=(($15+4)|0); //@line 531 "cstdlib/stdio.c"
 var $16=HEAP32[(($Val7)>>2)]; //@line 531 "cstdlib/stdio.c"
 var $Integer=$16; //@line 531 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 531 "cstdlib/stdio.c"
 return; //@line 532 "cstdlib/stdio.c"
}
function _StdioSprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $PrintfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 538 "cstdlib/stdio.c"
 var $add_ptr=(($0+4)|0); //@line 538 "cstdlib/stdio.c"
 var $Param1=(($PrintfArgs)|0); //@line 538 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$add_ptr; //@line 538 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 539 "cstdlib/stdio.c"
 var $sub=((($1)-(2))|0); //@line 539 "cstdlib/stdio.c"
 var $NumArgs2=(($PrintfArgs+4)|0); //@line 539 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 539 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 540 "cstdlib/stdio.c"
 var $3=$Param_addr; //@line 540 "cstdlib/stdio.c"
 var $arrayidx=(($3)|0); //@line 540 "cstdlib/stdio.c"
 var $4=HEAP32[(($arrayidx)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $Val=(($4+4)|0); //@line 540 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $Pointer=$5; //@line 540 "cstdlib/stdio.c"
 var $6=HEAP32[(($Pointer)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $7=$Param_addr; //@line 540 "cstdlib/stdio.c"
 var $arrayidx3=(($7+4)|0); //@line 540 "cstdlib/stdio.c"
 var $8=HEAP32[(($arrayidx3)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $Val4=(($8+4)|0); //@line 540 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $Pointer5=$9; //@line 540 "cstdlib/stdio.c"
 var $10=HEAP32[(($Pointer5)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($2,0,$6,-1,$10,$PrintfArgs); //@line 540 "cstdlib/stdio.c"
 var $11=$ReturnValue_addr; //@line 540 "cstdlib/stdio.c"
 var $Val6=(($11+4)|0); //@line 540 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val6)>>2)]; //@line 540 "cstdlib/stdio.c"
 var $Integer=$12; //@line 540 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 540 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 541 "cstdlib/stdio.c"
}
function _StdioSnprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $PrintfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 547 "cstdlib/stdio.c"
 var $add_ptr=(($0+8)|0); //@line 547 "cstdlib/stdio.c"
 var $Param1=(($PrintfArgs)|0); //@line 547 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$add_ptr; //@line 547 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 548 "cstdlib/stdio.c"
 var $sub=((($1)-(3))|0); //@line 548 "cstdlib/stdio.c"
 var $NumArgs2=(($PrintfArgs+4)|0); //@line 548 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 548 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 549 "cstdlib/stdio.c"
 var $3=$Param_addr; //@line 549 "cstdlib/stdio.c"
 var $arrayidx=(($3)|0); //@line 549 "cstdlib/stdio.c"
 var $4=HEAP32[(($arrayidx)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Val=(($4+4)|0); //@line 549 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Pointer=$5; //@line 549 "cstdlib/stdio.c"
 var $6=HEAP32[(($Pointer)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $7=$Param_addr; //@line 549 "cstdlib/stdio.c"
 var $arrayidx3=(($7+4)|0); //@line 549 "cstdlib/stdio.c"
 var $8=HEAP32[(($arrayidx3)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Val4=(($8+4)|0); //@line 549 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Integer=$9; //@line 549 "cstdlib/stdio.c"
 var $10=HEAP32[(($Integer)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $11=$Param_addr; //@line 549 "cstdlib/stdio.c"
 var $arrayidx5=(($11+8)|0); //@line 549 "cstdlib/stdio.c"
 var $12=HEAP32[(($arrayidx5)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Val6=(($12+4)|0); //@line 549 "cstdlib/stdio.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Pointer7=$13; //@line 549 "cstdlib/stdio.c"
 var $14=HEAP32[(($Pointer7)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($2,0,$6,$10,$14,$PrintfArgs); //@line 549 "cstdlib/stdio.c"
 var $15=$ReturnValue_addr; //@line 549 "cstdlib/stdio.c"
 var $Val8=(($15+4)|0); //@line 549 "cstdlib/stdio.c"
 var $16=HEAP32[(($Val8)>>2)]; //@line 549 "cstdlib/stdio.c"
 var $Integer9=$16; //@line 549 "cstdlib/stdio.c"
 HEAP32[(($Integer9)>>2)]=$call; //@line 549 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 550 "cstdlib/stdio.c"
}
function _StdioScanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $ScanfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 556 "cstdlib/stdio.c"
 var $Param1=(($ScanfArgs)|0); //@line 556 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$0; //@line 556 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 557 "cstdlib/stdio.c"
 var $sub=((($1)-(1))|0); //@line 557 "cstdlib/stdio.c"
 var $NumArgs2=(($ScanfArgs+4)|0); //@line 557 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 557 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 558 "cstdlib/stdio.c"
 var $3=HEAP32[((_stdin)>>2)]; //@line 558 "cstdlib/stdio.c"
 var $4=$Param_addr; //@line 558 "cstdlib/stdio.c"
 var $arrayidx=(($4)|0); //@line 558 "cstdlib/stdio.c"
 var $5=HEAP32[(($arrayidx)>>2)]; //@line 558 "cstdlib/stdio.c"
 var $Val=(($5+4)|0); //@line 558 "cstdlib/stdio.c"
 var $6=HEAP32[(($Val)>>2)]; //@line 558 "cstdlib/stdio.c"
 var $Pointer=$6; //@line 558 "cstdlib/stdio.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 558 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($2,$3,0,$7,$ScanfArgs); //@line 558 "cstdlib/stdio.c"
 var $8=$ReturnValue_addr; //@line 558 "cstdlib/stdio.c"
 var $Val3=(($8+4)|0); //@line 558 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 558 "cstdlib/stdio.c"
 var $Integer=$9; //@line 558 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 558 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 559 "cstdlib/stdio.c"
}
function _StdioFscanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $ScanfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 565 "cstdlib/stdio.c"
 var $add_ptr=(($0+4)|0); //@line 565 "cstdlib/stdio.c"
 var $Param1=(($ScanfArgs)|0); //@line 565 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$add_ptr; //@line 565 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 566 "cstdlib/stdio.c"
 var $sub=((($1)-(2))|0); //@line 566 "cstdlib/stdio.c"
 var $NumArgs2=(($ScanfArgs+4)|0); //@line 566 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 566 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 567 "cstdlib/stdio.c"
 var $3=$Param_addr; //@line 567 "cstdlib/stdio.c"
 var $arrayidx=(($3)|0); //@line 567 "cstdlib/stdio.c"
 var $4=HEAP32[(($arrayidx)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $Val=(($4+4)|0); //@line 567 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $Pointer=$5; //@line 567 "cstdlib/stdio.c"
 var $6=HEAP32[(($Pointer)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $7=$6; //@line 567 "cstdlib/stdio.c"
 var $8=$Param_addr; //@line 567 "cstdlib/stdio.c"
 var $arrayidx3=(($8+4)|0); //@line 567 "cstdlib/stdio.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $Val4=(($9+4)|0); //@line 567 "cstdlib/stdio.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $Pointer5=$10; //@line 567 "cstdlib/stdio.c"
 var $11=HEAP32[(($Pointer5)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($2,$7,0,$11,$ScanfArgs); //@line 567 "cstdlib/stdio.c"
 var $12=$ReturnValue_addr; //@line 567 "cstdlib/stdio.c"
 var $Val6=(($12+4)|0); //@line 567 "cstdlib/stdio.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 567 "cstdlib/stdio.c"
 var $Integer=$13; //@line 567 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 567 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 568 "cstdlib/stdio.c"
}
function _StdioSscanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $ScanfArgs=sp;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 574 "cstdlib/stdio.c"
 var $add_ptr=(($0+4)|0); //@line 574 "cstdlib/stdio.c"
 var $Param1=(($ScanfArgs)|0); //@line 574 "cstdlib/stdio.c"
 HEAP32[(($Param1)>>2)]=$add_ptr; //@line 574 "cstdlib/stdio.c"
 var $1=$NumArgs_addr; //@line 575 "cstdlib/stdio.c"
 var $sub=((($1)-(2))|0); //@line 575 "cstdlib/stdio.c"
 var $NumArgs2=(($ScanfArgs+4)|0); //@line 575 "cstdlib/stdio.c"
 HEAP32[(($NumArgs2)>>2)]=$sub; //@line 575 "cstdlib/stdio.c"
 var $2=$Parser_addr; //@line 576 "cstdlib/stdio.c"
 var $3=$Param_addr; //@line 576 "cstdlib/stdio.c"
 var $arrayidx=(($3)|0); //@line 576 "cstdlib/stdio.c"
 var $4=HEAP32[(($arrayidx)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $Val=(($4+4)|0); //@line 576 "cstdlib/stdio.c"
 var $5=HEAP32[(($Val)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $Pointer=$5; //@line 576 "cstdlib/stdio.c"
 var $6=HEAP32[(($Pointer)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $7=$Param_addr; //@line 576 "cstdlib/stdio.c"
 var $arrayidx3=(($7+4)|0); //@line 576 "cstdlib/stdio.c"
 var $8=HEAP32[(($arrayidx3)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $Val4=(($8+4)|0); //@line 576 "cstdlib/stdio.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $Pointer5=$9; //@line 576 "cstdlib/stdio.c"
 var $10=HEAP32[(($Pointer5)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($2,0,$6,$10,$ScanfArgs); //@line 576 "cstdlib/stdio.c"
 var $11=$ReturnValue_addr; //@line 576 "cstdlib/stdio.c"
 var $Val6=(($11+4)|0); //@line 576 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val6)>>2)]; //@line 576 "cstdlib/stdio.c"
 var $Integer=$12; //@line 576 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 576 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 577 "cstdlib/stdio.c"
}
function _StdioVsprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 581 "cstdlib/stdio.c"
 var $1=$Param_addr; //@line 581 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 581 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Val=(($2+4)|0); //@line 581 "cstdlib/stdio.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Pointer=$3; //@line 581 "cstdlib/stdio.c"
 var $4=HEAP32[(($Pointer)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 581 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 581 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 581 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 581 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $9=$Param_addr; //@line 581 "cstdlib/stdio.c"
 var $arrayidx4=(($9+8)|0); //@line 581 "cstdlib/stdio.c"
 var $10=HEAP32[(($arrayidx4)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Val5=(($10+4)|0); //@line 581 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val5)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Pointer6=$11; //@line 581 "cstdlib/stdio.c"
 var $12=HEAP32[(($Pointer6)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $13=$12; //@line 581 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($0,0,$4,-1,$8,$13); //@line 581 "cstdlib/stdio.c"
 var $14=$ReturnValue_addr; //@line 581 "cstdlib/stdio.c"
 var $Val7=(($14+4)|0); //@line 581 "cstdlib/stdio.c"
 var $15=HEAP32[(($Val7)>>2)]; //@line 581 "cstdlib/stdio.c"
 var $Integer=$15; //@line 581 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 581 "cstdlib/stdio.c"
 return; //@line 582 "cstdlib/stdio.c"
}
function _StdioVsnprintf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 586 "cstdlib/stdio.c"
 var $1=$Param_addr; //@line 586 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 586 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Val=(($2+4)|0); //@line 586 "cstdlib/stdio.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Pointer=$3; //@line 586 "cstdlib/stdio.c"
 var $4=HEAP32[(($Pointer)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 586 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 586 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 586 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Integer=$7; //@line 586 "cstdlib/stdio.c"
 var $8=HEAP32[(($Integer)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $9=$Param_addr; //@line 586 "cstdlib/stdio.c"
 var $arrayidx3=(($9+8)|0); //@line 586 "cstdlib/stdio.c"
 var $10=HEAP32[(($arrayidx3)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Val4=(($10+4)|0); //@line 586 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val4)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Pointer5=$11; //@line 586 "cstdlib/stdio.c"
 var $12=HEAP32[(($Pointer5)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $13=$Param_addr; //@line 586 "cstdlib/stdio.c"
 var $arrayidx6=(($13+12)|0); //@line 586 "cstdlib/stdio.c"
 var $14=HEAP32[(($arrayidx6)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Val7=(($14+4)|0); //@line 586 "cstdlib/stdio.c"
 var $15=HEAP32[(($Val7)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Pointer8=$15; //@line 586 "cstdlib/stdio.c"
 var $16=HEAP32[(($Pointer8)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $17=$16; //@line 586 "cstdlib/stdio.c"
 var $call=_StdioBasePrintf($0,0,$4,$8,$12,$17); //@line 586 "cstdlib/stdio.c"
 var $18=$ReturnValue_addr; //@line 586 "cstdlib/stdio.c"
 var $Val9=(($18+4)|0); //@line 586 "cstdlib/stdio.c"
 var $19=HEAP32[(($Val9)>>2)]; //@line 586 "cstdlib/stdio.c"
 var $Integer10=$19; //@line 586 "cstdlib/stdio.c"
 HEAP32[(($Integer10)>>2)]=$call; //@line 586 "cstdlib/stdio.c"
 return; //@line 587 "cstdlib/stdio.c"
}
function _StdioVscanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 591 "cstdlib/stdio.c"
 var $1=HEAP32[((_stdin)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $2=$Param_addr; //@line 591 "cstdlib/stdio.c"
 var $arrayidx=(($2)|0); //@line 591 "cstdlib/stdio.c"
 var $3=HEAP32[(($arrayidx)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $Val=(($3+4)|0); //@line 591 "cstdlib/stdio.c"
 var $4=HEAP32[(($Val)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $Pointer=$4; //@line 591 "cstdlib/stdio.c"
 var $5=HEAP32[(($Pointer)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $6=$Param_addr; //@line 591 "cstdlib/stdio.c"
 var $arrayidx1=(($6+4)|0); //@line 591 "cstdlib/stdio.c"
 var $7=HEAP32[(($arrayidx1)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $Val2=(($7+4)|0); //@line 591 "cstdlib/stdio.c"
 var $8=HEAP32[(($Val2)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $Pointer3=$8; //@line 591 "cstdlib/stdio.c"
 var $9=HEAP32[(($Pointer3)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $10=$9; //@line 591 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($0,$1,0,$5,$10); //@line 591 "cstdlib/stdio.c"
 var $11=$ReturnValue_addr; //@line 591 "cstdlib/stdio.c"
 var $Val4=(($11+4)|0); //@line 591 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val4)>>2)]; //@line 591 "cstdlib/stdio.c"
 var $Integer=$12; //@line 591 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 591 "cstdlib/stdio.c"
 return; //@line 592 "cstdlib/stdio.c"
}
function _StdioVfscanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 596 "cstdlib/stdio.c"
 var $1=$Param_addr; //@line 596 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 596 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Val=(($2+4)|0); //@line 596 "cstdlib/stdio.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Pointer=$3; //@line 596 "cstdlib/stdio.c"
 var $4=HEAP32[(($Pointer)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $5=$4; //@line 596 "cstdlib/stdio.c"
 var $6=$Param_addr; //@line 596 "cstdlib/stdio.c"
 var $arrayidx1=(($6+4)|0); //@line 596 "cstdlib/stdio.c"
 var $7=HEAP32[(($arrayidx1)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Val2=(($7+4)|0); //@line 596 "cstdlib/stdio.c"
 var $8=HEAP32[(($Val2)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Pointer3=$8; //@line 596 "cstdlib/stdio.c"
 var $9=HEAP32[(($Pointer3)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $10=$Param_addr; //@line 596 "cstdlib/stdio.c"
 var $arrayidx4=(($10+8)|0); //@line 596 "cstdlib/stdio.c"
 var $11=HEAP32[(($arrayidx4)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Val5=(($11+4)|0); //@line 596 "cstdlib/stdio.c"
 var $12=HEAP32[(($Val5)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Pointer6=$12; //@line 596 "cstdlib/stdio.c"
 var $13=HEAP32[(($Pointer6)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $14=$13; //@line 596 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($0,$5,0,$9,$14); //@line 596 "cstdlib/stdio.c"
 var $15=$ReturnValue_addr; //@line 596 "cstdlib/stdio.c"
 var $Val7=(($15+4)|0); //@line 596 "cstdlib/stdio.c"
 var $16=HEAP32[(($Val7)>>2)]; //@line 596 "cstdlib/stdio.c"
 var $Integer=$16; //@line 596 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 596 "cstdlib/stdio.c"
 return; //@line 597 "cstdlib/stdio.c"
}
function _StdioVsscanf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 601 "cstdlib/stdio.c"
 var $1=$Param_addr; //@line 601 "cstdlib/stdio.c"
 var $arrayidx=(($1)|0); //@line 601 "cstdlib/stdio.c"
 var $2=HEAP32[(($arrayidx)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Val=(($2+4)|0); //@line 601 "cstdlib/stdio.c"
 var $3=HEAP32[(($Val)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Pointer=$3; //@line 601 "cstdlib/stdio.c"
 var $4=HEAP32[(($Pointer)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $5=$Param_addr; //@line 601 "cstdlib/stdio.c"
 var $arrayidx1=(($5+4)|0); //@line 601 "cstdlib/stdio.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Val2=(($6+4)|0); //@line 601 "cstdlib/stdio.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Pointer3=$7; //@line 601 "cstdlib/stdio.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $9=$Param_addr; //@line 601 "cstdlib/stdio.c"
 var $arrayidx4=(($9+8)|0); //@line 601 "cstdlib/stdio.c"
 var $10=HEAP32[(($arrayidx4)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Val5=(($10+4)|0); //@line 601 "cstdlib/stdio.c"
 var $11=HEAP32[(($Val5)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Pointer6=$11; //@line 601 "cstdlib/stdio.c"
 var $12=HEAP32[(($Pointer6)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $13=$12; //@line 601 "cstdlib/stdio.c"
 var $call=_StdioBaseScanf($0,0,$4,$8,$13); //@line 601 "cstdlib/stdio.c"
 var $14=$ReturnValue_addr; //@line 601 "cstdlib/stdio.c"
 var $Val7=(($14+4)|0); //@line 601 "cstdlib/stdio.c"
 var $15=HEAP32[(($Val7)>>2)]; //@line 601 "cstdlib/stdio.c"
 var $Integer=$15; //@line 601 "cstdlib/stdio.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 601 "cstdlib/stdio.c"
 return; //@line 602 "cstdlib/stdio.c"
}
function _StdioSetupFunc(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $StructFileType;
 var $FilePtrType;
 var $call=_TableStrRegister(3616); //@line 670 "cstdlib/stdio.c"
 var $call1=_TypeCreateOpaqueStruct(0,$call,20); //@line 670 "cstdlib/stdio.c"
 $StructFileType=$call1; //@line 670 "cstdlib/stdio.c"
 var $0=$StructFileType; //@line 674 "cstdlib/stdio.c"
 var $1=HEAP32[((17968)>>2)]; //@line 674 "cstdlib/stdio.c"
 var $call2=_TypeGetMatching(0,$0,11,0,$1,1); //@line 674 "cstdlib/stdio.c"
 $FilePtrType=$call2; //@line 674 "cstdlib/stdio.c"
 var $call3=_TableStrRegister(3512); //@line 677 "cstdlib/stdio.c"
 var $call4=_TypeCreateOpaqueStruct(0,$call3,8); //@line 677 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,3400,18408,15728,0); //@line 680 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,3296,18408,18032,0); //@line 681 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,3152,18408,14360,0); //@line 682 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2952,18408,14352,0); //@line 683 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2792,18408,16248,0); //@line 684 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2688,18408,15536,0); //@line 685 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2624,18408,16816,0); //@line 686 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2552,18408,12480,0); //@line 687 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2488,18408,12472,0); //@line 688 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2408,18408,15520,0); //@line 689 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2288,18408,15528,0); //@line 690 "cstdlib/stdio.c"
 var $2=$FilePtrType; //@line 693 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2208,$2,16264,0); //@line 693 "cstdlib/stdio.c"
 var $3=$FilePtrType; //@line 694 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,2088,$3,16256,0); //@line 694 "cstdlib/stdio.c"
 var $4=$FilePtrType; //@line 695 "cstdlib/stdio.c"
 _VariableDefinePlatformVar(0,1936,$4,16272,0); //@line 695 "cstdlib/stdio.c"
 var $call5=_TableStrRegister(1792); //@line 698 "cstdlib/stdio.c"
 var $call6=_VariableDefined($call5); //@line 698 "cstdlib/stdio.c"
 var $tobool=($call6|0)!=0; //@line 698 "cstdlib/stdio.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 698 "cstdlib/stdio.c"
 case 2: 
 _VariableDefinePlatformVar(0,1792,18408,16848,0); //@line 699 "cstdlib/stdio.c"
 label=3;break; //@line 699 "cstdlib/stdio.c"
 case 3: 
 return; //@line 700 "cstdlib/stdio.c"
  default: assert(0, "bad label: " + label);
 }
}
function _PrintCh($OutCh,$Stream){
 var label=0;
 var $OutCh_addr;
 var $Stream_addr;
 $OutCh_addr=$OutCh;
 $Stream_addr=$Stream;
 var $0=$OutCh_addr; //@line 705 "cstdlib/stdio.c"
 var $conv=(($0<<24)>>24); //@line 705 "cstdlib/stdio.c"
 var $1=$Stream_addr; //@line 705 "cstdlib/stdio.c"
 var $call=_fputc($conv,$1); //@line 705 "cstdlib/stdio.c"
 return; //@line 706 "cstdlib/stdio.c"
}
function _PrintSimpleInt($Num,$Stream){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Num_addr;
 var $Stream_addr;
 $Num_addr=$Num;
 $Stream_addr=$Stream;
 var $0=$Stream_addr; //@line 710 "cstdlib/stdio.c"
 var $1=$Num_addr; //@line 710 "cstdlib/stdio.c"
 var $call=_fprintf($0,1664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs; //@line 710 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 711 "cstdlib/stdio.c"
}
function _PrintStr($Str,$Stream){
 var label=0;
 var $Str_addr;
 var $Stream_addr;
 $Str_addr=$Str;
 $Stream_addr=$Stream;
 var $0=$Str_addr; //@line 715 "cstdlib/stdio.c"
 var $1=$Stream_addr; //@line 715 "cstdlib/stdio.c"
 var $call=_fputs($0,$1); //@line 715 "cstdlib/stdio.c"
 return; //@line 716 "cstdlib/stdio.c"
}
function _PrintFP($Num,$Stream){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Num_addr;
 var $Stream_addr;
 $Num_addr=$Num;
 $Stream_addr=$Stream;
 var $0=$Stream_addr; //@line 720 "cstdlib/stdio.c"
 var $1=$Num_addr; //@line 720 "cstdlib/stdio.c"
 var $call=_fprintf($0,1632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$1,tempVarArgs)); STACKTOP=tempVarArgs; //@line 720 "cstdlib/stdio.c"
 STACKTOP=sp;return; //@line 721 "cstdlib/stdio.c"
}
function _MathSin($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 24 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 24 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 24 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 24 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 24 "cstdlib/math.c"
 var $FP=$2; //@line 24 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 24 "cstdlib/math.c"
 var $call=Math_sin($3); //@line 24 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 24 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 24 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 24 "cstdlib/math.c"
 var $FP2=$5; //@line 24 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 24 "cstdlib/math.c"
 return; //@line 25 "cstdlib/math.c"
}
function _MathCos($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 29 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 29 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 29 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 29 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 29 "cstdlib/math.c"
 var $FP=$2; //@line 29 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 29 "cstdlib/math.c"
 var $call=Math_cos($3); //@line 29 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 29 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 29 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 29 "cstdlib/math.c"
 var $FP2=$5; //@line 29 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 29 "cstdlib/math.c"
 return; //@line 30 "cstdlib/math.c"
}
function _MathTan($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 34 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 34 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 34 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 34 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 34 "cstdlib/math.c"
 var $FP=$2; //@line 34 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 34 "cstdlib/math.c"
 var $call=Math_tan($3); //@line 34 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 34 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 34 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 34 "cstdlib/math.c"
 var $FP2=$5; //@line 34 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 34 "cstdlib/math.c"
 return; //@line 35 "cstdlib/math.c"
}
function _MathAsin($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 39 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 39 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 39 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 39 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 39 "cstdlib/math.c"
 var $FP=$2; //@line 39 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 39 "cstdlib/math.c"
 var $call=Math_asin($3); //@line 39 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 39 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 39 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 39 "cstdlib/math.c"
 var $FP2=$5; //@line 39 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 39 "cstdlib/math.c"
 return; //@line 40 "cstdlib/math.c"
}
function _MathAcos($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 44 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 44 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 44 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 44 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 44 "cstdlib/math.c"
 var $FP=$2; //@line 44 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 44 "cstdlib/math.c"
 var $call=Math_acos($3); //@line 44 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 44 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 44 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 44 "cstdlib/math.c"
 var $FP2=$5; //@line 44 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 44 "cstdlib/math.c"
 return; //@line 45 "cstdlib/math.c"
}
function _MathAtan($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 49 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 49 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 49 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 49 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 49 "cstdlib/math.c"
 var $FP=$2; //@line 49 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 49 "cstdlib/math.c"
 var $call=Math_atan($3); //@line 49 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 49 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 49 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 49 "cstdlib/math.c"
 var $FP2=$5; //@line 49 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 49 "cstdlib/math.c"
 return; //@line 50 "cstdlib/math.c"
}
function _MathAtan2($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 54 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 54 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 54 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 54 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 54 "cstdlib/math.c"
 var $FP=$2; //@line 54 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 54 "cstdlib/math.c"
 var $4=$Param_addr; //@line 54 "cstdlib/math.c"
 var $arrayidx1=(($4+4)|0); //@line 54 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 54 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 54 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 54 "cstdlib/math.c"
 var $FP3=$6; //@line 54 "cstdlib/math.c"
 var $7=HEAPF64[(($FP3)>>3)]; //@line 54 "cstdlib/math.c"
 var $call=Math_atan2($3,$7); //@line 54 "cstdlib/math.c"
 var $8=$ReturnValue_addr; //@line 54 "cstdlib/math.c"
 var $Val4=(($8+4)|0); //@line 54 "cstdlib/math.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 54 "cstdlib/math.c"
 var $FP5=$9; //@line 54 "cstdlib/math.c"
 HEAPF64[(($FP5)>>3)]=$call; //@line 54 "cstdlib/math.c"
 return; //@line 55 "cstdlib/math.c"
}
function _MathSinh($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 59 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 59 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 59 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 59 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 59 "cstdlib/math.c"
 var $FP=$2; //@line 59 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 59 "cstdlib/math.c"
 var $call=_sinh($3); //@line 59 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 59 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 59 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 59 "cstdlib/math.c"
 var $FP2=$5; //@line 59 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 59 "cstdlib/math.c"
 return; //@line 60 "cstdlib/math.c"
}
function _MathCosh($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 64 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 64 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 64 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 64 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 64 "cstdlib/math.c"
 var $FP=$2; //@line 64 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 64 "cstdlib/math.c"
 var $call=_cosh($3); //@line 64 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 64 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 64 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 64 "cstdlib/math.c"
 var $FP2=$5; //@line 64 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 64 "cstdlib/math.c"
 return; //@line 65 "cstdlib/math.c"
}
function _MathTanh($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 69 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 69 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 69 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 69 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 69 "cstdlib/math.c"
 var $FP=$2; //@line 69 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 69 "cstdlib/math.c"
 var $call=_tanh($3); //@line 69 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 69 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 69 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 69 "cstdlib/math.c"
 var $FP2=$5; //@line 69 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 69 "cstdlib/math.c"
 return; //@line 70 "cstdlib/math.c"
}
function _MathExp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 74 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 74 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 74 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 74 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 74 "cstdlib/math.c"
 var $FP=$2; //@line 74 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 74 "cstdlib/math.c"
 var $call=Math_exp($3); //@line 74 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 74 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 74 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 74 "cstdlib/math.c"
 var $FP2=$5; //@line 74 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 74 "cstdlib/math.c"
 return; //@line 75 "cstdlib/math.c"
}
function _MathFabs($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 79 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 79 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 79 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 79 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 79 "cstdlib/math.c"
 var $FP=$2; //@line 79 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 79 "cstdlib/math.c"
 var $call=Math_abs($3); //@line 79 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 79 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 79 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 79 "cstdlib/math.c"
 var $FP2=$5; //@line 79 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 79 "cstdlib/math.c"
 return; //@line 80 "cstdlib/math.c"
}
function _MathFmod($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 84 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 84 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 84 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 84 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 84 "cstdlib/math.c"
 var $FP=$2; //@line 84 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 84 "cstdlib/math.c"
 var $4=$Param_addr; //@line 84 "cstdlib/math.c"
 var $arrayidx1=(($4+4)|0); //@line 84 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 84 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 84 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 84 "cstdlib/math.c"
 var $FP3=$6; //@line 84 "cstdlib/math.c"
 var $7=HEAPF64[(($FP3)>>3)]; //@line 84 "cstdlib/math.c"
 var $call=_fmod($3,$7); //@line 84 "cstdlib/math.c"
 var $8=$ReturnValue_addr; //@line 84 "cstdlib/math.c"
 var $Val4=(($8+4)|0); //@line 84 "cstdlib/math.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 84 "cstdlib/math.c"
 var $FP5=$9; //@line 84 "cstdlib/math.c"
 HEAPF64[(($FP5)>>3)]=$call; //@line 84 "cstdlib/math.c"
 return; //@line 85 "cstdlib/math.c"
}
function _MathFrexp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 89 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 89 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 89 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 89 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 89 "cstdlib/math.c"
 var $FP=$2; //@line 89 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 89 "cstdlib/math.c"
 var $4=$Param_addr; //@line 89 "cstdlib/math.c"
 var $arrayidx1=(($4+4)|0); //@line 89 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 89 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 89 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 89 "cstdlib/math.c"
 var $Pointer=$6; //@line 89 "cstdlib/math.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 89 "cstdlib/math.c"
 var $8=$7; //@line 89 "cstdlib/math.c"
 var $call=_frexp($3,$8); //@line 89 "cstdlib/math.c"
 var $9=$ReturnValue_addr; //@line 89 "cstdlib/math.c"
 var $Val3=(($9+4)|0); //@line 89 "cstdlib/math.c"
 var $10=HEAP32[(($Val3)>>2)]; //@line 89 "cstdlib/math.c"
 var $FP4=$10; //@line 89 "cstdlib/math.c"
 HEAPF64[(($FP4)>>3)]=$call; //@line 89 "cstdlib/math.c"
 return; //@line 90 "cstdlib/math.c"
}
function _MathLdexp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 94 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 94 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 94 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 94 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 94 "cstdlib/math.c"
 var $FP=$2; //@line 94 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 94 "cstdlib/math.c"
 var $4=$Param_addr; //@line 94 "cstdlib/math.c"
 var $arrayidx1=(($4+4)|0); //@line 94 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 94 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 94 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 94 "cstdlib/math.c"
 var $Integer=$6; //@line 94 "cstdlib/math.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 94 "cstdlib/math.c"
 var $call=_ldexp($3,$7); //@line 94 "cstdlib/math.c"
 var $8=$ReturnValue_addr; //@line 94 "cstdlib/math.c"
 var $Val3=(($8+4)|0); //@line 94 "cstdlib/math.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 94 "cstdlib/math.c"
 var $FP4=$9; //@line 94 "cstdlib/math.c"
 HEAPF64[(($FP4)>>3)]=$call; //@line 94 "cstdlib/math.c"
 return; //@line 95 "cstdlib/math.c"
}
function _MathLog($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 99 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 99 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 99 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 99 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 99 "cstdlib/math.c"
 var $FP=$2; //@line 99 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 99 "cstdlib/math.c"
 var $call=Math_log($3); //@line 99 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 99 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 99 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 99 "cstdlib/math.c"
 var $FP2=$5; //@line 99 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 99 "cstdlib/math.c"
 return; //@line 100 "cstdlib/math.c"
}
function _MathLog10($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 104 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 104 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 104 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 104 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 104 "cstdlib/math.c"
 var $FP=$2; //@line 104 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 104 "cstdlib/math.c"
 var $call=_log10($3); //@line 104 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 104 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 104 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 104 "cstdlib/math.c"
 var $FP2=$5; //@line 104 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 104 "cstdlib/math.c"
 return; //@line 105 "cstdlib/math.c"
}
function _MathModf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 109 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 109 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 109 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 109 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 109 "cstdlib/math.c"
 var $FP=$2; //@line 109 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 109 "cstdlib/math.c"
 var $4=$Param_addr; //@line 109 "cstdlib/math.c"
 var $arrayidx1=(($4)|0); //@line 109 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 109 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 109 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 109 "cstdlib/math.c"
 var $Pointer=$6; //@line 109 "cstdlib/math.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 109 "cstdlib/math.c"
 var $8=$7; //@line 109 "cstdlib/math.c"
 var $call=_modf($3,$8); //@line 109 "cstdlib/math.c"
 var $9=$ReturnValue_addr; //@line 109 "cstdlib/math.c"
 var $Val3=(($9+4)|0); //@line 109 "cstdlib/math.c"
 var $10=HEAP32[(($Val3)>>2)]; //@line 109 "cstdlib/math.c"
 var $FP4=$10; //@line 109 "cstdlib/math.c"
 HEAPF64[(($FP4)>>3)]=$call; //@line 109 "cstdlib/math.c"
 return; //@line 110 "cstdlib/math.c"
}
function _MathPow($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 114 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 114 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 114 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 114 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 114 "cstdlib/math.c"
 var $FP=$2; //@line 114 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 114 "cstdlib/math.c"
 var $4=$Param_addr; //@line 114 "cstdlib/math.c"
 var $arrayidx1=(($4+4)|0); //@line 114 "cstdlib/math.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 114 "cstdlib/math.c"
 var $Val2=(($5+4)|0); //@line 114 "cstdlib/math.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 114 "cstdlib/math.c"
 var $FP3=$6; //@line 114 "cstdlib/math.c"
 var $7=HEAPF64[(($FP3)>>3)]; //@line 114 "cstdlib/math.c"
 var $8=Math_pow($3,$7); //@line 114 "cstdlib/math.c"
 var $9=$ReturnValue_addr; //@line 114 "cstdlib/math.c"
 var $Val4=(($9+4)|0); //@line 114 "cstdlib/math.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 114 "cstdlib/math.c"
 var $FP5=$10; //@line 114 "cstdlib/math.c"
 HEAPF64[(($FP5)>>3)]=$8; //@line 114 "cstdlib/math.c"
 return; //@line 115 "cstdlib/math.c"
}
function _MathSqrt($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 119 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 119 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 119 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 119 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 119 "cstdlib/math.c"
 var $FP=$2; //@line 119 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 119 "cstdlib/math.c"
 var $call=Math_sqrt($3); //@line 119 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 119 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 119 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 119 "cstdlib/math.c"
 var $FP2=$5; //@line 119 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 119 "cstdlib/math.c"
 return; //@line 120 "cstdlib/math.c"
}
function _MathRound($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 126 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 126 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 126 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 126 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 126 "cstdlib/math.c"
 var $FP=$2; //@line 126 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 126 "cstdlib/math.c"
 var $sub=($3)-((0.5)); //@line 126 "cstdlib/math.c"
 var $call=Math_ceil($sub); //@line 126 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 126 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 126 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 126 "cstdlib/math.c"
 var $FP2=$5; //@line 126 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 126 "cstdlib/math.c"
 return; //@line 127 "cstdlib/math.c"
}
function _MathCeil($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 131 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 131 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 131 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 131 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 131 "cstdlib/math.c"
 var $FP=$2; //@line 131 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 131 "cstdlib/math.c"
 var $call=Math_ceil($3); //@line 131 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 131 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 131 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 131 "cstdlib/math.c"
 var $FP2=$5; //@line 131 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 131 "cstdlib/math.c"
 return; //@line 132 "cstdlib/math.c"
}
function _MathFloor($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 136 "cstdlib/math.c"
 var $arrayidx=(($0)|0); //@line 136 "cstdlib/math.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 136 "cstdlib/math.c"
 var $Val=(($1+4)|0); //@line 136 "cstdlib/math.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 136 "cstdlib/math.c"
 var $FP=$2; //@line 136 "cstdlib/math.c"
 var $3=HEAPF64[(($FP)>>3)]; //@line 136 "cstdlib/math.c"
 var $call=Math_floor($3); //@line 136 "cstdlib/math.c"
 var $4=$ReturnValue_addr; //@line 136 "cstdlib/math.c"
 var $Val1=(($4+4)|0); //@line 136 "cstdlib/math.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 136 "cstdlib/math.c"
 var $FP2=$5; //@line 136 "cstdlib/math.c"
 HEAPF64[(($FP2)>>3)]=$call; //@line 136 "cstdlib/math.c"
 return; //@line 137 "cstdlib/math.c"
}
function _MathSetupFunc(){
 var label=0;
 _VariableDefinePlatformVar(0,8184,19032,15472,0); //@line 171 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,7928,19032,15440,0); //@line 172 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,7624,19032,15448,0); //@line 173 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,7408,19032,15456,0); //@line 174 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,7232,19032,15464,0); //@line 175 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,7048,19032,15432,0); //@line 176 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6952,19032,15424,0); //@line 177 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6856,19032,15416,0); //@line 178 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6720,19032,15496,0); //@line 179 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6560,19032,15488,0); //@line 180 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6376,19032,15480,0); //@line 181 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,6176,19032,15400,0); //@line 182 "cstdlib/math.c"
 _VariableDefinePlatformVar(0,5944,19032,15408,0); //@line 183 "cstdlib/math.c"
 return; //@line 184 "cstdlib/math.c"
}
function _StringStrcpy($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 10 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 10 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 10 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 10 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 10 "cstdlib/string.c"
 var $Pointer=$2; //@line 10 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 10 "cstdlib/string.c"
 var $4=$Param_addr; //@line 10 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 10 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 10 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 10 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 10 "cstdlib/string.c"
 var $Pointer3=$6; //@line 10 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 10 "cstdlib/string.c"
 var $call=_strcpy($3,$7); //@line 10 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 10 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 10 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 10 "cstdlib/string.c"
 var $Pointer5=$9; //@line 10 "cstdlib/string.c"
 HEAP32[(($Pointer5)>>2)]=$call; //@line 10 "cstdlib/string.c"
 return; //@line 11 "cstdlib/string.c"
}
function _StringStrncpy($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 15 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 15 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 15 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 15 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 15 "cstdlib/string.c"
 var $Pointer=$2; //@line 15 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 15 "cstdlib/string.c"
 var $4=$Param_addr; //@line 15 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 15 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 15 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 15 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 15 "cstdlib/string.c"
 var $Pointer3=$6; //@line 15 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 15 "cstdlib/string.c"
 var $8=$Param_addr; //@line 15 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 15 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 15 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 15 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 15 "cstdlib/string.c"
 var $Integer=$10; //@line 15 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 15 "cstdlib/string.c"
 var $call=_strncpy($3,$7,$11); //@line 15 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 15 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 15 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 15 "cstdlib/string.c"
 var $Pointer7=$13; //@line 15 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$call; //@line 15 "cstdlib/string.c"
 return; //@line 16 "cstdlib/string.c"
}
function _StringStrcmp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 20 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 20 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 20 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 20 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 20 "cstdlib/string.c"
 var $Pointer=$2; //@line 20 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 20 "cstdlib/string.c"
 var $4=$Param_addr; //@line 20 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 20 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 20 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 20 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 20 "cstdlib/string.c"
 var $Pointer3=$6; //@line 20 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 20 "cstdlib/string.c"
 var $call=_strcmp($3,$7); //@line 20 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 20 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 20 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 20 "cstdlib/string.c"
 var $Integer=$9; //@line 20 "cstdlib/string.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 20 "cstdlib/string.c"
 return; //@line 21 "cstdlib/string.c"
}
function _StringStrncmp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 25 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 25 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 25 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 25 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 25 "cstdlib/string.c"
 var $Pointer=$2; //@line 25 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 25 "cstdlib/string.c"
 var $4=$Param_addr; //@line 25 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 25 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 25 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 25 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 25 "cstdlib/string.c"
 var $Pointer3=$6; //@line 25 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 25 "cstdlib/string.c"
 var $8=$Param_addr; //@line 25 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 25 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 25 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 25 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 25 "cstdlib/string.c"
 var $Integer=$10; //@line 25 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 25 "cstdlib/string.c"
 var $call=_strncmp($3,$7,$11); //@line 25 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 25 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 25 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 25 "cstdlib/string.c"
 var $Integer7=$13; //@line 25 "cstdlib/string.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 25 "cstdlib/string.c"
 return; //@line 26 "cstdlib/string.c"
}
function _StringStrcat($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 30 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 30 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 30 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 30 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 30 "cstdlib/string.c"
 var $Pointer=$2; //@line 30 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 30 "cstdlib/string.c"
 var $4=$Param_addr; //@line 30 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 30 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 30 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 30 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 30 "cstdlib/string.c"
 var $Pointer3=$6; //@line 30 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 30 "cstdlib/string.c"
 var $call=_strcat($3,$7); //@line 30 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 30 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 30 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 30 "cstdlib/string.c"
 var $Pointer5=$9; //@line 30 "cstdlib/string.c"
 HEAP32[(($Pointer5)>>2)]=$call; //@line 30 "cstdlib/string.c"
 return; //@line 31 "cstdlib/string.c"
}
function _StringStrncat($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 35 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 35 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 35 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 35 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 35 "cstdlib/string.c"
 var $Pointer=$2; //@line 35 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 35 "cstdlib/string.c"
 var $4=$Param_addr; //@line 35 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 35 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 35 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 35 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 35 "cstdlib/string.c"
 var $Pointer3=$6; //@line 35 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 35 "cstdlib/string.c"
 var $8=$Param_addr; //@line 35 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 35 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 35 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 35 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 35 "cstdlib/string.c"
 var $Integer=$10; //@line 35 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 35 "cstdlib/string.c"
 var $call=_strncat($3,$7,$11); //@line 35 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 35 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 35 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 35 "cstdlib/string.c"
 var $Pointer7=$13; //@line 35 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$call; //@line 35 "cstdlib/string.c"
 return; //@line 36 "cstdlib/string.c"
}
function _StringIndex($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 40 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 40 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 40 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 40 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 40 "cstdlib/string.c"
 var $Pointer=$2; //@line 40 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 40 "cstdlib/string.c"
 var $4=$Param_addr; //@line 40 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 40 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 40 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 40 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 40 "cstdlib/string.c"
 var $Integer=$6; //@line 40 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 40 "cstdlib/string.c"
 var $call=_strchr($3,$7); //@line 40 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 40 "cstdlib/string.c"
 var $Val3=(($8+4)|0); //@line 40 "cstdlib/string.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 40 "cstdlib/string.c"
 var $Pointer4=$9; //@line 40 "cstdlib/string.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 40 "cstdlib/string.c"
 return; //@line 41 "cstdlib/string.c"
}
function _StringRindex($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 45 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 45 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 45 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 45 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 45 "cstdlib/string.c"
 var $Pointer=$2; //@line 45 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 45 "cstdlib/string.c"
 var $4=$Param_addr; //@line 45 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 45 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 45 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 45 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 45 "cstdlib/string.c"
 var $Integer=$6; //@line 45 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 45 "cstdlib/string.c"
 var $call=_strrchr($3,$7); //@line 45 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 45 "cstdlib/string.c"
 var $Val3=(($8+4)|0); //@line 45 "cstdlib/string.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 45 "cstdlib/string.c"
 var $Pointer4=$9; //@line 45 "cstdlib/string.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 45 "cstdlib/string.c"
 return; //@line 46 "cstdlib/string.c"
}
function _StringStrlen($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 50 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 50 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 50 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 50 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 50 "cstdlib/string.c"
 var $Pointer=$2; //@line 50 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 50 "cstdlib/string.c"
 var $call=_strlen($3); //@line 50 "cstdlib/string.c"
 var $4=$ReturnValue_addr; //@line 50 "cstdlib/string.c"
 var $Val1=(($4+4)|0); //@line 50 "cstdlib/string.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 50 "cstdlib/string.c"
 var $Integer=$5; //@line 50 "cstdlib/string.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 50 "cstdlib/string.c"
 return; //@line 51 "cstdlib/string.c"
}
function _StringMemset($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 55 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 55 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 55 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 55 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 55 "cstdlib/string.c"
 var $Pointer=$2; //@line 55 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 55 "cstdlib/string.c"
 var $4=$Param_addr; //@line 55 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 55 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 55 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 55 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 55 "cstdlib/string.c"
 var $Integer=$6; //@line 55 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 55 "cstdlib/string.c"
 var $8=(($7)&255); //@line 55 "cstdlib/string.c"
 var $9=$Param_addr; //@line 55 "cstdlib/string.c"
 var $arrayidx3=(($9+8)|0); //@line 55 "cstdlib/string.c"
 var $10=HEAP32[(($arrayidx3)>>2)]; //@line 55 "cstdlib/string.c"
 var $Val4=(($10+4)|0); //@line 55 "cstdlib/string.c"
 var $11=HEAP32[(($Val4)>>2)]; //@line 55 "cstdlib/string.c"
 var $Integer5=$11; //@line 55 "cstdlib/string.c"
 var $12=HEAP32[(($Integer5)>>2)]; //@line 55 "cstdlib/string.c"
 _memset($3, $8, $12); //@line 55 "cstdlib/string.c"
 var $13=$ReturnValue_addr; //@line 55 "cstdlib/string.c"
 var $Val6=(($13+4)|0); //@line 55 "cstdlib/string.c"
 var $14=HEAP32[(($Val6)>>2)]; //@line 55 "cstdlib/string.c"
 var $Pointer7=$14; //@line 55 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$3; //@line 55 "cstdlib/string.c"
 return; //@line 56 "cstdlib/string.c"
}
function _StringMemcpy($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 60 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 60 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 60 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 60 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 60 "cstdlib/string.c"
 var $Pointer=$2; //@line 60 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 60 "cstdlib/string.c"
 var $4=$Param_addr; //@line 60 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 60 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 60 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 60 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 60 "cstdlib/string.c"
 var $Pointer3=$6; //@line 60 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 60 "cstdlib/string.c"
 var $8=$Param_addr; //@line 60 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 60 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 60 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 60 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 60 "cstdlib/string.c"
 var $Integer=$10; //@line 60 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 60 "cstdlib/string.c"
 assert($11 % 1 === 0);(_memcpy($3, $7, $11)|0); //@line 60 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 60 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 60 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 60 "cstdlib/string.c"
 var $Pointer7=$13; //@line 60 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$3; //@line 60 "cstdlib/string.c"
 return; //@line 61 "cstdlib/string.c"
}
function _StringMemcmp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 65 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 65 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 65 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 65 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 65 "cstdlib/string.c"
 var $Pointer=$2; //@line 65 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 65 "cstdlib/string.c"
 var $4=$Param_addr; //@line 65 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 65 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 65 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 65 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 65 "cstdlib/string.c"
 var $Pointer3=$6; //@line 65 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 65 "cstdlib/string.c"
 var $8=$Param_addr; //@line 65 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 65 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 65 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 65 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 65 "cstdlib/string.c"
 var $Integer=$10; //@line 65 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 65 "cstdlib/string.c"
 var $call=_memcmp($3,$7,$11); //@line 65 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 65 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 65 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 65 "cstdlib/string.c"
 var $Integer7=$13; //@line 65 "cstdlib/string.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 65 "cstdlib/string.c"
 return; //@line 66 "cstdlib/string.c"
}
function _StringMemmove($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 70 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 70 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 70 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 70 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 70 "cstdlib/string.c"
 var $Pointer=$2; //@line 70 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 70 "cstdlib/string.c"
 var $4=$Param_addr; //@line 70 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 70 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 70 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 70 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 70 "cstdlib/string.c"
 var $Pointer3=$6; //@line 70 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 70 "cstdlib/string.c"
 var $8=$Param_addr; //@line 70 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 70 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 70 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 70 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 70 "cstdlib/string.c"
 var $Integer=$10; //@line 70 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 70 "cstdlib/string.c"
 _memmove($3,$7,$11,1,0); //@line 70 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 70 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 70 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 70 "cstdlib/string.c"
 var $Pointer7=$13; //@line 70 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$3; //@line 70 "cstdlib/string.c"
 return; //@line 71 "cstdlib/string.c"
}
function _StringMemchr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 75 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 75 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 75 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 75 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 75 "cstdlib/string.c"
 var $Pointer=$2; //@line 75 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 75 "cstdlib/string.c"
 var $4=$Param_addr; //@line 75 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 75 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 75 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 75 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 75 "cstdlib/string.c"
 var $Integer=$6; //@line 75 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 75 "cstdlib/string.c"
 var $8=$Param_addr; //@line 75 "cstdlib/string.c"
 var $arrayidx3=(($8+8)|0); //@line 75 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 75 "cstdlib/string.c"
 var $Val4=(($9+4)|0); //@line 75 "cstdlib/string.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 75 "cstdlib/string.c"
 var $Integer5=$10; //@line 75 "cstdlib/string.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 75 "cstdlib/string.c"
 var $call=_memchr($3,$7,$11); //@line 75 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 75 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 75 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 75 "cstdlib/string.c"
 var $Pointer7=$13; //@line 75 "cstdlib/string.c"
 HEAP32[(($Pointer7)>>2)]=$call; //@line 75 "cstdlib/string.c"
 return; //@line 76 "cstdlib/string.c"
}
function _StringStrchr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 80 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 80 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 80 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 80 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 80 "cstdlib/string.c"
 var $Pointer=$2; //@line 80 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 80 "cstdlib/string.c"
 var $4=$Param_addr; //@line 80 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 80 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 80 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 80 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 80 "cstdlib/string.c"
 var $Integer=$6; //@line 80 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 80 "cstdlib/string.c"
 var $call=_strchr($3,$7); //@line 80 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 80 "cstdlib/string.c"
 var $Val3=(($8+4)|0); //@line 80 "cstdlib/string.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 80 "cstdlib/string.c"
 var $Pointer4=$9; //@line 80 "cstdlib/string.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 80 "cstdlib/string.c"
 return; //@line 81 "cstdlib/string.c"
}
function _StringStrrchr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 85 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 85 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 85 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 85 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 85 "cstdlib/string.c"
 var $Pointer=$2; //@line 85 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 85 "cstdlib/string.c"
 var $4=$Param_addr; //@line 85 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 85 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 85 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 85 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 85 "cstdlib/string.c"
 var $Integer=$6; //@line 85 "cstdlib/string.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 85 "cstdlib/string.c"
 var $call=_strrchr($3,$7); //@line 85 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 85 "cstdlib/string.c"
 var $Val3=(($8+4)|0); //@line 85 "cstdlib/string.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 85 "cstdlib/string.c"
 var $Pointer4=$9; //@line 85 "cstdlib/string.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 85 "cstdlib/string.c"
 return; //@line 86 "cstdlib/string.c"
}
function _StringStrcoll($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 90 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 90 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 90 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 90 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 90 "cstdlib/string.c"
 var $Pointer=$2; //@line 90 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 90 "cstdlib/string.c"
 var $4=$Param_addr; //@line 90 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 90 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 90 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 90 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 90 "cstdlib/string.c"
 var $Pointer3=$6; //@line 90 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 90 "cstdlib/string.c"
 var $call=_strcmp($3,$7); //@line 90 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 90 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 90 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 90 "cstdlib/string.c"
 var $Integer=$9; //@line 90 "cstdlib/string.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 90 "cstdlib/string.c"
 return; //@line 91 "cstdlib/string.c"
}
function _StringStrerror($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 95 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 95 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 95 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 95 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 95 "cstdlib/string.c"
 var $Integer=$2; //@line 95 "cstdlib/string.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 95 "cstdlib/string.c"
 var $call=_strerror($3); //@line 95 "cstdlib/string.c"
 var $4=$ReturnValue_addr; //@line 95 "cstdlib/string.c"
 var $Val1=(($4+4)|0); //@line 95 "cstdlib/string.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 95 "cstdlib/string.c"
 var $Pointer=$5; //@line 95 "cstdlib/string.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 95 "cstdlib/string.c"
 return; //@line 96 "cstdlib/string.c"
}
function _StringStrspn($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 100 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 100 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 100 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 100 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 100 "cstdlib/string.c"
 var $Pointer=$2; //@line 100 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 100 "cstdlib/string.c"
 var $4=$Param_addr; //@line 100 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 100 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 100 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 100 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 100 "cstdlib/string.c"
 var $Pointer3=$6; //@line 100 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 100 "cstdlib/string.c"
 var $call=_strspn($3,$7); //@line 100 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 100 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 100 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 100 "cstdlib/string.c"
 var $Integer=$9; //@line 100 "cstdlib/string.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 100 "cstdlib/string.c"
 return; //@line 101 "cstdlib/string.c"
}
function _StringStrcspn($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 105 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 105 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 105 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 105 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 105 "cstdlib/string.c"
 var $Pointer=$2; //@line 105 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 105 "cstdlib/string.c"
 var $4=$Param_addr; //@line 105 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 105 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 105 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 105 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 105 "cstdlib/string.c"
 var $Pointer3=$6; //@line 105 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 105 "cstdlib/string.c"
 var $call=_strcspn($3,$7); //@line 105 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 105 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 105 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 105 "cstdlib/string.c"
 var $Integer=$9; //@line 105 "cstdlib/string.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 105 "cstdlib/string.c"
 return; //@line 106 "cstdlib/string.c"
}
function _StringStrpbrk($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 110 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 110 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 110 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 110 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 110 "cstdlib/string.c"
 var $Pointer=$2; //@line 110 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 110 "cstdlib/string.c"
 var $4=$Param_addr; //@line 110 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 110 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 110 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 110 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 110 "cstdlib/string.c"
 var $Pointer3=$6; //@line 110 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 110 "cstdlib/string.c"
 var $call=_strpbrk($3,$7); //@line 110 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 110 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 110 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 110 "cstdlib/string.c"
 var $Pointer5=$9; //@line 110 "cstdlib/string.c"
 HEAP32[(($Pointer5)>>2)]=$call; //@line 110 "cstdlib/string.c"
 return; //@line 111 "cstdlib/string.c"
}
function _StringStrstr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 115 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 115 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 115 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 115 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 115 "cstdlib/string.c"
 var $Pointer=$2; //@line 115 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 115 "cstdlib/string.c"
 var $4=$Param_addr; //@line 115 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 115 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 115 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 115 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 115 "cstdlib/string.c"
 var $Pointer3=$6; //@line 115 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 115 "cstdlib/string.c"
 var $call=_strstr($3,$7); //@line 115 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 115 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 115 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 115 "cstdlib/string.c"
 var $Pointer5=$9; //@line 115 "cstdlib/string.c"
 HEAP32[(($Pointer5)>>2)]=$call; //@line 115 "cstdlib/string.c"
 return; //@line 116 "cstdlib/string.c"
}
function _StringStrtok($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 120 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 120 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 120 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 120 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 120 "cstdlib/string.c"
 var $Pointer=$2; //@line 120 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 120 "cstdlib/string.c"
 var $4=$Param_addr; //@line 120 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 120 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 120 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 120 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 120 "cstdlib/string.c"
 var $Pointer3=$6; //@line 120 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 120 "cstdlib/string.c"
 var $call=_strtok($3,$7); //@line 120 "cstdlib/string.c"
 var $8=$ReturnValue_addr; //@line 120 "cstdlib/string.c"
 var $Val4=(($8+4)|0); //@line 120 "cstdlib/string.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 120 "cstdlib/string.c"
 var $Pointer5=$9; //@line 120 "cstdlib/string.c"
 HEAP32[(($Pointer5)>>2)]=$call; //@line 120 "cstdlib/string.c"
 return; //@line 121 "cstdlib/string.c"
}
function _StringStrxfrm($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 125 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 125 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 125 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 125 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 125 "cstdlib/string.c"
 var $Pointer=$2; //@line 125 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 125 "cstdlib/string.c"
 var $4=$Param_addr; //@line 125 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 125 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 125 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 125 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 125 "cstdlib/string.c"
 var $Pointer3=$6; //@line 125 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 125 "cstdlib/string.c"
 var $8=$Param_addr; //@line 125 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 125 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 125 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 125 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 125 "cstdlib/string.c"
 var $Integer=$10; //@line 125 "cstdlib/string.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 125 "cstdlib/string.c"
 var $call=_strxfrm($3,$7,$11); //@line 125 "cstdlib/string.c"
 var $12=$ReturnValue_addr; //@line 125 "cstdlib/string.c"
 var $Val6=(($12+4)|0); //@line 125 "cstdlib/string.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 125 "cstdlib/string.c"
 var $Integer7=$13; //@line 125 "cstdlib/string.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 125 "cstdlib/string.c"
 return; //@line 126 "cstdlib/string.c"
}
function _StringStrdup($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 130 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 130 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 130 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 130 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 130 "cstdlib/string.c"
 var $Pointer=$2; //@line 130 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 130 "cstdlib/string.c"
 var $call=_strdup($3); //@line 130 "cstdlib/string.c"
 var $4=$ReturnValue_addr; //@line 130 "cstdlib/string.c"
 var $Val1=(($4+4)|0); //@line 130 "cstdlib/string.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 130 "cstdlib/string.c"
 var $Pointer2=$5; //@line 130 "cstdlib/string.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 130 "cstdlib/string.c"
 return; //@line 131 "cstdlib/string.c"
}
function _StringStrtok_r($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 135 "cstdlib/string.c"
 var $arrayidx=(($0)|0); //@line 135 "cstdlib/string.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 135 "cstdlib/string.c"
 var $Val=(($1+4)|0); //@line 135 "cstdlib/string.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 135 "cstdlib/string.c"
 var $Pointer=$2; //@line 135 "cstdlib/string.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 135 "cstdlib/string.c"
 var $4=$Param_addr; //@line 135 "cstdlib/string.c"
 var $arrayidx1=(($4+4)|0); //@line 135 "cstdlib/string.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 135 "cstdlib/string.c"
 var $Val2=(($5+4)|0); //@line 135 "cstdlib/string.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 135 "cstdlib/string.c"
 var $Pointer3=$6; //@line 135 "cstdlib/string.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 135 "cstdlib/string.c"
 var $8=$Param_addr; //@line 135 "cstdlib/string.c"
 var $arrayidx4=(($8+8)|0); //@line 135 "cstdlib/string.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 135 "cstdlib/string.c"
 var $Val5=(($9+4)|0); //@line 135 "cstdlib/string.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 135 "cstdlib/string.c"
 var $Pointer6=$10; //@line 135 "cstdlib/string.c"
 var $11=HEAP32[(($Pointer6)>>2)]; //@line 135 "cstdlib/string.c"
 var $12=$11; //@line 135 "cstdlib/string.c"
 var $call=_strtok_r($3,$7,$12); //@line 135 "cstdlib/string.c"
 var $13=$ReturnValue_addr; //@line 135 "cstdlib/string.c"
 var $Val7=(($13+4)|0); //@line 135 "cstdlib/string.c"
 var $14=HEAP32[(($Val7)>>2)]; //@line 135 "cstdlib/string.c"
 var $Pointer8=$14; //@line 135 "cstdlib/string.c"
 HEAP32[(($Pointer8)>>2)]=$call; //@line 135 "cstdlib/string.c"
 return; //@line 136 "cstdlib/string.c"
}
function _StringSetupFunc(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=_TableStrRegister(7400); //@line 174 "cstdlib/string.c"
 var $call1=_VariableDefined($call); //@line 174 "cstdlib/string.c"
 var $tobool=($call1|0)!=0; //@line 174 "cstdlib/string.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 174 "cstdlib/string.c"
 case 2: 
 _VariableDefinePlatformVar(0,7400,18408,16840,0); //@line 175 "cstdlib/string.c"
 label=3;break; //@line 175 "cstdlib/string.c"
 case 3: 
 return; //@line 176 "cstdlib/string.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdlibAtof($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 11 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 11 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 11 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 11 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 11 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 11 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 11 "cstdlib/stdlib.c"
 var $call=_atof($3); //@line 11 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 11 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 11 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 11 "cstdlib/stdlib.c"
 var $FP=$5; //@line 11 "cstdlib/stdlib.c"
 HEAPF64[(($FP)>>3)]=$call; //@line 11 "cstdlib/stdlib.c"
 return; //@line 12 "cstdlib/stdlib.c"
}
function _StdlibAtoi($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 17 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 17 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 17 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 17 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 17 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 17 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 17 "cstdlib/stdlib.c"
 var $call=_atoi($3); //@line 17 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 17 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 17 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 17 "cstdlib/stdlib.c"
 var $Integer=$5; //@line 17 "cstdlib/stdlib.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 17 "cstdlib/stdlib.c"
 return; //@line 18 "cstdlib/stdlib.c"
}
function _StdlibAtol($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 22 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 22 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 22 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 22 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 22 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 22 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 22 "cstdlib/stdlib.c"
 var $call=_atoi($3); //@line 22 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 22 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 22 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 22 "cstdlib/stdlib.c"
 var $Integer=$5; //@line 22 "cstdlib/stdlib.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 22 "cstdlib/stdlib.c"
 return; //@line 23 "cstdlib/stdlib.c"
}
function _StdlibStrtod($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 28 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 28 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 28 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 28 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $4=$Param_addr; //@line 28 "cstdlib/stdlib.c"
 var $arrayidx1=(($4+4)|0); //@line 28 "cstdlib/stdlib.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $Val2=(($5+4)|0); //@line 28 "cstdlib/stdlib.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $Pointer3=$6; //@line 28 "cstdlib/stdlib.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $8=$7; //@line 28 "cstdlib/stdlib.c"
 var $call=_strtod($3,$8); //@line 28 "cstdlib/stdlib.c"
 var $9=$ReturnValue_addr; //@line 28 "cstdlib/stdlib.c"
 var $Val4=(($9+4)|0); //@line 28 "cstdlib/stdlib.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 28 "cstdlib/stdlib.c"
 var $FP=$10; //@line 28 "cstdlib/stdlib.c"
 HEAPF64[(($FP)>>3)]=$call; //@line 28 "cstdlib/stdlib.c"
 return; //@line 29 "cstdlib/stdlib.c"
}
function _StdlibStrtol($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 34 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 34 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 34 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 34 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $4=$Param_addr; //@line 34 "cstdlib/stdlib.c"
 var $arrayidx1=(($4+4)|0); //@line 34 "cstdlib/stdlib.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Val2=(($5+4)|0); //@line 34 "cstdlib/stdlib.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Pointer3=$6; //@line 34 "cstdlib/stdlib.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $8=$7; //@line 34 "cstdlib/stdlib.c"
 var $9=$Param_addr; //@line 34 "cstdlib/stdlib.c"
 var $arrayidx4=(($9+8)|0); //@line 34 "cstdlib/stdlib.c"
 var $10=HEAP32[(($arrayidx4)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Val5=(($10+4)|0); //@line 34 "cstdlib/stdlib.c"
 var $11=HEAP32[(($Val5)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Integer=$11; //@line 34 "cstdlib/stdlib.c"
 var $12=HEAP32[(($Integer)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $call=_strtol($3,$8,$12); //@line 34 "cstdlib/stdlib.c"
 var $13=$ReturnValue_addr; //@line 34 "cstdlib/stdlib.c"
 var $Val6=(($13+4)|0); //@line 34 "cstdlib/stdlib.c"
 var $14=HEAP32[(($Val6)>>2)]; //@line 34 "cstdlib/stdlib.c"
 var $Integer7=$14; //@line 34 "cstdlib/stdlib.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 34 "cstdlib/stdlib.c"
 return; //@line 35 "cstdlib/stdlib.c"
}
function _StdlibStrtoul($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 39 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 39 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 39 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 39 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $4=$Param_addr; //@line 39 "cstdlib/stdlib.c"
 var $arrayidx1=(($4+4)|0); //@line 39 "cstdlib/stdlib.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Val2=(($5+4)|0); //@line 39 "cstdlib/stdlib.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Pointer3=$6; //@line 39 "cstdlib/stdlib.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $8=$7; //@line 39 "cstdlib/stdlib.c"
 var $9=$Param_addr; //@line 39 "cstdlib/stdlib.c"
 var $arrayidx4=(($9+8)|0); //@line 39 "cstdlib/stdlib.c"
 var $10=HEAP32[(($arrayidx4)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Val5=(($10+4)|0); //@line 39 "cstdlib/stdlib.c"
 var $11=HEAP32[(($Val5)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Integer=$11; //@line 39 "cstdlib/stdlib.c"
 var $12=HEAP32[(($Integer)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $call=_strtoul($3,$8,$12); //@line 39 "cstdlib/stdlib.c"
 var $13=$ReturnValue_addr; //@line 39 "cstdlib/stdlib.c"
 var $Val6=(($13+4)|0); //@line 39 "cstdlib/stdlib.c"
 var $14=HEAP32[(($Val6)>>2)]; //@line 39 "cstdlib/stdlib.c"
 var $Integer7=$14; //@line 39 "cstdlib/stdlib.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 39 "cstdlib/stdlib.c"
 return; //@line 40 "cstdlib/stdlib.c"
}
function _StdlibMalloc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 44 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 44 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 44 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 44 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 44 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 44 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 44 "cstdlib/stdlib.c"
 var $call=_malloc($3); //@line 44 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 44 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 44 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 44 "cstdlib/stdlib.c"
 var $Pointer=$5; //@line 44 "cstdlib/stdlib.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 44 "cstdlib/stdlib.c"
 return; //@line 45 "cstdlib/stdlib.c"
}
function _StdlibCalloc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 49 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 49 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 49 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 49 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $4=$Param_addr; //@line 49 "cstdlib/stdlib.c"
 var $arrayidx1=(($4+4)|0); //@line 49 "cstdlib/stdlib.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $Val2=(($5+4)|0); //@line 49 "cstdlib/stdlib.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $Integer3=$6; //@line 49 "cstdlib/stdlib.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $call=_calloc($3,$7); //@line 49 "cstdlib/stdlib.c"
 var $8=$ReturnValue_addr; //@line 49 "cstdlib/stdlib.c"
 var $Val4=(($8+4)|0); //@line 49 "cstdlib/stdlib.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 49 "cstdlib/stdlib.c"
 var $Pointer=$9; //@line 49 "cstdlib/stdlib.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 49 "cstdlib/stdlib.c"
 return; //@line 50 "cstdlib/stdlib.c"
}
function _StdlibRealloc($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 54 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 54 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 54 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 54 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $4=$Param_addr; //@line 54 "cstdlib/stdlib.c"
 var $arrayidx1=(($4+4)|0); //@line 54 "cstdlib/stdlib.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $Val2=(($5+4)|0); //@line 54 "cstdlib/stdlib.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $Integer=$6; //@line 54 "cstdlib/stdlib.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $call=_realloc($3,$7); //@line 54 "cstdlib/stdlib.c"
 var $8=$ReturnValue_addr; //@line 54 "cstdlib/stdlib.c"
 var $Val3=(($8+4)|0); //@line 54 "cstdlib/stdlib.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 54 "cstdlib/stdlib.c"
 var $Pointer4=$9; //@line 54 "cstdlib/stdlib.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 54 "cstdlib/stdlib.c"
 return; //@line 55 "cstdlib/stdlib.c"
}
function _StdlibFree($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 59 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 59 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 59 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 59 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 59 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 59 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 59 "cstdlib/stdlib.c"
 _free($3); //@line 59 "cstdlib/stdlib.c"
 return; //@line 60 "cstdlib/stdlib.c"
}
function _StdlibRand($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_rand(); //@line 64 "cstdlib/stdlib.c"
 var $0=$ReturnValue_addr; //@line 64 "cstdlib/stdlib.c"
 var $Val=(($0+4)|0); //@line 64 "cstdlib/stdlib.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 64 "cstdlib/stdlib.c"
 var $Integer=$1; //@line 64 "cstdlib/stdlib.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 64 "cstdlib/stdlib.c"
 return; //@line 65 "cstdlib/stdlib.c"
}
function _StdlibSrand($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 69 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 69 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 69 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 69 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 69 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 69 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 69 "cstdlib/stdlib.c"
 _srand($3); //@line 69 "cstdlib/stdlib.c"
 return; //@line 70 "cstdlib/stdlib.c"
}
function _StdlibAbort($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Parser_addr; //@line 74 "cstdlib/stdlib.c"
 _ProgramFail($0,3568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 74 "cstdlib/stdlib.c"
 STACKTOP=sp;return; //@line 75 "cstdlib/stdlib.c"
}
function _StdlibExit($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 79 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 79 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 79 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 79 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 79 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 79 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 79 "cstdlib/stdlib.c"
 _PlatformExit($3); //@line 79 "cstdlib/stdlib.c"
 return; //@line 80 "cstdlib/stdlib.c"
}
function _StdlibGetenv($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 84 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 84 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 84 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 84 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 84 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 84 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 84 "cstdlib/stdlib.c"
 var $call=_getenv($3); //@line 84 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 84 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 84 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 84 "cstdlib/stdlib.c"
 var $Pointer2=$5; //@line 84 "cstdlib/stdlib.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 84 "cstdlib/stdlib.c"
 return; //@line 85 "cstdlib/stdlib.c"
}
function _StdlibSystem($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 89 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 89 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 89 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 89 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 89 "cstdlib/stdlib.c"
 var $Pointer=$2; //@line 89 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 89 "cstdlib/stdlib.c"
 var $call=_system($3); //@line 89 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 89 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 89 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 89 "cstdlib/stdlib.c"
 var $Integer=$5; //@line 89 "cstdlib/stdlib.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 89 "cstdlib/stdlib.c"
 return; //@line 90 "cstdlib/stdlib.c"
}
function _StdlibAbs($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 101 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 101 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 101 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 101 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 101 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 101 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 101 "cstdlib/stdlib.c"
 var $call=Math_abs($3); //@line 101 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 101 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 101 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 101 "cstdlib/stdlib.c"
 var $Integer2=$5; //@line 101 "cstdlib/stdlib.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 101 "cstdlib/stdlib.c"
 return; //@line 102 "cstdlib/stdlib.c"
}
function _StdlibLabs($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 106 "cstdlib/stdlib.c"
 var $arrayidx=(($0)|0); //@line 106 "cstdlib/stdlib.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 106 "cstdlib/stdlib.c"
 var $Val=(($1+4)|0); //@line 106 "cstdlib/stdlib.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 106 "cstdlib/stdlib.c"
 var $Integer=$2; //@line 106 "cstdlib/stdlib.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 106 "cstdlib/stdlib.c"
 var $call=Math_abs($3); //@line 106 "cstdlib/stdlib.c"
 var $4=$ReturnValue_addr; //@line 106 "cstdlib/stdlib.c"
 var $Val1=(($4+4)|0); //@line 106 "cstdlib/stdlib.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 106 "cstdlib/stdlib.c"
 var $Integer2=$5; //@line 106 "cstdlib/stdlib.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 106 "cstdlib/stdlib.c"
 return; //@line 107 "cstdlib/stdlib.c"
}
function _StdlibSetupFunc(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=_TableStrRegister(9024); //@line 170 "cstdlib/stdlib.c"
 var $call1=_VariableDefined($call); //@line 170 "cstdlib/stdlib.c"
 var $tobool=($call1|0)!=0; //@line 170 "cstdlib/stdlib.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 170 "cstdlib/stdlib.c"
 case 2: 
 _VariableDefinePlatformVar(0,9024,18408,16832,0); //@line 171 "cstdlib/stdlib.c"
 label=3;break; //@line 171 "cstdlib/stdlib.c"
 case 3: 
 return; //@line 172 "cstdlib/stdlib.c"
  default: assert(0, "bad label: " + label);
 }
}
function _StdAsctime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 19 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 19 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 19 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 19 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 19 "cstdlib/time.c"
 var $Pointer=$2; //@line 19 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 19 "cstdlib/time.c"
 var $4=$3; //@line 19 "cstdlib/time.c"
 var $call=_asctime($4); //@line 19 "cstdlib/time.c"
 var $5=$ReturnValue_addr; //@line 19 "cstdlib/time.c"
 var $Val1=(($5+4)|0); //@line 19 "cstdlib/time.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 19 "cstdlib/time.c"
 var $Pointer2=$6; //@line 19 "cstdlib/time.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 19 "cstdlib/time.c"
 return; //@line 20 "cstdlib/time.c"
}
function _StdClock($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_clock(); //@line 24 "cstdlib/time.c"
 var $0=$ReturnValue_addr; //@line 24 "cstdlib/time.c"
 var $Val=(($0+4)|0); //@line 24 "cstdlib/time.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 24 "cstdlib/time.c"
 var $Integer=$1; //@line 24 "cstdlib/time.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 24 "cstdlib/time.c"
 return; //@line 25 "cstdlib/time.c"
}
function _StdCtime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 29 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 29 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 29 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 29 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 29 "cstdlib/time.c"
 var $Pointer=$2; //@line 29 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 29 "cstdlib/time.c"
 var $4=$3; //@line 29 "cstdlib/time.c"
 var $call=_ctime($4); //@line 29 "cstdlib/time.c"
 var $5=$ReturnValue_addr; //@line 29 "cstdlib/time.c"
 var $Val1=(($5+4)|0); //@line 29 "cstdlib/time.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 29 "cstdlib/time.c"
 var $Pointer2=$6; //@line 29 "cstdlib/time.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 29 "cstdlib/time.c"
 return; //@line 30 "cstdlib/time.c"
}
function _StdDifftime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 35 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 35 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 35 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 35 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 35 "cstdlib/time.c"
 var $Integer=$2; //@line 35 "cstdlib/time.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 35 "cstdlib/time.c"
 var $4=$Param_addr; //@line 35 "cstdlib/time.c"
 var $arrayidx1=(($4+4)|0); //@line 35 "cstdlib/time.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 35 "cstdlib/time.c"
 var $Val2=(($5+4)|0); //@line 35 "cstdlib/time.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 35 "cstdlib/time.c"
 var $Integer3=$6; //@line 35 "cstdlib/time.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 35 "cstdlib/time.c"
 var $call=_difftime($3,$7); //@line 35 "cstdlib/time.c"
 var $8=$ReturnValue_addr; //@line 35 "cstdlib/time.c"
 var $Val4=(($8+4)|0); //@line 35 "cstdlib/time.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 35 "cstdlib/time.c"
 var $FP=$9; //@line 35 "cstdlib/time.c"
 HEAPF64[(($FP)>>3)]=$call; //@line 35 "cstdlib/time.c"
 return; //@line 36 "cstdlib/time.c"
}
function _StdGmtime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 41 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 41 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 41 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 41 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 41 "cstdlib/time.c"
 var $Pointer=$2; //@line 41 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 41 "cstdlib/time.c"
 var $4=$3; //@line 41 "cstdlib/time.c"
 var $call=_gmtime($4); //@line 41 "cstdlib/time.c"
 var $5=$call; //@line 41 "cstdlib/time.c"
 var $6=$ReturnValue_addr; //@line 41 "cstdlib/time.c"
 var $Val1=(($6+4)|0); //@line 41 "cstdlib/time.c"
 var $7=HEAP32[(($Val1)>>2)]; //@line 41 "cstdlib/time.c"
 var $Pointer2=$7; //@line 41 "cstdlib/time.c"
 HEAP32[(($Pointer2)>>2)]=$5; //@line 41 "cstdlib/time.c"
 return; //@line 42 "cstdlib/time.c"
}
function _StdGmtime_r($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 46 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 46 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 46 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 46 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 46 "cstdlib/time.c"
 var $Pointer=$2; //@line 46 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 46 "cstdlib/time.c"
 var $4=$3; //@line 46 "cstdlib/time.c"
 var $5=$Param_addr; //@line 46 "cstdlib/time.c"
 var $arrayidx1=(($5+4)|0); //@line 46 "cstdlib/time.c"
 var $6=HEAP32[(($arrayidx1)>>2)]; //@line 46 "cstdlib/time.c"
 var $Val2=(($6+4)|0); //@line 46 "cstdlib/time.c"
 var $7=HEAP32[(($Val2)>>2)]; //@line 46 "cstdlib/time.c"
 var $Pointer3=$7; //@line 46 "cstdlib/time.c"
 var $8=HEAP32[(($Pointer3)>>2)]; //@line 46 "cstdlib/time.c"
 var $9=$8; //@line 46 "cstdlib/time.c"
 var $call=_gmtime_r($4,$9); //@line 46 "cstdlib/time.c"
 var $10=$call; //@line 46 "cstdlib/time.c"
 var $11=$ReturnValue_addr; //@line 46 "cstdlib/time.c"
 var $Val4=(($11+4)|0); //@line 46 "cstdlib/time.c"
 var $12=HEAP32[(($Val4)>>2)]; //@line 46 "cstdlib/time.c"
 var $Pointer5=$12; //@line 46 "cstdlib/time.c"
 HEAP32[(($Pointer5)>>2)]=$10; //@line 46 "cstdlib/time.c"
 return; //@line 47 "cstdlib/time.c"
}
function _StdLocaltime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 51 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 51 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 51 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 51 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 51 "cstdlib/time.c"
 var $Pointer=$2; //@line 51 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 51 "cstdlib/time.c"
 var $4=$3; //@line 51 "cstdlib/time.c"
 var $call=_localtime($4); //@line 51 "cstdlib/time.c"
 var $5=$call; //@line 51 "cstdlib/time.c"
 var $6=$ReturnValue_addr; //@line 51 "cstdlib/time.c"
 var $Val1=(($6+4)|0); //@line 51 "cstdlib/time.c"
 var $7=HEAP32[(($Val1)>>2)]; //@line 51 "cstdlib/time.c"
 var $Pointer2=$7; //@line 51 "cstdlib/time.c"
 HEAP32[(($Pointer2)>>2)]=$5; //@line 51 "cstdlib/time.c"
 return; //@line 52 "cstdlib/time.c"
}
function _StdMktime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 56 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 56 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 56 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 56 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 56 "cstdlib/time.c"
 var $Pointer=$2; //@line 56 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 56 "cstdlib/time.c"
 var $4=$3; //@line 56 "cstdlib/time.c"
 var $call=_mktime($4); //@line 56 "cstdlib/time.c"
 var $5=$ReturnValue_addr; //@line 56 "cstdlib/time.c"
 var $Val1=(($5+4)|0); //@line 56 "cstdlib/time.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 56 "cstdlib/time.c"
 var $Integer=$6; //@line 56 "cstdlib/time.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 56 "cstdlib/time.c"
 return; //@line 57 "cstdlib/time.c"
}
function _StdTime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 61 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 61 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 61 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 61 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 61 "cstdlib/time.c"
 var $Pointer=$2; //@line 61 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 61 "cstdlib/time.c"
 var $4=$3; //@line 61 "cstdlib/time.c"
 var $call=_time($4); //@line 61 "cstdlib/time.c"
 var $5=$ReturnValue_addr; //@line 61 "cstdlib/time.c"
 var $Val1=(($5+4)|0); //@line 61 "cstdlib/time.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 61 "cstdlib/time.c"
 var $Integer=$6; //@line 61 "cstdlib/time.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 61 "cstdlib/time.c"
 return; //@line 62 "cstdlib/time.c"
}
function _StdStrftime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 66 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 66 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 66 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 66 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 66 "cstdlib/time.c"
 var $Pointer=$2; //@line 66 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 66 "cstdlib/time.c"
 var $4=$Param_addr; //@line 66 "cstdlib/time.c"
 var $arrayidx1=(($4+4)|0); //@line 66 "cstdlib/time.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 66 "cstdlib/time.c"
 var $Val2=(($5+4)|0); //@line 66 "cstdlib/time.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 66 "cstdlib/time.c"
 var $Integer=$6; //@line 66 "cstdlib/time.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 66 "cstdlib/time.c"
 var $8=$Param_addr; //@line 66 "cstdlib/time.c"
 var $arrayidx3=(($8+8)|0); //@line 66 "cstdlib/time.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 66 "cstdlib/time.c"
 var $Val4=(($9+4)|0); //@line 66 "cstdlib/time.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 66 "cstdlib/time.c"
 var $Pointer5=$10; //@line 66 "cstdlib/time.c"
 var $11=HEAP32[(($Pointer5)>>2)]; //@line 66 "cstdlib/time.c"
 var $12=$Param_addr; //@line 66 "cstdlib/time.c"
 var $arrayidx6=(($12+12)|0); //@line 66 "cstdlib/time.c"
 var $13=HEAP32[(($arrayidx6)>>2)]; //@line 66 "cstdlib/time.c"
 var $Val7=(($13+4)|0); //@line 66 "cstdlib/time.c"
 var $14=HEAP32[(($Val7)>>2)]; //@line 66 "cstdlib/time.c"
 var $Pointer8=$14; //@line 66 "cstdlib/time.c"
 var $15=HEAP32[(($Pointer8)>>2)]; //@line 66 "cstdlib/time.c"
 var $16=$15; //@line 66 "cstdlib/time.c"
 var $call=_strftime($3,$7,$11,$16); //@line 66 "cstdlib/time.c"
 var $17=$ReturnValue_addr; //@line 66 "cstdlib/time.c"
 var $Val9=(($17+4)|0); //@line 66 "cstdlib/time.c"
 var $18=HEAP32[(($Val9)>>2)]; //@line 66 "cstdlib/time.c"
 var $Integer10=$18; //@line 66 "cstdlib/time.c"
 HEAP32[(($Integer10)>>2)]=$call; //@line 66 "cstdlib/time.c"
 return; //@line 67 "cstdlib/time.c"
}
function _StdStrptime($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 73 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 73 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 73 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 73 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 73 "cstdlib/time.c"
 var $Pointer=$2; //@line 73 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 73 "cstdlib/time.c"
 var $4=$Param_addr; //@line 73 "cstdlib/time.c"
 var $arrayidx1=(($4+4)|0); //@line 73 "cstdlib/time.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 73 "cstdlib/time.c"
 var $Val2=(($5+4)|0); //@line 73 "cstdlib/time.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 73 "cstdlib/time.c"
 var $Pointer3=$6; //@line 73 "cstdlib/time.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 73 "cstdlib/time.c"
 var $8=$Param_addr; //@line 73 "cstdlib/time.c"
 var $arrayidx4=(($8+8)|0); //@line 73 "cstdlib/time.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 73 "cstdlib/time.c"
 var $Val5=(($9+4)|0); //@line 73 "cstdlib/time.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 73 "cstdlib/time.c"
 var $Pointer6=$10; //@line 73 "cstdlib/time.c"
 var $11=HEAP32[(($Pointer6)>>2)]; //@line 73 "cstdlib/time.c"
 var $12=$11; //@line 73 "cstdlib/time.c"
 var $call=_strptime($3,$7,$12); //@line 73 "cstdlib/time.c"
 var $13=$ReturnValue_addr; //@line 73 "cstdlib/time.c"
 var $Val7=(($13+4)|0); //@line 73 "cstdlib/time.c"
 var $14=HEAP32[(($Val7)>>2)]; //@line 73 "cstdlib/time.c"
 var $Pointer8=$14; //@line 73 "cstdlib/time.c"
 HEAP32[(($Pointer8)>>2)]=$call; //@line 73 "cstdlib/time.c"
 return; //@line 74 "cstdlib/time.c"
}
function _StdTimegm($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 78 "cstdlib/time.c"
 var $arrayidx=(($0)|0); //@line 78 "cstdlib/time.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 78 "cstdlib/time.c"
 var $Val=(($1+4)|0); //@line 78 "cstdlib/time.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 78 "cstdlib/time.c"
 var $Pointer=$2; //@line 78 "cstdlib/time.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 78 "cstdlib/time.c"
 var $4=$3; //@line 78 "cstdlib/time.c"
 var $call=_timegm($4); //@line 78 "cstdlib/time.c"
 var $5=$ReturnValue_addr; //@line 78 "cstdlib/time.c"
 var $Val1=(($5+4)|0); //@line 78 "cstdlib/time.c"
 var $6=HEAP32[(($Val1)>>2)]; //@line 78 "cstdlib/time.c"
 var $Integer=$6; //@line 78 "cstdlib/time.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 78 "cstdlib/time.c"
 return; //@line 79 "cstdlib/time.c"
}
function _StdTimeSetupFunc(){
 var label=0;
 var $call=_TableStrRegister(11136); //@line 112 "cstdlib/time.c"
 var $call1=_TypeCreateOpaqueStruct(0,$call,44); //@line 112 "cstdlib/time.c"
 _VariableDefinePlatformVar(0,10736,18408,16240,0); //@line 115 "cstdlib/time.c"
 return; //@line 122 "cstdlib/time.c"
}
function _StdErrnoSetupFunc(){
 var label=0;
 _VariableDefinePlatformVar(0,2896,18408,16224,0); //@line 333 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,10032,18408,16216,0); //@line 337 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7568,18408,16208,0); //@line 341 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5928,18408,16200,0); //@line 345 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4352,18408,16192,0); //@line 349 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2880,18408,16184,0); //@line 353 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1896,18408,16176,0); //@line 357 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1144,18408,16168,0); //@line 361 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,672,18408,16160,0); //@line 365 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,216,18408,16152,0); //@line 369 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,11840,18408,16144,0); //@line 373 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,11472,18408,16136,0); //@line 377 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,11120,18408,16128,0); //@line 381 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,10720,18408,16120,0); //@line 385 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,10432,18408,16112,0); //@line 389 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,10016,18408,16104,0); //@line 393 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,9720,18408,16096,0); //@line 397 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,9432,18408,16088,0); //@line 401 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,9240,18408,16080,0); //@line 405 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,9016,18408,16072,0); //@line 409 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,8824,18408,16064,0); //@line 413 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,8632,18408,16056,0); //@line 417 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,8376,18408,16048,0); //@line 421 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,8080,18408,16040,0); //@line 425 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7888,18408,16032,0); //@line 429 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7560,18408,16024,0); //@line 433 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7392,18408,16016,0); //@line 437 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7224,18408,16008,0); //@line 441 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,7040,18408,16000,0); //@line 445 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6944,18408,15992,0); //@line 449 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6848,18408,15984,0); //@line 453 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6712,18408,15976,0); //@line 457 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6552,18408,15968,0); //@line 461 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6328,18408,15960,0); //@line 465 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,6160,18408,15952,0); //@line 469 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5912,18408,15944,0); //@line 473 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5760,18408,15936,0); //@line 477 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5616,18408,15928,0); //@line 481 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5480,18408,15920,0); //@line 485 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5344,18408,15912,0); //@line 489 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5248,18408,15904,0); //@line 493 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,5128,18408,15896,0); //@line 497 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4952,18408,15888,0); //@line 501 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4696,18408,15880,0); //@line 505 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4552,18408,15872,0); //@line 509 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4344,18408,15864,0); //@line 513 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4200,18408,15856,0); //@line 517 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,4040,18408,15848,0); //@line 521 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3904,18408,15840,0); //@line 525 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3712,18408,15832,0); //@line 529 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3608,18408,15824,0); //@line 533 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3504,18408,15816,0); //@line 537 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3392,18408,15808,0); //@line 541 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3248,18408,15800,0); //@line 545 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,3112,18408,15792,0); //@line 549 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2872,18408,15784,0); //@line 553 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2752,18408,15776,0); //@line 557 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2672,18408,15768,0); //@line 561 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2608,18408,15760,0); //@line 565 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2544,18408,15752,0); //@line 569 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2480,18408,15744,0); //@line 573 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2400,18408,15736,0); //@line 577 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2272,18408,15720,0); //@line 581 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2152,18408,15712,0); //@line 585 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,2048,18408,15704,0); //@line 589 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1888,18408,15696,0); //@line 593 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1728,18408,15688,0); //@line 597 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1656,18408,15664,0); //@line 601 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1616,18408,15680,0); //@line 605 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1536,18408,15672,0); //@line 609 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1472,18408,15656,0); //@line 613 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1448,18408,15648,0); //@line 617 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1360,18408,15640,0); //@line 621 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1288,18408,15632,0); //@line 625 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1248,18408,15624,0); //@line 629 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1136,18408,15608,0); //@line 633 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1064,18408,15616,0); //@line 637 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1024,18408,15600,0); //@line 641 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,1000,18408,15592,0); //@line 645 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,952,18408,15584,0); //@line 649 "cstdlib/errno.c"
 var $call=___errno_location(); //@line 652 "cstdlib/errno.c"
 var $0=$call; //@line 652 "cstdlib/errno.c"
 _VariableDefinePlatformVar(0,904,18408,$0,1); //@line 652 "cstdlib/errno.c"
 return; //@line 653 "cstdlib/errno.c"
}
function _StdIsalnum($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 9 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 9 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 9 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 9 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 9 "cstdlib/ctype.c"
 var $Integer=$2; //@line 9 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 9 "cstdlib/ctype.c"
 var $call=_isalnum($3); //@line 9 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 9 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 9 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 9 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 9 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 9 "cstdlib/ctype.c"
 return; //@line 10 "cstdlib/ctype.c"
}
function _StdIsalpha($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 14 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 14 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 14 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 14 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 14 "cstdlib/ctype.c"
 var $Integer=$2; //@line 14 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 14 "cstdlib/ctype.c"
 var $or=$3|32; //@line 14 "cstdlib/ctype.c"
 var $sub=((($or)-(97))|0); //@line 14 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<26; //@line 14 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 14 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 14 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 14 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 14 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 14 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 14 "cstdlib/ctype.c"
 return; //@line 15 "cstdlib/ctype.c"
}
function _StdIsblank($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 var $ch;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 19 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 19 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 19 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 19 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 19 "cstdlib/ctype.c"
 var $Integer=$2; //@line 19 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 19 "cstdlib/ctype.c"
 $ch=$3; //@line 19 "cstdlib/ctype.c"
 var $4=$ch; //@line 20 "cstdlib/ctype.c"
 var $cmp=($4|0)==32; //@line 20 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 20 "cstdlib/ctype.c"
 var $5=$ch; //@line 20 "cstdlib/ctype.c"
 var $cmp1=($5|0)==9; //@line 20 "cstdlib/ctype.c"
 var $conv2=($cmp1&1); //@line 20 "cstdlib/ctype.c"
 var $or=$conv|$conv2; //@line 20 "cstdlib/ctype.c"
 var $6=$ReturnValue_addr; //@line 20 "cstdlib/ctype.c"
 var $Val3=(($6+4)|0); //@line 20 "cstdlib/ctype.c"
 var $7=HEAP32[(($Val3)>>2)]; //@line 20 "cstdlib/ctype.c"
 var $Integer4=$7; //@line 20 "cstdlib/ctype.c"
 HEAP32[(($Integer4)>>2)]=$or; //@line 20 "cstdlib/ctype.c"
 return; //@line 21 "cstdlib/ctype.c"
}
function _StdIscntrl($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 25 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 25 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 25 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 25 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 25 "cstdlib/ctype.c"
 var $Integer=$2; //@line 25 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 25 "cstdlib/ctype.c"
 var $call=_iscntrl($3); //@line 25 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 25 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 25 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 25 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 25 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 25 "cstdlib/ctype.c"
 return; //@line 26 "cstdlib/ctype.c"
}
function _StdIsdigit($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 30 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 30 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 30 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 30 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 30 "cstdlib/ctype.c"
 var $Integer=$2; //@line 30 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 30 "cstdlib/ctype.c"
 var $sub=((($3)-(48))|0); //@line 30 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<10; //@line 30 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 30 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 30 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 30 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 30 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 30 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 30 "cstdlib/ctype.c"
 return; //@line 31 "cstdlib/ctype.c"
}
function _StdIsgraph($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 35 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 35 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 35 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 35 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 35 "cstdlib/ctype.c"
 var $Integer=$2; //@line 35 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 35 "cstdlib/ctype.c"
 var $sub=((($3)-(33))|0); //@line 35 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<94; //@line 35 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 35 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 35 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 35 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 35 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 35 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 35 "cstdlib/ctype.c"
 return; //@line 36 "cstdlib/ctype.c"
}
function _StdIslower($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 40 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 40 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 40 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 40 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 40 "cstdlib/ctype.c"
 var $Integer=$2; //@line 40 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 40 "cstdlib/ctype.c"
 var $sub=((($3)-(97))|0); //@line 40 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<26; //@line 40 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 40 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 40 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 40 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 40 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 40 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 40 "cstdlib/ctype.c"
 return; //@line 41 "cstdlib/ctype.c"
}
function _StdIsprint($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 45 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 45 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 45 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 45 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 45 "cstdlib/ctype.c"
 var $Integer=$2; //@line 45 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 45 "cstdlib/ctype.c"
 var $sub=((($3)-(32))|0); //@line 45 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<95; //@line 45 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 45 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 45 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 45 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 45 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 45 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 45 "cstdlib/ctype.c"
 return; //@line 46 "cstdlib/ctype.c"
}
function _StdIspunct($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 50 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 50 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 50 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 50 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 50 "cstdlib/ctype.c"
 var $Integer=$2; //@line 50 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 50 "cstdlib/ctype.c"
 var $call=_ispunct($3); //@line 50 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 50 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 50 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 50 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 50 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 50 "cstdlib/ctype.c"
 return; //@line 51 "cstdlib/ctype.c"
}
function _StdIsspace($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 55 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 55 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 55 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 55 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 55 "cstdlib/ctype.c"
 var $Integer=$2; //@line 55 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 55 "cstdlib/ctype.c"
 var $call=_isspace($3); //@line 55 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 55 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 55 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 55 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 55 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 55 "cstdlib/ctype.c"
 return; //@line 56 "cstdlib/ctype.c"
}
function _StdIsupper($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 60 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 60 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 60 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 60 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 60 "cstdlib/ctype.c"
 var $Integer=$2; //@line 60 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 60 "cstdlib/ctype.c"
 var $sub=((($3)-(65))|0); //@line 60 "cstdlib/ctype.c"
 var $cmp=($sub>>>0)<26; //@line 60 "cstdlib/ctype.c"
 var $conv=($cmp&1); //@line 60 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 60 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 60 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 60 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 60 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$conv; //@line 60 "cstdlib/ctype.c"
 return; //@line 61 "cstdlib/ctype.c"
}
function _StdIsxdigit($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 65 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 65 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 65 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 65 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 65 "cstdlib/ctype.c"
 var $Integer=$2; //@line 65 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 65 "cstdlib/ctype.c"
 var $call=_isxdigit($3); //@line 65 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 65 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 65 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 65 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 65 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 65 "cstdlib/ctype.c"
 return; //@line 66 "cstdlib/ctype.c"
}
function _StdTolower($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 70 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 70 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 70 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 70 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 70 "cstdlib/ctype.c"
 var $Integer=$2; //@line 70 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 70 "cstdlib/ctype.c"
 var $call=_tolower($3); //@line 70 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 70 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 70 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 70 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 70 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 70 "cstdlib/ctype.c"
 return; //@line 71 "cstdlib/ctype.c"
}
function _StdToupper($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 75 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 75 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 75 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 75 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 75 "cstdlib/ctype.c"
 var $Integer=$2; //@line 75 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 75 "cstdlib/ctype.c"
 var $call=_toupper($3); //@line 75 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 75 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 75 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 75 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 75 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 75 "cstdlib/ctype.c"
 return; //@line 76 "cstdlib/ctype.c"
}
function _StdIsascii($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 80 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 80 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 80 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 80 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 80 "cstdlib/ctype.c"
 var $Integer=$2; //@line 80 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 80 "cstdlib/ctype.c"
 var $call=_isascii($3); //@line 80 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 80 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 80 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 80 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 80 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 80 "cstdlib/ctype.c"
 return; //@line 81 "cstdlib/ctype.c"
}
function _StdToascii($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 85 "cstdlib/ctype.c"
 var $arrayidx=(($0)|0); //@line 85 "cstdlib/ctype.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 85 "cstdlib/ctype.c"
 var $Val=(($1+4)|0); //@line 85 "cstdlib/ctype.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 85 "cstdlib/ctype.c"
 var $Integer=$2; //@line 85 "cstdlib/ctype.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 85 "cstdlib/ctype.c"
 var $call=_toascii($3); //@line 85 "cstdlib/ctype.c"
 var $4=$ReturnValue_addr; //@line 85 "cstdlib/ctype.c"
 var $Val1=(($4+4)|0); //@line 85 "cstdlib/ctype.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 85 "cstdlib/ctype.c"
 var $Integer2=$5; //@line 85 "cstdlib/ctype.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 85 "cstdlib/ctype.c"
 return; //@line 86 "cstdlib/ctype.c"
}
function _StdboolSetupFunc(){
 var label=0;
 _VariableDefinePlatformVar(0,1840,18408,8,0); //@line 17 "cstdlib/stdbool.c"
 _VariableDefinePlatformVar(0,9712,18408,16312,0); //@line 18 "cstdlib/stdbool.c"
 _VariableDefinePlatformVar(0,7360,18408,8,0); //@line 19 "cstdlib/stdbool.c"
 return; //@line 20 "cstdlib/stdbool.c"
}
function _UnistdAccess($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 13 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 13 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 13 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 13 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 13 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 13 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 13 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $Integer=$6; //@line 13 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $call=_access($3,$7); //@line 13 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 13 "cstdlib/unistd.c"
 var $Val3=(($8+4)|0); //@line 13 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 13 "cstdlib/unistd.c"
 var $Integer4=$9; //@line 13 "cstdlib/unistd.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 13 "cstdlib/unistd.c"
 return; //@line 14 "cstdlib/unistd.c"
}
function _UnistdAlarm($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 18 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 18 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 18 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 18 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 18 "cstdlib/unistd.c"
 var $Integer=$2; //@line 18 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 18 "cstdlib/unistd.c"
 var $call=_alarm($3); //@line 18 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 18 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 18 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 18 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 18 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 18 "cstdlib/unistd.c"
 return; //@line 19 "cstdlib/unistd.c"
}
function _UnistdChdir($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 23 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 23 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 23 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 23 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 23 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 23 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 23 "cstdlib/unistd.c"
 var $call=_chdir($3); //@line 23 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 23 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 23 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 23 "cstdlib/unistd.c"
 var $Integer=$5; //@line 23 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 23 "cstdlib/unistd.c"
 return; //@line 24 "cstdlib/unistd.c"
}
function _UnistdChroot($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 28 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 28 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 28 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 28 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 28 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 28 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 28 "cstdlib/unistd.c"
 var $call=_chroot($3); //@line 28 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 28 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 28 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 28 "cstdlib/unistd.c"
 var $Integer=$5; //@line 28 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 28 "cstdlib/unistd.c"
 return; //@line 29 "cstdlib/unistd.c"
}
function _UnistdChown($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 33 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 33 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 33 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 33 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 33 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 33 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 33 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Integer=$6; //@line 33 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 33 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 33 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 33 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 33 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $call=_chown($3,$7,$11); //@line 33 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 33 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 33 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 33 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 33 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 33 "cstdlib/unistd.c"
 return; //@line 34 "cstdlib/unistd.c"
}
function _UnistdClose($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 38 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 38 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 38 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 38 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 38 "cstdlib/unistd.c"
 var $Integer=$2; //@line 38 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 38 "cstdlib/unistd.c"
 var $call=_close($3); //@line 38 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 38 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 38 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 38 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 38 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 38 "cstdlib/unistd.c"
 return; //@line 39 "cstdlib/unistd.c"
}
function _UnistdConfstr($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 43 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 43 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 43 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Integer=$2; //@line 43 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 43 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 43 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 43 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Pointer=$6; //@line 43 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 43 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 43 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 43 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 43 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $call=_confstr($3,$7,$11); //@line 43 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 43 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 43 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 43 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 43 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 43 "cstdlib/unistd.c"
 return; //@line 44 "cstdlib/unistd.c"
}
function _UnistdCtermid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 48 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 48 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 48 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 48 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 48 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 48 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 48 "cstdlib/unistd.c"
 var $call=_ctermid($3); //@line 48 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 48 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 48 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 48 "cstdlib/unistd.c"
 var $Pointer2=$5; //@line 48 "cstdlib/unistd.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 48 "cstdlib/unistd.c"
 return; //@line 49 "cstdlib/unistd.c"
}
function _UnistdDup($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 60 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 60 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 60 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 60 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 60 "cstdlib/unistd.c"
 var $Integer=$2; //@line 60 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 60 "cstdlib/unistd.c"
 var $call=_dup($3); //@line 60 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 60 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 60 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 60 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 60 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 60 "cstdlib/unistd.c"
 return; //@line 61 "cstdlib/unistd.c"
}
function _UnistdDup2($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 65 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 65 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 65 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $Integer=$2; //@line 65 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 65 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 65 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 65 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 65 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $call=_dup2($3,$7); //@line 65 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 65 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 65 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 65 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 65 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 65 "cstdlib/unistd.c"
 return; //@line 66 "cstdlib/unistd.c"
}
function _Unistd_Exit($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 70 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 70 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 70 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 70 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 70 "cstdlib/unistd.c"
 var $Integer=$2; //@line 70 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 70 "cstdlib/unistd.c"
 __exit($3); //@line 70 "cstdlib/unistd.c"
 throw "Reached an unreachable!"; //@line 70 "cstdlib/unistd.c"
 case 2: 
 return; //@line 71 "cstdlib/unistd.c"
  default: assert(0, "bad label: " + label);
 }
}
function _UnistdFchown($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 75 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 75 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 75 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Integer=$2; //@line 75 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 75 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 75 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 75 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 75 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 75 "cstdlib/unistd.c"
 var $arrayidx4=(($8+8)|0); //@line 75 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Val5=(($9+4)|0); //@line 75 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Integer6=$10; //@line 75 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer6)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $call=_fchown($3,$7,$11); //@line 75 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 75 "cstdlib/unistd.c"
 var $Val7=(($12+4)|0); //@line 75 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val7)>>2)]; //@line 75 "cstdlib/unistd.c"
 var $Integer8=$13; //@line 75 "cstdlib/unistd.c"
 HEAP32[(($Integer8)>>2)]=$call; //@line 75 "cstdlib/unistd.c"
 return; //@line 76 "cstdlib/unistd.c"
}
function _UnistdFchdir($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 80 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 80 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 80 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 80 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 80 "cstdlib/unistd.c"
 var $Integer=$2; //@line 80 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 80 "cstdlib/unistd.c"
 var $call=_fchdir($3); //@line 80 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 80 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 80 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 80 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 80 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 80 "cstdlib/unistd.c"
 return; //@line 81 "cstdlib/unistd.c"
}
function _UnistdFdatasync($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 85 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 85 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 85 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 85 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 85 "cstdlib/unistd.c"
 var $Integer=$2; //@line 85 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 85 "cstdlib/unistd.c"
 var $call=_fsync($3); //@line 85 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 85 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 85 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 85 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 85 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 85 "cstdlib/unistd.c"
 return; //@line 86 "cstdlib/unistd.c"
}
function _UnistdFork($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_fork(); //@line 90 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 90 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 90 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 90 "cstdlib/unistd.c"
 var $Integer=$1; //@line 90 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 90 "cstdlib/unistd.c"
 return; //@line 91 "cstdlib/unistd.c"
}
function _UnistdFpathconf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 95 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 95 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 95 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $Integer=$2; //@line 95 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 95 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 95 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 95 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 95 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $call=_fpathconf($3,$7); //@line 95 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 95 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 95 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 95 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 95 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 95 "cstdlib/unistd.c"
 return; //@line 96 "cstdlib/unistd.c"
}
function _UnistdFsync($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 100 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 100 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 100 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 100 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 100 "cstdlib/unistd.c"
 var $Integer=$2; //@line 100 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 100 "cstdlib/unistd.c"
 var $call=_fsync($3); //@line 100 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 100 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 100 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 100 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 100 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 100 "cstdlib/unistd.c"
 return; //@line 101 "cstdlib/unistd.c"
}
function _UnistdFtruncate($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 105 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 105 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 105 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $Integer=$2; //@line 105 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 105 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 105 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 105 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 105 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $call=_ftruncate($3,$7); //@line 105 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 105 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 105 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 105 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 105 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 105 "cstdlib/unistd.c"
 return; //@line 106 "cstdlib/unistd.c"
}
function _UnistdGetcwd($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 110 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 110 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 110 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 110 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 110 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 110 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 110 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $Integer=$6; //@line 110 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $call=_getcwd($3,$7); //@line 110 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 110 "cstdlib/unistd.c"
 var $Val3=(($8+4)|0); //@line 110 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 110 "cstdlib/unistd.c"
 var $Pointer4=$9; //@line 110 "cstdlib/unistd.c"
 HEAP32[(($Pointer4)>>2)]=$call; //@line 110 "cstdlib/unistd.c"
 return; //@line 111 "cstdlib/unistd.c"
}
function _UnistdGetdtablesize($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getdtablesize(); //@line 115 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 115 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 115 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 115 "cstdlib/unistd.c"
 var $Integer=$1; //@line 115 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 115 "cstdlib/unistd.c"
 return; //@line 116 "cstdlib/unistd.c"
}
function _UnistdGetegid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 120 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 120 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 120 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 120 "cstdlib/unistd.c"
 var $Integer=$1; //@line 120 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 120 "cstdlib/unistd.c"
 return; //@line 121 "cstdlib/unistd.c"
}
function _UnistdGeteuid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 125 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 125 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 125 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 125 "cstdlib/unistd.c"
 var $Integer=$1; //@line 125 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 125 "cstdlib/unistd.c"
 return; //@line 126 "cstdlib/unistd.c"
}
function _UnistdGetgid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 130 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 130 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 130 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 130 "cstdlib/unistd.c"
 var $Integer=$1; //@line 130 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 130 "cstdlib/unistd.c"
 return; //@line 131 "cstdlib/unistd.c"
}
function _UnistdGethostid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_gethostid(); //@line 135 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 135 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 135 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 135 "cstdlib/unistd.c"
 var $Integer=$1; //@line 135 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 135 "cstdlib/unistd.c"
 return; //@line 136 "cstdlib/unistd.c"
}
function _UnistdGetlogin($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getlogin(); //@line 140 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 140 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 140 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 140 "cstdlib/unistd.c"
 var $Pointer=$1; //@line 140 "cstdlib/unistd.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 140 "cstdlib/unistd.c"
 return; //@line 141 "cstdlib/unistd.c"
}
function _UnistdGetlogin_r($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 145 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 145 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 145 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 145 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 145 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 145 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 145 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $Integer=$6; //@line 145 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $call=_getlogin_r($3,$7); //@line 145 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 145 "cstdlib/unistd.c"
 var $Val3=(($8+4)|0); //@line 145 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 145 "cstdlib/unistd.c"
 var $Integer4=$9; //@line 145 "cstdlib/unistd.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 145 "cstdlib/unistd.c"
 return; //@line 146 "cstdlib/unistd.c"
}
function _UnistdGetpagesize($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getpagesize(); //@line 150 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 150 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 150 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 150 "cstdlib/unistd.c"
 var $Integer=$1; //@line 150 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 150 "cstdlib/unistd.c"
 return; //@line 151 "cstdlib/unistd.c"
}
function _UnistdGetpass($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 155 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 155 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 155 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 155 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 155 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 155 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 155 "cstdlib/unistd.c"
 var $call=_getpass($3); //@line 155 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 155 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 155 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 155 "cstdlib/unistd.c"
 var $Pointer2=$5; //@line 155 "cstdlib/unistd.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 155 "cstdlib/unistd.c"
 return; //@line 156 "cstdlib/unistd.c"
}
function _UnistdGetpgrp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 167 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 167 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 167 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 167 "cstdlib/unistd.c"
 var $Integer=$1; //@line 167 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 167 "cstdlib/unistd.c"
 return; //@line 168 "cstdlib/unistd.c"
}
function _UnistdGetpid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 172 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 172 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 172 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 172 "cstdlib/unistd.c"
 var $Integer=$1; //@line 172 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 172 "cstdlib/unistd.c"
 return; //@line 173 "cstdlib/unistd.c"
}
function _UnistdGetppid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 177 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 177 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 177 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 177 "cstdlib/unistd.c"
 var $Integer=$1; //@line 177 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 177 "cstdlib/unistd.c"
 return; //@line 178 "cstdlib/unistd.c"
}
function _UnistdGetuid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_getgid(); //@line 189 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 189 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 189 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 189 "cstdlib/unistd.c"
 var $Integer=$1; //@line 189 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 189 "cstdlib/unistd.c"
 return; //@line 190 "cstdlib/unistd.c"
}
function _UnistdGetwd($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 194 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 194 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 194 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 194 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 194 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 194 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 194 "cstdlib/unistd.c"
 var $call=_getcwd($3,4096); //@line 194 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 194 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 194 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 194 "cstdlib/unistd.c"
 var $Pointer2=$5; //@line 194 "cstdlib/unistd.c"
 HEAP32[(($Pointer2)>>2)]=$call; //@line 194 "cstdlib/unistd.c"
 return; //@line 195 "cstdlib/unistd.c"
}
function _UnistdIsatty($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 199 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 199 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 199 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 199 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 199 "cstdlib/unistd.c"
 var $Integer=$2; //@line 199 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 199 "cstdlib/unistd.c"
 var $call=_isatty($3); //@line 199 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 199 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 199 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 199 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 199 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 199 "cstdlib/unistd.c"
 return; //@line 200 "cstdlib/unistd.c"
}
function _UnistdLchown($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 204 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 204 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 204 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 204 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 204 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 204 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 204 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Integer=$6; //@line 204 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 204 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 204 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 204 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 204 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $call=_lchown($3,$7,$11); //@line 204 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 204 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 204 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 204 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 204 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 204 "cstdlib/unistd.c"
 return; //@line 205 "cstdlib/unistd.c"
}
function _UnistdLink($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 209 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 209 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 209 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 209 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 209 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 209 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 209 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $Pointer3=$6; //@line 209 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $call=_link($3,$7); //@line 209 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 209 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 209 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 209 "cstdlib/unistd.c"
 var $Integer=$9; //@line 209 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 209 "cstdlib/unistd.c"
 return; //@line 210 "cstdlib/unistd.c"
}
function _UnistdLockf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 214 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 214 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 214 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Integer=$2; //@line 214 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 214 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 214 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 214 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 214 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 214 "cstdlib/unistd.c"
 var $arrayidx4=(($8+8)|0); //@line 214 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Val5=(($9+4)|0); //@line 214 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Integer6=$10; //@line 214 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer6)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $call=_lockf($3,$7,$11); //@line 214 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 214 "cstdlib/unistd.c"
 var $Val7=(($12+4)|0); //@line 214 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val7)>>2)]; //@line 214 "cstdlib/unistd.c"
 var $Integer8=$13; //@line 214 "cstdlib/unistd.c"
 HEAP32[(($Integer8)>>2)]=$call; //@line 214 "cstdlib/unistd.c"
 return; //@line 215 "cstdlib/unistd.c"
}
function _UnistdLseek($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 219 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 219 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 219 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Integer=$2; //@line 219 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 219 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 219 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 219 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 219 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 219 "cstdlib/unistd.c"
 var $arrayidx4=(($8+8)|0); //@line 219 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Val5=(($9+4)|0); //@line 219 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Integer6=$10; //@line 219 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer6)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $call=_lseek($3,$7,$11); //@line 219 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 219 "cstdlib/unistd.c"
 var $Val7=(($12+4)|0); //@line 219 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val7)>>2)]; //@line 219 "cstdlib/unistd.c"
 var $Integer8=$13; //@line 219 "cstdlib/unistd.c"
 HEAP32[(($Integer8)>>2)]=$call; //@line 219 "cstdlib/unistd.c"
 return; //@line 220 "cstdlib/unistd.c"
}
function _UnistdNice($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 224 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 224 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 224 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 224 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 224 "cstdlib/unistd.c"
 var $Integer=$2; //@line 224 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 224 "cstdlib/unistd.c"
 var $call=_nice($3); //@line 224 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 224 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 224 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 224 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 224 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 224 "cstdlib/unistd.c"
 return; //@line 225 "cstdlib/unistd.c"
}
function _UnistdPathconf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 229 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 229 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 229 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 229 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 229 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 229 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 229 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $Integer=$6; //@line 229 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $call=_fpathconf($3,$7); //@line 229 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 229 "cstdlib/unistd.c"
 var $Val3=(($8+4)|0); //@line 229 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 229 "cstdlib/unistd.c"
 var $Integer4=$9; //@line 229 "cstdlib/unistd.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 229 "cstdlib/unistd.c"
 return; //@line 230 "cstdlib/unistd.c"
}
function _UnistdPause($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_pause(); //@line 234 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 234 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 234 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 234 "cstdlib/unistd.c"
 var $Integer=$1; //@line 234 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 234 "cstdlib/unistd.c"
 return; //@line 235 "cstdlib/unistd.c"
}
function _UnistdRead($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 251 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 251 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 251 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Integer=$2; //@line 251 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 251 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 251 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 251 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Pointer=$6; //@line 251 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 251 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 251 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 251 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 251 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $call=_read($3,$7,$11); //@line 251 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 251 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 251 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 251 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 251 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 251 "cstdlib/unistd.c"
 return; //@line 252 "cstdlib/unistd.c"
}
function _UnistdReadlink($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 256 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 256 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 256 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 256 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 256 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 256 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 256 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Pointer3=$6; //@line 256 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 256 "cstdlib/unistd.c"
 var $arrayidx4=(($8+8)|0); //@line 256 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx4)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Val5=(($9+4)|0); //@line 256 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val5)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Integer=$10; //@line 256 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $call=_readlink($3,$7,$11); //@line 256 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 256 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 256 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 256 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 256 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 256 "cstdlib/unistd.c"
 return; //@line 257 "cstdlib/unistd.c"
}
function _UnistdRmdir($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 261 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 261 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 261 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 261 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 261 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 261 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 261 "cstdlib/unistd.c"
 var $call=_rmdir($3); //@line 261 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 261 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 261 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 261 "cstdlib/unistd.c"
 var $Integer=$5; //@line 261 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 261 "cstdlib/unistd.c"
 return; //@line 262 "cstdlib/unistd.c"
}
function _UnistdSbrk($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 266 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 266 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 266 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 266 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 266 "cstdlib/unistd.c"
 var $Integer=$2; //@line 266 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 266 "cstdlib/unistd.c"
 var $call=_sbrk($3); //@line 266 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 266 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 266 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 266 "cstdlib/unistd.c"
 var $Pointer=$5; //@line 266 "cstdlib/unistd.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 266 "cstdlib/unistd.c"
 return; //@line 267 "cstdlib/unistd.c"
}
function _UnistdSetgid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 271 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 271 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 271 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 271 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 271 "cstdlib/unistd.c"
 var $Integer=$2; //@line 271 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 271 "cstdlib/unistd.c"
 var $call=_setgid($3); //@line 271 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 271 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 271 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 271 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 271 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 271 "cstdlib/unistd.c"
 return; //@line 272 "cstdlib/unistd.c"
}
function _UnistdSetpgid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 276 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 276 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 276 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $Integer=$2; //@line 276 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 276 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 276 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 276 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 276 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $call=_setpgid($3,$7); //@line 276 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 276 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 276 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 276 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 276 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 276 "cstdlib/unistd.c"
 return; //@line 277 "cstdlib/unistd.c"
}
function _UnistdSetpgrp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_setgid(); //@line 281 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 281 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 281 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 281 "cstdlib/unistd.c"
 var $Integer=$1; //@line 281 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 281 "cstdlib/unistd.c"
 return; //@line 282 "cstdlib/unistd.c"
}
function _UnistdSetregid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 286 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 286 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 286 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $Integer=$2; //@line 286 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 286 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 286 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 286 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 286 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $call=_setpgid($3,$7); //@line 286 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 286 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 286 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 286 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 286 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 286 "cstdlib/unistd.c"
 return; //@line 287 "cstdlib/unistd.c"
}
function _UnistdSetreuid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 291 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 291 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 291 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $Integer=$2; //@line 291 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 291 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 291 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 291 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 291 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $call=_setpgid($3,$7); //@line 291 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 291 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 291 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 291 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 291 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 291 "cstdlib/unistd.c"
 return; //@line 292 "cstdlib/unistd.c"
}
function _UnistdSetsid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_setgid(); //@line 296 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 296 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 296 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 296 "cstdlib/unistd.c"
 var $Integer=$1; //@line 296 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 296 "cstdlib/unistd.c"
 return; //@line 297 "cstdlib/unistd.c"
}
function _UnistdSetuid($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 301 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 301 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 301 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 301 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 301 "cstdlib/unistd.c"
 var $Integer=$2; //@line 301 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 301 "cstdlib/unistd.c"
 var $call=_setgid($3); //@line 301 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 301 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 301 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 301 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 301 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 301 "cstdlib/unistd.c"
 return; //@line 302 "cstdlib/unistd.c"
}
function _UnistdSleep($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 306 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 306 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 306 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 306 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 306 "cstdlib/unistd.c"
 var $Integer=$2; //@line 306 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 306 "cstdlib/unistd.c"
 var $call=_sleep($3); //@line 306 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 306 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 306 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 306 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 306 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 306 "cstdlib/unistd.c"
 return; //@line 307 "cstdlib/unistd.c"
}
function _UnistdSymlink($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 318 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 318 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 318 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 318 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 318 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 318 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 318 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $Pointer3=$6; //@line 318 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer3)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $call=_symlink($3,$7); //@line 318 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 318 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 318 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 318 "cstdlib/unistd.c"
 var $Integer=$9; //@line 318 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 318 "cstdlib/unistd.c"
 return; //@line 319 "cstdlib/unistd.c"
}
function _UnistdSync($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 _sync(); //@line 323 "cstdlib/unistd.c"
 return; //@line 324 "cstdlib/unistd.c"
}
function _UnistdSysconf($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 328 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 328 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 328 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 328 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 328 "cstdlib/unistd.c"
 var $Integer=$2; //@line 328 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 328 "cstdlib/unistd.c"
 var $call=_sysconf($3); //@line 328 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 328 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 328 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 328 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 328 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 328 "cstdlib/unistd.c"
 return; //@line 329 "cstdlib/unistd.c"
}
function _UnistdTcgetpgrp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 333 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 333 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 333 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 333 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 333 "cstdlib/unistd.c"
 var $Integer=$2; //@line 333 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 333 "cstdlib/unistd.c"
 var $call=_tcgetpgrp($3); //@line 333 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 333 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 333 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 333 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 333 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 333 "cstdlib/unistd.c"
 return; //@line 334 "cstdlib/unistd.c"
}
function _UnistdTcsetpgrp($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 338 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 338 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 338 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $Integer=$2; //@line 338 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 338 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 338 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 338 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 338 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $call=_tcsetpgrp($3,$7); //@line 338 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 338 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 338 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 338 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 338 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 338 "cstdlib/unistd.c"
 return; //@line 339 "cstdlib/unistd.c"
}
function _UnistdTruncate($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 343 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 343 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 343 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 343 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 343 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 343 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 343 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $Integer=$6; //@line 343 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $call=_truncate($3,$7); //@line 343 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 343 "cstdlib/unistd.c"
 var $Val3=(($8+4)|0); //@line 343 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val3)>>2)]; //@line 343 "cstdlib/unistd.c"
 var $Integer4=$9; //@line 343 "cstdlib/unistd.c"
 HEAP32[(($Integer4)>>2)]=$call; //@line 343 "cstdlib/unistd.c"
 return; //@line 344 "cstdlib/unistd.c"
}
function _UnistdTtyname($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 348 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 348 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 348 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 348 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 348 "cstdlib/unistd.c"
 var $Integer=$2; //@line 348 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 348 "cstdlib/unistd.c"
 var $call=_ttyname($3); //@line 348 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 348 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 348 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 348 "cstdlib/unistd.c"
 var $Pointer=$5; //@line 348 "cstdlib/unistd.c"
 HEAP32[(($Pointer)>>2)]=$call; //@line 348 "cstdlib/unistd.c"
 return; //@line 349 "cstdlib/unistd.c"
}
function _UnistdTtyname_r($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 353 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 353 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 353 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Integer=$2; //@line 353 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 353 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 353 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 353 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Pointer=$6; //@line 353 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 353 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 353 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 353 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 353 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $call=_ttyname_r($3,$7,$11); //@line 353 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 353 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 353 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 353 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 353 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 353 "cstdlib/unistd.c"
 return; //@line 354 "cstdlib/unistd.c"
}
function _UnistdUalarm($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 358 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 358 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 358 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $Integer=$2; //@line 358 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 358 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 358 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 358 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $Integer3=$6; //@line 358 "cstdlib/unistd.c"
 var $7=HEAP32[(($Integer3)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $call=_alarm($3,$7); //@line 358 "cstdlib/unistd.c"
 var $8=$ReturnValue_addr; //@line 358 "cstdlib/unistd.c"
 var $Val4=(($8+4)|0); //@line 358 "cstdlib/unistd.c"
 var $9=HEAP32[(($Val4)>>2)]; //@line 358 "cstdlib/unistd.c"
 var $Integer5=$9; //@line 358 "cstdlib/unistd.c"
 HEAP32[(($Integer5)>>2)]=$call; //@line 358 "cstdlib/unistd.c"
 return; //@line 359 "cstdlib/unistd.c"
}
function _UnistdUnlink($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 363 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 363 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 363 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 363 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 363 "cstdlib/unistd.c"
 var $Pointer=$2; //@line 363 "cstdlib/unistd.c"
 var $3=HEAP32[(($Pointer)>>2)]; //@line 363 "cstdlib/unistd.c"
 var $call=_unlink($3); //@line 363 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 363 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 363 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 363 "cstdlib/unistd.c"
 var $Integer=$5; //@line 363 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 363 "cstdlib/unistd.c"
 return; //@line 364 "cstdlib/unistd.c"
}
function _UnistdUsleep($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 368 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 368 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 368 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 368 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 368 "cstdlib/unistd.c"
 var $Integer=$2; //@line 368 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 368 "cstdlib/unistd.c"
 var $call=_usleep($3); //@line 368 "cstdlib/unistd.c"
 var $4=$ReturnValue_addr; //@line 368 "cstdlib/unistd.c"
 var $Val1=(($4+4)|0); //@line 368 "cstdlib/unistd.c"
 var $5=HEAP32[(($Val1)>>2)]; //@line 368 "cstdlib/unistd.c"
 var $Integer2=$5; //@line 368 "cstdlib/unistd.c"
 HEAP32[(($Integer2)>>2)]=$call; //@line 368 "cstdlib/unistd.c"
 return; //@line 369 "cstdlib/unistd.c"
}
function _UnistdVfork($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $call=_fork(); //@line 373 "cstdlib/unistd.c"
 var $0=$ReturnValue_addr; //@line 373 "cstdlib/unistd.c"
 var $Val=(($0+4)|0); //@line 373 "cstdlib/unistd.c"
 var $1=HEAP32[(($Val)>>2)]; //@line 373 "cstdlib/unistd.c"
 var $Integer=$1; //@line 373 "cstdlib/unistd.c"
 HEAP32[(($Integer)>>2)]=$call; //@line 373 "cstdlib/unistd.c"
 return; //@line 374 "cstdlib/unistd.c"
}
function _UnistdWrite($Parser,$ReturnValue,$Param,$NumArgs){
 var label=0;
 var $Parser_addr;
 var $ReturnValue_addr;
 var $Param_addr;
 var $NumArgs_addr;
 $Parser_addr=$Parser;
 $ReturnValue_addr=$ReturnValue;
 $Param_addr=$Param;
 $NumArgs_addr=$NumArgs;
 var $0=$Param_addr; //@line 378 "cstdlib/unistd.c"
 var $arrayidx=(($0)|0); //@line 378 "cstdlib/unistd.c"
 var $1=HEAP32[(($arrayidx)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Val=(($1+4)|0); //@line 378 "cstdlib/unistd.c"
 var $2=HEAP32[(($Val)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Integer=$2; //@line 378 "cstdlib/unistd.c"
 var $3=HEAP32[(($Integer)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $4=$Param_addr; //@line 378 "cstdlib/unistd.c"
 var $arrayidx1=(($4+4)|0); //@line 378 "cstdlib/unistd.c"
 var $5=HEAP32[(($arrayidx1)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Val2=(($5+4)|0); //@line 378 "cstdlib/unistd.c"
 var $6=HEAP32[(($Val2)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Pointer=$6; //@line 378 "cstdlib/unistd.c"
 var $7=HEAP32[(($Pointer)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $8=$Param_addr; //@line 378 "cstdlib/unistd.c"
 var $arrayidx3=(($8+8)|0); //@line 378 "cstdlib/unistd.c"
 var $9=HEAP32[(($arrayidx3)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Val4=(($9+4)|0); //@line 378 "cstdlib/unistd.c"
 var $10=HEAP32[(($Val4)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Integer5=$10; //@line 378 "cstdlib/unistd.c"
 var $11=HEAP32[(($Integer5)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $call=_write($3,$7,$11); //@line 378 "cstdlib/unistd.c"
 var $12=$ReturnValue_addr; //@line 378 "cstdlib/unistd.c"
 var $Val6=(($12+4)|0); //@line 378 "cstdlib/unistd.c"
 var $13=HEAP32[(($Val6)>>2)]; //@line 378 "cstdlib/unistd.c"
 var $Integer7=$13; //@line 378 "cstdlib/unistd.c"
 HEAP32[(($Integer7)>>2)]=$call; //@line 378 "cstdlib/unistd.c"
 return; //@line 379 "cstdlib/unistd.c"
}
function _UnistdSetupFunc(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=_TableStrRegister(1680); //@line 488 "cstdlib/unistd.c"
 var $call1=_VariableDefined($call); //@line 488 "cstdlib/unistd.c"
 var $tobool=($call1|0)!=0; //@line 488 "cstdlib/unistd.c"
 if($tobool){label=3;break;}else{label=2;break;} //@line 488 "cstdlib/unistd.c"
 case 2: 
 _VariableDefinePlatformVar(0,1680,18408,16824,0); //@line 489 "cstdlib/unistd.c"
 label=3;break; //@line 489 "cstdlib/unistd.c"
 case 3: 
 var $0=HEAP32[((19136)>>2)]; //@line 492 "cstdlib/unistd.c"
 _VariableDefinePlatformVar(0,1648,$0,16280,1); //@line 492 "cstdlib/unistd.c"
 _VariableDefinePlatformVar(0,1608,18408,96,1); //@line 493 "cstdlib/unistd.c"
 _VariableDefinePlatformVar(0,1528,18408,104,1); //@line 494 "cstdlib/unistd.c"
 _VariableDefinePlatformVar(0,1464,18408,88,1); //@line 495 "cstdlib/unistd.c"
 return; //@line 496 "cstdlib/unistd.c"
  default: assert(0, "bad label: " + label);
 }
}
function _strxfrm($dest,$src,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call_i=_strlen($src);
 var $cmp_i=($call_i>>>0)<($n>>>0);
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $call1_i=_strcpy($dest,$src);
 label=3;break;
 case 3: 
 return $call_i;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($bytes>>>0)<245;
 if($cmp){label=2;break;}else{label=78;break;}
 case 2: 
 var $cmp1=($bytes>>>0)<11;
 if($cmp1){var $cond=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $add2=((($bytes)+(11))|0);
 var $and=$add2&-8;
 var $cond=$and;label=4;break;
 case 4: 
 var $cond;
 var $shr=$cond>>>3;
 var $0=HEAP32[((16344)>>2)];
 var $shr3=$0>>>($shr>>>0);
 var $and4=$shr3&3;
 var $cmp5=($and4|0)==0;
 if($cmp5){label=12;break;}else{label=5;break;}
 case 5: 
 var $neg=$shr3&1;
 var $and7=$neg^1;
 var $add8=((($and7)+($shr))|0);
 var $shl=$add8<<1;
 var $arrayidx=((16384+($shl<<2))|0);
 var $1=$arrayidx;
 var $arrayidx_sum=((($shl)+(2))|0);
 var $2=((16384+($arrayidx_sum<<2))|0);
 var $3=HEAP32[(($2)>>2)];
 var $fd9=(($3+8)|0);
 var $4=HEAP32[(($fd9)>>2)];
 var $cmp10=($1|0)==($4|0);
 if($cmp10){label=6;break;}else{label=7;break;}
 case 6: 
 var $shl12=1<<$add8;
 var $neg13=$shl12^-1;
 var $and14=$0&$neg13;
 HEAP32[((16344)>>2)]=$and14;
 label=11;break;
 case 7: 
 var $5=$4;
 var $6=HEAP32[((16360)>>2)];
 var $cmp15=($5>>>0)<($6>>>0);
 if($cmp15){label=10;break;}else{label=8;break;}
 case 8: 
 var $bk=(($4+12)|0);
 var $7=HEAP32[(($bk)>>2)];
 var $cmp16=($7|0)==($3|0);
 if($cmp16){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($bk)>>2)]=$1;
 HEAP32[(($2)>>2)]=$4;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $shl22=$add8<<3;
 var $or23=$shl22|3;
 var $head=(($3+4)|0);
 HEAP32[(($head)>>2)]=$or23;
 var $8=$3;
 var $add_ptr_sum106=$shl22|4;
 var $head25=(($8+$add_ptr_sum106)|0);
 var $9=$head25;
 var $10=HEAP32[(($9)>>2)];
 var $or26=$10|1;
 HEAP32[(($9)>>2)]=$or26;
 var $11=$fd9;
 var $mem_0=$11;label=341;break;
 case 12: 
 var $12=HEAP32[((16352)>>2)];
 var $cmp29=($cond>>>0)>($12>>>0);
 if($cmp29){label=13;break;}else{var $nb_0=$cond;label=160;break;}
 case 13: 
 var $cmp31=($shr3|0)==0;
 if($cmp31){label=27;break;}else{label=14;break;}
 case 14: 
 var $shl35=$shr3<<$shr;
 var $shl37=2<<$shr;
 var $sub=(((-$shl37))|0);
 var $or40=$shl37|$sub;
 var $and41=$shl35&$or40;
 var $sub42=(((-$and41))|0);
 var $and43=$and41&$sub42;
 var $sub44=((($and43)-(1))|0);
 var $shr45=$sub44>>>12;
 var $and46=$shr45&16;
 var $shr47=$sub44>>>($and46>>>0);
 var $shr48=$shr47>>>5;
 var $and49=$shr48&8;
 var $add50=$and49|$and46;
 var $shr51=$shr47>>>($and49>>>0);
 var $shr52=$shr51>>>2;
 var $and53=$shr52&4;
 var $add54=$add50|$and53;
 var $shr55=$shr51>>>($and53>>>0);
 var $shr56=$shr55>>>1;
 var $and57=$shr56&2;
 var $add58=$add54|$and57;
 var $shr59=$shr55>>>($and57>>>0);
 var $shr60=$shr59>>>1;
 var $and61=$shr60&1;
 var $add62=$add58|$and61;
 var $shr63=$shr59>>>($and61>>>0);
 var $add64=((($add62)+($shr63))|0);
 var $shl65=$add64<<1;
 var $arrayidx66=((16384+($shl65<<2))|0);
 var $13=$arrayidx66;
 var $arrayidx66_sum=((($shl65)+(2))|0);
 var $14=((16384+($arrayidx66_sum<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $fd69=(($15+8)|0);
 var $16=HEAP32[(($fd69)>>2)];
 var $cmp70=($13|0)==($16|0);
 if($cmp70){label=15;break;}else{label=16;break;}
 case 15: 
 var $shl72=1<<$add64;
 var $neg73=$shl72^-1;
 var $and74=$0&$neg73;
 HEAP32[((16344)>>2)]=$and74;
 label=20;break;
 case 16: 
 var $17=$16;
 var $18=HEAP32[((16360)>>2)];
 var $cmp76=($17>>>0)<($18>>>0);
 if($cmp76){label=19;break;}else{label=17;break;}
 case 17: 
 var $bk78=(($16+12)|0);
 var $19=HEAP32[(($bk78)>>2)];
 var $cmp79=($19|0)==($15|0);
 if($cmp79){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($bk78)>>2)]=$13;
 HEAP32[(($14)>>2)]=$16;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $shl90=$add64<<3;
 var $sub91=((($shl90)-($cond))|0);
 var $or93=$cond|3;
 var $head94=(($15+4)|0);
 HEAP32[(($head94)>>2)]=$or93;
 var $20=$15;
 var $add_ptr95=(($20+$cond)|0);
 var $21=$add_ptr95;
 var $or96=$sub91|1;
 var $add_ptr95_sum103=$cond|4;
 var $head97=(($20+$add_ptr95_sum103)|0);
 var $22=$head97;
 HEAP32[(($22)>>2)]=$or96;
 var $add_ptr98=(($20+$shl90)|0);
 var $prev_foot=$add_ptr98;
 HEAP32[(($prev_foot)>>2)]=$sub91;
 var $23=HEAP32[((16352)>>2)];
 var $cmp99=($23|0)==0;
 if($cmp99){label=26;break;}else{label=21;break;}
 case 21: 
 var $24=HEAP32[((16364)>>2)];
 var $shr101=$23>>>3;
 var $shl102=$shr101<<1;
 var $arrayidx103=((16384+($shl102<<2))|0);
 var $25=$arrayidx103;
 var $26=HEAP32[((16344)>>2)];
 var $shl105=1<<$shr101;
 var $and106=$26&$shl105;
 var $tobool107=($and106|0)==0;
 if($tobool107){label=22;break;}else{label=23;break;}
 case 22: 
 var $or110=$26|$shl105;
 HEAP32[((16344)>>2)]=$or110;
 var $arrayidx103_sum_pre=((($shl102)+(2))|0);
 var $_pre=((16384+($arrayidx103_sum_pre<<2))|0);
 var $F104_0=$25;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $arrayidx103_sum104=((($shl102)+(2))|0);
 var $27=((16384+($arrayidx103_sum104<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[((16360)>>2)];
 var $cmp113=($29>>>0)<($30>>>0);
 if($cmp113){label=24;break;}else{var $F104_0=$28;var $_pre_phi=$27;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F104_0;
 HEAP32[(($_pre_phi)>>2)]=$24;
 var $bk122=(($F104_0+12)|0);
 HEAP32[(($bk122)>>2)]=$24;
 var $fd123=(($24+8)|0);
 HEAP32[(($fd123)>>2)]=$F104_0;
 var $bk124=(($24+12)|0);
 HEAP32[(($bk124)>>2)]=$25;
 label=26;break;
 case 26: 
 HEAP32[((16352)>>2)]=$sub91;
 HEAP32[((16364)>>2)]=$21;
 var $31=$fd69;
 var $mem_0=$31;label=341;break;
 case 27: 
 var $32=HEAP32[((16348)>>2)];
 var $cmp128=($32|0)==0;
 if($cmp128){var $nb_0=$cond;label=160;break;}else{label=28;break;}
 case 28: 
 var $sub_i=(((-$32))|0);
 var $and_i=$32&$sub_i;
 var $sub2_i=((($and_i)-(1))|0);
 var $shr_i=$sub2_i>>>12;
 var $and3_i=$shr_i&16;
 var $shr4_i=$sub2_i>>>($and3_i>>>0);
 var $shr5_i=$shr4_i>>>5;
 var $and6_i=$shr5_i&8;
 var $add_i=$and6_i|$and3_i;
 var $shr7_i=$shr4_i>>>($and6_i>>>0);
 var $shr8_i=$shr7_i>>>2;
 var $and9_i=$shr8_i&4;
 var $add10_i=$add_i|$and9_i;
 var $shr11_i=$shr7_i>>>($and9_i>>>0);
 var $shr12_i=$shr11_i>>>1;
 var $and13_i=$shr12_i&2;
 var $add14_i=$add10_i|$and13_i;
 var $shr15_i=$shr11_i>>>($and13_i>>>0);
 var $shr16_i=$shr15_i>>>1;
 var $and17_i=$shr16_i&1;
 var $add18_i=$add14_i|$and17_i;
 var $shr19_i=$shr15_i>>>($and17_i>>>0);
 var $add20_i=((($add18_i)+($shr19_i))|0);
 var $arrayidx_i=((16648+($add20_i<<2))|0);
 var $33=HEAP32[(($arrayidx_i)>>2)];
 var $head_i=(($33+4)|0);
 var $34=HEAP32[(($head_i)>>2)];
 var $and21_i=$34&-8;
 var $sub22_i=((($and21_i)-($cond))|0);
 var $t_0_i=$33;var $v_0_i=$33;var $rsize_0_i=$sub22_i;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $arrayidx23_i=(($t_0_i+16)|0);
 var $35=HEAP32[(($arrayidx23_i)>>2)];
 var $cmp_i=($35|0)==0;
 if($cmp_i){label=30;break;}else{var $cond7_i=$35;label=31;break;}
 case 30: 
 var $arrayidx27_i=(($t_0_i+20)|0);
 var $36=HEAP32[(($arrayidx27_i)>>2)];
 var $cmp28_i=($36|0)==0;
 if($cmp28_i){label=32;break;}else{var $cond7_i=$36;label=31;break;}
 case 31: 
 var $cond7_i;
 var $head29_i=(($cond7_i+4)|0);
 var $37=HEAP32[(($head29_i)>>2)];
 var $and30_i=$37&-8;
 var $sub31_i=((($and30_i)-($cond))|0);
 var $cmp32_i=($sub31_i>>>0)<($rsize_0_i>>>0);
 var $sub31_rsize_0_i=$cmp32_i?$sub31_i:$rsize_0_i;
 var $cond_v_0_i=$cmp32_i?$cond7_i:$v_0_i;
 var $t_0_i=$cond7_i;var $v_0_i=$cond_v_0_i;var $rsize_0_i=$sub31_rsize_0_i;label=29;break;
 case 32: 
 var $38=$v_0_i;
 var $39=HEAP32[((16360)>>2)];
 var $cmp33_i=($38>>>0)<($39>>>0);
 if($cmp33_i){label=76;break;}else{label=33;break;}
 case 33: 
 var $add_ptr_i=(($38+$cond)|0);
 var $40=$add_ptr_i;
 var $cmp35_i=($38>>>0)<($add_ptr_i>>>0);
 if($cmp35_i){label=34;break;}else{label=76;break;}
 case 34: 
 var $parent_i=(($v_0_i+24)|0);
 var $41=HEAP32[(($parent_i)>>2)];
 var $bk_i=(($v_0_i+12)|0);
 var $42=HEAP32[(($bk_i)>>2)];
 var $cmp40_i=($42|0)==($v_0_i|0);
 if($cmp40_i){label=40;break;}else{label=35;break;}
 case 35: 
 var $fd_i=(($v_0_i+8)|0);
 var $43=HEAP32[(($fd_i)>>2)];
 var $44=$43;
 var $cmp45_i=($44>>>0)<($39>>>0);
 if($cmp45_i){label=39;break;}else{label=36;break;}
 case 36: 
 var $bk47_i=(($43+12)|0);
 var $45=HEAP32[(($bk47_i)>>2)];
 var $cmp48_i=($45|0)==($v_0_i|0);
 if($cmp48_i){label=37;break;}else{label=39;break;}
 case 37: 
 var $fd50_i=(($42+8)|0);
 var $46=HEAP32[(($fd50_i)>>2)];
 var $cmp51_i=($46|0)==($v_0_i|0);
 if($cmp51_i){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($bk47_i)>>2)]=$42;
 HEAP32[(($fd50_i)>>2)]=$43;
 var $R_1_i=$42;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $arrayidx61_i=(($v_0_i+20)|0);
 var $47=HEAP32[(($arrayidx61_i)>>2)];
 var $cmp62_i=($47|0)==0;
 if($cmp62_i){label=41;break;}else{var $R_0_i=$47;var $RP_0_i=$arrayidx61_i;label=42;break;}
 case 41: 
 var $arrayidx65_i=(($v_0_i+16)|0);
 var $48=HEAP32[(($arrayidx65_i)>>2)];
 var $cmp66_i=($48|0)==0;
 if($cmp66_i){var $R_1_i=0;label=47;break;}else{var $R_0_i=$48;var $RP_0_i=$arrayidx65_i;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $arrayidx71_i=(($R_0_i+20)|0);
 var $49=HEAP32[(($arrayidx71_i)>>2)];
 var $cmp72_i=($49|0)==0;
 if($cmp72_i){label=43;break;}else{var $R_0_i=$49;var $RP_0_i=$arrayidx71_i;label=42;break;}
 case 43: 
 var $arrayidx75_i=(($R_0_i+16)|0);
 var $50=HEAP32[(($arrayidx75_i)>>2)];
 var $cmp76_i=($50|0)==0;
 if($cmp76_i){label=44;break;}else{var $R_0_i=$50;var $RP_0_i=$arrayidx75_i;label=42;break;}
 case 44: 
 var $51=$RP_0_i;
 var $cmp81_i=($51>>>0)<($39>>>0);
 if($cmp81_i){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $cmp90_i=($41|0)==0;
 if($cmp90_i){label=67;break;}else{label=48;break;}
 case 48: 
 var $index_i=(($v_0_i+28)|0);
 var $52=HEAP32[(($index_i)>>2)];
 var $arrayidx94_i=((16648+($52<<2))|0);
 var $53=HEAP32[(($arrayidx94_i)>>2)];
 var $cmp95_i=($v_0_i|0)==($53|0);
 if($cmp95_i){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($arrayidx94_i)>>2)]=$R_1_i;
 var $cond5_i=($R_1_i|0)==0;
 if($cond5_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $54=HEAP32[(($index_i)>>2)];
 var $shl_i=1<<$54;
 var $neg_i=$shl_i^-1;
 var $55=HEAP32[((16348)>>2)];
 var $and103_i=$55&$neg_i;
 HEAP32[((16348)>>2)]=$and103_i;
 label=67;break;
 case 51: 
 var $56=$41;
 var $57=HEAP32[((16360)>>2)];
 var $cmp107_i=($56>>>0)<($57>>>0);
 if($cmp107_i){label=55;break;}else{label=52;break;}
 case 52: 
 var $arrayidx113_i=(($41+16)|0);
 var $58=HEAP32[(($arrayidx113_i)>>2)];
 var $cmp114_i=($58|0)==($v_0_i|0);
 if($cmp114_i){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($arrayidx113_i)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $arrayidx121_i=(($41+20)|0);
 HEAP32[(($arrayidx121_i)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $cmp126_i=($R_1_i|0)==0;
 if($cmp126_i){label=67;break;}else{label=57;break;}
 case 57: 
 var $59=$R_1_i;
 var $60=HEAP32[((16360)>>2)];
 var $cmp130_i=($59>>>0)<($60>>>0);
 if($cmp130_i){label=66;break;}else{label=58;break;}
 case 58: 
 var $parent135_i=(($R_1_i+24)|0);
 HEAP32[(($parent135_i)>>2)]=$41;
 var $arrayidx137_i=(($v_0_i+16)|0);
 var $61=HEAP32[(($arrayidx137_i)>>2)];
 var $cmp138_i=($61|0)==0;
 if($cmp138_i){label=62;break;}else{label=59;break;}
 case 59: 
 var $62=$61;
 var $63=HEAP32[((16360)>>2)];
 var $cmp142_i=($62>>>0)<($63>>>0);
 if($cmp142_i){label=61;break;}else{label=60;break;}
 case 60: 
 var $arrayidx148_i=(($R_1_i+16)|0);
 HEAP32[(($arrayidx148_i)>>2)]=$61;
 var $parent149_i=(($61+24)|0);
 HEAP32[(($parent149_i)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $arrayidx154_i=(($v_0_i+20)|0);
 var $64=HEAP32[(($arrayidx154_i)>>2)];
 var $cmp155_i=($64|0)==0;
 if($cmp155_i){label=67;break;}else{label=63;break;}
 case 63: 
 var $65=$64;
 var $66=HEAP32[((16360)>>2)];
 var $cmp159_i=($65>>>0)<($66>>>0);
 if($cmp159_i){label=65;break;}else{label=64;break;}
 case 64: 
 var $arrayidx165_i=(($R_1_i+20)|0);
 HEAP32[(($arrayidx165_i)>>2)]=$64;
 var $parent166_i=(($64+24)|0);
 HEAP32[(($parent166_i)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $cmp174_i=($rsize_0_i>>>0)<16;
 if($cmp174_i){label=68;break;}else{label=69;break;}
 case 68: 
 var $add177_i=((($rsize_0_i)+($cond))|0);
 var $or178_i=$add177_i|3;
 var $head179_i=(($v_0_i+4)|0);
 HEAP32[(($head179_i)>>2)]=$or178_i;
 var $add_ptr181_sum_i=((($add177_i)+(4))|0);
 var $head182_i=(($38+$add_ptr181_sum_i)|0);
 var $67=$head182_i;
 var $68=HEAP32[(($67)>>2)];
 var $or183_i=$68|1;
 HEAP32[(($67)>>2)]=$or183_i;
 label=77;break;
 case 69: 
 var $or186_i=$cond|3;
 var $head187_i=(($v_0_i+4)|0);
 HEAP32[(($head187_i)>>2)]=$or186_i;
 var $or188_i=$rsize_0_i|1;
 var $add_ptr_sum_i175=$cond|4;
 var $head189_i=(($38+$add_ptr_sum_i175)|0);
 var $69=$head189_i;
 HEAP32[(($69)>>2)]=$or188_i;
 var $add_ptr_sum1_i=((($rsize_0_i)+($cond))|0);
 var $add_ptr190_i=(($38+$add_ptr_sum1_i)|0);
 var $prev_foot_i=$add_ptr190_i;
 HEAP32[(($prev_foot_i)>>2)]=$rsize_0_i;
 var $70=HEAP32[((16352)>>2)];
 var $cmp191_i=($70|0)==0;
 if($cmp191_i){label=75;break;}else{label=70;break;}
 case 70: 
 var $71=HEAP32[((16364)>>2)];
 var $shr194_i=$70>>>3;
 var $shl195_i=$shr194_i<<1;
 var $arrayidx196_i=((16384+($shl195_i<<2))|0);
 var $72=$arrayidx196_i;
 var $73=HEAP32[((16344)>>2)];
 var $shl198_i=1<<$shr194_i;
 var $and199_i=$73&$shl198_i;
 var $tobool200_i=($and199_i|0)==0;
 if($tobool200_i){label=71;break;}else{label=72;break;}
 case 71: 
 var $or204_i=$73|$shl198_i;
 HEAP32[((16344)>>2)]=$or204_i;
 var $arrayidx196_sum_pre_i=((($shl195_i)+(2))|0);
 var $_pre_i=((16384+($arrayidx196_sum_pre_i<<2))|0);
 var $F197_0_i=$72;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $arrayidx196_sum2_i=((($shl195_i)+(2))|0);
 var $74=((16384+($arrayidx196_sum2_i<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$75;
 var $77=HEAP32[((16360)>>2)];
 var $cmp208_i=($76>>>0)<($77>>>0);
 if($cmp208_i){label=73;break;}else{var $F197_0_i=$75;var $_pre_phi_i=$74;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F197_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$71;
 var $bk218_i=(($F197_0_i+12)|0);
 HEAP32[(($bk218_i)>>2)]=$71;
 var $fd219_i=(($71+8)|0);
 HEAP32[(($fd219_i)>>2)]=$F197_0_i;
 var $bk220_i=(($71+12)|0);
 HEAP32[(($bk220_i)>>2)]=$72;
 label=75;break;
 case 75: 
 HEAP32[((16352)>>2)]=$rsize_0_i;
 HEAP32[((16364)>>2)]=$40;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $add_ptr225_i=(($v_0_i+8)|0);
 var $78=$add_ptr225_i;
 var $cmp130=($add_ptr225_i|0)==0;
 if($cmp130){var $nb_0=$cond;label=160;break;}else{var $mem_0=$78;label=341;break;}
 case 78: 
 var $cmp138=($bytes>>>0)>4294967231;
 if($cmp138){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $add143=((($bytes)+(11))|0);
 var $and144=$add143&-8;
 var $79=HEAP32[((16348)>>2)];
 var $cmp145=($79|0)==0;
 if($cmp145){var $nb_0=$and144;label=160;break;}else{label=80;break;}
 case 80: 
 var $sub_i107=(((-$and144))|0);
 var $shr_i108=$add143>>>8;
 var $cmp_i109=($shr_i108|0)==0;
 if($cmp_i109){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $cmp1_i=($and144>>>0)>16777215;
 if($cmp1_i){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $sub4_i=((($shr_i108)+(1048320))|0);
 var $shr5_i111=$sub4_i>>>16;
 var $and_i112=$shr5_i111&8;
 var $shl_i113=$shr_i108<<$and_i112;
 var $sub6_i=((($shl_i113)+(520192))|0);
 var $shr7_i114=$sub6_i>>>16;
 var $and8_i=$shr7_i114&4;
 var $add_i115=$and8_i|$and_i112;
 var $shl9_i=$shl_i113<<$and8_i;
 var $sub10_i=((($shl9_i)+(245760))|0);
 var $shr11_i116=$sub10_i>>>16;
 var $and12_i=$shr11_i116&2;
 var $add13_i=$add_i115|$and12_i;
 var $sub14_i=(((14)-($add13_i))|0);
 var $shl15_i=$shl9_i<<$and12_i;
 var $shr16_i117=$shl15_i>>>15;
 var $add17_i=((($sub14_i)+($shr16_i117))|0);
 var $shl18_i=$add17_i<<1;
 var $add19_i=((($add17_i)+(7))|0);
 var $shr20_i=$and144>>>($add19_i>>>0);
 var $and21_i118=$shr20_i&1;
 var $add22_i=$and21_i118|$shl18_i;
 var $idx_0_i=$add22_i;label=83;break;
 case 83: 
 var $idx_0_i;
 var $arrayidx_i119=((16648+($idx_0_i<<2))|0);
 var $80=HEAP32[(($arrayidx_i119)>>2)];
 var $cmp24_i=($80|0)==0;
 if($cmp24_i){var $v_2_i=0;var $rsize_2_i=$sub_i107;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $cmp26_i=($idx_0_i|0)==31;
 if($cmp26_i){var $cond_i=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $shr27_i=$idx_0_i>>>1;
 var $sub30_i=(((25)-($shr27_i))|0);
 var $cond_i=$sub30_i;label=86;break;
 case 86: 
 var $cond_i;
 var $shl31_i=$and144<<$cond_i;
 var $v_0_i123=0;var $rsize_0_i122=$sub_i107;var $t_0_i121=$80;var $sizebits_0_i=$shl31_i;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i121;
 var $rsize_0_i122;
 var $v_0_i123;
 var $head_i124=(($t_0_i121+4)|0);
 var $81=HEAP32[(($head_i124)>>2)];
 var $and32_i=$81&-8;
 var $sub33_i=((($and32_i)-($and144))|0);
 var $cmp34_i=($sub33_i>>>0)<($rsize_0_i122>>>0);
 if($cmp34_i){label=88;break;}else{var $v_1_i=$v_0_i123;var $rsize_1_i=$rsize_0_i122;label=89;break;}
 case 88: 
 var $cmp36_i=($and32_i|0)==($and144|0);
 if($cmp36_i){var $v_2_i=$t_0_i121;var $rsize_2_i=$sub33_i;var $t_1_i=$t_0_i121;label=90;break;}else{var $v_1_i=$t_0_i121;var $rsize_1_i=$sub33_i;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $arrayidx40_i=(($t_0_i121+20)|0);
 var $82=HEAP32[(($arrayidx40_i)>>2)];
 var $shr41_i=$sizebits_0_i>>>31;
 var $arrayidx44_i=(($t_0_i121+16+($shr41_i<<2))|0);
 var $83=HEAP32[(($arrayidx44_i)>>2)];
 var $cmp45_i125=($82|0)==0;
 var $cmp46_i=($82|0)==($83|0);
 var $or_cond_i=$cmp45_i125|$cmp46_i;
 var $rst_1_i=$or_cond_i?$rst_0_i:$82;
 var $cmp49_i=($83|0)==0;
 var $shl52_i=$sizebits_0_i<<1;
 if($cmp49_i){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i123=$v_1_i;var $rsize_0_i122=$rsize_1_i;var $t_0_i121=$83;var $sizebits_0_i=$shl52_i;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $cmp54_i=($t_1_i|0)==0;
 var $cmp56_i=($v_2_i|0)==0;
 var $or_cond18_i=$cmp54_i&$cmp56_i;
 if($or_cond18_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $shl59_i=2<<$idx_0_i;
 var $sub62_i=(((-$shl59_i))|0);
 var $or_i=$shl59_i|$sub62_i;
 var $and63_i=$79&$or_i;
 var $cmp64_i=($and63_i|0)==0;
 if($cmp64_i){var $nb_0=$and144;label=160;break;}else{label=92;break;}
 case 92: 
 var $sub66_i=(((-$and63_i))|0);
 var $and67_i=$and63_i&$sub66_i;
 var $sub69_i=((($and67_i)-(1))|0);
 var $shr71_i=$sub69_i>>>12;
 var $and72_i=$shr71_i&16;
 var $shr74_i=$sub69_i>>>($and72_i>>>0);
 var $shr75_i=$shr74_i>>>5;
 var $and76_i=$shr75_i&8;
 var $add77_i=$and76_i|$and72_i;
 var $shr78_i=$shr74_i>>>($and76_i>>>0);
 var $shr79_i=$shr78_i>>>2;
 var $and80_i=$shr79_i&4;
 var $add81_i=$add77_i|$and80_i;
 var $shr82_i=$shr78_i>>>($and80_i>>>0);
 var $shr83_i=$shr82_i>>>1;
 var $and84_i=$shr83_i&2;
 var $add85_i=$add81_i|$and84_i;
 var $shr86_i=$shr82_i>>>($and84_i>>>0);
 var $shr87_i=$shr86_i>>>1;
 var $and88_i=$shr87_i&1;
 var $add89_i=$add85_i|$and88_i;
 var $shr90_i=$shr86_i>>>($and88_i>>>0);
 var $add91_i=((($add89_i)+($shr90_i))|0);
 var $arrayidx93_i=((16648+($add91_i<<2))|0);
 var $84=HEAP32[(($arrayidx93_i)>>2)];
 var $t_2_ph_i=$84;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $cmp9623_i=($t_2_ph_i|0)==0;
 if($cmp9623_i){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_224_i=$t_2_ph_i;var $rsize_325_i=$rsize_2_i;var $v_326_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_326_i;
 var $rsize_325_i;
 var $t_224_i;
 var $head98_i=(($t_224_i+4)|0);
 var $85=HEAP32[(($head98_i)>>2)];
 var $and99_i=$85&-8;
 var $sub100_i=((($and99_i)-($and144))|0);
 var $cmp101_i=($sub100_i>>>0)<($rsize_325_i>>>0);
 var $sub100_rsize_3_i=$cmp101_i?$sub100_i:$rsize_325_i;
 var $t_2_v_3_i=$cmp101_i?$t_224_i:$v_326_i;
 var $arrayidx105_i=(($t_224_i+16)|0);
 var $86=HEAP32[(($arrayidx105_i)>>2)];
 var $cmp106_i=($86|0)==0;
 if($cmp106_i){label=95;break;}else{var $t_224_i=$86;var $rsize_325_i=$sub100_rsize_3_i;var $v_326_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $arrayidx112_i=(($t_224_i+20)|0);
 var $87=HEAP32[(($arrayidx112_i)>>2)];
 var $cmp96_i=($87|0)==0;
 if($cmp96_i){var $rsize_3_lcssa_i=$sub100_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_224_i=$87;var $rsize_325_i=$sub100_rsize_3_i;var $v_326_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $cmp115_i=($v_3_lcssa_i|0)==0;
 if($cmp115_i){var $nb_0=$and144;label=160;break;}else{label=97;break;}
 case 97: 
 var $88=HEAP32[((16352)>>2)];
 var $sub117_i=((($88)-($and144))|0);
 var $cmp118_i=($rsize_3_lcssa_i>>>0)<($sub117_i>>>0);
 if($cmp118_i){label=98;break;}else{var $nb_0=$and144;label=160;break;}
 case 98: 
 var $89=$v_3_lcssa_i;
 var $90=HEAP32[((16360)>>2)];
 var $cmp120_i=($89>>>0)<($90>>>0);
 if($cmp120_i){label=158;break;}else{label=99;break;}
 case 99: 
 var $add_ptr_i128=(($89+$and144)|0);
 var $91=$add_ptr_i128;
 var $cmp122_i=($89>>>0)<($add_ptr_i128>>>0);
 if($cmp122_i){label=100;break;}else{label=158;break;}
 case 100: 
 var $parent_i129=(($v_3_lcssa_i+24)|0);
 var $92=HEAP32[(($parent_i129)>>2)];
 var $bk_i130=(($v_3_lcssa_i+12)|0);
 var $93=HEAP32[(($bk_i130)>>2)];
 var $cmp127_i=($93|0)==($v_3_lcssa_i|0);
 if($cmp127_i){label=106;break;}else{label=101;break;}
 case 101: 
 var $fd_i131=(($v_3_lcssa_i+8)|0);
 var $94=HEAP32[(($fd_i131)>>2)];
 var $95=$94;
 var $cmp132_i=($95>>>0)<($90>>>0);
 if($cmp132_i){label=105;break;}else{label=102;break;}
 case 102: 
 var $bk135_i=(($94+12)|0);
 var $96=HEAP32[(($bk135_i)>>2)];
 var $cmp136_i=($96|0)==($v_3_lcssa_i|0);
 if($cmp136_i){label=103;break;}else{label=105;break;}
 case 103: 
 var $fd138_i=(($93+8)|0);
 var $97=HEAP32[(($fd138_i)>>2)];
 var $cmp139_i=($97|0)==($v_3_lcssa_i|0);
 if($cmp139_i){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($bk135_i)>>2)]=$93;
 HEAP32[(($fd138_i)>>2)]=$94;
 var $R_1_i139=$93;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $arrayidx150_i=(($v_3_lcssa_i+20)|0);
 var $98=HEAP32[(($arrayidx150_i)>>2)];
 var $cmp151_i=($98|0)==0;
 if($cmp151_i){label=107;break;}else{var $R_0_i137=$98;var $RP_0_i136=$arrayidx150_i;label=108;break;}
 case 107: 
 var $arrayidx154_i133=(($v_3_lcssa_i+16)|0);
 var $99=HEAP32[(($arrayidx154_i133)>>2)];
 var $cmp155_i134=($99|0)==0;
 if($cmp155_i134){var $R_1_i139=0;label=113;break;}else{var $R_0_i137=$99;var $RP_0_i136=$arrayidx154_i133;label=108;break;}
 case 108: 
 var $RP_0_i136;
 var $R_0_i137;
 var $arrayidx160_i=(($R_0_i137+20)|0);
 var $100=HEAP32[(($arrayidx160_i)>>2)];
 var $cmp161_i=($100|0)==0;
 if($cmp161_i){label=109;break;}else{var $R_0_i137=$100;var $RP_0_i136=$arrayidx160_i;label=108;break;}
 case 109: 
 var $arrayidx164_i=(($R_0_i137+16)|0);
 var $101=HEAP32[(($arrayidx164_i)>>2)];
 var $cmp165_i=($101|0)==0;
 if($cmp165_i){label=110;break;}else{var $R_0_i137=$101;var $RP_0_i136=$arrayidx164_i;label=108;break;}
 case 110: 
 var $102=$RP_0_i136;
 var $cmp170_i=($102>>>0)<($90>>>0);
 if($cmp170_i){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i136)>>2)]=0;
 var $R_1_i139=$R_0_i137;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i139;
 var $cmp179_i=($92|0)==0;
 if($cmp179_i){label=133;break;}else{label=114;break;}
 case 114: 
 var $index_i140=(($v_3_lcssa_i+28)|0);
 var $103=HEAP32[(($index_i140)>>2)];
 var $arrayidx183_i=((16648+($103<<2))|0);
 var $104=HEAP32[(($arrayidx183_i)>>2)];
 var $cmp184_i=($v_3_lcssa_i|0)==($104|0);
 if($cmp184_i){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($arrayidx183_i)>>2)]=$R_1_i139;
 var $cond20_i=($R_1_i139|0)==0;
 if($cond20_i){label=116;break;}else{label=123;break;}
 case 116: 
 var $105=HEAP32[(($index_i140)>>2)];
 var $shl191_i=1<<$105;
 var $neg_i141=$shl191_i^-1;
 var $106=HEAP32[((16348)>>2)];
 var $and193_i=$106&$neg_i141;
 HEAP32[((16348)>>2)]=$and193_i;
 label=133;break;
 case 117: 
 var $107=$92;
 var $108=HEAP32[((16360)>>2)];
 var $cmp197_i=($107>>>0)<($108>>>0);
 if($cmp197_i){label=121;break;}else{label=118;break;}
 case 118: 
 var $arrayidx203_i=(($92+16)|0);
 var $109=HEAP32[(($arrayidx203_i)>>2)];
 var $cmp204_i=($109|0)==($v_3_lcssa_i|0);
 if($cmp204_i){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($arrayidx203_i)>>2)]=$R_1_i139;
 label=122;break;
 case 120: 
 var $arrayidx211_i=(($92+20)|0);
 HEAP32[(($arrayidx211_i)>>2)]=$R_1_i139;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $cmp216_i=($R_1_i139|0)==0;
 if($cmp216_i){label=133;break;}else{label=123;break;}
 case 123: 
 var $110=$R_1_i139;
 var $111=HEAP32[((16360)>>2)];
 var $cmp220_i=($110>>>0)<($111>>>0);
 if($cmp220_i){label=132;break;}else{label=124;break;}
 case 124: 
 var $parent225_i=(($R_1_i139+24)|0);
 HEAP32[(($parent225_i)>>2)]=$92;
 var $arrayidx227_i=(($v_3_lcssa_i+16)|0);
 var $112=HEAP32[(($arrayidx227_i)>>2)];
 var $cmp228_i=($112|0)==0;
 if($cmp228_i){label=128;break;}else{label=125;break;}
 case 125: 
 var $113=$112;
 var $114=HEAP32[((16360)>>2)];
 var $cmp232_i=($113>>>0)<($114>>>0);
 if($cmp232_i){label=127;break;}else{label=126;break;}
 case 126: 
 var $arrayidx238_i=(($R_1_i139+16)|0);
 HEAP32[(($arrayidx238_i)>>2)]=$112;
 var $parent239_i=(($112+24)|0);
 HEAP32[(($parent239_i)>>2)]=$R_1_i139;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $arrayidx244_i=(($v_3_lcssa_i+20)|0);
 var $115=HEAP32[(($arrayidx244_i)>>2)];
 var $cmp245_i=($115|0)==0;
 if($cmp245_i){label=133;break;}else{label=129;break;}
 case 129: 
 var $116=$115;
 var $117=HEAP32[((16360)>>2)];
 var $cmp249_i=($116>>>0)<($117>>>0);
 if($cmp249_i){label=131;break;}else{label=130;break;}
 case 130: 
 var $arrayidx255_i=(($R_1_i139+20)|0);
 HEAP32[(($arrayidx255_i)>>2)]=$115;
 var $parent256_i=(($115+24)|0);
 HEAP32[(($parent256_i)>>2)]=$R_1_i139;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $cmp264_i=($rsize_3_lcssa_i>>>0)<16;
 if($cmp264_i){label=134;break;}else{label=135;break;}
 case 134: 
 var $add267_i=((($rsize_3_lcssa_i)+($and144))|0);
 var $or269_i=$add267_i|3;
 var $head270_i=(($v_3_lcssa_i+4)|0);
 HEAP32[(($head270_i)>>2)]=$or269_i;
 var $add_ptr272_sum_i=((($add267_i)+(4))|0);
 var $head273_i=(($89+$add_ptr272_sum_i)|0);
 var $118=$head273_i;
 var $119=HEAP32[(($118)>>2)];
 var $or274_i=$119|1;
 HEAP32[(($118)>>2)]=$or274_i;
 label=159;break;
 case 135: 
 var $or277_i=$and144|3;
 var $head278_i=(($v_3_lcssa_i+4)|0);
 HEAP32[(($head278_i)>>2)]=$or277_i;
 var $or279_i=$rsize_3_lcssa_i|1;
 var $add_ptr_sum_i143174=$and144|4;
 var $head280_i=(($89+$add_ptr_sum_i143174)|0);
 var $120=$head280_i;
 HEAP32[(($120)>>2)]=$or279_i;
 var $add_ptr_sum1_i144=((($rsize_3_lcssa_i)+($and144))|0);
 var $add_ptr281_i=(($89+$add_ptr_sum1_i144)|0);
 var $prev_foot_i145=$add_ptr281_i;
 HEAP32[(($prev_foot_i145)>>2)]=$rsize_3_lcssa_i;
 var $shr282_i=$rsize_3_lcssa_i>>>3;
 var $cmp283_i=($rsize_3_lcssa_i>>>0)<256;
 if($cmp283_i){label=136;break;}else{label=141;break;}
 case 136: 
 var $shl287_i=$shr282_i<<1;
 var $arrayidx288_i=((16384+($shl287_i<<2))|0);
 var $121=$arrayidx288_i;
 var $122=HEAP32[((16344)>>2)];
 var $shl290_i=1<<$shr282_i;
 var $and291_i=$122&$shl290_i;
 var $tobool292_i=($and291_i|0)==0;
 if($tobool292_i){label=137;break;}else{label=138;break;}
 case 137: 
 var $or296_i=$122|$shl290_i;
 HEAP32[((16344)>>2)]=$or296_i;
 var $arrayidx288_sum_pre_i=((($shl287_i)+(2))|0);
 var $_pre_i146=((16384+($arrayidx288_sum_pre_i<<2))|0);
 var $F289_0_i=$121;var $_pre_phi_i147=$_pre_i146;label=140;break;
 case 138: 
 var $arrayidx288_sum16_i=((($shl287_i)+(2))|0);
 var $123=((16384+($arrayidx288_sum16_i<<2))|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=HEAP32[((16360)>>2)];
 var $cmp300_i=($125>>>0)<($126>>>0);
 if($cmp300_i){label=139;break;}else{var $F289_0_i=$124;var $_pre_phi_i147=$123;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i147;
 var $F289_0_i;
 HEAP32[(($_pre_phi_i147)>>2)]=$91;
 var $bk310_i=(($F289_0_i+12)|0);
 HEAP32[(($bk310_i)>>2)]=$91;
 var $add_ptr_sum14_i=((($and144)+(8))|0);
 var $fd311_i=(($89+$add_ptr_sum14_i)|0);
 var $127=$fd311_i;
 HEAP32[(($127)>>2)]=$F289_0_i;
 var $add_ptr_sum15_i=((($and144)+(12))|0);
 var $bk312_i=(($89+$add_ptr_sum15_i)|0);
 var $128=$bk312_i;
 HEAP32[(($128)>>2)]=$121;
 label=159;break;
 case 141: 
 var $129=$add_ptr_i128;
 var $shr317_i=$rsize_3_lcssa_i>>>8;
 var $cmp318_i=($shr317_i|0)==0;
 if($cmp318_i){var $I315_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $cmp322_i=($rsize_3_lcssa_i>>>0)>16777215;
 if($cmp322_i){var $I315_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $sub328_i=((($shr317_i)+(1048320))|0);
 var $shr329_i=$sub328_i>>>16;
 var $and330_i=$shr329_i&8;
 var $shl332_i=$shr317_i<<$and330_i;
 var $sub333_i=((($shl332_i)+(520192))|0);
 var $shr334_i=$sub333_i>>>16;
 var $and335_i=$shr334_i&4;
 var $add336_i=$and335_i|$and330_i;
 var $shl337_i=$shl332_i<<$and335_i;
 var $sub338_i=((($shl337_i)+(245760))|0);
 var $shr339_i=$sub338_i>>>16;
 var $and340_i=$shr339_i&2;
 var $add341_i=$add336_i|$and340_i;
 var $sub342_i=(((14)-($add341_i))|0);
 var $shl343_i=$shl337_i<<$and340_i;
 var $shr344_i=$shl343_i>>>15;
 var $add345_i=((($sub342_i)+($shr344_i))|0);
 var $shl346_i=$add345_i<<1;
 var $add347_i=((($add345_i)+(7))|0);
 var $shr348_i=$rsize_3_lcssa_i>>>($add347_i>>>0);
 var $and349_i=$shr348_i&1;
 var $add350_i=$and349_i|$shl346_i;
 var $I315_0_i=$add350_i;label=144;break;
 case 144: 
 var $I315_0_i;
 var $arrayidx354_i=((16648+($I315_0_i<<2))|0);
 var $add_ptr_sum2_i=((($and144)+(28))|0);
 var $index355_i=(($89+$add_ptr_sum2_i)|0);
 var $130=$index355_i;
 HEAP32[(($130)>>2)]=$I315_0_i;
 var $add_ptr_sum3_i=((($and144)+(16))|0);
 var $child356_i=(($89+$add_ptr_sum3_i)|0);
 var $child356_sum_i=((($and144)+(20))|0);
 var $arrayidx357_i=(($89+$child356_sum_i)|0);
 var $131=$arrayidx357_i;
 HEAP32[(($131)>>2)]=0;
 var $arrayidx359_i=$child356_i;
 HEAP32[(($arrayidx359_i)>>2)]=0;
 var $132=HEAP32[((16348)>>2)];
 var $shl361_i=1<<$I315_0_i;
 var $and362_i=$132&$shl361_i;
 var $tobool363_i=($and362_i|0)==0;
 if($tobool363_i){label=145;break;}else{label=146;break;}
 case 145: 
 var $or367_i=$132|$shl361_i;
 HEAP32[((16348)>>2)]=$or367_i;
 HEAP32[(($arrayidx354_i)>>2)]=$129;
 var $133=$arrayidx354_i;
 var $add_ptr_sum4_i=((($and144)+(24))|0);
 var $parent368_i=(($89+$add_ptr_sum4_i)|0);
 var $134=$parent368_i;
 HEAP32[(($134)>>2)]=$133;
 var $add_ptr_sum5_i=((($and144)+(12))|0);
 var $bk369_i=(($89+$add_ptr_sum5_i)|0);
 var $135=$bk369_i;
 HEAP32[(($135)>>2)]=$129;
 var $add_ptr_sum6_i=((($and144)+(8))|0);
 var $fd370_i=(($89+$add_ptr_sum6_i)|0);
 var $136=$fd370_i;
 HEAP32[(($136)>>2)]=$129;
 label=159;break;
 case 146: 
 var $137=HEAP32[(($arrayidx354_i)>>2)];
 var $cmp373_i=($I315_0_i|0)==31;
 if($cmp373_i){var $cond382_i=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $shr377_i=$I315_0_i>>>1;
 var $sub380_i=(((25)-($shr377_i))|0);
 var $cond382_i=$sub380_i;label=148;break;
 case 148: 
 var $cond382_i;
 var $shl383_i=$rsize_3_lcssa_i<<$cond382_i;
 var $K372_0_i=$shl383_i;var $T_0_i=$137;label=149;break;
 case 149: 
 var $T_0_i;
 var $K372_0_i;
 var $head385_i=(($T_0_i+4)|0);
 var $138=HEAP32[(($head385_i)>>2)];
 var $and386_i=$138&-8;
 var $cmp387_i=($and386_i|0)==($rsize_3_lcssa_i|0);
 if($cmp387_i){label=154;break;}else{label=150;break;}
 case 150: 
 var $shr390_i=$K372_0_i>>>31;
 var $arrayidx393_i=(($T_0_i+16+($shr390_i<<2))|0);
 var $139=HEAP32[(($arrayidx393_i)>>2)];
 var $cmp395_i=($139|0)==0;
 var $shl394_i=$K372_0_i<<1;
 if($cmp395_i){label=151;break;}else{var $K372_0_i=$shl394_i;var $T_0_i=$139;label=149;break;}
 case 151: 
 var $140=$arrayidx393_i;
 var $141=HEAP32[((16360)>>2)];
 var $cmp400_i=($140>>>0)<($141>>>0);
 if($cmp400_i){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($arrayidx393_i)>>2)]=$129;
 var $add_ptr_sum11_i=((($and144)+(24))|0);
 var $parent405_i=(($89+$add_ptr_sum11_i)|0);
 var $142=$parent405_i;
 HEAP32[(($142)>>2)]=$T_0_i;
 var $add_ptr_sum12_i=((($and144)+(12))|0);
 var $bk406_i=(($89+$add_ptr_sum12_i)|0);
 var $143=$bk406_i;
 HEAP32[(($143)>>2)]=$129;
 var $add_ptr_sum13_i=((($and144)+(8))|0);
 var $fd407_i=(($89+$add_ptr_sum13_i)|0);
 var $144=$fd407_i;
 HEAP32[(($144)>>2)]=$129;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $fd412_i=(($T_0_i+8)|0);
 var $145=HEAP32[(($fd412_i)>>2)];
 var $146=$T_0_i;
 var $147=HEAP32[((16360)>>2)];
 var $cmp414_i=($146>>>0)<($147>>>0);
 if($cmp414_i){label=157;break;}else{label=155;break;}
 case 155: 
 var $148=$145;
 var $cmp418_i=($148>>>0)<($147>>>0);
 if($cmp418_i){label=157;break;}else{label=156;break;}
 case 156: 
 var $bk425_i=(($145+12)|0);
 HEAP32[(($bk425_i)>>2)]=$129;
 HEAP32[(($fd412_i)>>2)]=$129;
 var $add_ptr_sum8_i=((($and144)+(8))|0);
 var $fd427_i=(($89+$add_ptr_sum8_i)|0);
 var $149=$fd427_i;
 HEAP32[(($149)>>2)]=$145;
 var $add_ptr_sum9_i=((($and144)+(12))|0);
 var $bk428_i=(($89+$add_ptr_sum9_i)|0);
 var $150=$bk428_i;
 HEAP32[(($150)>>2)]=$T_0_i;
 var $add_ptr_sum10_i=((($and144)+(24))|0);
 var $parent429_i=(($89+$add_ptr_sum10_i)|0);
 var $151=$parent429_i;
 HEAP32[(($151)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $add_ptr436_i=(($v_3_lcssa_i+8)|0);
 var $152=$add_ptr436_i;
 var $cmp149=($add_ptr436_i|0)==0;
 if($cmp149){var $nb_0=$and144;label=160;break;}else{var $mem_0=$152;label=341;break;}
 case 160: 
 var $nb_0;
 var $153=HEAP32[((16352)>>2)];
 var $cmp155=($nb_0>>>0)>($153>>>0);
 if($cmp155){label=165;break;}else{label=161;break;}
 case 161: 
 var $sub159=((($153)-($nb_0))|0);
 var $154=HEAP32[((16364)>>2)];
 var $cmp161=($sub159>>>0)>15;
 if($cmp161){label=162;break;}else{label=163;break;}
 case 162: 
 var $155=$154;
 var $add_ptr165=(($155+$nb_0)|0);
 var $156=$add_ptr165;
 HEAP32[((16364)>>2)]=$156;
 HEAP32[((16352)>>2)]=$sub159;
 var $or166=$sub159|1;
 var $add_ptr165_sum=((($nb_0)+(4))|0);
 var $head167=(($155+$add_ptr165_sum)|0);
 var $157=$head167;
 HEAP32[(($157)>>2)]=$or166;
 var $add_ptr168=(($155+$153)|0);
 var $prev_foot169=$add_ptr168;
 HEAP32[(($prev_foot169)>>2)]=$sub159;
 var $or171=$nb_0|3;
 var $head172=(($154+4)|0);
 HEAP32[(($head172)>>2)]=$or171;
 label=164;break;
 case 163: 
 HEAP32[((16352)>>2)]=0;
 HEAP32[((16364)>>2)]=0;
 var $or175=$153|3;
 var $head176=(($154+4)|0);
 HEAP32[(($head176)>>2)]=$or175;
 var $158=$154;
 var $add_ptr177_sum=((($153)+(4))|0);
 var $head178=(($158+$add_ptr177_sum)|0);
 var $159=$head178;
 var $160=HEAP32[(($159)>>2)];
 var $or179=$160|1;
 HEAP32[(($159)>>2)]=$or179;
 label=164;break;
 case 164: 
 var $add_ptr181=(($154+8)|0);
 var $161=$add_ptr181;
 var $mem_0=$161;label=341;break;
 case 165: 
 var $162=HEAP32[((16356)>>2)];
 var $cmp183=($nb_0>>>0)<($162>>>0);
 if($cmp183){label=166;break;}else{label=167;break;}
 case 166: 
 var $sub187=((($162)-($nb_0))|0);
 HEAP32[((16356)>>2)]=$sub187;
 var $163=HEAP32[((16368)>>2)];
 var $164=$163;
 var $add_ptr190=(($164+$nb_0)|0);
 var $165=$add_ptr190;
 HEAP32[((16368)>>2)]=$165;
 var $or191=$sub187|1;
 var $add_ptr190_sum=((($nb_0)+(4))|0);
 var $head192=(($164+$add_ptr190_sum)|0);
 var $166=$head192;
 HEAP32[(($166)>>2)]=$or191;
 var $or194=$nb_0|3;
 var $head195=(($163+4)|0);
 HEAP32[(($head195)>>2)]=$or194;
 var $add_ptr196=(($163+8)|0);
 var $167=$add_ptr196;
 var $mem_0=$167;label=341;break;
 case 167: 
 var $168=HEAP32[((16288)>>2)];
 var $cmp_i148=($168|0)==0;
 if($cmp_i148){label=168;break;}else{label=171;break;}
 case 168: 
 var $call_i_i=_sysconf(30);
 var $sub_i_i=((($call_i_i)-(1))|0);
 var $and_i_i=$sub_i_i&$call_i_i;
 var $cmp1_i_i=($and_i_i|0)==0;
 if($cmp1_i_i){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((16296)>>2)]=$call_i_i;
 HEAP32[((16292)>>2)]=$call_i_i;
 HEAP32[((16300)>>2)]=-1;
 HEAP32[((16304)>>2)]=-1;
 HEAP32[((16308)>>2)]=0;
 HEAP32[((16788)>>2)]=0;
 var $call6_i_i=_time(0);
 var $xor_i_i=$call6_i_i&-16;
 var $and7_i_i=$xor_i_i^1431655768;
 HEAP32[((16288)>>2)]=$and7_i_i;
 label=171;break;
 case 171: 
 var $add_i149=((($nb_0)+(48))|0);
 var $169=HEAP32[((16296)>>2)];
 var $sub_i150=((($nb_0)+(47))|0);
 var $add9_i=((($169)+($sub_i150))|0);
 var $neg_i151=(((-$169))|0);
 var $and11_i=$add9_i&$neg_i151;
 var $cmp12_i=($and11_i>>>0)>($nb_0>>>0);
 if($cmp12_i){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $170=HEAP32[((16784)>>2)];
 var $cmp15_i=($170|0)==0;
 if($cmp15_i){label=174;break;}else{label=173;break;}
 case 173: 
 var $171=HEAP32[((16776)>>2)];
 var $add17_i152=((($171)+($and11_i))|0);
 var $cmp19_i=($add17_i152>>>0)<=($171>>>0);
 var $cmp21_i=($add17_i152>>>0)>($170>>>0);
 var $or_cond1_i=$cmp19_i|$cmp21_i;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $172=HEAP32[((16788)>>2)];
 var $and26_i=$172&4;
 var $tobool27_i=($and26_i|0)==0;
 if($tobool27_i){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $173=HEAP32[((16368)>>2)];
 var $cmp29_i=($173|0)==0;
 if($cmp29_i){label=181;break;}else{label=176;break;}
 case 176: 
 var $174=$173;
 var $sp_0_i_i=16792;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $base_i_i=(($sp_0_i_i)|0);
 var $175=HEAP32[(($base_i_i)>>2)];
 var $cmp_i9_i=($175>>>0)>($174>>>0);
 if($cmp_i9_i){label=179;break;}else{label=178;break;}
 case 178: 
 var $size_i_i=(($sp_0_i_i+4)|0);
 var $176=HEAP32[(($size_i_i)>>2)];
 var $add_ptr_i_i=(($175+$176)|0);
 var $cmp2_i_i=($add_ptr_i_i>>>0)>($174>>>0);
 if($cmp2_i_i){label=180;break;}else{label=179;break;}
 case 179: 
 var $next_i_i=(($sp_0_i_i+8)|0);
 var $177=HEAP32[(($next_i_i)>>2)];
 var $cmp3_i_i=($177|0)==0;
 if($cmp3_i_i){label=181;break;}else{var $sp_0_i_i=$177;label=177;break;}
 case 180: 
 var $cmp32_i154=($sp_0_i_i|0)==0;
 if($cmp32_i154){label=181;break;}else{label=188;break;}
 case 181: 
 var $call34_i=_sbrk(0);
 var $cmp35_i156=($call34_i|0)==-1;
 if($cmp35_i156){var $tsize_0758385_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $178=$call34_i;
 var $179=HEAP32[((16292)>>2)];
 var $sub38_i=((($179)-(1))|0);
 var $and39_i=$sub38_i&$178;
 var $cmp40_i157=($and39_i|0)==0;
 if($cmp40_i157){var $ssize_0_i=$and11_i;label=184;break;}else{label=183;break;}
 case 183: 
 var $add43_i=((($sub38_i)+($178))|0);
 var $neg45_i=(((-$179))|0);
 var $and46_i=$add43_i&$neg45_i;
 var $sub47_i=((($and11_i)-($178))|0);
 var $add48_i=((($sub47_i)+($and46_i))|0);
 var $ssize_0_i=$add48_i;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $180=HEAP32[((16776)>>2)];
 var $add51_i=((($180)+($ssize_0_i))|0);
 var $cmp52_i=($ssize_0_i>>>0)>($nb_0>>>0);
 var $cmp54_i158=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i159=$cmp52_i&$cmp54_i158;
 if($or_cond_i159){label=185;break;}else{var $tsize_0758385_i=0;label=197;break;}
 case 185: 
 var $181=HEAP32[((16784)>>2)];
 var $cmp57_i=($181|0)==0;
 if($cmp57_i){label=187;break;}else{label=186;break;}
 case 186: 
 var $cmp60_i=($add51_i>>>0)<=($180>>>0);
 var $cmp63_i=($add51_i>>>0)>($181>>>0);
 var $or_cond2_i=$cmp60_i|$cmp63_i;
 if($or_cond2_i){var $tsize_0758385_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $call65_i=_sbrk($ssize_0_i);
 var $cmp66_i160=($call65_i|0)==($call34_i|0);
 var $ssize_0__i=$cmp66_i160?$ssize_0_i:0;
 var $call34__i=$cmp66_i160?$call34_i:-1;
 var $tbase_0_i=$call34__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$call65_i;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $182=HEAP32[((16356)>>2)];
 var $add74_i=((($add9_i)-($182))|0);
 var $and77_i=$add74_i&$neg_i151;
 var $cmp78_i=($and77_i>>>0)<2147483647;
 if($cmp78_i){label=189;break;}else{var $tsize_0758385_i=0;label=197;break;}
 case 189: 
 var $call80_i=_sbrk($and77_i);
 var $183=HEAP32[(($base_i_i)>>2)];
 var $184=HEAP32[(($size_i_i)>>2)];
 var $add_ptr_i162=(($183+$184)|0);
 var $cmp82_i=($call80_i|0)==($add_ptr_i162|0);
 var $and77__i=$cmp82_i?$and77_i:0;
 var $call80__i=$cmp82_i?$call80_i:-1;
 var $tbase_0_i=$call80__i;var $tsize_0_i=$and77__i;var $br_0_i=$call80_i;var $ssize_1_i=$and77_i;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $sub109_i=(((-$ssize_1_i))|0);
 var $cmp86_i=($tbase_0_i|0)==-1;
 if($cmp86_i){label=191;break;}else{var $tsize_291_i=$tsize_0_i;var $tbase_292_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $cmp88_i=($br_0_i|0)!=-1;
 var $cmp90_i163=($ssize_1_i>>>0)<2147483647;
 var $or_cond3_i=$cmp88_i&$cmp90_i163;
 var $cmp93_i=($ssize_1_i>>>0)<($add_i149>>>0);
 var $or_cond4_i=$or_cond3_i&$cmp93_i;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $185=HEAP32[((16296)>>2)];
 var $sub96_i=((($sub_i150)-($ssize_1_i))|0);
 var $add98_i=((($sub96_i)+($185))|0);
 var $neg100_i=(((-$185))|0);
 var $and101_i=$add98_i&$neg100_i;
 var $cmp102_i=($and101_i>>>0)<2147483647;
 if($cmp102_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $call104_i=_sbrk($and101_i);
 var $cmp105_i=($call104_i|0)==-1;
 if($cmp105_i){label=195;break;}else{label=194;break;}
 case 194: 
 var $add107_i=((($and101_i)+($ssize_1_i))|0);
 var $ssize_2_i=$add107_i;label=196;break;
 case 195: 
 var $call110_i=_sbrk($sub109_i);
 var $tsize_0758385_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $cmp115_i164=($br_0_i|0)==-1;
 if($cmp115_i164){var $tsize_0758385_i=$tsize_0_i;label=197;break;}else{var $tsize_291_i=$ssize_2_i;var $tbase_292_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0758385_i;
 var $186=HEAP32[((16788)>>2)];
 var $or_i165=$186|4;
 HEAP32[((16788)>>2)]=$or_i165;
 var $tsize_1_i=$tsize_0758385_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $cmp124_i=($and11_i>>>0)<2147483647;
 if($cmp124_i){label=199;break;}else{label=340;break;}
 case 199: 
 var $call128_i=_sbrk($and11_i);
 var $call129_i=_sbrk(0);
 var $notlhs_i=($call128_i|0)!=-1;
 var $notrhs_i=($call129_i|0)!=-1;
 var $or_cond6_not_i=$notrhs_i&$notlhs_i;
 var $cmp134_i=($call128_i>>>0)<($call129_i>>>0);
 var $or_cond7_i=$or_cond6_not_i&$cmp134_i;
 if($or_cond7_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $sub_ptr_lhs_cast_i=$call129_i;
 var $sub_ptr_rhs_cast_i=$call128_i;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $add137_i=((($nb_0)+(40))|0);
 var $cmp138_i166=($sub_ptr_sub_i>>>0)>($add137_i>>>0);
 var $sub_ptr_sub_tsize_1_i=$cmp138_i166?$sub_ptr_sub_i:$tsize_1_i;
 var $call128_tbase_1_i=$cmp138_i166?$call128_i:-1;
 var $cmp144_i=($call128_tbase_1_i|0)==-1;
 if($cmp144_i){label=340;break;}else{var $tsize_291_i=$sub_ptr_sub_tsize_1_i;var $tbase_292_i=$call128_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_292_i;
 var $tsize_291_i;
 var $187=HEAP32[((16776)>>2)];
 var $add147_i=((($187)+($tsize_291_i))|0);
 HEAP32[((16776)>>2)]=$add147_i;
 var $188=HEAP32[((16780)>>2)];
 var $cmp148_i=($add147_i>>>0)>($188>>>0);
 if($cmp148_i){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((16780)>>2)]=$add147_i;
 label=203;break;
 case 203: 
 var $189=HEAP32[((16368)>>2)];
 var $cmp154_i=($189|0)==0;
 if($cmp154_i){label=204;break;}else{var $sp_0105_i=16792;label=211;break;}
 case 204: 
 var $190=HEAP32[((16360)>>2)];
 var $cmp156_i=($190|0)==0;
 var $cmp159_i168=($tbase_292_i>>>0)<($190>>>0);
 var $or_cond8_i=$cmp156_i|$cmp159_i168;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((16360)>>2)]=$tbase_292_i;
 label=206;break;
 case 206: 
 HEAP32[((16792)>>2)]=$tbase_292_i;
 HEAP32[((16796)>>2)]=$tsize_291_i;
 HEAP32[((16804)>>2)]=0;
 var $191=HEAP32[((16288)>>2)];
 HEAP32[((16380)>>2)]=$191;
 HEAP32[((16376)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $shl_i_i=$i_02_i_i<<1;
 var $arrayidx_i_i=((16384+($shl_i_i<<2))|0);
 var $192=$arrayidx_i_i;
 var $arrayidx_sum_i_i=((($shl_i_i)+(3))|0);
 var $193=((16384+($arrayidx_sum_i_i<<2))|0);
 HEAP32[(($193)>>2)]=$192;
 var $arrayidx_sum1_i_i=((($shl_i_i)+(2))|0);
 var $194=((16384+($arrayidx_sum1_i_i<<2))|0);
 HEAP32[(($194)>>2)]=$192;
 var $inc_i_i=((($i_02_i_i)+(1))|0);
 var $cmp_i11_i=($inc_i_i>>>0)<32;
 if($cmp_i11_i){var $i_02_i_i=$inc_i_i;label=207;break;}else{label=208;break;}
 case 208: 
 var $sub169_i=((($tsize_291_i)-(40))|0);
 var $add_ptr_i12_i=(($tbase_292_i+8)|0);
 var $195=$add_ptr_i12_i;
 var $and_i13_i=$195&7;
 var $cmp_i14_i=($and_i13_i|0)==0;
 if($cmp_i14_i){var $cond_i_i=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $196=(((-$195))|0);
 var $and3_i_i=$196&7;
 var $cond_i_i=$and3_i_i;label=210;break;
 case 210: 
 var $cond_i_i;
 var $add_ptr4_i_i=(($tbase_292_i+$cond_i_i)|0);
 var $197=$add_ptr4_i_i;
 var $sub5_i_i=((($sub169_i)-($cond_i_i))|0);
 HEAP32[((16368)>>2)]=$197;
 HEAP32[((16356)>>2)]=$sub5_i_i;
 var $or_i_i=$sub5_i_i|1;
 var $add_ptr4_sum_i_i=((($cond_i_i)+(4))|0);
 var $head_i_i=(($tbase_292_i+$add_ptr4_sum_i_i)|0);
 var $198=$head_i_i;
 HEAP32[(($198)>>2)]=$or_i_i;
 var $add_ptr6_sum_i_i=((($tsize_291_i)-(36))|0);
 var $head7_i_i=(($tbase_292_i+$add_ptr6_sum_i_i)|0);
 var $199=$head7_i_i;
 HEAP32[(($199)>>2)]=40;
 var $200=HEAP32[((16304)>>2)];
 HEAP32[((16372)>>2)]=$200;
 label=338;break;
 case 211: 
 var $sp_0105_i;
 var $base184_i=(($sp_0105_i)|0);
 var $201=HEAP32[(($base184_i)>>2)];
 var $size185_i=(($sp_0105_i+4)|0);
 var $202=HEAP32[(($size185_i)>>2)];
 var $add_ptr186_i=(($201+$202)|0);
 var $cmp187_i=($tbase_292_i|0)==($add_ptr186_i|0);
 if($cmp187_i){label=213;break;}else{label=212;break;}
 case 212: 
 var $next_i=(($sp_0105_i+8)|0);
 var $203=HEAP32[(($next_i)>>2)];
 var $cmp183_i=($203|0)==0;
 if($cmp183_i){label=218;break;}else{var $sp_0105_i=$203;label=211;break;}
 case 213: 
 var $sflags190_i=(($sp_0105_i+12)|0);
 var $204=HEAP32[(($sflags190_i)>>2)];
 var $and191_i=$204&8;
 var $tobool192_i=($and191_i|0)==0;
 if($tobool192_i){label=214;break;}else{label=218;break;}
 case 214: 
 var $205=$189;
 var $cmp200_i=($205>>>0)>=($201>>>0);
 var $cmp206_i=($205>>>0)<($tbase_292_i>>>0);
 var $or_cond94_i=$cmp200_i&$cmp206_i;
 if($or_cond94_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $add209_i=((($202)+($tsize_291_i))|0);
 HEAP32[(($size185_i)>>2)]=$add209_i;
 var $206=HEAP32[((16368)>>2)];
 var $207=HEAP32[((16356)>>2)];
 var $add212_i=((($207)+($tsize_291_i))|0);
 var $208=$206;
 var $add_ptr_i23_i=(($206+8)|0);
 var $209=$add_ptr_i23_i;
 var $and_i24_i=$209&7;
 var $cmp_i25_i=($and_i24_i|0)==0;
 if($cmp_i25_i){var $cond_i28_i=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $210=(((-$209))|0);
 var $and3_i26_i=$210&7;
 var $cond_i28_i=$and3_i26_i;label=217;break;
 case 217: 
 var $cond_i28_i;
 var $add_ptr4_i29_i=(($208+$cond_i28_i)|0);
 var $211=$add_ptr4_i29_i;
 var $sub5_i30_i=((($add212_i)-($cond_i28_i))|0);
 HEAP32[((16368)>>2)]=$211;
 HEAP32[((16356)>>2)]=$sub5_i30_i;
 var $or_i31_i=$sub5_i30_i|1;
 var $add_ptr4_sum_i32_i=((($cond_i28_i)+(4))|0);
 var $head_i33_i=(($208+$add_ptr4_sum_i32_i)|0);
 var $212=$head_i33_i;
 HEAP32[(($212)>>2)]=$or_i31_i;
 var $add_ptr6_sum_i34_i=((($add212_i)+(4))|0);
 var $head7_i35_i=(($208+$add_ptr6_sum_i34_i)|0);
 var $213=$head7_i35_i;
 HEAP32[(($213)>>2)]=40;
 var $214=HEAP32[((16304)>>2)];
 HEAP32[((16372)>>2)]=$214;
 label=338;break;
 case 218: 
 var $215=HEAP32[((16360)>>2)];
 var $cmp215_i=($tbase_292_i>>>0)<($215>>>0);
 if($cmp215_i){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((16360)>>2)]=$tbase_292_i;
 label=220;break;
 case 220: 
 var $add_ptr224_i=(($tbase_292_i+$tsize_291_i)|0);
 var $sp_1101_i=16792;label=221;break;
 case 221: 
 var $sp_1101_i;
 var $base223_i=(($sp_1101_i)|0);
 var $216=HEAP32[(($base223_i)>>2)];
 var $cmp225_i=($216|0)==($add_ptr224_i|0);
 if($cmp225_i){label=223;break;}else{label=222;break;}
 case 222: 
 var $next228_i=(($sp_1101_i+8)|0);
 var $217=HEAP32[(($next228_i)>>2)];
 var $cmp221_i=($217|0)==0;
 if($cmp221_i){label=304;break;}else{var $sp_1101_i=$217;label=221;break;}
 case 223: 
 var $sflags232_i=(($sp_1101_i+12)|0);
 var $218=HEAP32[(($sflags232_i)>>2)];
 var $and233_i=$218&8;
 var $tobool234_i=($and233_i|0)==0;
 if($tobool234_i){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($base223_i)>>2)]=$tbase_292_i;
 var $size242_i=(($sp_1101_i+4)|0);
 var $219=HEAP32[(($size242_i)>>2)];
 var $add243_i=((($219)+($tsize_291_i))|0);
 HEAP32[(($size242_i)>>2)]=$add243_i;
 var $add_ptr_i38_i=(($tbase_292_i+8)|0);
 var $220=$add_ptr_i38_i;
 var $and_i39_i=$220&7;
 var $cmp_i40_i=($and_i39_i|0)==0;
 if($cmp_i40_i){var $cond_i43_i=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $221=(((-$220))|0);
 var $and3_i41_i=$221&7;
 var $cond_i43_i=$and3_i41_i;label=226;break;
 case 226: 
 var $cond_i43_i;
 var $add_ptr4_i44_i=(($tbase_292_i+$cond_i43_i)|0);
 var $add_ptr224_sum_i=((($tsize_291_i)+(8))|0);
 var $add_ptr5_i_i=(($tbase_292_i+$add_ptr224_sum_i)|0);
 var $222=$add_ptr5_i_i;
 var $and6_i45_i=$222&7;
 var $cmp7_i_i=($and6_i45_i|0)==0;
 if($cmp7_i_i){var $cond15_i_i=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $223=(((-$222))|0);
 var $and13_i_i=$223&7;
 var $cond15_i_i=$and13_i_i;label=228;break;
 case 228: 
 var $cond15_i_i;
 var $add_ptr224_sum122_i=((($cond15_i_i)+($tsize_291_i))|0);
 var $add_ptr16_i_i=(($tbase_292_i+$add_ptr224_sum122_i)|0);
 var $224=$add_ptr16_i_i;
 var $sub_ptr_lhs_cast_i47_i=$add_ptr16_i_i;
 var $sub_ptr_rhs_cast_i48_i=$add_ptr4_i44_i;
 var $sub_ptr_sub_i49_i=((($sub_ptr_lhs_cast_i47_i)-($sub_ptr_rhs_cast_i48_i))|0);
 var $add_ptr4_sum_i50_i=((($cond_i43_i)+($nb_0))|0);
 var $add_ptr17_i_i=(($tbase_292_i+$add_ptr4_sum_i50_i)|0);
 var $225=$add_ptr17_i_i;
 var $sub18_i_i=((($sub_ptr_sub_i49_i)-($nb_0))|0);
 var $or19_i_i=$nb_0|3;
 var $add_ptr4_sum1_i_i=((($cond_i43_i)+(4))|0);
 var $head_i51_i=(($tbase_292_i+$add_ptr4_sum1_i_i)|0);
 var $226=$head_i51_i;
 HEAP32[(($226)>>2)]=$or19_i_i;
 var $227=HEAP32[((16368)>>2)];
 var $cmp20_i_i=($224|0)==($227|0);
 if($cmp20_i_i){label=229;break;}else{label=230;break;}
 case 229: 
 var $228=HEAP32[((16356)>>2)];
 var $add_i_i=((($228)+($sub18_i_i))|0);
 HEAP32[((16356)>>2)]=$add_i_i;
 HEAP32[((16368)>>2)]=$225;
 var $or22_i_i=$add_i_i|1;
 var $add_ptr17_sum39_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head23_i_i=(($tbase_292_i+$add_ptr17_sum39_i_i)|0);
 var $229=$head23_i_i;
 HEAP32[(($229)>>2)]=$or22_i_i;
 label=303;break;
 case 230: 
 var $230=HEAP32[((16364)>>2)];
 var $cmp24_i_i=($224|0)==($230|0);
 if($cmp24_i_i){label=231;break;}else{label=232;break;}
 case 231: 
 var $231=HEAP32[((16352)>>2)];
 var $add26_i_i=((($231)+($sub18_i_i))|0);
 HEAP32[((16352)>>2)]=$add26_i_i;
 HEAP32[((16364)>>2)]=$225;
 var $or28_i_i=$add26_i_i|1;
 var $add_ptr17_sum37_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head29_i_i=(($tbase_292_i+$add_ptr17_sum37_i_i)|0);
 var $232=$head29_i_i;
 HEAP32[(($232)>>2)]=$or28_i_i;
 var $add_ptr17_sum38_i_i=((($add26_i_i)+($add_ptr4_sum_i50_i))|0);
 var $add_ptr30_i53_i=(($tbase_292_i+$add_ptr17_sum38_i_i)|0);
 var $prev_foot_i54_i=$add_ptr30_i53_i;
 HEAP32[(($prev_foot_i54_i)>>2)]=$add26_i_i;
 label=303;break;
 case 232: 
 var $add_ptr16_sum_i_i=((($tsize_291_i)+(4))|0);
 var $add_ptr224_sum123_i=((($add_ptr16_sum_i_i)+($cond15_i_i))|0);
 var $head32_i_i=(($tbase_292_i+$add_ptr224_sum123_i)|0);
 var $233=$head32_i_i;
 var $234=HEAP32[(($233)>>2)];
 var $and33_i_i=$234&3;
 var $cmp34_i_i=($and33_i_i|0)==1;
 if($cmp34_i_i){label=233;break;}else{var $oldfirst_0_i_i=$224;var $qsize_0_i_i=$sub18_i_i;label=280;break;}
 case 233: 
 var $and37_i_i=$234&-8;
 var $shr_i55_i=$234>>>3;
 var $cmp38_i_i=($234>>>0)<256;
 if($cmp38_i_i){label=234;break;}else{label=246;break;}
 case 234: 
 var $add_ptr16_sum3233_i_i=$cond15_i_i|8;
 var $add_ptr224_sum133_i=((($add_ptr16_sum3233_i_i)+($tsize_291_i))|0);
 var $fd_i_i=(($tbase_292_i+$add_ptr224_sum133_i)|0);
 var $235=$fd_i_i;
 var $236=HEAP32[(($235)>>2)];
 var $add_ptr16_sum34_i_i=((($tsize_291_i)+(12))|0);
 var $add_ptr224_sum134_i=((($add_ptr16_sum34_i_i)+($cond15_i_i))|0);
 var $bk_i56_i=(($tbase_292_i+$add_ptr224_sum134_i)|0);
 var $237=$bk_i56_i;
 var $238=HEAP32[(($237)>>2)];
 var $shl_i57_i=$shr_i55_i<<1;
 var $arrayidx_i58_i=((16384+($shl_i57_i<<2))|0);
 var $239=$arrayidx_i58_i;
 var $cmp41_i_i=($236|0)==($239|0);
 if($cmp41_i_i){label=237;break;}else{label=235;break;}
 case 235: 
 var $240=$236;
 var $241=HEAP32[((16360)>>2)];
 var $cmp42_i_i=($240>>>0)<($241>>>0);
 if($cmp42_i_i){label=245;break;}else{label=236;break;}
 case 236: 
 var $bk43_i_i=(($236+12)|0);
 var $242=HEAP32[(($bk43_i_i)>>2)];
 var $cmp44_i_i=($242|0)==($224|0);
 if($cmp44_i_i){label=237;break;}else{label=245;break;}
 case 237: 
 var $cmp46_i60_i=($238|0)==($236|0);
 if($cmp46_i60_i){label=238;break;}else{label=239;break;}
 case 238: 
 var $shl48_i_i=1<<$shr_i55_i;
 var $neg_i_i=$shl48_i_i^-1;
 var $243=HEAP32[((16344)>>2)];
 var $and49_i_i=$243&$neg_i_i;
 HEAP32[((16344)>>2)]=$and49_i_i;
 label=279;break;
 case 239: 
 var $cmp54_i_i=($238|0)==($239|0);
 if($cmp54_i_i){label=240;break;}else{label=241;break;}
 case 240: 
 var $fd68_pre_i_i=(($238+8)|0);
 var $fd68_pre_phi_i_i=$fd68_pre_i_i;label=243;break;
 case 241: 
 var $244=$238;
 var $245=HEAP32[((16360)>>2)];
 var $cmp57_i_i=($244>>>0)<($245>>>0);
 if($cmp57_i_i){label=244;break;}else{label=242;break;}
 case 242: 
 var $fd59_i_i=(($238+8)|0);
 var $246=HEAP32[(($fd59_i_i)>>2)];
 var $cmp60_i_i=($246|0)==($224|0);
 if($cmp60_i_i){var $fd68_pre_phi_i_i=$fd59_i_i;label=243;break;}else{label=244;break;}
 case 243: 
 var $fd68_pre_phi_i_i;
 var $bk67_i_i=(($236+12)|0);
 HEAP32[(($bk67_i_i)>>2)]=$238;
 HEAP32[(($fd68_pre_phi_i_i)>>2)]=$236;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $247=$add_ptr16_i_i;
 var $add_ptr16_sum23_i_i=$cond15_i_i|24;
 var $add_ptr224_sum124_i=((($add_ptr16_sum23_i_i)+($tsize_291_i))|0);
 var $parent_i62_i=(($tbase_292_i+$add_ptr224_sum124_i)|0);
 var $248=$parent_i62_i;
 var $249=HEAP32[(($248)>>2)];
 var $add_ptr16_sum4_i_i=((($tsize_291_i)+(12))|0);
 var $add_ptr224_sum125_i=((($add_ptr16_sum4_i_i)+($cond15_i_i))|0);
 var $bk74_i_i=(($tbase_292_i+$add_ptr224_sum125_i)|0);
 var $250=$bk74_i_i;
 var $251=HEAP32[(($250)>>2)];
 var $cmp75_i_i=($251|0)==($247|0);
 if($cmp75_i_i){label=252;break;}else{label=247;break;}
 case 247: 
 var $add_ptr16_sum2930_i_i=$cond15_i_i|8;
 var $add_ptr224_sum126_i=((($add_ptr16_sum2930_i_i)+($tsize_291_i))|0);
 var $fd78_i_i=(($tbase_292_i+$add_ptr224_sum126_i)|0);
 var $252=$fd78_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=$253;
 var $255=HEAP32[((16360)>>2)];
 var $cmp81_i_i=($254>>>0)<($255>>>0);
 if($cmp81_i_i){label=251;break;}else{label=248;break;}
 case 248: 
 var $bk82_i_i=(($253+12)|0);
 var $256=HEAP32[(($bk82_i_i)>>2)];
 var $cmp83_i_i=($256|0)==($247|0);
 if($cmp83_i_i){label=249;break;}else{label=251;break;}
 case 249: 
 var $fd85_i_i=(($251+8)|0);
 var $257=HEAP32[(($fd85_i_i)>>2)];
 var $cmp86_i_i=($257|0)==($247|0);
 if($cmp86_i_i){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($bk82_i_i)>>2)]=$251;
 HEAP32[(($fd85_i_i)>>2)]=$253;
 var $R_1_i_i=$251;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $add_ptr16_sum56_i_i=$cond15_i_i|16;
 var $add_ptr224_sum131_i=((($add_ptr16_sum_i_i)+($add_ptr16_sum56_i_i))|0);
 var $arrayidx96_i_i=(($tbase_292_i+$add_ptr224_sum131_i)|0);
 var $258=$arrayidx96_i_i;
 var $259=HEAP32[(($258)>>2)];
 var $cmp97_i_i=($259|0)==0;
 if($cmp97_i_i){label=253;break;}else{var $R_0_i_i=$259;var $RP_0_i_i=$258;label=254;break;}
 case 253: 
 var $add_ptr224_sum132_i=((($add_ptr16_sum56_i_i)+($tsize_291_i))|0);
 var $child_i_i=(($tbase_292_i+$add_ptr224_sum132_i)|0);
 var $arrayidx99_i_i=$child_i_i;
 var $260=HEAP32[(($arrayidx99_i_i)>>2)];
 var $cmp100_i_i=($260|0)==0;
 if($cmp100_i_i){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$260;var $RP_0_i_i=$arrayidx99_i_i;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $arrayidx103_i_i=(($R_0_i_i+20)|0);
 var $261=HEAP32[(($arrayidx103_i_i)>>2)];
 var $cmp104_i_i=($261|0)==0;
 if($cmp104_i_i){label=255;break;}else{var $R_0_i_i=$261;var $RP_0_i_i=$arrayidx103_i_i;label=254;break;}
 case 255: 
 var $arrayidx107_i_i=(($R_0_i_i+16)|0);
 var $262=HEAP32[(($arrayidx107_i_i)>>2)];
 var $cmp108_i_i=($262|0)==0;
 if($cmp108_i_i){label=256;break;}else{var $R_0_i_i=$262;var $RP_0_i_i=$arrayidx107_i_i;label=254;break;}
 case 256: 
 var $263=$RP_0_i_i;
 var $264=HEAP32[((16360)>>2)];
 var $cmp112_i_i=($263>>>0)<($264>>>0);
 if($cmp112_i_i){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $cmp120_i64_i=($249|0)==0;
 if($cmp120_i64_i){label=279;break;}else{label=260;break;}
 case 260: 
 var $add_ptr16_sum26_i_i=((($tsize_291_i)+(28))|0);
 var $add_ptr224_sum127_i=((($add_ptr16_sum26_i_i)+($cond15_i_i))|0);
 var $index_i65_i=(($tbase_292_i+$add_ptr224_sum127_i)|0);
 var $265=$index_i65_i;
 var $266=HEAP32[(($265)>>2)];
 var $arrayidx123_i_i=((16648+($266<<2))|0);
 var $267=HEAP32[(($arrayidx123_i_i)>>2)];
 var $cmp124_i_i=($247|0)==($267|0);
 if($cmp124_i_i){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($arrayidx123_i_i)>>2)]=$R_1_i_i;
 var $cond41_i_i=($R_1_i_i|0)==0;
 if($cond41_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $268=HEAP32[(($265)>>2)];
 var $shl131_i_i=1<<$268;
 var $neg132_i_i=$shl131_i_i^-1;
 var $269=HEAP32[((16348)>>2)];
 var $and133_i_i=$269&$neg132_i_i;
 HEAP32[((16348)>>2)]=$and133_i_i;
 label=279;break;
 case 263: 
 var $270=$249;
 var $271=HEAP32[((16360)>>2)];
 var $cmp137_i_i=($270>>>0)<($271>>>0);
 if($cmp137_i_i){label=267;break;}else{label=264;break;}
 case 264: 
 var $arrayidx143_i_i=(($249+16)|0);
 var $272=HEAP32[(($arrayidx143_i_i)>>2)];
 var $cmp144_i_i=($272|0)==($247|0);
 if($cmp144_i_i){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($arrayidx143_i_i)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $arrayidx151_i_i=(($249+20)|0);
 HEAP32[(($arrayidx151_i_i)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $cmp156_i_i=($R_1_i_i|0)==0;
 if($cmp156_i_i){label=279;break;}else{label=269;break;}
 case 269: 
 var $273=$R_1_i_i;
 var $274=HEAP32[((16360)>>2)];
 var $cmp160_i_i=($273>>>0)<($274>>>0);
 if($cmp160_i_i){label=278;break;}else{label=270;break;}
 case 270: 
 var $parent165_i_i=(($R_1_i_i+24)|0);
 HEAP32[(($parent165_i_i)>>2)]=$249;
 var $add_ptr16_sum2728_i_i=$cond15_i_i|16;
 var $add_ptr224_sum128_i=((($add_ptr16_sum2728_i_i)+($tsize_291_i))|0);
 var $child166_i_i=(($tbase_292_i+$add_ptr224_sum128_i)|0);
 var $arrayidx167_i_i=$child166_i_i;
 var $275=HEAP32[(($arrayidx167_i_i)>>2)];
 var $cmp168_i_i=($275|0)==0;
 if($cmp168_i_i){label=274;break;}else{label=271;break;}
 case 271: 
 var $276=$275;
 var $277=HEAP32[((16360)>>2)];
 var $cmp172_i_i=($276>>>0)<($277>>>0);
 if($cmp172_i_i){label=273;break;}else{label=272;break;}
 case 272: 
 var $arrayidx178_i_i=(($R_1_i_i+16)|0);
 HEAP32[(($arrayidx178_i_i)>>2)]=$275;
 var $parent179_i_i=(($275+24)|0);
 HEAP32[(($parent179_i_i)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $add_ptr224_sum129_i=((($add_ptr16_sum_i_i)+($add_ptr16_sum2728_i_i))|0);
 var $arrayidx184_i_i=(($tbase_292_i+$add_ptr224_sum129_i)|0);
 var $278=$arrayidx184_i_i;
 var $279=HEAP32[(($278)>>2)];
 var $cmp185_i_i=($279|0)==0;
 if($cmp185_i_i){label=279;break;}else{label=275;break;}
 case 275: 
 var $280=$279;
 var $281=HEAP32[((16360)>>2)];
 var $cmp189_i_i=($280>>>0)<($281>>>0);
 if($cmp189_i_i){label=277;break;}else{label=276;break;}
 case 276: 
 var $arrayidx195_i_i=(($R_1_i_i+20)|0);
 HEAP32[(($arrayidx195_i_i)>>2)]=$279;
 var $parent196_i_i=(($279+24)|0);
 HEAP32[(($parent196_i_i)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $add_ptr16_sum7_i_i=$and37_i_i|$cond15_i_i;
 var $add_ptr224_sum130_i=((($add_ptr16_sum7_i_i)+($tsize_291_i))|0);
 var $add_ptr205_i_i=(($tbase_292_i+$add_ptr224_sum130_i)|0);
 var $282=$add_ptr205_i_i;
 var $add206_i_i=((($and37_i_i)+($sub18_i_i))|0);
 var $oldfirst_0_i_i=$282;var $qsize_0_i_i=$add206_i_i;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $head208_i_i=(($oldfirst_0_i_i+4)|0);
 var $283=HEAP32[(($head208_i_i)>>2)];
 var $and209_i_i=$283&-2;
 HEAP32[(($head208_i_i)>>2)]=$and209_i_i;
 var $or210_i_i=$qsize_0_i_i|1;
 var $add_ptr17_sum_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head211_i_i=(($tbase_292_i+$add_ptr17_sum_i_i)|0);
 var $284=$head211_i_i;
 HEAP32[(($284)>>2)]=$or210_i_i;
 var $add_ptr17_sum8_i_i=((($qsize_0_i_i)+($add_ptr4_sum_i50_i))|0);
 var $add_ptr212_i_i=(($tbase_292_i+$add_ptr17_sum8_i_i)|0);
 var $prev_foot213_i_i=$add_ptr212_i_i;
 HEAP32[(($prev_foot213_i_i)>>2)]=$qsize_0_i_i;
 var $shr214_i_i=$qsize_0_i_i>>>3;
 var $cmp215_i_i=($qsize_0_i_i>>>0)<256;
 if($cmp215_i_i){label=281;break;}else{label=286;break;}
 case 281: 
 var $shl221_i_i=$shr214_i_i<<1;
 var $arrayidx223_i_i=((16384+($shl221_i_i<<2))|0);
 var $285=$arrayidx223_i_i;
 var $286=HEAP32[((16344)>>2)];
 var $shl226_i_i=1<<$shr214_i_i;
 var $and227_i_i=$286&$shl226_i_i;
 var $tobool228_i_i=($and227_i_i|0)==0;
 if($tobool228_i_i){label=282;break;}else{label=283;break;}
 case 282: 
 var $or232_i_i=$286|$shl226_i_i;
 HEAP32[((16344)>>2)]=$or232_i_i;
 var $arrayidx223_sum_pre_i_i=((($shl221_i_i)+(2))|0);
 var $_pre_i67_i=((16384+($arrayidx223_sum_pre_i_i<<2))|0);
 var $F224_0_i_i=$285;var $_pre_phi_i68_i=$_pre_i67_i;label=285;break;
 case 283: 
 var $arrayidx223_sum25_i_i=((($shl221_i_i)+(2))|0);
 var $287=((16384+($arrayidx223_sum25_i_i<<2))|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$288;
 var $290=HEAP32[((16360)>>2)];
 var $cmp236_i_i=($289>>>0)<($290>>>0);
 if($cmp236_i_i){label=284;break;}else{var $F224_0_i_i=$288;var $_pre_phi_i68_i=$287;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i68_i;
 var $F224_0_i_i;
 HEAP32[(($_pre_phi_i68_i)>>2)]=$225;
 var $bk246_i_i=(($F224_0_i_i+12)|0);
 HEAP32[(($bk246_i_i)>>2)]=$225;
 var $add_ptr17_sum23_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd247_i_i=(($tbase_292_i+$add_ptr17_sum23_i_i)|0);
 var $291=$fd247_i_i;
 HEAP32[(($291)>>2)]=$F224_0_i_i;
 var $add_ptr17_sum24_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk248_i_i=(($tbase_292_i+$add_ptr17_sum24_i_i)|0);
 var $292=$bk248_i_i;
 HEAP32[(($292)>>2)]=$285;
 label=303;break;
 case 286: 
 var $293=$add_ptr17_i_i;
 var $shr253_i_i=$qsize_0_i_i>>>8;
 var $cmp254_i_i=($shr253_i_i|0)==0;
 if($cmp254_i_i){var $I252_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $cmp258_i_i=($qsize_0_i_i>>>0)>16777215;
 if($cmp258_i_i){var $I252_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $sub262_i_i=((($shr253_i_i)+(1048320))|0);
 var $shr263_i_i=$sub262_i_i>>>16;
 var $and264_i_i=$shr263_i_i&8;
 var $shl265_i_i=$shr253_i_i<<$and264_i_i;
 var $sub266_i_i=((($shl265_i_i)+(520192))|0);
 var $shr267_i_i=$sub266_i_i>>>16;
 var $and268_i_i=$shr267_i_i&4;
 var $add269_i_i=$and268_i_i|$and264_i_i;
 var $shl270_i_i=$shl265_i_i<<$and268_i_i;
 var $sub271_i_i=((($shl270_i_i)+(245760))|0);
 var $shr272_i_i=$sub271_i_i>>>16;
 var $and273_i_i=$shr272_i_i&2;
 var $add274_i_i=$add269_i_i|$and273_i_i;
 var $sub275_i_i=(((14)-($add274_i_i))|0);
 var $shl276_i_i=$shl270_i_i<<$and273_i_i;
 var $shr277_i_i=$shl276_i_i>>>15;
 var $add278_i_i=((($sub275_i_i)+($shr277_i_i))|0);
 var $shl279_i_i=$add278_i_i<<1;
 var $add280_i_i=((($add278_i_i)+(7))|0);
 var $shr281_i_i=$qsize_0_i_i>>>($add280_i_i>>>0);
 var $and282_i_i=$shr281_i_i&1;
 var $add283_i_i=$and282_i_i|$shl279_i_i;
 var $I252_0_i_i=$add283_i_i;label=289;break;
 case 289: 
 var $I252_0_i_i;
 var $arrayidx287_i_i=((16648+($I252_0_i_i<<2))|0);
 var $add_ptr17_sum9_i_i=((($add_ptr4_sum_i50_i)+(28))|0);
 var $index288_i_i=(($tbase_292_i+$add_ptr17_sum9_i_i)|0);
 var $294=$index288_i_i;
 HEAP32[(($294)>>2)]=$I252_0_i_i;
 var $add_ptr17_sum10_i_i=((($add_ptr4_sum_i50_i)+(16))|0);
 var $child289_i_i=(($tbase_292_i+$add_ptr17_sum10_i_i)|0);
 var $child289_sum_i_i=((($add_ptr4_sum_i50_i)+(20))|0);
 var $arrayidx290_i_i=(($tbase_292_i+$child289_sum_i_i)|0);
 var $295=$arrayidx290_i_i;
 HEAP32[(($295)>>2)]=0;
 var $arrayidx292_i_i=$child289_i_i;
 HEAP32[(($arrayidx292_i_i)>>2)]=0;
 var $296=HEAP32[((16348)>>2)];
 var $shl294_i_i=1<<$I252_0_i_i;
 var $and295_i_i=$296&$shl294_i_i;
 var $tobool296_i_i=($and295_i_i|0)==0;
 if($tobool296_i_i){label=290;break;}else{label=291;break;}
 case 290: 
 var $or300_i_i=$296|$shl294_i_i;
 HEAP32[((16348)>>2)]=$or300_i_i;
 HEAP32[(($arrayidx287_i_i)>>2)]=$293;
 var $297=$arrayidx287_i_i;
 var $add_ptr17_sum11_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent301_i_i=(($tbase_292_i+$add_ptr17_sum11_i_i)|0);
 var $298=$parent301_i_i;
 HEAP32[(($298)>>2)]=$297;
 var $add_ptr17_sum12_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk302_i_i=(($tbase_292_i+$add_ptr17_sum12_i_i)|0);
 var $299=$bk302_i_i;
 HEAP32[(($299)>>2)]=$293;
 var $add_ptr17_sum13_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd303_i_i=(($tbase_292_i+$add_ptr17_sum13_i_i)|0);
 var $300=$fd303_i_i;
 HEAP32[(($300)>>2)]=$293;
 label=303;break;
 case 291: 
 var $301=HEAP32[(($arrayidx287_i_i)>>2)];
 var $cmp306_i_i=($I252_0_i_i|0)==31;
 if($cmp306_i_i){var $cond315_i_i=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $shr310_i_i=$I252_0_i_i>>>1;
 var $sub313_i_i=(((25)-($shr310_i_i))|0);
 var $cond315_i_i=$sub313_i_i;label=293;break;
 case 293: 
 var $cond315_i_i;
 var $shl316_i_i=$qsize_0_i_i<<$cond315_i_i;
 var $K305_0_i_i=$shl316_i_i;var $T_0_i69_i=$301;label=294;break;
 case 294: 
 var $T_0_i69_i;
 var $K305_0_i_i;
 var $head317_i_i=(($T_0_i69_i+4)|0);
 var $302=HEAP32[(($head317_i_i)>>2)];
 var $and318_i_i=$302&-8;
 var $cmp319_i_i=($and318_i_i|0)==($qsize_0_i_i|0);
 if($cmp319_i_i){label=299;break;}else{label=295;break;}
 case 295: 
 var $shr322_i_i=$K305_0_i_i>>>31;
 var $arrayidx325_i_i=(($T_0_i69_i+16+($shr322_i_i<<2))|0);
 var $303=HEAP32[(($arrayidx325_i_i)>>2)];
 var $cmp327_i_i=($303|0)==0;
 var $shl326_i_i=$K305_0_i_i<<1;
 if($cmp327_i_i){label=296;break;}else{var $K305_0_i_i=$shl326_i_i;var $T_0_i69_i=$303;label=294;break;}
 case 296: 
 var $304=$arrayidx325_i_i;
 var $305=HEAP32[((16360)>>2)];
 var $cmp332_i_i=($304>>>0)<($305>>>0);
 if($cmp332_i_i){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($arrayidx325_i_i)>>2)]=$293;
 var $add_ptr17_sum20_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent337_i_i=(($tbase_292_i+$add_ptr17_sum20_i_i)|0);
 var $306=$parent337_i_i;
 HEAP32[(($306)>>2)]=$T_0_i69_i;
 var $add_ptr17_sum21_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk338_i_i=(($tbase_292_i+$add_ptr17_sum21_i_i)|0);
 var $307=$bk338_i_i;
 HEAP32[(($307)>>2)]=$293;
 var $add_ptr17_sum22_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd339_i_i=(($tbase_292_i+$add_ptr17_sum22_i_i)|0);
 var $308=$fd339_i_i;
 HEAP32[(($308)>>2)]=$293;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $fd344_i_i=(($T_0_i69_i+8)|0);
 var $309=HEAP32[(($fd344_i_i)>>2)];
 var $310=$T_0_i69_i;
 var $311=HEAP32[((16360)>>2)];
 var $cmp346_i_i=($310>>>0)<($311>>>0);
 if($cmp346_i_i){label=302;break;}else{label=300;break;}
 case 300: 
 var $312=$309;
 var $cmp350_i_i=($312>>>0)<($311>>>0);
 if($cmp350_i_i){label=302;break;}else{label=301;break;}
 case 301: 
 var $bk357_i_i=(($309+12)|0);
 HEAP32[(($bk357_i_i)>>2)]=$293;
 HEAP32[(($fd344_i_i)>>2)]=$293;
 var $add_ptr17_sum17_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd359_i_i=(($tbase_292_i+$add_ptr17_sum17_i_i)|0);
 var $313=$fd359_i_i;
 HEAP32[(($313)>>2)]=$309;
 var $add_ptr17_sum18_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk360_i_i=(($tbase_292_i+$add_ptr17_sum18_i_i)|0);
 var $314=$bk360_i_i;
 HEAP32[(($314)>>2)]=$T_0_i69_i;
 var $add_ptr17_sum19_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent361_i_i=(($tbase_292_i+$add_ptr17_sum19_i_i)|0);
 var $315=$parent361_i_i;
 HEAP32[(($315)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $add_ptr4_sum1415_i_i=$cond_i43_i|8;
 var $add_ptr368_i_i=(($tbase_292_i+$add_ptr4_sum1415_i_i)|0);
 var $mem_0=$add_ptr368_i_i;label=341;break;
 case 304: 
 var $316=$189;
 var $sp_0_i_i_i=16792;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $base_i_i_i=(($sp_0_i_i_i)|0);
 var $317=HEAP32[(($base_i_i_i)>>2)];
 var $cmp_i_i_i=($317>>>0)>($316>>>0);
 if($cmp_i_i_i){label=307;break;}else{label=306;break;}
 case 306: 
 var $size_i_i_i=(($sp_0_i_i_i+4)|0);
 var $318=HEAP32[(($size_i_i_i)>>2)];
 var $add_ptr_i_i_i=(($317+$318)|0);
 var $cmp2_i_i_i=($add_ptr_i_i_i>>>0)>($316>>>0);
 if($cmp2_i_i_i){label=308;break;}else{label=307;break;}
 case 307: 
 var $next_i_i_i=(($sp_0_i_i_i+8)|0);
 var $319=HEAP32[(($next_i_i_i)>>2)];
 var $sp_0_i_i_i=$319;label=305;break;
 case 308: 
 var $add_ptr_sum_i_i=((($318)-(47))|0);
 var $add_ptr2_sum_i_i=((($318)-(39))|0);
 var $add_ptr3_i_i=(($317+$add_ptr2_sum_i_i)|0);
 var $320=$add_ptr3_i_i;
 var $and_i15_i=$320&7;
 var $cmp_i16_i=($and_i15_i|0)==0;
 if($cmp_i16_i){var $cond_i18_i=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $321=(((-$320))|0);
 var $and6_i_i=$321&7;
 var $cond_i18_i=$and6_i_i;label=310;break;
 case 310: 
 var $cond_i18_i;
 var $add_ptr2_sum1_i_i=((($add_ptr_sum_i_i)+($cond_i18_i))|0);
 var $add_ptr7_i_i=(($317+$add_ptr2_sum1_i_i)|0);
 var $add_ptr82_i_i=(($189+16)|0);
 var $add_ptr8_i_i=$add_ptr82_i_i;
 var $cmp9_i_i=($add_ptr7_i_i>>>0)<($add_ptr8_i_i>>>0);
 var $cond13_i_i=$cmp9_i_i?$316:$add_ptr7_i_i;
 var $add_ptr14_i_i=(($cond13_i_i+8)|0);
 var $322=$add_ptr14_i_i;
 var $sub16_i_i=((($tsize_291_i)-(40))|0);
 var $add_ptr_i11_i_i=(($tbase_292_i+8)|0);
 var $323=$add_ptr_i11_i_i;
 var $and_i_i_i=$323&7;
 var $cmp_i12_i_i=($and_i_i_i|0)==0;
 if($cmp_i12_i_i){var $cond_i_i_i=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $324=(((-$323))|0);
 var $and3_i_i_i=$324&7;
 var $cond_i_i_i=$and3_i_i_i;label=312;break;
 case 312: 
 var $cond_i_i_i;
 var $add_ptr4_i_i_i=(($tbase_292_i+$cond_i_i_i)|0);
 var $325=$add_ptr4_i_i_i;
 var $sub5_i_i_i=((($sub16_i_i)-($cond_i_i_i))|0);
 HEAP32[((16368)>>2)]=$325;
 HEAP32[((16356)>>2)]=$sub5_i_i_i;
 var $or_i_i_i=$sub5_i_i_i|1;
 var $add_ptr4_sum_i_i_i=((($cond_i_i_i)+(4))|0);
 var $head_i_i_i=(($tbase_292_i+$add_ptr4_sum_i_i_i)|0);
 var $326=$head_i_i_i;
 HEAP32[(($326)>>2)]=$or_i_i_i;
 var $add_ptr6_sum_i_i_i=((($tsize_291_i)-(36))|0);
 var $head7_i_i_i=(($tbase_292_i+$add_ptr6_sum_i_i_i)|0);
 var $327=$head7_i_i_i;
 HEAP32[(($327)>>2)]=40;
 var $328=HEAP32[((16304)>>2)];
 HEAP32[((16372)>>2)]=$328;
 var $head_i19_i=(($cond13_i_i+4)|0);
 var $329=$head_i19_i;
 HEAP32[(($329)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($add_ptr14_i_i)>>2)]=HEAP32[((16792)>>2)];HEAP32[((($add_ptr14_i_i)+(4))>>2)]=HEAP32[((16796)>>2)];HEAP32[((($add_ptr14_i_i)+(8))>>2)]=HEAP32[((16800)>>2)];HEAP32[((($add_ptr14_i_i)+(12))>>2)]=HEAP32[((16804)>>2)];
 HEAP32[((16792)>>2)]=$tbase_292_i;
 HEAP32[((16796)>>2)]=$tsize_291_i;
 HEAP32[((16804)>>2)]=0;
 HEAP32[((16800)>>2)]=$322;
 var $add_ptr2414_i_i=(($cond13_i_i+28)|0);
 var $330=$add_ptr2414_i_i;
 HEAP32[(($330)>>2)]=7;
 var $331=(($cond13_i_i+32)|0);
 var $cmp2715_i_i=($331>>>0)<($add_ptr_i_i_i>>>0);
 if($cmp2715_i_i){var $add_ptr2416_i_i=$330;label=313;break;}else{label=314;break;}
 case 313: 
 var $add_ptr2416_i_i;
 var $332=(($add_ptr2416_i_i+4)|0);
 HEAP32[(($332)>>2)]=7;
 var $333=(($add_ptr2416_i_i+8)|0);
 var $334=$333;
 var $cmp27_i_i=($334>>>0)<($add_ptr_i_i_i>>>0);
 if($cmp27_i_i){var $add_ptr2416_i_i=$332;label=313;break;}else{label=314;break;}
 case 314: 
 var $cmp28_i_i=($cond13_i_i|0)==($316|0);
 if($cmp28_i_i){label=338;break;}else{label=315;break;}
 case 315: 
 var $sub_ptr_lhs_cast_i_i=$cond13_i_i;
 var $sub_ptr_rhs_cast_i_i=$189;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $add_ptr30_i_i=(($316+$sub_ptr_sub_i_i)|0);
 var $add_ptr30_sum_i_i=((($sub_ptr_sub_i_i)+(4))|0);
 var $head31_i_i=(($316+$add_ptr30_sum_i_i)|0);
 var $335=$head31_i_i;
 var $336=HEAP32[(($335)>>2)];
 var $and32_i_i=$336&-2;
 HEAP32[(($335)>>2)]=$and32_i_i;
 var $or33_i_i=$sub_ptr_sub_i_i|1;
 var $head34_i_i=(($189+4)|0);
 HEAP32[(($head34_i_i)>>2)]=$or33_i_i;
 var $prev_foot_i_i=$add_ptr30_i_i;
 HEAP32[(($prev_foot_i_i)>>2)]=$sub_ptr_sub_i_i;
 var $shr_i_i=$sub_ptr_sub_i_i>>>3;
 var $cmp36_i_i=($sub_ptr_sub_i_i>>>0)<256;
 if($cmp36_i_i){label=316;break;}else{label=321;break;}
 case 316: 
 var $shl_i21_i=$shr_i_i<<1;
 var $arrayidx_i22_i=((16384+($shl_i21_i<<2))|0);
 var $337=$arrayidx_i22_i;
 var $338=HEAP32[((16344)>>2)];
 var $shl39_i_i=1<<$shr_i_i;
 var $and40_i_i=$338&$shl39_i_i;
 var $tobool_i_i=($and40_i_i|0)==0;
 if($tobool_i_i){label=317;break;}else{label=318;break;}
 case 317: 
 var $or44_i_i=$338|$shl39_i_i;
 HEAP32[((16344)>>2)]=$or44_i_i;
 var $arrayidx_sum_pre_i_i=((($shl_i21_i)+(2))|0);
 var $_pre_i_i=((16384+($arrayidx_sum_pre_i_i<<2))|0);
 var $F_0_i_i=$337;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $arrayidx_sum10_i_i=((($shl_i21_i)+(2))|0);
 var $339=((16384+($arrayidx_sum10_i_i<<2))|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=$340;
 var $342=HEAP32[((16360)>>2)];
 var $cmp46_i_i=($341>>>0)<($342>>>0);
 if($cmp46_i_i){label=319;break;}else{var $F_0_i_i=$340;var $_pre_phi_i_i=$339;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$189;
 var $bk_i_i=(($F_0_i_i+12)|0);
 HEAP32[(($bk_i_i)>>2)]=$189;
 var $fd54_i_i=(($189+8)|0);
 HEAP32[(($fd54_i_i)>>2)]=$F_0_i_i;
 var $bk55_i_i=(($189+12)|0);
 HEAP32[(($bk55_i_i)>>2)]=$337;
 label=338;break;
 case 321: 
 var $343=$189;
 var $shr58_i_i=$sub_ptr_sub_i_i>>>8;
 var $cmp59_i_i=($shr58_i_i|0)==0;
 if($cmp59_i_i){var $I57_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $cmp63_i_i=($sub_ptr_sub_i_i>>>0)>16777215;
 if($cmp63_i_i){var $I57_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $sub67_i_i=((($shr58_i_i)+(1048320))|0);
 var $shr68_i_i=$sub67_i_i>>>16;
 var $and69_i_i=$shr68_i_i&8;
 var $shl70_i_i=$shr58_i_i<<$and69_i_i;
 var $sub71_i_i=((($shl70_i_i)+(520192))|0);
 var $shr72_i_i=$sub71_i_i>>>16;
 var $and73_i_i=$shr72_i_i&4;
 var $add74_i_i=$and73_i_i|$and69_i_i;
 var $shl75_i_i=$shl70_i_i<<$and73_i_i;
 var $sub76_i_i=((($shl75_i_i)+(245760))|0);
 var $shr77_i_i=$sub76_i_i>>>16;
 var $and78_i_i=$shr77_i_i&2;
 var $add79_i_i=$add74_i_i|$and78_i_i;
 var $sub80_i_i=(((14)-($add79_i_i))|0);
 var $shl81_i_i=$shl75_i_i<<$and78_i_i;
 var $shr82_i_i=$shl81_i_i>>>15;
 var $add83_i_i=((($sub80_i_i)+($shr82_i_i))|0);
 var $shl84_i_i=$add83_i_i<<1;
 var $add85_i_i=((($add83_i_i)+(7))|0);
 var $shr86_i_i=$sub_ptr_sub_i_i>>>($add85_i_i>>>0);
 var $and87_i_i=$shr86_i_i&1;
 var $add88_i_i=$and87_i_i|$shl84_i_i;
 var $I57_0_i_i=$add88_i_i;label=324;break;
 case 324: 
 var $I57_0_i_i;
 var $arrayidx91_i_i=((16648+($I57_0_i_i<<2))|0);
 var $index_i_i=(($189+28)|0);
 var $I57_0_c_i_i=$I57_0_i_i;
 HEAP32[(($index_i_i)>>2)]=$I57_0_c_i_i;
 var $arrayidx92_i_i=(($189+20)|0);
 HEAP32[(($arrayidx92_i_i)>>2)]=0;
 var $344=(($189+16)|0);
 HEAP32[(($344)>>2)]=0;
 var $345=HEAP32[((16348)>>2)];
 var $shl95_i_i=1<<$I57_0_i_i;
 var $and96_i_i=$345&$shl95_i_i;
 var $tobool97_i_i=($and96_i_i|0)==0;
 if($tobool97_i_i){label=325;break;}else{label=326;break;}
 case 325: 
 var $or101_i_i=$345|$shl95_i_i;
 HEAP32[((16348)>>2)]=$or101_i_i;
 HEAP32[(($arrayidx91_i_i)>>2)]=$343;
 var $parent_i_i=(($189+24)|0);
 var $_c_i_i=$arrayidx91_i_i;
 HEAP32[(($parent_i_i)>>2)]=$_c_i_i;
 var $bk102_i_i=(($189+12)|0);
 HEAP32[(($bk102_i_i)>>2)]=$189;
 var $fd103_i_i=(($189+8)|0);
 HEAP32[(($fd103_i_i)>>2)]=$189;
 label=338;break;
 case 326: 
 var $346=HEAP32[(($arrayidx91_i_i)>>2)];
 var $cmp106_i_i=($I57_0_i_i|0)==31;
 if($cmp106_i_i){var $cond115_i_i=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $shr110_i_i=$I57_0_i_i>>>1;
 var $sub113_i_i=(((25)-($shr110_i_i))|0);
 var $cond115_i_i=$sub113_i_i;label=328;break;
 case 328: 
 var $cond115_i_i;
 var $shl116_i_i=$sub_ptr_sub_i_i<<$cond115_i_i;
 var $K105_0_i_i=$shl116_i_i;var $T_0_i_i=$346;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K105_0_i_i;
 var $head118_i_i=(($T_0_i_i+4)|0);
 var $347=HEAP32[(($head118_i_i)>>2)];
 var $and119_i_i=$347&-8;
 var $cmp120_i_i=($and119_i_i|0)==($sub_ptr_sub_i_i|0);
 if($cmp120_i_i){label=334;break;}else{label=330;break;}
 case 330: 
 var $shr123_i_i=$K105_0_i_i>>>31;
 var $arrayidx126_i_i=(($T_0_i_i+16+($shr123_i_i<<2))|0);
 var $348=HEAP32[(($arrayidx126_i_i)>>2)];
 var $cmp128_i_i=($348|0)==0;
 var $shl127_i_i=$K105_0_i_i<<1;
 if($cmp128_i_i){label=331;break;}else{var $K105_0_i_i=$shl127_i_i;var $T_0_i_i=$348;label=329;break;}
 case 331: 
 var $349=$arrayidx126_i_i;
 var $350=HEAP32[((16360)>>2)];
 var $cmp133_i_i=($349>>>0)<($350>>>0);
 if($cmp133_i_i){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($arrayidx126_i_i)>>2)]=$343;
 var $parent138_i_i=(($189+24)|0);
 var $T_0_c7_i_i=$T_0_i_i;
 HEAP32[(($parent138_i_i)>>2)]=$T_0_c7_i_i;
 var $bk139_i_i=(($189+12)|0);
 HEAP32[(($bk139_i_i)>>2)]=$189;
 var $fd140_i_i=(($189+8)|0);
 HEAP32[(($fd140_i_i)>>2)]=$189;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $fd145_i_i=(($T_0_i_i+8)|0);
 var $351=HEAP32[(($fd145_i_i)>>2)];
 var $352=$T_0_i_i;
 var $353=HEAP32[((16360)>>2)];
 var $cmp147_i_i=($352>>>0)<($353>>>0);
 if($cmp147_i_i){label=337;break;}else{label=335;break;}
 case 335: 
 var $354=$351;
 var $cmp150_i_i=($354>>>0)<($353>>>0);
 if($cmp150_i_i){label=337;break;}else{label=336;break;}
 case 336: 
 var $bk155_i_i=(($351+12)|0);
 HEAP32[(($bk155_i_i)>>2)]=$343;
 HEAP32[(($fd145_i_i)>>2)]=$343;
 var $fd157_i_i=(($189+8)|0);
 var $_c6_i_i=$351;
 HEAP32[(($fd157_i_i)>>2)]=$_c6_i_i;
 var $bk158_i_i=(($189+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($bk158_i_i)>>2)]=$T_0_c_i_i;
 var $parent159_i_i=(($189+24)|0);
 HEAP32[(($parent159_i_i)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $355=HEAP32[((16356)>>2)];
 var $cmp250_i=($355>>>0)>($nb_0>>>0);
 if($cmp250_i){label=339;break;}else{label=340;break;}
 case 339: 
 var $sub253_i=((($355)-($nb_0))|0);
 HEAP32[((16356)>>2)]=$sub253_i;
 var $356=HEAP32[((16368)>>2)];
 var $357=$356;
 var $add_ptr255_i=(($357+$nb_0)|0);
 var $358=$add_ptr255_i;
 HEAP32[((16368)>>2)]=$358;
 var $or257_i=$sub253_i|1;
 var $add_ptr255_sum_i=((($nb_0)+(4))|0);
 var $head258_i=(($357+$add_ptr255_sum_i)|0);
 var $359=$head258_i;
 HEAP32[(($359)>>2)]=$or257_i;
 var $or260_i=$nb_0|3;
 var $head261_i=(($356+4)|0);
 HEAP32[(($head261_i)>>2)]=$or260_i;
 var $add_ptr262_i=(($356+8)|0);
 var $360=$add_ptr262_i;
 var $mem_0=$360;label=341;break;
 case 340: 
 var $call265_i=___errno_location();
 HEAP32[(($call265_i)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($mem|0)==0;
 if($cmp){label=140;break;}else{label=2;break;}
 case 2: 
 var $add_ptr=((($mem)-(8))|0);
 var $0=$add_ptr;
 var $1=HEAP32[((16360)>>2)];
 var $cmp1=($add_ptr>>>0)<($1>>>0);
 if($cmp1){label=139;break;}else{label=3;break;}
 case 3: 
 var $head=((($mem)-(4))|0);
 var $2=$head;
 var $3=HEAP32[(($2)>>2)];
 var $and=$3&3;
 var $cmp2=($and|0)==1;
 if($cmp2){label=139;break;}else{label=4;break;}
 case 4: 
 var $and5=$3&-8;
 var $add_ptr_sum=((($and5)-(8))|0);
 var $add_ptr6=(($mem+$add_ptr_sum)|0);
 var $4=$add_ptr6;
 var $and8=$3&1;
 var $tobool9=($and8|0)==0;
 if($tobool9){label=5;break;}else{var $p_0=$0;var $psize_0=$and5;label=56;break;}
 case 5: 
 var $prev_foot=$add_ptr;
 var $5=HEAP32[(($prev_foot)>>2)];
 var $cmp13=($and|0)==0;
 if($cmp13){label=140;break;}else{label=6;break;}
 case 6: 
 var $add_ptr_sum231=(((-8)-($5))|0);
 var $add_ptr16=(($mem+$add_ptr_sum231)|0);
 var $6=$add_ptr16;
 var $add17=((($5)+($and5))|0);
 var $cmp18=($add_ptr16>>>0)<($1>>>0);
 if($cmp18){label=139;break;}else{label=7;break;}
 case 7: 
 var $7=HEAP32[((16364)>>2)];
 var $cmp22=($6|0)==($7|0);
 if($cmp22){label=54;break;}else{label=8;break;}
 case 8: 
 var $shr=$5>>>3;
 var $cmp25=($5>>>0)<256;
 if($cmp25){label=9;break;}else{label=21;break;}
 case 9: 
 var $add_ptr16_sum268=((($add_ptr_sum231)+(8))|0);
 var $fd=(($mem+$add_ptr16_sum268)|0);
 var $8=$fd;
 var $9=HEAP32[(($8)>>2)];
 var $add_ptr16_sum269=((($add_ptr_sum231)+(12))|0);
 var $bk=(($mem+$add_ptr16_sum269)|0);
 var $10=$bk;
 var $11=HEAP32[(($10)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((16384+($shl<<2))|0);
 var $12=$arrayidx;
 var $cmp29=($9|0)==($12|0);
 if($cmp29){label=12;break;}else{label=10;break;}
 case 10: 
 var $13=$9;
 var $cmp31=($13>>>0)<($1>>>0);
 if($cmp31){label=20;break;}else{label=11;break;}
 case 11: 
 var $bk34=(($9+12)|0);
 var $14=HEAP32[(($bk34)>>2)];
 var $cmp35=($14|0)==($6|0);
 if($cmp35){label=12;break;}else{label=20;break;}
 case 12: 
 var $cmp42=($11|0)==($9|0);
 if($cmp42){label=13;break;}else{label=14;break;}
 case 13: 
 var $shl45=1<<$shr;
 var $neg=$shl45^-1;
 var $15=HEAP32[((16344)>>2)];
 var $and46=$15&$neg;
 HEAP32[((16344)>>2)]=$and46;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 14: 
 var $cmp50=($11|0)==($12|0);
 if($cmp50){label=15;break;}else{label=16;break;}
 case 15: 
 var $fd67_pre=(($11+8)|0);
 var $fd67_pre_phi=$fd67_pre;label=18;break;
 case 16: 
 var $16=$11;
 var $cmp53=($16>>>0)<($1>>>0);
 if($cmp53){label=19;break;}else{label=17;break;}
 case 17: 
 var $fd56=(($11+8)|0);
 var $17=HEAP32[(($fd56)>>2)];
 var $cmp57=($17|0)==($6|0);
 if($cmp57){var $fd67_pre_phi=$fd56;label=18;break;}else{label=19;break;}
 case 18: 
 var $fd67_pre_phi;
 var $bk66=(($9+12)|0);
 HEAP32[(($bk66)>>2)]=$11;
 HEAP32[(($fd67_pre_phi)>>2)]=$9;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $18=$add_ptr16;
 var $add_ptr16_sum260=((($add_ptr_sum231)+(24))|0);
 var $parent=(($mem+$add_ptr16_sum260)|0);
 var $19=$parent;
 var $20=HEAP32[(($19)>>2)];
 var $add_ptr16_sum261=((($add_ptr_sum231)+(12))|0);
 var $bk73=(($mem+$add_ptr16_sum261)|0);
 var $21=$bk73;
 var $22=HEAP32[(($21)>>2)];
 var $cmp74=($22|0)==($18|0);
 if($cmp74){label=27;break;}else{label=22;break;}
 case 22: 
 var $add_ptr16_sum265=((($add_ptr_sum231)+(8))|0);
 var $fd78=(($mem+$add_ptr16_sum265)|0);
 var $23=$fd78;
 var $24=HEAP32[(($23)>>2)];
 var $25=$24;
 var $cmp80=($25>>>0)<($1>>>0);
 if($cmp80){label=26;break;}else{label=23;break;}
 case 23: 
 var $bk82=(($24+12)|0);
 var $26=HEAP32[(($bk82)>>2)];
 var $cmp83=($26|0)==($18|0);
 if($cmp83){label=24;break;}else{label=26;break;}
 case 24: 
 var $fd86=(($22+8)|0);
 var $27=HEAP32[(($fd86)>>2)];
 var $cmp87=($27|0)==($18|0);
 if($cmp87){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($bk82)>>2)]=$22;
 HEAP32[(($fd86)>>2)]=$24;
 var $R_1=$22;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $child_sum=((($add_ptr_sum231)+(20))|0);
 var $arrayidx99=(($mem+$child_sum)|0);
 var $28=$arrayidx99;
 var $29=HEAP32[(($28)>>2)];
 var $cmp100=($29|0)==0;
 if($cmp100){label=28;break;}else{var $R_0=$29;var $RP_0=$28;label=29;break;}
 case 28: 
 var $add_ptr16_sum262=((($add_ptr_sum231)+(16))|0);
 var $child=(($mem+$add_ptr16_sum262)|0);
 var $arrayidx103=$child;
 var $30=HEAP32[(($arrayidx103)>>2)];
 var $cmp104=($30|0)==0;
 if($cmp104){var $R_1=0;label=34;break;}else{var $R_0=$30;var $RP_0=$arrayidx103;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $arrayidx108=(($R_0+20)|0);
 var $31=HEAP32[(($arrayidx108)>>2)];
 var $cmp109=($31|0)==0;
 if($cmp109){label=30;break;}else{var $R_0=$31;var $RP_0=$arrayidx108;label=29;break;}
 case 30: 
 var $arrayidx113=(($R_0+16)|0);
 var $32=HEAP32[(($arrayidx113)>>2)];
 var $cmp114=($32|0)==0;
 if($cmp114){label=31;break;}else{var $R_0=$32;var $RP_0=$arrayidx113;label=29;break;}
 case 31: 
 var $33=$RP_0;
 var $cmp118=($33>>>0)<($1>>>0);
 if($cmp118){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $cmp127=($20|0)==0;
 if($cmp127){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=35;break;}
 case 35: 
 var $add_ptr16_sum263=((($add_ptr_sum231)+(28))|0);
 var $index=(($mem+$add_ptr16_sum263)|0);
 var $34=$index;
 var $35=HEAP32[(($34)>>2)];
 var $arrayidx130=((16648+($35<<2))|0);
 var $36=HEAP32[(($arrayidx130)>>2)];
 var $cmp131=($18|0)==($36|0);
 if($cmp131){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($arrayidx130)>>2)]=$R_1;
 var $cond278=($R_1|0)==0;
 if($cond278){label=37;break;}else{label=44;break;}
 case 37: 
 var $37=HEAP32[(($34)>>2)];
 var $shl138=1<<$37;
 var $neg139=$shl138^-1;
 var $38=HEAP32[((16348)>>2)];
 var $and140=$38&$neg139;
 HEAP32[((16348)>>2)]=$and140;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 38: 
 var $39=$20;
 var $40=HEAP32[((16360)>>2)];
 var $cmp143=($39>>>0)<($40>>>0);
 if($cmp143){label=42;break;}else{label=39;break;}
 case 39: 
 var $arrayidx149=(($20+16)|0);
 var $41=HEAP32[(($arrayidx149)>>2)];
 var $cmp150=($41|0)==($18|0);
 if($cmp150){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($arrayidx149)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $arrayidx157=(($20+20)|0);
 HEAP32[(($arrayidx157)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $cmp162=($R_1|0)==0;
 if($cmp162){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=44;break;}
 case 44: 
 var $42=$R_1;
 var $43=HEAP32[((16360)>>2)];
 var $cmp165=($42>>>0)<($43>>>0);
 if($cmp165){label=53;break;}else{label=45;break;}
 case 45: 
 var $parent170=(($R_1+24)|0);
 HEAP32[(($parent170)>>2)]=$20;
 var $add_ptr16_sum264=((($add_ptr_sum231)+(16))|0);
 var $child171=(($mem+$add_ptr16_sum264)|0);
 var $arrayidx172=$child171;
 var $44=HEAP32[(($arrayidx172)>>2)];
 var $cmp173=($44|0)==0;
 if($cmp173){label=49;break;}else{label=46;break;}
 case 46: 
 var $45=$44;
 var $46=HEAP32[((16360)>>2)];
 var $cmp176=($45>>>0)<($46>>>0);
 if($cmp176){label=48;break;}else{label=47;break;}
 case 47: 
 var $arrayidx182=(($R_1+16)|0);
 HEAP32[(($arrayidx182)>>2)]=$44;
 var $parent183=(($44+24)|0);
 HEAP32[(($parent183)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $child171_sum=((($add_ptr_sum231)+(20))|0);
 var $arrayidx188=(($mem+$child171_sum)|0);
 var $47=$arrayidx188;
 var $48=HEAP32[(($47)>>2)];
 var $cmp189=($48|0)==0;
 if($cmp189){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=50;break;}
 case 50: 
 var $49=$48;
 var $50=HEAP32[((16360)>>2)];
 var $cmp192=($49>>>0)<($50>>>0);
 if($cmp192){label=52;break;}else{label=51;break;}
 case 51: 
 var $arrayidx198=(($R_1+20)|0);
 HEAP32[(($arrayidx198)>>2)]=$48;
 var $parent199=(($48+24)|0);
 HEAP32[(($parent199)>>2)]=$R_1;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $add_ptr6_sum=((($and5)-(4))|0);
 var $head209=(($mem+$add_ptr6_sum)|0);
 var $51=$head209;
 var $52=HEAP32[(($51)>>2)];
 var $and210=$52&3;
 var $cmp211=($and210|0)==3;
 if($cmp211){label=55;break;}else{var $p_0=$6;var $psize_0=$add17;label=56;break;}
 case 55: 
 HEAP32[((16352)>>2)]=$add17;
 var $53=HEAP32[(($51)>>2)];
 var $and215=$53&-2;
 HEAP32[(($51)>>2)]=$and215;
 var $or=$add17|1;
 var $add_ptr16_sum=((($add_ptr_sum231)+(4))|0);
 var $head216=(($mem+$add_ptr16_sum)|0);
 var $54=$head216;
 HEAP32[(($54)>>2)]=$or;
 var $prev_foot218=$add_ptr6;
 HEAP32[(($prev_foot218)>>2)]=$add17;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $55=$p_0;
 var $cmp225=($55>>>0)<($add_ptr6>>>0);
 if($cmp225){label=57;break;}else{label=139;break;}
 case 57: 
 var $add_ptr6_sum258=((($and5)-(4))|0);
 var $head228=(($mem+$add_ptr6_sum258)|0);
 var $56=$head228;
 var $57=HEAP32[(($56)>>2)];
 var $and229=$57&1;
 var $phitmp=($and229|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $and237=$57&2;
 var $tobool238=($and237|0)==0;
 if($tobool238){label=59;break;}else{label=112;break;}
 case 59: 
 var $58=HEAP32[((16368)>>2)];
 var $cmp240=($4|0)==($58|0);
 if($cmp240){label=60;break;}else{label=62;break;}
 case 60: 
 var $59=HEAP32[((16356)>>2)];
 var $add243=((($59)+($psize_0))|0);
 HEAP32[((16356)>>2)]=$add243;
 HEAP32[((16368)>>2)]=$p_0;
 var $or244=$add243|1;
 var $head245=(($p_0+4)|0);
 HEAP32[(($head245)>>2)]=$or244;
 var $60=HEAP32[((16364)>>2)];
 var $cmp246=($p_0|0)==($60|0);
 if($cmp246){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((16364)>>2)]=0;
 HEAP32[((16352)>>2)]=0;
 label=140;break;
 case 62: 
 var $61=HEAP32[((16364)>>2)];
 var $cmp251=($4|0)==($61|0);
 if($cmp251){label=63;break;}else{label=64;break;}
 case 63: 
 var $62=HEAP32[((16352)>>2)];
 var $add254=((($62)+($psize_0))|0);
 HEAP32[((16352)>>2)]=$add254;
 HEAP32[((16364)>>2)]=$p_0;
 var $or255=$add254|1;
 var $head256=(($p_0+4)|0);
 HEAP32[(($head256)>>2)]=$or255;
 var $add_ptr257=(($55+$add254)|0);
 var $prev_foot258=$add_ptr257;
 HEAP32[(($prev_foot258)>>2)]=$add254;
 label=140;break;
 case 64: 
 var $and261=$57&-8;
 var $add262=((($and261)+($psize_0))|0);
 var $shr263=$57>>>3;
 var $cmp264=($57>>>0)<256;
 if($cmp264){label=65;break;}else{label=77;break;}
 case 65: 
 var $fd268=(($mem+$and5)|0);
 var $63=$fd268;
 var $64=HEAP32[(($63)>>2)];
 var $add_ptr6_sum252253=$and5|4;
 var $bk270=(($mem+$add_ptr6_sum252253)|0);
 var $65=$bk270;
 var $66=HEAP32[(($65)>>2)];
 var $shl273=$shr263<<1;
 var $arrayidx274=((16384+($shl273<<2))|0);
 var $67=$arrayidx274;
 var $cmp275=($64|0)==($67|0);
 if($cmp275){label=68;break;}else{label=66;break;}
 case 66: 
 var $68=$64;
 var $69=HEAP32[((16360)>>2)];
 var $cmp278=($68>>>0)<($69>>>0);
 if($cmp278){label=76;break;}else{label=67;break;}
 case 67: 
 var $bk281=(($64+12)|0);
 var $70=HEAP32[(($bk281)>>2)];
 var $cmp282=($70|0)==($4|0);
 if($cmp282){label=68;break;}else{label=76;break;}
 case 68: 
 var $cmp291=($66|0)==($64|0);
 if($cmp291){label=69;break;}else{label=70;break;}
 case 69: 
 var $shl294=1<<$shr263;
 var $neg295=$shl294^-1;
 var $71=HEAP32[((16344)>>2)];
 var $and296=$71&$neg295;
 HEAP32[((16344)>>2)]=$and296;
 label=110;break;
 case 70: 
 var $cmp300=($66|0)==($67|0);
 if($cmp300){label=71;break;}else{label=72;break;}
 case 71: 
 var $fd317_pre=(($66+8)|0);
 var $fd317_pre_phi=$fd317_pre;label=74;break;
 case 72: 
 var $72=$66;
 var $73=HEAP32[((16360)>>2)];
 var $cmp303=($72>>>0)<($73>>>0);
 if($cmp303){label=75;break;}else{label=73;break;}
 case 73: 
 var $fd306=(($66+8)|0);
 var $74=HEAP32[(($fd306)>>2)];
 var $cmp307=($74|0)==($4|0);
 if($cmp307){var $fd317_pre_phi=$fd306;label=74;break;}else{label=75;break;}
 case 74: 
 var $fd317_pre_phi;
 var $bk316=(($64+12)|0);
 HEAP32[(($bk316)>>2)]=$66;
 HEAP32[(($fd317_pre_phi)>>2)]=$64;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $75=$add_ptr6;
 var $add_ptr6_sum233=((($and5)+(16))|0);
 var $parent326=(($mem+$add_ptr6_sum233)|0);
 var $76=$parent326;
 var $77=HEAP32[(($76)>>2)];
 var $add_ptr6_sum234235=$and5|4;
 var $bk328=(($mem+$add_ptr6_sum234235)|0);
 var $78=$bk328;
 var $79=HEAP32[(($78)>>2)];
 var $cmp329=($79|0)==($75|0);
 if($cmp329){label=83;break;}else{label=78;break;}
 case 78: 
 var $fd333=(($mem+$and5)|0);
 var $80=$fd333;
 var $81=HEAP32[(($80)>>2)];
 var $82=$81;
 var $83=HEAP32[((16360)>>2)];
 var $cmp335=($82>>>0)<($83>>>0);
 if($cmp335){label=82;break;}else{label=79;break;}
 case 79: 
 var $bk338=(($81+12)|0);
 var $84=HEAP32[(($bk338)>>2)];
 var $cmp339=($84|0)==($75|0);
 if($cmp339){label=80;break;}else{label=82;break;}
 case 80: 
 var $fd342=(($79+8)|0);
 var $85=HEAP32[(($fd342)>>2)];
 var $cmp343=($85|0)==($75|0);
 if($cmp343){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($bk338)>>2)]=$79;
 HEAP32[(($fd342)>>2)]=$81;
 var $R327_1=$79;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $child356_sum=((($and5)+(12))|0);
 var $arrayidx357=(($mem+$child356_sum)|0);
 var $86=$arrayidx357;
 var $87=HEAP32[(($86)>>2)];
 var $cmp358=($87|0)==0;
 if($cmp358){label=84;break;}else{var $R327_0=$87;var $RP355_0=$86;label=85;break;}
 case 84: 
 var $add_ptr6_sum236=((($and5)+(8))|0);
 var $child356=(($mem+$add_ptr6_sum236)|0);
 var $arrayidx362=$child356;
 var $88=HEAP32[(($arrayidx362)>>2)];
 var $cmp363=($88|0)==0;
 if($cmp363){var $R327_1=0;label=90;break;}else{var $R327_0=$88;var $RP355_0=$arrayidx362;label=85;break;}
 case 85: 
 var $RP355_0;
 var $R327_0;
 var $arrayidx369=(($R327_0+20)|0);
 var $89=HEAP32[(($arrayidx369)>>2)];
 var $cmp370=($89|0)==0;
 if($cmp370){label=86;break;}else{var $R327_0=$89;var $RP355_0=$arrayidx369;label=85;break;}
 case 86: 
 var $arrayidx374=(($R327_0+16)|0);
 var $90=HEAP32[(($arrayidx374)>>2)];
 var $cmp375=($90|0)==0;
 if($cmp375){label=87;break;}else{var $R327_0=$90;var $RP355_0=$arrayidx374;label=85;break;}
 case 87: 
 var $91=$RP355_0;
 var $92=HEAP32[((16360)>>2)];
 var $cmp381=($91>>>0)<($92>>>0);
 if($cmp381){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP355_0)>>2)]=0;
 var $R327_1=$R327_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R327_1;
 var $cmp390=($77|0)==0;
 if($cmp390){label=110;break;}else{label=91;break;}
 case 91: 
 var $add_ptr6_sum246=((($and5)+(20))|0);
 var $index394=(($mem+$add_ptr6_sum246)|0);
 var $93=$index394;
 var $94=HEAP32[(($93)>>2)];
 var $arrayidx395=((16648+($94<<2))|0);
 var $95=HEAP32[(($arrayidx395)>>2)];
 var $cmp396=($75|0)==($95|0);
 if($cmp396){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($arrayidx395)>>2)]=$R327_1;
 var $cond279=($R327_1|0)==0;
 if($cond279){label=93;break;}else{label=100;break;}
 case 93: 
 var $96=HEAP32[(($93)>>2)];
 var $shl403=1<<$96;
 var $neg404=$shl403^-1;
 var $97=HEAP32[((16348)>>2)];
 var $and405=$97&$neg404;
 HEAP32[((16348)>>2)]=$and405;
 label=110;break;
 case 94: 
 var $98=$77;
 var $99=HEAP32[((16360)>>2)];
 var $cmp408=($98>>>0)<($99>>>0);
 if($cmp408){label=98;break;}else{label=95;break;}
 case 95: 
 var $arrayidx414=(($77+16)|0);
 var $100=HEAP32[(($arrayidx414)>>2)];
 var $cmp415=($100|0)==($75|0);
 if($cmp415){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($arrayidx414)>>2)]=$R327_1;
 label=99;break;
 case 97: 
 var $arrayidx422=(($77+20)|0);
 HEAP32[(($arrayidx422)>>2)]=$R327_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $cmp427=($R327_1|0)==0;
 if($cmp427){label=110;break;}else{label=100;break;}
 case 100: 
 var $101=$R327_1;
 var $102=HEAP32[((16360)>>2)];
 var $cmp430=($101>>>0)<($102>>>0);
 if($cmp430){label=109;break;}else{label=101;break;}
 case 101: 
 var $parent437=(($R327_1+24)|0);
 HEAP32[(($parent437)>>2)]=$77;
 var $add_ptr6_sum247=((($and5)+(8))|0);
 var $child438=(($mem+$add_ptr6_sum247)|0);
 var $arrayidx439=$child438;
 var $103=HEAP32[(($arrayidx439)>>2)];
 var $cmp440=($103|0)==0;
 if($cmp440){label=105;break;}else{label=102;break;}
 case 102: 
 var $104=$103;
 var $105=HEAP32[((16360)>>2)];
 var $cmp443=($104>>>0)<($105>>>0);
 if($cmp443){label=104;break;}else{label=103;break;}
 case 103: 
 var $arrayidx449=(($R327_1+16)|0);
 HEAP32[(($arrayidx449)>>2)]=$103;
 var $parent450=(($103+24)|0);
 HEAP32[(($parent450)>>2)]=$R327_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $child438_sum=((($and5)+(12))|0);
 var $arrayidx455=(($mem+$child438_sum)|0);
 var $106=$arrayidx455;
 var $107=HEAP32[(($106)>>2)];
 var $cmp456=($107|0)==0;
 if($cmp456){label=110;break;}else{label=106;break;}
 case 106: 
 var $108=$107;
 var $109=HEAP32[((16360)>>2)];
 var $cmp459=($108>>>0)<($109>>>0);
 if($cmp459){label=108;break;}else{label=107;break;}
 case 107: 
 var $arrayidx465=(($R327_1+20)|0);
 HEAP32[(($arrayidx465)>>2)]=$107;
 var $parent466=(($107+24)|0);
 HEAP32[(($parent466)>>2)]=$R327_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $or475=$add262|1;
 var $head476=(($p_0+4)|0);
 HEAP32[(($head476)>>2)]=$or475;
 var $add_ptr477=(($55+$add262)|0);
 var $prev_foot478=$add_ptr477;
 HEAP32[(($prev_foot478)>>2)]=$add262;
 var $110=HEAP32[((16364)>>2)];
 var $cmp479=($p_0|0)==($110|0);
 if($cmp479){label=111;break;}else{var $psize_1=$add262;label=113;break;}
 case 111: 
 HEAP32[((16352)>>2)]=$add262;
 label=140;break;
 case 112: 
 var $and487=$57&-2;
 HEAP32[(($56)>>2)]=$and487;
 var $or488=$psize_0|1;
 var $head489=(($p_0+4)|0);
 HEAP32[(($head489)>>2)]=$or488;
 var $add_ptr490=(($55+$psize_0)|0);
 var $prev_foot491=$add_ptr490;
 HEAP32[(($prev_foot491)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $shr493=$psize_1>>>3;
 var $cmp494=($psize_1>>>0)<256;
 if($cmp494){label=114;break;}else{label=119;break;}
 case 114: 
 var $shl500=$shr493<<1;
 var $arrayidx501=((16384+($shl500<<2))|0);
 var $111=$arrayidx501;
 var $112=HEAP32[((16344)>>2)];
 var $shl503=1<<$shr493;
 var $and504=$112&$shl503;
 var $tobool505=($and504|0)==0;
 if($tobool505){label=115;break;}else{label=116;break;}
 case 115: 
 var $or508=$112|$shl503;
 HEAP32[((16344)>>2)]=$or508;
 var $arrayidx501_sum_pre=((($shl500)+(2))|0);
 var $_pre=((16384+($arrayidx501_sum_pre<<2))|0);
 var $F502_0=$111;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $arrayidx501_sum245=((($shl500)+(2))|0);
 var $113=((16384+($arrayidx501_sum245<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114;
 var $116=HEAP32[((16360)>>2)];
 var $cmp511=($115>>>0)<($116>>>0);
 if($cmp511){label=117;break;}else{var $F502_0=$114;var $_pre_phi=$113;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F502_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $bk521=(($F502_0+12)|0);
 HEAP32[(($bk521)>>2)]=$p_0;
 var $fd522=(($p_0+8)|0);
 HEAP32[(($fd522)>>2)]=$F502_0;
 var $bk523=(($p_0+12)|0);
 HEAP32[(($bk523)>>2)]=$111;
 label=140;break;
 case 119: 
 var $117=$p_0;
 var $shr527=$psize_1>>>8;
 var $cmp528=($shr527|0)==0;
 if($cmp528){var $I526_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $cmp532=($psize_1>>>0)>16777215;
 if($cmp532){var $I526_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $sub=((($shr527)+(1048320))|0);
 var $shr536=$sub>>>16;
 var $and537=$shr536&8;
 var $shl538=$shr527<<$and537;
 var $sub539=((($shl538)+(520192))|0);
 var $shr540=$sub539>>>16;
 var $and541=$shr540&4;
 var $add542=$and541|$and537;
 var $shl543=$shl538<<$and541;
 var $sub544=((($shl543)+(245760))|0);
 var $shr545=$sub544>>>16;
 var $and546=$shr545&2;
 var $add547=$add542|$and546;
 var $sub548=(((14)-($add547))|0);
 var $shl549=$shl543<<$and546;
 var $shr550=$shl549>>>15;
 var $add551=((($sub548)+($shr550))|0);
 var $shl552=$add551<<1;
 var $add553=((($add551)+(7))|0);
 var $shr554=$psize_1>>>($add553>>>0);
 var $and555=$shr554&1;
 var $add556=$and555|$shl552;
 var $I526_0=$add556;label=122;break;
 case 122: 
 var $I526_0;
 var $arrayidx559=((16648+($I526_0<<2))|0);
 var $index560=(($p_0+28)|0);
 var $I526_0_c=$I526_0;
 HEAP32[(($index560)>>2)]=$I526_0_c;
 var $arrayidx562=(($p_0+20)|0);
 HEAP32[(($arrayidx562)>>2)]=0;
 var $118=(($p_0+16)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=HEAP32[((16348)>>2)];
 var $shl565=1<<$I526_0;
 var $and566=$119&$shl565;
 var $tobool567=($and566|0)==0;
 if($tobool567){label=123;break;}else{label=124;break;}
 case 123: 
 var $or570=$119|$shl565;
 HEAP32[((16348)>>2)]=$or570;
 HEAP32[(($arrayidx559)>>2)]=$117;
 var $parent571=(($p_0+24)|0);
 var $_c=$arrayidx559;
 HEAP32[(($parent571)>>2)]=$_c;
 var $bk572=(($p_0+12)|0);
 HEAP32[(($bk572)>>2)]=$p_0;
 var $fd573=(($p_0+8)|0);
 HEAP32[(($fd573)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $120=HEAP32[(($arrayidx559)>>2)];
 var $cmp576=($I526_0|0)==31;
 if($cmp576){var $cond=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $shr578=$I526_0>>>1;
 var $sub581=(((25)-($shr578))|0);
 var $cond=$sub581;label=126;break;
 case 126: 
 var $cond;
 var $shl582=$psize_1<<$cond;
 var $K575_0=$shl582;var $T_0=$120;label=127;break;
 case 127: 
 var $T_0;
 var $K575_0;
 var $head583=(($T_0+4)|0);
 var $121=HEAP32[(($head583)>>2)];
 var $and584=$121&-8;
 var $cmp585=($and584|0)==($psize_1|0);
 if($cmp585){label=132;break;}else{label=128;break;}
 case 128: 
 var $shr588=$K575_0>>>31;
 var $arrayidx591=(($T_0+16+($shr588<<2))|0);
 var $122=HEAP32[(($arrayidx591)>>2)];
 var $cmp593=($122|0)==0;
 var $shl592=$K575_0<<1;
 if($cmp593){label=129;break;}else{var $K575_0=$shl592;var $T_0=$122;label=127;break;}
 case 129: 
 var $123=$arrayidx591;
 var $124=HEAP32[((16360)>>2)];
 var $cmp597=($123>>>0)<($124>>>0);
 if($cmp597){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($arrayidx591)>>2)]=$117;
 var $parent602=(($p_0+24)|0);
 var $T_0_c242=$T_0;
 HEAP32[(($parent602)>>2)]=$T_0_c242;
 var $bk603=(($p_0+12)|0);
 HEAP32[(($bk603)>>2)]=$p_0;
 var $fd604=(($p_0+8)|0);
 HEAP32[(($fd604)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $fd609=(($T_0+8)|0);
 var $125=HEAP32[(($fd609)>>2)];
 var $126=$T_0;
 var $127=HEAP32[((16360)>>2)];
 var $cmp610=($126>>>0)<($127>>>0);
 if($cmp610){label=135;break;}else{label=133;break;}
 case 133: 
 var $128=$125;
 var $cmp613=($128>>>0)<($127>>>0);
 if($cmp613){label=135;break;}else{label=134;break;}
 case 134: 
 var $bk620=(($125+12)|0);
 HEAP32[(($bk620)>>2)]=$117;
 HEAP32[(($fd609)>>2)]=$117;
 var $fd622=(($p_0+8)|0);
 var $_c241=$125;
 HEAP32[(($fd622)>>2)]=$_c241;
 var $bk623=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($bk623)>>2)]=$T_0_c;
 var $parent624=(($p_0+24)|0);
 HEAP32[(($parent624)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $129=HEAP32[((16376)>>2)];
 var $dec=((($129)-(1))|0);
 HEAP32[((16376)>>2)]=$dec;
 var $cmp628=($dec|0)==0;
 if($cmp628){var $sp_0_in_i=16800;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $cmp_i=($sp_0_i|0)==0;
 var $next4_i=(($sp_0_i+8)|0);
 if($cmp_i){label=138;break;}else{var $sp_0_in_i=$next4_i;label=137;break;}
 case 138: 
 HEAP32[((16376)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _calloc($n_elements,$elem_size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($n_elements|0)==0;
 if($cmp){var $req_0=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $mul=(Math_imul($elem_size,$n_elements)|0);
 var $or=$elem_size|$n_elements;
 var $tobool=($or>>>0)>65535;
 if($tobool){label=3;break;}else{var $req_0=$mul;label=4;break;}
 case 3: 
 var $div=(((($mul>>>0))/(($n_elements>>>0)))&-1);
 var $cmp1=($div|0)==($elem_size|0);
 var $mul_=$cmp1?$mul:-1;
 var $req_0=$mul_;label=4;break;
 case 4: 
 var $req_0;
 var $call=_malloc($req_0);
 var $cmp4=($call|0)==0;
 if($cmp4){label=7;break;}else{label=5;break;}
 case 5: 
 var $head=((($call)-(4))|0);
 var $0=$head;
 var $1=HEAP32[(($0)>>2)];
 var $and6=$1&3;
 var $cmp7=($and6|0)==0;
 if($cmp7){label=7;break;}else{label=6;break;}
 case 6: 
 _memset($call, 0, $req_0);
 label=7;break;
 case 7: 
 return $call;
  default: assert(0, "bad label: " + label);
 }
}
Module["_calloc"] = _calloc;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($oldmem|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $call=_malloc($bytes);
 var $mem_0=$call;label=11;break;
 case 3: 
 var $cmp1=($bytes>>>0)>4294967231;
 if($cmp1){label=4;break;}else{label=5;break;}
 case 4: 
 var $call3=___errno_location();
 HEAP32[(($call3)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $cmp5=($bytes>>>0)<11;
 if($cmp5){var $cond=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $add6=((($bytes)+(11))|0);
 var $and=$add6&-8;
 var $cond=$and;label=7;break;
 case 7: 
 var $cond;
 var $add_ptr=((($oldmem)-(8))|0);
 var $0=$add_ptr;
 var $call7=_try_realloc_chunk($0,$cond);
 var $cmp8=($call7|0)==0;
 if($cmp8){label=9;break;}else{label=8;break;}
 case 8: 
 var $add_ptr10=(($call7+8)|0);
 var $1=$add_ptr10;
 var $mem_0=$1;label=11;break;
 case 9: 
 var $call12=_malloc($bytes);
 var $cmp13=($call12|0)==0;
 if($cmp13){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $head=((($oldmem)-(4))|0);
 var $2=$head;
 var $3=HEAP32[(($2)>>2)];
 var $and15=$3&-8;
 var $and17=$3&3;
 var $cmp18=($and17|0)==0;
 var $cond19=$cmp18?8:4;
 var $sub=((($and15)-($cond19))|0);
 var $cmp20=($sub>>>0)<($bytes>>>0);
 var $cond24=$cmp20?$sub:$bytes;
 assert($cond24 % 1 === 0);(_memcpy($call12, $oldmem, $cond24)|0);
 _free($oldmem);
 var $mem_0=$call12;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $head=(($p+4)|0);
 var $0=HEAP32[(($head)>>2)];
 var $and=$0&-8;
 var $1=$p;
 var $add_ptr=(($1+$and)|0);
 var $2=$add_ptr;
 var $3=HEAP32[((16360)>>2)];
 var $cmp=($1>>>0)<($3>>>0);
 if($cmp){label=72;break;}else{label=2;break;}
 case 2: 
 var $and2=$0&3;
 var $cmp3=($and2|0)!=1;
 var $cmp5=($1>>>0)<($add_ptr>>>0);
 var $or_cond=$cmp3&$cmp5;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $add_ptr_sum2122=$and|4;
 var $head6=(($1+$add_ptr_sum2122)|0);
 var $4=$head6;
 var $5=HEAP32[(($4)>>2)];
 var $and7=$5&1;
 var $phitmp=($and7|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $cmp11=($and2|0)==0;
 if($cmp11){label=5;break;}else{label=9;break;}
 case 5: 
 var $cmp_i=($nb>>>0)<256;
 if($cmp_i){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $add_i=((($nb)+(4))|0);
 var $cmp1_i=($and>>>0)<($add_i>>>0);
 if($cmp1_i){label=8;break;}else{label=7;break;}
 case 7: 
 var $sub_i=((($and)-($nb))|0);
 var $6=HEAP32[((16296)>>2)];
 var $shl_i=$6<<1;
 var $cmp2_i=($sub_i>>>0)>($shl_i>>>0);
 if($cmp2_i){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $cmp13=($and>>>0)<($nb>>>0);
 if($cmp13){label=12;break;}else{label=10;break;}
 case 10: 
 var $sub=((($and)-($nb))|0);
 var $cmp15=($sub>>>0)>15;
 if($cmp15){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $add_ptr17=(($1+$nb)|0);
 var $7=$add_ptr17;
 var $and19=$0&1;
 var $or=$and19|$nb;
 var $or20=$or|2;
 HEAP32[(($head)>>2)]=$or20;
 var $add_ptr17_sum=((($nb)+(4))|0);
 var $head23=(($1+$add_ptr17_sum)|0);
 var $8=$head23;
 var $or28=$sub|3;
 HEAP32[(($8)>>2)]=$or28;
 var $9=HEAP32[(($4)>>2)];
 var $or32=$9|1;
 HEAP32[(($4)>>2)]=$or32;
 _dispose_chunk($7,$sub);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $10=HEAP32[((16368)>>2)];
 var $cmp34=($2|0)==($10|0);
 if($cmp34){label=13;break;}else{label=15;break;}
 case 13: 
 var $11=HEAP32[((16356)>>2)];
 var $add=((($11)+($and))|0);
 var $cmp36=($add>>>0)>($nb>>>0);
 if($cmp36){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $sub40=((($add)-($nb))|0);
 var $add_ptr41=(($1+$nb)|0);
 var $12=$add_ptr41;
 var $and43=$0&1;
 var $or44=$and43|$nb;
 var $or45=$or44|2;
 HEAP32[(($head)>>2)]=$or45;
 var $add_ptr41_sum=((($nb)+(4))|0);
 var $head48=(($1+$add_ptr41_sum)|0);
 var $13=$head48;
 var $or50=$sub40|1;
 HEAP32[(($13)>>2)]=$or50;
 HEAP32[((16368)>>2)]=$12;
 HEAP32[((16356)>>2)]=$sub40;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $14=HEAP32[((16364)>>2)];
 var $cmp56=($2|0)==($14|0);
 if($cmp56){label=16;break;}else{label=21;break;}
 case 16: 
 var $15=HEAP32[((16352)>>2)];
 var $add58=((($15)+($and))|0);
 var $cmp59=($add58>>>0)<($nb>>>0);
 if($cmp59){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $sub62=((($add58)-($nb))|0);
 var $cmp63=($sub62>>>0)>15;
 if($cmp63){label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr66=(($1+$nb)|0);
 var $16=$add_ptr66;
 var $add_ptr67=(($1+$add58)|0);
 var $and69=$0&1;
 var $or70=$and69|$nb;
 var $or71=$or70|2;
 HEAP32[(($head)>>2)]=$or71;
 var $add_ptr66_sum=((($nb)+(4))|0);
 var $head74=(($1+$add_ptr66_sum)|0);
 var $17=$head74;
 var $or76=$sub62|1;
 HEAP32[(($17)>>2)]=$or76;
 var $prev_foot=$add_ptr67;
 HEAP32[(($prev_foot)>>2)]=$sub62;
 var $add_ptr67_sum=((($add58)+(4))|0);
 var $head79=(($1+$add_ptr67_sum)|0);
 var $18=$head79;
 var $19=HEAP32[(($18)>>2)];
 var $and80=$19&-2;
 HEAP32[(($18)>>2)]=$and80;
 var $storemerge=$16;var $storemerge18=$sub62;label=20;break;
 case 19: 
 var $and87=$0&1;
 var $or88=$and87|$add58;
 var $or89=$or88|2;
 HEAP32[(($head)>>2)]=$or89;
 var $add_ptr91_sum=((($add58)+(4))|0);
 var $head92=(($1+$add_ptr91_sum)|0);
 var $20=$head92;
 var $21=HEAP32[(($20)>>2)];
 var $or93=$21|1;
 HEAP32[(($20)>>2)]=$or93;
 var $storemerge=0;var $storemerge18=0;label=20;break;
 case 20: 
 var $storemerge18;
 var $storemerge;
 HEAP32[((16352)>>2)]=$storemerge18;
 HEAP32[((16364)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $and100=$5&2;
 var $tobool101=($and100|0)==0;
 if($tobool101){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $and104=$5&-8;
 var $add105=((($and104)+($and))|0);
 var $cmp106=($add105>>>0)<($nb>>>0);
 if($cmp106){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $sub110=((($add105)-($nb))|0);
 var $shr=$5>>>3;
 var $cmp111=($5>>>0)<256;
 if($cmp111){label=24;break;}else{label=36;break;}
 case 24: 
 var $add_ptr_sum12=((($and)+(8))|0);
 var $fd=(($1+$add_ptr_sum12)|0);
 var $22=$fd;
 var $23=HEAP32[(($22)>>2)];
 var $add_ptr_sum13=((($and)+(12))|0);
 var $bk=(($1+$add_ptr_sum13)|0);
 var $24=$bk;
 var $25=HEAP32[(($24)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((16384+($shl<<2))|0);
 var $26=$arrayidx;
 var $cmp114=($23|0)==($26|0);
 if($cmp114){label=27;break;}else{label=25;break;}
 case 25: 
 var $27=$23;
 var $cmp116=($27>>>0)<($3>>>0);
 if($cmp116){label=35;break;}else{label=26;break;}
 case 26: 
 var $bk118=(($23+12)|0);
 var $28=HEAP32[(($bk118)>>2)];
 var $cmp119=($28|0)==($2|0);
 if($cmp119){label=27;break;}else{label=35;break;}
 case 27: 
 var $cmp125=($25|0)==($23|0);
 if($cmp125){label=28;break;}else{label=29;break;}
 case 28: 
 var $shl127=1<<$shr;
 var $neg=$shl127^-1;
 var $29=HEAP32[((16344)>>2)];
 var $and128=$29&$neg;
 HEAP32[((16344)>>2)]=$and128;
 label=69;break;
 case 29: 
 var $cmp133=($25|0)==($26|0);
 if($cmp133){label=30;break;}else{label=31;break;}
 case 30: 
 var $fd148_pre=(($25+8)|0);
 var $fd148_pre_phi=$fd148_pre;label=33;break;
 case 31: 
 var $30=$25;
 var $cmp136=($30>>>0)<($3>>>0);
 if($cmp136){label=34;break;}else{label=32;break;}
 case 32: 
 var $fd138=(($25+8)|0);
 var $31=HEAP32[(($fd138)>>2)];
 var $cmp139=($31|0)==($2|0);
 if($cmp139){var $fd148_pre_phi=$fd138;label=33;break;}else{label=34;break;}
 case 33: 
 var $fd148_pre_phi;
 var $bk147=(($23+12)|0);
 HEAP32[(($bk147)>>2)]=$25;
 HEAP32[(($fd148_pre_phi)>>2)]=$23;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $32=$add_ptr;
 var $add_ptr_sum=((($and)+(24))|0);
 var $parent=(($1+$add_ptr_sum)|0);
 var $33=$parent;
 var $34=HEAP32[(($33)>>2)];
 var $add_ptr_sum2=((($and)+(12))|0);
 var $bk155=(($1+$add_ptr_sum2)|0);
 var $35=$bk155;
 var $36=HEAP32[(($35)>>2)];
 var $cmp156=($36|0)==($32|0);
 if($cmp156){label=42;break;}else{label=37;break;}
 case 37: 
 var $add_ptr_sum9=((($and)+(8))|0);
 var $fd159=(($1+$add_ptr_sum9)|0);
 var $37=$fd159;
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 var $cmp162=($39>>>0)<($3>>>0);
 if($cmp162){label=41;break;}else{label=38;break;}
 case 38: 
 var $bk164=(($38+12)|0);
 var $40=HEAP32[(($bk164)>>2)];
 var $cmp165=($40|0)==($32|0);
 if($cmp165){label=39;break;}else{label=41;break;}
 case 39: 
 var $fd167=(($36+8)|0);
 var $41=HEAP32[(($fd167)>>2)];
 var $cmp168=($41|0)==($32|0);
 if($cmp168){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($bk164)>>2)]=$36;
 HEAP32[(($fd167)>>2)]=$38;
 var $R_1=$36;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $child_sum=((($and)+(20))|0);
 var $arrayidx179=(($1+$child_sum)|0);
 var $42=$arrayidx179;
 var $43=HEAP32[(($42)>>2)];
 var $cmp180=($43|0)==0;
 if($cmp180){label=43;break;}else{var $R_0=$43;var $RP_0=$42;label=44;break;}
 case 43: 
 var $add_ptr_sum3=((($and)+(16))|0);
 var $child=(($1+$add_ptr_sum3)|0);
 var $arrayidx182=$child;
 var $44=HEAP32[(($arrayidx182)>>2)];
 var $cmp183=($44|0)==0;
 if($cmp183){var $R_1=0;label=49;break;}else{var $R_0=$44;var $RP_0=$arrayidx182;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $arrayidx186=(($R_0+20)|0);
 var $45=HEAP32[(($arrayidx186)>>2)];
 var $cmp187=($45|0)==0;
 if($cmp187){label=45;break;}else{var $R_0=$45;var $RP_0=$arrayidx186;label=44;break;}
 case 45: 
 var $arrayidx190=(($R_0+16)|0);
 var $46=HEAP32[(($arrayidx190)>>2)];
 var $cmp191=($46|0)==0;
 if($cmp191){label=46;break;}else{var $R_0=$46;var $RP_0=$arrayidx190;label=44;break;}
 case 46: 
 var $47=$RP_0;
 var $cmp195=($47>>>0)<($3>>>0);
 if($cmp195){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $cmp203=($34|0)==0;
 if($cmp203){label=69;break;}else{label=50;break;}
 case 50: 
 var $add_ptr_sum7=((($and)+(28))|0);
 var $index=(($1+$add_ptr_sum7)|0);
 var $48=$index;
 var $49=HEAP32[(($48)>>2)];
 var $arrayidx206=((16648+($49<<2))|0);
 var $50=HEAP32[(($arrayidx206)>>2)];
 var $cmp207=($32|0)==($50|0);
 if($cmp207){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($arrayidx206)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $51=HEAP32[(($48)>>2)];
 var $shl214=1<<$51;
 var $neg215=$shl214^-1;
 var $52=HEAP32[((16348)>>2)];
 var $and216=$52&$neg215;
 HEAP32[((16348)>>2)]=$and216;
 label=69;break;
 case 53: 
 var $53=$34;
 var $54=HEAP32[((16360)>>2)];
 var $cmp220=($53>>>0)<($54>>>0);
 if($cmp220){label=57;break;}else{label=54;break;}
 case 54: 
 var $arrayidx226=(($34+16)|0);
 var $55=HEAP32[(($arrayidx226)>>2)];
 var $cmp227=($55|0)==($32|0);
 if($cmp227){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($arrayidx226)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $arrayidx234=(($34+20)|0);
 HEAP32[(($arrayidx234)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $cmp239=($R_1|0)==0;
 if($cmp239){label=69;break;}else{label=59;break;}
 case 59: 
 var $56=$R_1;
 var $57=HEAP32[((16360)>>2)];
 var $cmp243=($56>>>0)<($57>>>0);
 if($cmp243){label=68;break;}else{label=60;break;}
 case 60: 
 var $parent248=(($R_1+24)|0);
 HEAP32[(($parent248)>>2)]=$34;
 var $add_ptr_sum8=((($and)+(16))|0);
 var $child249=(($1+$add_ptr_sum8)|0);
 var $arrayidx250=$child249;
 var $58=HEAP32[(($arrayidx250)>>2)];
 var $cmp251=($58|0)==0;
 if($cmp251){label=64;break;}else{label=61;break;}
 case 61: 
 var $59=$58;
 var $60=HEAP32[((16360)>>2)];
 var $cmp255=($59>>>0)<($60>>>0);
 if($cmp255){label=63;break;}else{label=62;break;}
 case 62: 
 var $arrayidx261=(($R_1+16)|0);
 HEAP32[(($arrayidx261)>>2)]=$58;
 var $parent262=(($58+24)|0);
 HEAP32[(($parent262)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $child249_sum=((($and)+(20))|0);
 var $arrayidx267=(($1+$child249_sum)|0);
 var $61=$arrayidx267;
 var $62=HEAP32[(($61)>>2)];
 var $cmp268=($62|0)==0;
 if($cmp268){label=69;break;}else{label=65;break;}
 case 65: 
 var $63=$62;
 var $64=HEAP32[((16360)>>2)];
 var $cmp272=($63>>>0)<($64>>>0);
 if($cmp272){label=67;break;}else{label=66;break;}
 case 66: 
 var $arrayidx278=(($R_1+20)|0);
 HEAP32[(($arrayidx278)>>2)]=$62;
 var $parent279=(($62+24)|0);
 HEAP32[(($parent279)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $cmp288=($sub110>>>0)<16;
 if($cmp288){label=70;break;}else{label=71;break;}
 case 70: 
 var $65=HEAP32[(($head)>>2)];
 var $and294=$65&1;
 var $or295=$add105|$and294;
 var $or296=$or295|2;
 HEAP32[(($head)>>2)]=$or296;
 var $add_ptr298_sum6=$add105|4;
 var $head299=(($1+$add_ptr298_sum6)|0);
 var $66=$head299;
 var $67=HEAP32[(($66)>>2)];
 var $or300=$67|1;
 HEAP32[(($66)>>2)]=$or300;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $add_ptr303=(($1+$nb)|0);
 var $68=$add_ptr303;
 var $69=HEAP32[(($head)>>2)];
 var $and305=$69&1;
 var $or306=$and305|$nb;
 var $or307=$or306|2;
 HEAP32[(($head)>>2)]=$or307;
 var $add_ptr303_sum=((($nb)+(4))|0);
 var $head310=(($1+$add_ptr303_sum)|0);
 var $70=$head310;
 var $or315=$sub110|3;
 HEAP32[(($70)>>2)]=$or315;
 var $add_ptr317_sum5=$add105|4;
 var $head318=(($1+$add_ptr317_sum5)|0);
 var $71=$head318;
 var $72=HEAP32[(($71)>>2)];
 var $or319=$72|1;
 HEAP32[(($71)>>2)]=$or319;
 _dispose_chunk($68,$sub110);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$p;
 var $add_ptr=(($0+$psize)|0);
 var $1=$add_ptr;
 var $head=(($p+4)|0);
 var $2=HEAP32[(($head)>>2)];
 var $and=$2&1;
 var $tobool=($and|0)==0;
 if($tobool){label=2;break;}else{var $p_addr_0=$p;var $psize_addr_0=$psize;label=54;break;}
 case 2: 
 var $prev_foot=(($p)|0);
 var $3=HEAP32[(($prev_foot)>>2)];
 var $and2=$2&3;
 var $cmp=($and2|0)==0;
 if($cmp){label=134;break;}else{label=3;break;}
 case 3: 
 var $idx_neg=(((-$3))|0);
 var $add_ptr5=(($0+$idx_neg)|0);
 var $4=$add_ptr5;
 var $add6=((($3)+($psize))|0);
 var $5=HEAP32[((16360)>>2)];
 var $cmp7=($add_ptr5>>>0)<($5>>>0);
 if($cmp7){label=53;break;}else{label=4;break;}
 case 4: 
 var $6=HEAP32[((16364)>>2)];
 var $cmp10=($4|0)==($6|0);
 if($cmp10){label=51;break;}else{label=5;break;}
 case 5: 
 var $shr=$3>>>3;
 var $cmp13=($3>>>0)<256;
 if($cmp13){label=6;break;}else{label=18;break;}
 case 6: 
 var $add_ptr5_sum29=(((8)-($3))|0);
 var $fd=(($0+$add_ptr5_sum29)|0);
 var $7=$fd;
 var $8=HEAP32[(($7)>>2)];
 var $add_ptr5_sum30=(((12)-($3))|0);
 var $bk=(($0+$add_ptr5_sum30)|0);
 var $9=$bk;
 var $10=HEAP32[(($9)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((16384+($shl<<2))|0);
 var $11=$arrayidx;
 var $cmp17=($8|0)==($11|0);
 if($cmp17){label=9;break;}else{label=7;break;}
 case 7: 
 var $12=$8;
 var $cmp20=($12>>>0)<($5>>>0);
 if($cmp20){label=17;break;}else{label=8;break;}
 case 8: 
 var $bk22=(($8+12)|0);
 var $13=HEAP32[(($bk22)>>2)];
 var $cmp23=($13|0)==($4|0);
 if($cmp23){label=9;break;}else{label=17;break;}
 case 9: 
 var $cmp28=($10|0)==($8|0);
 if($cmp28){label=10;break;}else{label=11;break;}
 case 10: 
 var $shl31=1<<$shr;
 var $neg=$shl31^-1;
 var $14=HEAP32[((16344)>>2)];
 var $and32=$14&$neg;
 HEAP32[((16344)>>2)]=$and32;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 11: 
 var $cmp36=($10|0)==($11|0);
 if($cmp36){label=12;break;}else{label=13;break;}
 case 12: 
 var $fd53_pre=(($10+8)|0);
 var $fd53_pre_phi=$fd53_pre;label=15;break;
 case 13: 
 var $15=$10;
 var $cmp40=($15>>>0)<($5>>>0);
 if($cmp40){label=16;break;}else{label=14;break;}
 case 14: 
 var $fd43=(($10+8)|0);
 var $16=HEAP32[(($fd43)>>2)];
 var $cmp44=($16|0)==($4|0);
 if($cmp44){var $fd53_pre_phi=$fd43;label=15;break;}else{label=16;break;}
 case 15: 
 var $fd53_pre_phi;
 var $bk52=(($8+12)|0);
 HEAP32[(($bk52)>>2)]=$10;
 HEAP32[(($fd53_pre_phi)>>2)]=$8;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $17=$add_ptr5;
 var $add_ptr5_sum22=(((24)-($3))|0);
 var $parent=(($0+$add_ptr5_sum22)|0);
 var $18=$parent;
 var $19=HEAP32[(($18)>>2)];
 var $add_ptr5_sum23=(((12)-($3))|0);
 var $bk60=(($0+$add_ptr5_sum23)|0);
 var $20=$bk60;
 var $21=HEAP32[(($20)>>2)];
 var $cmp61=($21|0)==($17|0);
 if($cmp61){label=24;break;}else{label=19;break;}
 case 19: 
 var $add_ptr5_sum27=(((8)-($3))|0);
 var $fd65=(($0+$add_ptr5_sum27)|0);
 var $22=$fd65;
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $cmp68=($24>>>0)<($5>>>0);
 if($cmp68){label=23;break;}else{label=20;break;}
 case 20: 
 var $bk70=(($23+12)|0);
 var $25=HEAP32[(($bk70)>>2)];
 var $cmp71=($25|0)==($17|0);
 if($cmp71){label=21;break;}else{label=23;break;}
 case 21: 
 var $fd74=(($21+8)|0);
 var $26=HEAP32[(($fd74)>>2)];
 var $cmp75=($26|0)==($17|0);
 if($cmp75){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($bk70)>>2)]=$21;
 HEAP32[(($fd74)>>2)]=$23;
 var $R_1=$21;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $add_ptr5_sum24=(((16)-($3))|0);
 var $child_sum=((($add_ptr5_sum24)+(4))|0);
 var $arrayidx86=(($0+$child_sum)|0);
 var $27=$arrayidx86;
 var $28=HEAP32[(($27)>>2)];
 var $cmp87=($28|0)==0;
 if($cmp87){label=25;break;}else{var $R_0=$28;var $RP_0=$27;label=26;break;}
 case 25: 
 var $child=(($0+$add_ptr5_sum24)|0);
 var $arrayidx90=$child;
 var $29=HEAP32[(($arrayidx90)>>2)];
 var $cmp91=($29|0)==0;
 if($cmp91){var $R_1=0;label=31;break;}else{var $R_0=$29;var $RP_0=$arrayidx90;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $arrayidx95=(($R_0+20)|0);
 var $30=HEAP32[(($arrayidx95)>>2)];
 var $cmp96=($30|0)==0;
 if($cmp96){label=27;break;}else{var $R_0=$30;var $RP_0=$arrayidx95;label=26;break;}
 case 27: 
 var $arrayidx100=(($R_0+16)|0);
 var $31=HEAP32[(($arrayidx100)>>2)];
 var $cmp101=($31|0)==0;
 if($cmp101){label=28;break;}else{var $R_0=$31;var $RP_0=$arrayidx100;label=26;break;}
 case 28: 
 var $32=$RP_0;
 var $cmp106=($32>>>0)<($5>>>0);
 if($cmp106){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $cmp115=($19|0)==0;
 if($cmp115){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=32;break;}
 case 32: 
 var $add_ptr5_sum25=(((28)-($3))|0);
 var $index=(($0+$add_ptr5_sum25)|0);
 var $33=$index;
 var $34=HEAP32[(($33)>>2)];
 var $arrayidx118=((16648+($34<<2))|0);
 var $35=HEAP32[(($arrayidx118)>>2)];
 var $cmp119=($17|0)==($35|0);
 if($cmp119){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($arrayidx118)>>2)]=$R_1;
 var $cond36=($R_1|0)==0;
 if($cond36){label=34;break;}else{label=41;break;}
 case 34: 
 var $36=HEAP32[(($33)>>2)];
 var $shl126=1<<$36;
 var $neg127=$shl126^-1;
 var $37=HEAP32[((16348)>>2)];
 var $and128=$37&$neg127;
 HEAP32[((16348)>>2)]=$and128;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 35: 
 var $38=$19;
 var $39=HEAP32[((16360)>>2)];
 var $cmp132=($38>>>0)<($39>>>0);
 if($cmp132){label=39;break;}else{label=36;break;}
 case 36: 
 var $arrayidx138=(($19+16)|0);
 var $40=HEAP32[(($arrayidx138)>>2)];
 var $cmp139=($40|0)==($17|0);
 if($cmp139){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($arrayidx138)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $arrayidx146=(($19+20)|0);
 HEAP32[(($arrayidx146)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $cmp151=($R_1|0)==0;
 if($cmp151){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=41;break;}
 case 41: 
 var $41=$R_1;
 var $42=HEAP32[((16360)>>2)];
 var $cmp155=($41>>>0)<($42>>>0);
 if($cmp155){label=50;break;}else{label=42;break;}
 case 42: 
 var $parent160=(($R_1+24)|0);
 HEAP32[(($parent160)>>2)]=$19;
 var $add_ptr5_sum26=(((16)-($3))|0);
 var $child161=(($0+$add_ptr5_sum26)|0);
 var $arrayidx162=$child161;
 var $43=HEAP32[(($arrayidx162)>>2)];
 var $cmp163=($43|0)==0;
 if($cmp163){label=46;break;}else{label=43;break;}
 case 43: 
 var $44=$43;
 var $45=HEAP32[((16360)>>2)];
 var $cmp167=($44>>>0)<($45>>>0);
 if($cmp167){label=45;break;}else{label=44;break;}
 case 44: 
 var $arrayidx173=(($R_1+16)|0);
 HEAP32[(($arrayidx173)>>2)]=$43;
 var $parent174=(($43+24)|0);
 HEAP32[(($parent174)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $child161_sum=((($add_ptr5_sum26)+(4))|0);
 var $arrayidx179=(($0+$child161_sum)|0);
 var $46=$arrayidx179;
 var $47=HEAP32[(($46)>>2)];
 var $cmp180=($47|0)==0;
 if($cmp180){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=47;break;}
 case 47: 
 var $48=$47;
 var $49=HEAP32[((16360)>>2)];
 var $cmp184=($48>>>0)<($49>>>0);
 if($cmp184){label=49;break;}else{label=48;break;}
 case 48: 
 var $arrayidx190=(($R_1+20)|0);
 HEAP32[(($arrayidx190)>>2)]=$47;
 var $parent191=(($47+24)|0);
 HEAP32[(($parent191)>>2)]=$R_1;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $add_ptr_sum=((($psize)+(4))|0);
 var $head201=(($0+$add_ptr_sum)|0);
 var $50=$head201;
 var $51=HEAP32[(($50)>>2)];
 var $and202=$51&3;
 var $cmp203=($and202|0)==3;
 if($cmp203){label=52;break;}else{var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}
 case 52: 
 HEAP32[((16352)>>2)]=$add6;
 var $52=HEAP32[(($50)>>2)];
 var $and207=$52&-2;
 HEAP32[(($50)>>2)]=$and207;
 var $or=$add6|1;
 var $add_ptr5_sum=(((4)-($3))|0);
 var $head208=(($0+$add_ptr5_sum)|0);
 var $53=$head208;
 HEAP32[(($53)>>2)]=$or;
 var $prev_foot210=$add_ptr;
 HEAP32[(($prev_foot210)>>2)]=$add6;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $psize_addr_0;
 var $p_addr_0;
 var $54=HEAP32[((16360)>>2)];
 var $cmp217=($add_ptr>>>0)<($54>>>0);
 if($cmp217){label=133;break;}else{label=55;break;}
 case 55: 
 var $add_ptr_sum1=((($psize)+(4))|0);
 var $head222=(($0+$add_ptr_sum1)|0);
 var $55=$head222;
 var $56=HEAP32[(($55)>>2)];
 var $and223=$56&2;
 var $tobool224=($and223|0)==0;
 if($tobool224){label=56;break;}else{label=109;break;}
 case 56: 
 var $57=HEAP32[((16368)>>2)];
 var $cmp226=($1|0)==($57|0);
 if($cmp226){label=57;break;}else{label=59;break;}
 case 57: 
 var $58=HEAP32[((16356)>>2)];
 var $add229=((($58)+($psize_addr_0))|0);
 HEAP32[((16356)>>2)]=$add229;
 HEAP32[((16368)>>2)]=$p_addr_0;
 var $or231=$add229|1;
 var $head232=(($p_addr_0+4)|0);
 HEAP32[(($head232)>>2)]=$or231;
 var $59=HEAP32[((16364)>>2)];
 var $cmp234=($p_addr_0|0)==($59|0);
 if($cmp234){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((16364)>>2)]=0;
 HEAP32[((16352)>>2)]=0;
 label=134;break;
 case 59: 
 var $60=HEAP32[((16364)>>2)];
 var $cmp242=($1|0)==($60|0);
 if($cmp242){label=60;break;}else{label=61;break;}
 case 60: 
 var $61=HEAP32[((16352)>>2)];
 var $add246=((($61)+($psize_addr_0))|0);
 HEAP32[((16352)>>2)]=$add246;
 HEAP32[((16364)>>2)]=$p_addr_0;
 var $or248=$add246|1;
 var $head249=(($p_addr_0+4)|0);
 HEAP32[(($head249)>>2)]=$or248;
 var $62=$p_addr_0;
 var $add_ptr250=(($62+$add246)|0);
 var $prev_foot251=$add_ptr250;
 HEAP32[(($prev_foot251)>>2)]=$add246;
 label=134;break;
 case 61: 
 var $and254=$56&-8;
 var $add255=((($and254)+($psize_addr_0))|0);
 var $shr256=$56>>>3;
 var $cmp257=($56>>>0)<256;
 if($cmp257){label=62;break;}else{label=74;break;}
 case 62: 
 var $add_ptr_sum17=((($psize)+(8))|0);
 var $fd261=(($0+$add_ptr_sum17)|0);
 var $63=$fd261;
 var $64=HEAP32[(($63)>>2)];
 var $add_ptr_sum18=((($psize)+(12))|0);
 var $bk263=(($0+$add_ptr_sum18)|0);
 var $65=$bk263;
 var $66=HEAP32[(($65)>>2)];
 var $shl266=$shr256<<1;
 var $arrayidx268=((16384+($shl266<<2))|0);
 var $67=$arrayidx268;
 var $cmp269=($64|0)==($67|0);
 if($cmp269){label=65;break;}else{label=63;break;}
 case 63: 
 var $68=$64;
 var $cmp273=($68>>>0)<($54>>>0);
 if($cmp273){label=73;break;}else{label=64;break;}
 case 64: 
 var $bk276=(($64+12)|0);
 var $69=HEAP32[(($bk276)>>2)];
 var $cmp277=($69|0)==($1|0);
 if($cmp277){label=65;break;}else{label=73;break;}
 case 65: 
 var $cmp286=($66|0)==($64|0);
 if($cmp286){label=66;break;}else{label=67;break;}
 case 66: 
 var $shl289=1<<$shr256;
 var $neg290=$shl289^-1;
 var $70=HEAP32[((16344)>>2)];
 var $and292=$70&$neg290;
 HEAP32[((16344)>>2)]=$and292;
 label=107;break;
 case 67: 
 var $cmp297=($66|0)==($67|0);
 if($cmp297){label=68;break;}else{label=69;break;}
 case 68: 
 var $fd315_pre=(($66+8)|0);
 var $fd315_pre_phi=$fd315_pre;label=71;break;
 case 69: 
 var $71=$66;
 var $cmp301=($71>>>0)<($54>>>0);
 if($cmp301){label=72;break;}else{label=70;break;}
 case 70: 
 var $fd304=(($66+8)|0);
 var $72=HEAP32[(($fd304)>>2)];
 var $cmp305=($72|0)==($1|0);
 if($cmp305){var $fd315_pre_phi=$fd304;label=71;break;}else{label=72;break;}
 case 71: 
 var $fd315_pre_phi;
 var $bk314=(($64+12)|0);
 HEAP32[(($bk314)>>2)]=$66;
 HEAP32[(($fd315_pre_phi)>>2)]=$64;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $73=$add_ptr;
 var $add_ptr_sum2=((($psize)+(24))|0);
 var $parent324=(($0+$add_ptr_sum2)|0);
 var $74=$parent324;
 var $75=HEAP32[(($74)>>2)];
 var $add_ptr_sum3=((($psize)+(12))|0);
 var $bk326=(($0+$add_ptr_sum3)|0);
 var $76=$bk326;
 var $77=HEAP32[(($76)>>2)];
 var $cmp327=($77|0)==($73|0);
 if($cmp327){label=80;break;}else{label=75;break;}
 case 75: 
 var $add_ptr_sum15=((($psize)+(8))|0);
 var $fd331=(($0+$add_ptr_sum15)|0);
 var $78=$fd331;
 var $79=HEAP32[(($78)>>2)];
 var $80=$79;
 var $cmp334=($80>>>0)<($54>>>0);
 if($cmp334){label=79;break;}else{label=76;break;}
 case 76: 
 var $bk337=(($79+12)|0);
 var $81=HEAP32[(($bk337)>>2)];
 var $cmp338=($81|0)==($73|0);
 if($cmp338){label=77;break;}else{label=79;break;}
 case 77: 
 var $fd341=(($77+8)|0);
 var $82=HEAP32[(($fd341)>>2)];
 var $cmp342=($82|0)==($73|0);
 if($cmp342){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($bk337)>>2)]=$77;
 HEAP32[(($fd341)>>2)]=$79;
 var $R325_1=$77;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $child355_sum=((($psize)+(20))|0);
 var $arrayidx356=(($0+$child355_sum)|0);
 var $83=$arrayidx356;
 var $84=HEAP32[(($83)>>2)];
 var $cmp357=($84|0)==0;
 if($cmp357){label=81;break;}else{var $R325_0=$84;var $RP354_0=$83;label=82;break;}
 case 81: 
 var $add_ptr_sum4=((($psize)+(16))|0);
 var $child355=(($0+$add_ptr_sum4)|0);
 var $arrayidx361=$child355;
 var $85=HEAP32[(($arrayidx361)>>2)];
 var $cmp362=($85|0)==0;
 if($cmp362){var $R325_1=0;label=87;break;}else{var $R325_0=$85;var $RP354_0=$arrayidx361;label=82;break;}
 case 82: 
 var $RP354_0;
 var $R325_0;
 var $arrayidx368=(($R325_0+20)|0);
 var $86=HEAP32[(($arrayidx368)>>2)];
 var $cmp369=($86|0)==0;
 if($cmp369){label=83;break;}else{var $R325_0=$86;var $RP354_0=$arrayidx368;label=82;break;}
 case 83: 
 var $arrayidx373=(($R325_0+16)|0);
 var $87=HEAP32[(($arrayidx373)>>2)];
 var $cmp374=($87|0)==0;
 if($cmp374){label=84;break;}else{var $R325_0=$87;var $RP354_0=$arrayidx373;label=82;break;}
 case 84: 
 var $88=$RP354_0;
 var $cmp381=($88>>>0)<($54>>>0);
 if($cmp381){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP354_0)>>2)]=0;
 var $R325_1=$R325_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R325_1;
 var $cmp390=($75|0)==0;
 if($cmp390){label=107;break;}else{label=88;break;}
 case 88: 
 var $add_ptr_sum13=((($psize)+(28))|0);
 var $index394=(($0+$add_ptr_sum13)|0);
 var $89=$index394;
 var $90=HEAP32[(($89)>>2)];
 var $arrayidx396=((16648+($90<<2))|0);
 var $91=HEAP32[(($arrayidx396)>>2)];
 var $cmp397=($73|0)==($91|0);
 if($cmp397){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($arrayidx396)>>2)]=$R325_1;
 var $cond37=($R325_1|0)==0;
 if($cond37){label=90;break;}else{label=97;break;}
 case 90: 
 var $92=HEAP32[(($89)>>2)];
 var $shl404=1<<$92;
 var $neg405=$shl404^-1;
 var $93=HEAP32[((16348)>>2)];
 var $and407=$93&$neg405;
 HEAP32[((16348)>>2)]=$and407;
 label=107;break;
 case 91: 
 var $94=$75;
 var $95=HEAP32[((16360)>>2)];
 var $cmp411=($94>>>0)<($95>>>0);
 if($cmp411){label=95;break;}else{label=92;break;}
 case 92: 
 var $arrayidx417=(($75+16)|0);
 var $96=HEAP32[(($arrayidx417)>>2)];
 var $cmp418=($96|0)==($73|0);
 if($cmp418){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($arrayidx417)>>2)]=$R325_1;
 label=96;break;
 case 94: 
 var $arrayidx425=(($75+20)|0);
 HEAP32[(($arrayidx425)>>2)]=$R325_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $cmp430=($R325_1|0)==0;
 if($cmp430){label=107;break;}else{label=97;break;}
 case 97: 
 var $97=$R325_1;
 var $98=HEAP32[((16360)>>2)];
 var $cmp434=($97>>>0)<($98>>>0);
 if($cmp434){label=106;break;}else{label=98;break;}
 case 98: 
 var $parent441=(($R325_1+24)|0);
 HEAP32[(($parent441)>>2)]=$75;
 var $add_ptr_sum14=((($psize)+(16))|0);
 var $child442=(($0+$add_ptr_sum14)|0);
 var $arrayidx443=$child442;
 var $99=HEAP32[(($arrayidx443)>>2)];
 var $cmp444=($99|0)==0;
 if($cmp444){label=102;break;}else{label=99;break;}
 case 99: 
 var $100=$99;
 var $101=HEAP32[((16360)>>2)];
 var $cmp448=($100>>>0)<($101>>>0);
 if($cmp448){label=101;break;}else{label=100;break;}
 case 100: 
 var $arrayidx454=(($R325_1+16)|0);
 HEAP32[(($arrayidx454)>>2)]=$99;
 var $parent455=(($99+24)|0);
 HEAP32[(($parent455)>>2)]=$R325_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $child442_sum=((($psize)+(20))|0);
 var $arrayidx460=(($0+$child442_sum)|0);
 var $102=$arrayidx460;
 var $103=HEAP32[(($102)>>2)];
 var $cmp461=($103|0)==0;
 if($cmp461){label=107;break;}else{label=103;break;}
 case 103: 
 var $104=$103;
 var $105=HEAP32[((16360)>>2)];
 var $cmp465=($104>>>0)<($105>>>0);
 if($cmp465){label=105;break;}else{label=104;break;}
 case 104: 
 var $arrayidx471=(($R325_1+20)|0);
 HEAP32[(($arrayidx471)>>2)]=$103;
 var $parent472=(($103+24)|0);
 HEAP32[(($parent472)>>2)]=$R325_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $or481=$add255|1;
 var $head482=(($p_addr_0+4)|0);
 HEAP32[(($head482)>>2)]=$or481;
 var $106=$p_addr_0;
 var $add_ptr483=(($106+$add255)|0);
 var $prev_foot484=$add_ptr483;
 HEAP32[(($prev_foot484)>>2)]=$add255;
 var $107=HEAP32[((16364)>>2)];
 var $cmp486=($p_addr_0|0)==($107|0);
 if($cmp486){label=108;break;}else{var $psize_addr_1=$add255;label=110;break;}
 case 108: 
 HEAP32[((16352)>>2)]=$add255;
 label=134;break;
 case 109: 
 var $and495=$56&-2;
 HEAP32[(($55)>>2)]=$and495;
 var $or496=$psize_addr_0|1;
 var $head497=(($p_addr_0+4)|0);
 HEAP32[(($head497)>>2)]=$or496;
 var $108=$p_addr_0;
 var $add_ptr498=(($108+$psize_addr_0)|0);
 var $prev_foot499=$add_ptr498;
 HEAP32[(($prev_foot499)>>2)]=$psize_addr_0;
 var $psize_addr_1=$psize_addr_0;label=110;break;
 case 110: 
 var $psize_addr_1;
 var $shr501=$psize_addr_1>>>3;
 var $cmp502=($psize_addr_1>>>0)<256;
 if($cmp502){label=111;break;}else{label=116;break;}
 case 111: 
 var $shl508=$shr501<<1;
 var $arrayidx510=((16384+($shl508<<2))|0);
 var $109=$arrayidx510;
 var $110=HEAP32[((16344)>>2)];
 var $shl513=1<<$shr501;
 var $and514=$110&$shl513;
 var $tobool515=($and514|0)==0;
 if($tobool515){label=112;break;}else{label=113;break;}
 case 112: 
 var $or519=$110|$shl513;
 HEAP32[((16344)>>2)]=$or519;
 var $arrayidx510_sum_pre=((($shl508)+(2))|0);
 var $_pre=((16384+($arrayidx510_sum_pre<<2))|0);
 var $F511_0=$109;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $arrayidx510_sum12=((($shl508)+(2))|0);
 var $111=((16384+($arrayidx510_sum12<<2))|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112;
 var $114=HEAP32[((16360)>>2)];
 var $cmp523=($113>>>0)<($114>>>0);
 if($cmp523){label=114;break;}else{var $F511_0=$112;var $_pre_phi=$111;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F511_0;
 HEAP32[(($_pre_phi)>>2)]=$p_addr_0;
 var $bk533=(($F511_0+12)|0);
 HEAP32[(($bk533)>>2)]=$p_addr_0;
 var $fd534=(($p_addr_0+8)|0);
 HEAP32[(($fd534)>>2)]=$F511_0;
 var $bk535=(($p_addr_0+12)|0);
 HEAP32[(($bk535)>>2)]=$109;
 label=134;break;
 case 116: 
 var $115=$p_addr_0;
 var $shr540=$psize_addr_1>>>8;
 var $cmp541=($shr540|0)==0;
 if($cmp541){var $I539_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $cmp545=($psize_addr_1>>>0)>16777215;
 if($cmp545){var $I539_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $sub=((($shr540)+(1048320))|0);
 var $shr549=$sub>>>16;
 var $and550=$shr549&8;
 var $shl551=$shr540<<$and550;
 var $sub552=((($shl551)+(520192))|0);
 var $shr553=$sub552>>>16;
 var $and554=$shr553&4;
 var $add555=$and554|$and550;
 var $shl556=$shl551<<$and554;
 var $sub557=((($shl556)+(245760))|0);
 var $shr558=$sub557>>>16;
 var $and559=$shr558&2;
 var $add560=$add555|$and559;
 var $sub561=(((14)-($add560))|0);
 var $shl562=$shl556<<$and559;
 var $shr563=$shl562>>>15;
 var $add564=((($sub561)+($shr563))|0);
 var $shl565=$add564<<1;
 var $add566=((($add564)+(7))|0);
 var $shr567=$psize_addr_1>>>($add566>>>0);
 var $and568=$shr567&1;
 var $add569=$and568|$shl565;
 var $I539_0=$add569;label=119;break;
 case 119: 
 var $I539_0;
 var $arrayidx573=((16648+($I539_0<<2))|0);
 var $index574=(($p_addr_0+28)|0);
 var $I539_0_c=$I539_0;
 HEAP32[(($index574)>>2)]=$I539_0_c;
 var $arrayidx576=(($p_addr_0+20)|0);
 HEAP32[(($arrayidx576)>>2)]=0;
 var $116=(($p_addr_0+16)|0);
 HEAP32[(($116)>>2)]=0;
 var $117=HEAP32[((16348)>>2)];
 var $shl580=1<<$I539_0;
 var $and581=$117&$shl580;
 var $tobool582=($and581|0)==0;
 if($tobool582){label=120;break;}else{label=121;break;}
 case 120: 
 var $or586=$117|$shl580;
 HEAP32[((16348)>>2)]=$or586;
 HEAP32[(($arrayidx573)>>2)]=$115;
 var $parent587=(($p_addr_0+24)|0);
 var $_c=$arrayidx573;
 HEAP32[(($parent587)>>2)]=$_c;
 var $bk588=(($p_addr_0+12)|0);
 HEAP32[(($bk588)>>2)]=$p_addr_0;
 var $fd589=(($p_addr_0+8)|0);
 HEAP32[(($fd589)>>2)]=$p_addr_0;
 label=134;break;
 case 121: 
 var $118=HEAP32[(($arrayidx573)>>2)];
 var $cmp592=($I539_0|0)==31;
 if($cmp592){var $cond=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $shr594=$I539_0>>>1;
 var $sub597=(((25)-($shr594))|0);
 var $cond=$sub597;label=123;break;
 case 123: 
 var $cond;
 var $shl598=$psize_addr_1<<$cond;
 var $K591_0=$shl598;var $T_0=$118;label=124;break;
 case 124: 
 var $T_0;
 var $K591_0;
 var $head599=(($T_0+4)|0);
 var $119=HEAP32[(($head599)>>2)];
 var $and600=$119&-8;
 var $cmp601=($and600|0)==($psize_addr_1|0);
 if($cmp601){label=129;break;}else{label=125;break;}
 case 125: 
 var $shr604=$K591_0>>>31;
 var $arrayidx607=(($T_0+16+($shr604<<2))|0);
 var $120=HEAP32[(($arrayidx607)>>2)];
 var $cmp609=($120|0)==0;
 var $shl608=$K591_0<<1;
 if($cmp609){label=126;break;}else{var $K591_0=$shl608;var $T_0=$120;label=124;break;}
 case 126: 
 var $121=$arrayidx607;
 var $122=HEAP32[((16360)>>2)];
 var $cmp614=($121>>>0)<($122>>>0);
 if($cmp614){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($arrayidx607)>>2)]=$115;
 var $parent619=(($p_addr_0+24)|0);
 var $T_0_c9=$T_0;
 HEAP32[(($parent619)>>2)]=$T_0_c9;
 var $bk620=(($p_addr_0+12)|0);
 HEAP32[(($bk620)>>2)]=$p_addr_0;
 var $fd621=(($p_addr_0+8)|0);
 HEAP32[(($fd621)>>2)]=$p_addr_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $fd626=(($T_0+8)|0);
 var $123=HEAP32[(($fd626)>>2)];
 var $124=$T_0;
 var $125=HEAP32[((16360)>>2)];
 var $cmp628=($124>>>0)<($125>>>0);
 if($cmp628){label=132;break;}else{label=130;break;}
 case 130: 
 var $126=$123;
 var $cmp632=($126>>>0)<($125>>>0);
 if($cmp632){label=132;break;}else{label=131;break;}
 case 131: 
 var $bk639=(($123+12)|0);
 HEAP32[(($bk639)>>2)]=$115;
 HEAP32[(($fd626)>>2)]=$115;
 var $fd641=(($p_addr_0+8)|0);
 var $_c8=$123;
 HEAP32[(($fd641)>>2)]=$_c8;
 var $bk642=(($p_addr_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($bk642)>>2)]=$T_0_c;
 var $parent643=(($p_addr_0+24)|0);
 HEAP32[(($parent643)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _strtod($string,$endPtr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0=$string;label=2;break;
 case 2: 
 var $p_0;
 var $0=HEAP8[($p_0)];
 var $conv=(($0<<24)>>24);
 var $call=_isspace($conv);
 var $tobool=($call|0)==0;
 var $add_ptr=(($p_0+1)|0);
 if($tobool){label=3;break;}else{var $p_0=$add_ptr;label=2;break;}
 case 3: 
 var $1=HEAP8[($p_0)];
 if((($1<<24)>>24)==45){ label=4;break;}else if((($1<<24)>>24)==43){ label=5;break;}else{var $p_2=$p_0;var $sign_0=0;label=6;break;}
 case 4: 
 var $p_2=$add_ptr;var $sign_0=1;label=6;break;
 case 5: 
 var $p_2=$add_ptr;var $sign_0=0;label=6;break;
 case 6: 
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;label=7;break;
 case 7: 
 var $p_3;
 var $mantSize_0;
 var $decPt_0;
 var $2=HEAP8[($p_3)];
 var $conv10=(($2<<24)>>24);
 var $sub=((($conv10)-(48))|0);
 var $cmp11=($sub>>>0)<10;
 if($cmp11){var $decPt_1=$decPt_0;label=9;break;}else{label=8;break;}
 case 8: 
 var $cmp14=(($2<<24)>>24)!=46;
 var $cmp16=($decPt_0|0)>-1;
 var $or_cond=$cmp14|$cmp16;
 if($or_cond){label=10;break;}else{var $decPt_1=$mantSize_0;label=9;break;}
 case 9: 
 var $decPt_1;
 var $add_ptr21=(($p_3+1)|0);
 var $add=((($mantSize_0)+(1))|0);
 var $decPt_0=$decPt_1;var $mantSize_0=$add;var $p_3=$add_ptr21;label=7;break;
 case 10: 
 var $idx_neg=(((-$mantSize_0))|0);
 var $add_ptr22=(($p_3+$idx_neg)|0);
 var $cmp23=($decPt_0|0)<0;
 var $not_cmp23=$cmp23^1;
 var $sub27=(($not_cmp23<<31)>>31);
 var $mantSize_1=((($sub27)+($mantSize_0))|0);
 var $decPt_2=$cmp23?$mantSize_0:$decPt_0;
 var $cmp29=($mantSize_1|0)>18;
 var $3=(((-$mantSize_1))|0);
 var $fracExp_0_p=$cmp29?-18:$3;
 var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 var $mantSize_2=$cmp29?18:$mantSize_1;
 var $cmp36=($mantSize_2|0)==0;
 if($cmp36){var $p_11=$string;var $fraction_0=0;label=37;break;}else{label=11;break;}
 case 11: 
 var $cmp4177=($mantSize_2|0)>9;
 if($cmp4177){var $p_478=$add_ptr22;var $mantSize_379=$mantSize_2;var $frac1_080=0;label=15;break;}else{label=13;break;}
 case 12: 
 var $phitmp=($add52|0);
 var $phitmp84=($phitmp)*(1000000000);
 var $frac1_0_lcssa88=$phitmp84;var $mantSize_3_lcssa89=9;var $p_4_lcssa90=$p_5;label=14;break;
 case 13: 
 var $cmp5772=($mantSize_2|0)>0;
 if($cmp5772){var $frac1_0_lcssa88=0;var $mantSize_3_lcssa89=$mantSize_2;var $p_4_lcssa90=$add_ptr22;label=14;break;}else{var $frac2_0_lcssa=0;var $frac1_0_lcssa87=0;label=22;break;}
 case 14: 
 var $p_4_lcssa90;
 var $mantSize_3_lcssa89;
 var $frac1_0_lcssa88;
 var $p_673=$p_4_lcssa90;var $mantSize_474=$mantSize_3_lcssa89;var $frac2_075=0;label=18;break;
 case 15: 
 var $frac1_080;
 var $mantSize_379;
 var $p_478;
 var $4=HEAP8[($p_478)];
 var $add_ptr44=(($p_478+1)|0);
 var $cmp45=(($4<<24)>>24)==46;
 if($cmp45){label=16;break;}else{var $c_0_in=$4;var $p_5=$add_ptr44;label=17;break;}
 case 16: 
 var $5=HEAP8[($add_ptr44)];
 var $add_ptr49=(($p_478+2)|0);
 var $c_0_in=$5;var $p_5=$add_ptr49;label=17;break;
 case 17: 
 var $p_5;
 var $c_0_in;
 var $c_0=(($c_0_in<<24)>>24);
 var $mul=((($frac1_080)*(10))&-1);
 var $sub51=((($mul)-(48))|0);
 var $add52=((($sub51)+($c_0))|0);
 var $sub54=((($mantSize_379)-(1))|0);
 var $cmp41=($sub54|0)>9;
 if($cmp41){var $p_478=$p_5;var $mantSize_379=$sub54;var $frac1_080=$add52;label=15;break;}else{label=12;break;}
 case 18: 
 var $frac2_075;
 var $mantSize_474;
 var $p_673;
 var $6=HEAP8[($p_673)];
 var $add_ptr61=(($p_673+1)|0);
 var $cmp62=(($6<<24)>>24)==46;
 if($cmp62){label=19;break;}else{var $c_1_in=$6;var $p_7=$add_ptr61;label=20;break;}
 case 19: 
 var $7=HEAP8[($add_ptr61)];
 var $add_ptr66=(($p_673+2)|0);
 var $c_1_in=$7;var $p_7=$add_ptr66;label=20;break;
 case 20: 
 var $p_7;
 var $c_1_in;
 var $c_1=(($c_1_in<<24)>>24);
 var $mul68=((($frac2_075)*(10))&-1);
 var $sub69=((($mul68)-(48))|0);
 var $add70=((($sub69)+($c_1))|0);
 var $sub72=((($mantSize_474)-(1))|0);
 var $cmp57=($sub72|0)>0;
 if($cmp57){var $p_673=$p_7;var $mantSize_474=$sub72;var $frac2_075=$add70;label=18;break;}else{label=21;break;}
 case 21: 
 var $phitmp85=($add70|0);
 var $frac2_0_lcssa=$phitmp85;var $frac1_0_lcssa87=$frac1_0_lcssa88;label=22;break;
 case 22: 
 var $frac1_0_lcssa87;
 var $frac2_0_lcssa;
 var $add77=($frac1_0_lcssa87)+($frac2_0_lcssa);
 if((($2<<24)>>24)==69|(($2<<24)>>24)==101){ label=23;break;}else{var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;label=28;break;}
 case 23: 
 var $add_ptr87=(($p_3+1)|0);
 var $8=HEAP8[($add_ptr87)];
 if((($8<<24)>>24)==45){ label=24;break;}else if((($8<<24)>>24)==43){ label=25;break;}else{var $p_9_ph=$add_ptr87;var $expSign_0_ph=0;label=26;break;}
 case 24: 
 var $add_ptr92=(($p_3+2)|0);
 var $p_9_ph=$add_ptr92;var $expSign_0_ph=1;label=26;break;
 case 25: 
 var $add_ptr98=(($p_3+2)|0);
 var $p_9_ph=$add_ptr98;var $expSign_0_ph=0;label=26;break;
 case 26: 
 var $expSign_0_ph;
 var $p_9_ph;
 var $9=HEAP8[($p_9_ph)];
 var $conv10264=(($9<<24)>>24);
 var $sub10365=((($conv10264)-(48))|0);
 var $cmp10466=($sub10365>>>0)<10;
 if($cmp10466){var $p_967=$p_9_ph;var $exp_068=0;var $conv10269=$conv10264;label=27;break;}else{var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 27: 
 var $conv10269;
 var $exp_068;
 var $p_967;
 var $mul107=((($exp_068)*(10))&-1);
 var $sub109=((($mul107)-(48))|0);
 var $add110=((($sub109)+($conv10269))|0);
 var $add_ptr111=(($p_967+1)|0);
 var $10=HEAP8[($add_ptr111)];
 var $conv102=(($10<<24)>>24);
 var $sub103=((($conv102)-(48))|0);
 var $cmp104=($sub103>>>0)<10;
 if($cmp104){var $p_967=$add_ptr111;var $exp_068=$add110;var $conv10269=$conv102;label=27;break;}else{var $exp_1=$add110;var $p_10=$add_ptr111;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 28: 
 var $expSign_1;
 var $p_10;
 var $exp_1;
 var $tobool114=($expSign_1|0)==0;
 var $11=(((-$exp_1))|0);
 var $exp_2_p=$tobool114?$exp_1:$11;
 var $exp_2=((($fracExp_0)+($exp_2_p))|0);
 var $cmp120=($exp_2|0)<0;
 var $sub123=(((-$exp_2))|0);
 var $exp_3=$cmp120?$sub123:$exp_2;
 var $cmp126=($exp_3|0)>511;
 if($cmp126){label=29;break;}else{label=30;break;}
 case 29: 
 var $call129=___errno_location();
 HEAP32[(($call129)>>2)]=34;
 var $dblExp_061=1;var $d_062=16;var $exp_563=511;label=31;break;
 case 30: 
 var $cmp13260=($exp_3|0)==0;
 if($cmp13260){var $dblExp_0_lcssa=1;label=34;break;}else{var $dblExp_061=1;var $d_062=16;var $exp_563=$exp_3;label=31;break;}
 case 31: 
 var $exp_563;
 var $d_062;
 var $dblExp_061;
 var $and=$exp_563&1;
 var $tobool135=($and|0)==0;
 if($tobool135){var $dblExp_1=$dblExp_061;label=33;break;}else{label=32;break;}
 case 32: 
 var $12=HEAPF64[(($d_062)>>3)];
 var $mul137=($dblExp_061)*($12);
 var $dblExp_1=$mul137;label=33;break;
 case 33: 
 var $dblExp_1;
 var $shr=$exp_563>>1;
 var $add_ptr140=(($d_062+8)|0);
 var $cmp132=($shr|0)==0;
 if($cmp132){var $dblExp_0_lcssa=$dblExp_1;label=34;break;}else{var $dblExp_061=$dblExp_1;var $d_062=$add_ptr140;var $exp_563=$shr;label=31;break;}
 case 34: 
 var $dblExp_0_lcssa;
 var $tobool142=($exp_2|0)>-1;
 if($tobool142){label=36;break;}else{label=35;break;}
 case 35: 
 var $div=($add77)/($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$div;label=37;break;
 case 36: 
 var $mul145=($add77)*($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$mul145;label=37;break;
 case 37: 
 var $fraction_0;
 var $p_11;
 var $cmp147=($endPtr|0)==0;
 if($cmp147){label=39;break;}else{label=38;break;}
 case 38: 
 HEAP32[(($endPtr)>>2)]=$p_11;
 label=39;break;
 case 39: 
 var $tobool151=($sign_0|0)==0;
 if($tobool151){var $retval_0=$fraction_0;label=41;break;}else{label=40;break;}
 case 40: 
 var $sub153=((-.0))-($fraction_0);
 var $retval_0=$sub153;label=41;break;
 case 41: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _atof($str){
 var label=0;
 var $call=_strtod($str,0);
 return $call;
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
var calledRun = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun && shouldRunNow) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + (new Error().stack);
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
(function() {
function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createDataFile']('/', 'foo.c', [35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 115, 116, 100, 105, 111, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 117, 110, 105, 115, 116, 100, 46, 104, 62, 10, 35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 65, 114, 100, 117, 105, 110, 111, 46, 104, 62, 10, 10, 35, 100, 101, 102, 105, 110, 101, 32, 79, 85, 84, 80, 85, 84, 32, 49, 10, 35, 100, 101, 102, 105, 110, 101, 32, 73, 78, 80, 85, 84, 32, 48, 10, 35, 100, 101, 102, 105, 110, 101, 32, 72, 73, 71, 72, 32, 49, 10, 35, 100, 101, 102, 105, 110, 101, 32, 76, 79, 87, 32, 48, 10, 10, 118, 111, 105, 100, 32, 115, 101, 116, 117, 112, 40, 118, 111, 105, 100, 41, 59, 10, 118, 111, 105, 100, 32, 108, 111, 111, 112, 40, 118, 111, 105, 100, 41, 59, 10, 10, 118, 111, 105, 100, 32, 112, 105, 110, 77, 111, 100, 101, 40, 105, 110, 116, 32, 112, 105, 110, 44, 32, 105, 110, 116, 32, 109, 111, 100, 101, 41, 32, 123, 125, 10, 10, 105, 110, 116, 32, 109, 97, 105, 110, 40, 105, 110, 116, 32, 97, 114, 103, 99, 44, 32, 99, 104, 97, 114, 42, 42, 32, 97, 114, 103, 118, 41, 32, 123, 10, 32, 32, 115, 101, 116, 117, 112, 40, 41, 59, 10, 32, 32, 119, 104, 105, 108, 101, 32, 40, 49, 41, 32, 123, 10, 32, 32, 32, 32, 108, 111, 111, 112, 40, 41, 59, 10, 32, 32, 125, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 125, 10, 10, 10, 47, 47, 32, 45, 45, 45, 45, 32, 69, 78, 68, 32, 80, 82, 69, 76, 85, 68, 69, 32, 45, 45, 45, 45, 10, 10, 118, 111, 105, 100, 32, 115, 101, 116, 117, 112, 40, 41, 32, 123, 10, 32, 32, 102, 111, 114, 32, 40, 105, 110, 116, 32, 105, 32, 61, 32, 50, 59, 32, 105, 32, 60, 61, 32, 49, 53, 59, 32, 105, 43, 43, 41, 32, 123, 10, 32, 32, 32, 32, 112, 105, 110, 77, 111, 100, 101, 40, 105, 44, 32, 79, 85, 84, 80, 85, 84, 41, 59, 10, 32, 32, 125, 10, 125, 10, 10, 105, 110, 116, 32, 105, 32, 61, 32, 50, 59, 10, 10, 118, 111, 105, 100, 32, 108, 111, 111, 112, 40, 41, 32, 123, 10, 32, 32, 100, 105, 103, 105, 116, 97, 108, 87, 114, 105, 116, 101, 40, 105, 44, 32, 72, 73, 71, 72, 41, 59, 10, 32, 32, 100, 101, 108, 97, 121, 40, 50, 53, 48, 41, 59, 10, 32, 32, 100, 105, 103, 105, 116, 97, 108, 87, 114, 105, 116, 101, 40, 105, 44, 32, 76, 79, 87, 41, 59, 10, 32, 32, 105, 43, 43, 59, 10, 32, 32, 105, 102, 32, 40, 105, 32, 62, 32, 49, 53, 41, 32, 123, 10, 32, 32, 32, 32, 105, 32, 61, 32, 50, 59, 10, 32, 32, 125, 10, 125, 10], true, true);
Module['FS_createDataFile']('/', 'fptr.c', [35, 105, 110, 99, 108, 117, 100, 101, 32, 60, 115, 116, 100, 105, 111, 46, 104, 62, 10, 10, 118, 111, 105, 100, 32, 112, 114, 105, 110, 116, 70, 117, 110, 99, 116, 105, 111, 110, 40, 105, 110, 116, 32, 40, 42, 102, 80, 116, 114, 41, 40, 105, 110, 116, 41, 41, 32, 123, 10, 32, 32, 112, 114, 105, 110, 116, 102, 40, 34, 102, 117, 110, 99, 32, 105, 115, 32, 97, 116, 32, 37, 112, 92, 110, 34, 44, 32, 102, 80, 116, 114, 41, 59, 10, 125, 10, 10, 105, 110, 116, 32, 105, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 70, 117, 110, 99, 40, 105, 110, 116, 32, 97, 41, 32, 123, 10, 32, 32, 112, 114, 105, 110, 116, 102, 40, 34, 104, 97, 105, 32, 116, 104, 101, 114, 101, 33, 92, 110, 34, 41, 59, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 42, 32, 50, 59, 10, 125, 10, 10, 105, 110, 116, 32, 109, 97, 105, 110, 40, 105, 110, 116, 32, 97, 114, 103, 99, 44, 32, 99, 104, 97, 114, 42, 42, 32, 97, 114, 103, 118, 41, 32, 123, 10, 32, 32, 112, 114, 105, 110, 116, 70, 117, 110, 99, 116, 105, 111, 110, 40, 105, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 70, 117, 110, 99, 41, 59, 10, 125, 10], true, true);
})();
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=picoc.js.map